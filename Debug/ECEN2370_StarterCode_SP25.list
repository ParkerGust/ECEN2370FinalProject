
ECEN2370_StarterCode_SP25.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007268  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ae8  08007414  08007414  00008414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008efc  08008efc  0000a028  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008efc  08008efc  00009efc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008f04  08008f04  0000a028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f04  08008f04  00009f04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008f08  08008f08  00009f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000028  20000000  08008f0c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a028  2**0
                  CONTENTS
 10 .bss          00025bfc  20000028  20000028  0000a028  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20025c24  20025c24  0000a028  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a028  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001482c  00000000  00000000  0000a058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034c1  00000000  00000000  0001e884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001488  00000000  00000000  00021d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fda  00000000  00000000  000231d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027433  00000000  00000000  000241aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018d57  00000000  00000000  0004b5dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e3111  00000000  00000000  00064334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00147445  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000055b8  00000000  00000000  00147488  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  0014ca40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000028 	.word	0x20000028
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080073fc 	.word	0x080073fc

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000002c 	.word	0x2000002c
 80001e8:	080073fc 	.word	0x080073fc

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b988 	b.w	8000514 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	468e      	mov	lr, r1
 8000224:	4604      	mov	r4, r0
 8000226:	4688      	mov	r8, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d962      	bls.n	80002f8 <__udivmoddi4+0xdc>
 8000232:	fab2 f682 	clz	r6, r2
 8000236:	b14e      	cbz	r6, 800024c <__udivmoddi4+0x30>
 8000238:	f1c6 0320 	rsb	r3, r6, #32
 800023c:	fa01 f806 	lsl.w	r8, r1, r6
 8000240:	fa20 f303 	lsr.w	r3, r0, r3
 8000244:	40b7      	lsls	r7, r6
 8000246:	ea43 0808 	orr.w	r8, r3, r8
 800024a:	40b4      	lsls	r4, r6
 800024c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000250:	fa1f fc87 	uxth.w	ip, r7
 8000254:	fbb8 f1fe 	udiv	r1, r8, lr
 8000258:	0c23      	lsrs	r3, r4, #16
 800025a:	fb0e 8811 	mls	r8, lr, r1, r8
 800025e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000262:	fb01 f20c 	mul.w	r2, r1, ip
 8000266:	429a      	cmp	r2, r3
 8000268:	d909      	bls.n	800027e <__udivmoddi4+0x62>
 800026a:	18fb      	adds	r3, r7, r3
 800026c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000270:	f080 80ea 	bcs.w	8000448 <__udivmoddi4+0x22c>
 8000274:	429a      	cmp	r2, r3
 8000276:	f240 80e7 	bls.w	8000448 <__udivmoddi4+0x22c>
 800027a:	3902      	subs	r1, #2
 800027c:	443b      	add	r3, r7
 800027e:	1a9a      	subs	r2, r3, r2
 8000280:	b2a3      	uxth	r3, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800028e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000292:	459c      	cmp	ip, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x8e>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f100 32ff 	add.w	r2, r0, #4294967295
 800029c:	f080 80d6 	bcs.w	800044c <__udivmoddi4+0x230>
 80002a0:	459c      	cmp	ip, r3
 80002a2:	f240 80d3 	bls.w	800044c <__udivmoddi4+0x230>
 80002a6:	443b      	add	r3, r7
 80002a8:	3802      	subs	r0, #2
 80002aa:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002ae:	eba3 030c 	sub.w	r3, r3, ip
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11d      	cbz	r5, 80002be <__udivmoddi4+0xa2>
 80002b6:	40f3      	lsrs	r3, r6
 80002b8:	2200      	movs	r2, #0
 80002ba:	e9c5 3200 	strd	r3, r2, [r5]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d905      	bls.n	80002d2 <__udivmoddi4+0xb6>
 80002c6:	b10d      	cbz	r5, 80002cc <__udivmoddi4+0xb0>
 80002c8:	e9c5 0100 	strd	r0, r1, [r5]
 80002cc:	2100      	movs	r1, #0
 80002ce:	4608      	mov	r0, r1
 80002d0:	e7f5      	b.n	80002be <__udivmoddi4+0xa2>
 80002d2:	fab3 f183 	clz	r1, r3
 80002d6:	2900      	cmp	r1, #0
 80002d8:	d146      	bne.n	8000368 <__udivmoddi4+0x14c>
 80002da:	4573      	cmp	r3, lr
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xc8>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 8105 	bhi.w	80004ee <__udivmoddi4+0x2d2>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	4690      	mov	r8, r2
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e5      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f2:	e9c5 4800 	strd	r4, r8, [r5]
 80002f6:	e7e2      	b.n	80002be <__udivmoddi4+0xa2>
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f000 8090 	beq.w	800041e <__udivmoddi4+0x202>
 80002fe:	fab2 f682 	clz	r6, r2
 8000302:	2e00      	cmp	r6, #0
 8000304:	f040 80a4 	bne.w	8000450 <__udivmoddi4+0x234>
 8000308:	1a8a      	subs	r2, r1, r2
 800030a:	0c03      	lsrs	r3, r0, #16
 800030c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000310:	b280      	uxth	r0, r0
 8000312:	b2bc      	uxth	r4, r7
 8000314:	2101      	movs	r1, #1
 8000316:	fbb2 fcfe 	udiv	ip, r2, lr
 800031a:	fb0e 221c 	mls	r2, lr, ip, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb04 f20c 	mul.w	r2, r4, ip
 8000326:	429a      	cmp	r2, r3
 8000328:	d907      	bls.n	800033a <__udivmoddi4+0x11e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000330:	d202      	bcs.n	8000338 <__udivmoddi4+0x11c>
 8000332:	429a      	cmp	r2, r3
 8000334:	f200 80e0 	bhi.w	80004f8 <__udivmoddi4+0x2dc>
 8000338:	46c4      	mov	ip, r8
 800033a:	1a9b      	subs	r3, r3, r2
 800033c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000340:	fb0e 3312 	mls	r3, lr, r2, r3
 8000344:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000348:	fb02 f404 	mul.w	r4, r2, r4
 800034c:	429c      	cmp	r4, r3
 800034e:	d907      	bls.n	8000360 <__udivmoddi4+0x144>
 8000350:	18fb      	adds	r3, r7, r3
 8000352:	f102 30ff 	add.w	r0, r2, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x142>
 8000358:	429c      	cmp	r4, r3
 800035a:	f200 80ca 	bhi.w	80004f2 <__udivmoddi4+0x2d6>
 800035e:	4602      	mov	r2, r0
 8000360:	1b1b      	subs	r3, r3, r4
 8000362:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000366:	e7a5      	b.n	80002b4 <__udivmoddi4+0x98>
 8000368:	f1c1 0620 	rsb	r6, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 f706 	lsr.w	r7, r2, r6
 8000372:	431f      	orrs	r7, r3
 8000374:	fa0e f401 	lsl.w	r4, lr, r1
 8000378:	fa20 f306 	lsr.w	r3, r0, r6
 800037c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000380:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	fa1f fc87 	uxth.w	ip, r7
 800038e:	fbbe f0f9 	udiv	r0, lr, r9
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	fb09 ee10 	mls	lr, r9, r0, lr
 8000398:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800039c:	fb00 fe0c 	mul.w	lr, r0, ip
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	fa02 f201 	lsl.w	r2, r2, r1
 80003a6:	d909      	bls.n	80003bc <__udivmoddi4+0x1a0>
 80003a8:	193c      	adds	r4, r7, r4
 80003aa:	f100 3aff 	add.w	sl, r0, #4294967295
 80003ae:	f080 809c 	bcs.w	80004ea <__udivmoddi4+0x2ce>
 80003b2:	45a6      	cmp	lr, r4
 80003b4:	f240 8099 	bls.w	80004ea <__udivmoddi4+0x2ce>
 80003b8:	3802      	subs	r0, #2
 80003ba:	443c      	add	r4, r7
 80003bc:	eba4 040e 	sub.w	r4, r4, lr
 80003c0:	fa1f fe83 	uxth.w	lr, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003d0:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d4:	45a4      	cmp	ip, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1ce>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f103 3eff 	add.w	lr, r3, #4294967295
 80003de:	f080 8082 	bcs.w	80004e6 <__udivmoddi4+0x2ca>
 80003e2:	45a4      	cmp	ip, r4
 80003e4:	d97f      	bls.n	80004e6 <__udivmoddi4+0x2ca>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	443c      	add	r4, r7
 80003ea:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ee:	eba4 040c 	sub.w	r4, r4, ip
 80003f2:	fba0 ec02 	umull	lr, ip, r0, r2
 80003f6:	4564      	cmp	r4, ip
 80003f8:	4673      	mov	r3, lr
 80003fa:	46e1      	mov	r9, ip
 80003fc:	d362      	bcc.n	80004c4 <__udivmoddi4+0x2a8>
 80003fe:	d05f      	beq.n	80004c0 <__udivmoddi4+0x2a4>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x1fe>
 8000402:	ebb8 0203 	subs.w	r2, r8, r3
 8000406:	eb64 0409 	sbc.w	r4, r4, r9
 800040a:	fa04 f606 	lsl.w	r6, r4, r6
 800040e:	fa22 f301 	lsr.w	r3, r2, r1
 8000412:	431e      	orrs	r6, r3
 8000414:	40cc      	lsrs	r4, r1
 8000416:	e9c5 6400 	strd	r6, r4, [r5]
 800041a:	2100      	movs	r1, #0
 800041c:	e74f      	b.n	80002be <__udivmoddi4+0xa2>
 800041e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000422:	0c01      	lsrs	r1, r0, #16
 8000424:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000428:	b280      	uxth	r0, r0
 800042a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800042e:	463b      	mov	r3, r7
 8000430:	4638      	mov	r0, r7
 8000432:	463c      	mov	r4, r7
 8000434:	46b8      	mov	r8, r7
 8000436:	46be      	mov	lr, r7
 8000438:	2620      	movs	r6, #32
 800043a:	fbb1 f1f7 	udiv	r1, r1, r7
 800043e:	eba2 0208 	sub.w	r2, r2, r8
 8000442:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000446:	e766      	b.n	8000316 <__udivmoddi4+0xfa>
 8000448:	4601      	mov	r1, r0
 800044a:	e718      	b.n	800027e <__udivmoddi4+0x62>
 800044c:	4610      	mov	r0, r2
 800044e:	e72c      	b.n	80002aa <__udivmoddi4+0x8e>
 8000450:	f1c6 0220 	rsb	r2, r6, #32
 8000454:	fa2e f302 	lsr.w	r3, lr, r2
 8000458:	40b7      	lsls	r7, r6
 800045a:	40b1      	lsls	r1, r6
 800045c:	fa20 f202 	lsr.w	r2, r0, r2
 8000460:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000464:	430a      	orrs	r2, r1
 8000466:	fbb3 f8fe 	udiv	r8, r3, lr
 800046a:	b2bc      	uxth	r4, r7
 800046c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000470:	0c11      	lsrs	r1, r2, #16
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb08 f904 	mul.w	r9, r8, r4
 800047a:	40b0      	lsls	r0, r6
 800047c:	4589      	cmp	r9, r1
 800047e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000482:	b280      	uxth	r0, r0
 8000484:	d93e      	bls.n	8000504 <__udivmoddi4+0x2e8>
 8000486:	1879      	adds	r1, r7, r1
 8000488:	f108 3cff 	add.w	ip, r8, #4294967295
 800048c:	d201      	bcs.n	8000492 <__udivmoddi4+0x276>
 800048e:	4589      	cmp	r9, r1
 8000490:	d81f      	bhi.n	80004d2 <__udivmoddi4+0x2b6>
 8000492:	eba1 0109 	sub.w	r1, r1, r9
 8000496:	fbb1 f9fe 	udiv	r9, r1, lr
 800049a:	fb09 f804 	mul.w	r8, r9, r4
 800049e:	fb0e 1119 	mls	r1, lr, r9, r1
 80004a2:	b292      	uxth	r2, r2
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	4542      	cmp	r2, r8
 80004aa:	d229      	bcs.n	8000500 <__udivmoddi4+0x2e4>
 80004ac:	18ba      	adds	r2, r7, r2
 80004ae:	f109 31ff 	add.w	r1, r9, #4294967295
 80004b2:	d2c4      	bcs.n	800043e <__udivmoddi4+0x222>
 80004b4:	4542      	cmp	r2, r8
 80004b6:	d2c2      	bcs.n	800043e <__udivmoddi4+0x222>
 80004b8:	f1a9 0102 	sub.w	r1, r9, #2
 80004bc:	443a      	add	r2, r7
 80004be:	e7be      	b.n	800043e <__udivmoddi4+0x222>
 80004c0:	45f0      	cmp	r8, lr
 80004c2:	d29d      	bcs.n	8000400 <__udivmoddi4+0x1e4>
 80004c4:	ebbe 0302 	subs.w	r3, lr, r2
 80004c8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004cc:	3801      	subs	r0, #1
 80004ce:	46e1      	mov	r9, ip
 80004d0:	e796      	b.n	8000400 <__udivmoddi4+0x1e4>
 80004d2:	eba7 0909 	sub.w	r9, r7, r9
 80004d6:	4449      	add	r1, r9
 80004d8:	f1a8 0c02 	sub.w	ip, r8, #2
 80004dc:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e0:	fb09 f804 	mul.w	r8, r9, r4
 80004e4:	e7db      	b.n	800049e <__udivmoddi4+0x282>
 80004e6:	4673      	mov	r3, lr
 80004e8:	e77f      	b.n	80003ea <__udivmoddi4+0x1ce>
 80004ea:	4650      	mov	r0, sl
 80004ec:	e766      	b.n	80003bc <__udivmoddi4+0x1a0>
 80004ee:	4608      	mov	r0, r1
 80004f0:	e6fd      	b.n	80002ee <__udivmoddi4+0xd2>
 80004f2:	443b      	add	r3, r7
 80004f4:	3a02      	subs	r2, #2
 80004f6:	e733      	b.n	8000360 <__udivmoddi4+0x144>
 80004f8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004fc:	443b      	add	r3, r7
 80004fe:	e71c      	b.n	800033a <__udivmoddi4+0x11e>
 8000500:	4649      	mov	r1, r9
 8000502:	e79c      	b.n	800043e <__udivmoddi4+0x222>
 8000504:	eba1 0109 	sub.w	r1, r1, r9
 8000508:	46c4      	mov	ip, r8
 800050a:	fbb1 f9fe 	udiv	r9, r1, lr
 800050e:	fb09 f804 	mul.w	r8, r9, r4
 8000512:	e7c4      	b.n	800049e <__udivmoddi4+0x282>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <ApplicationInit>:

#define FIRST_NAME_LENGTH 6


void ApplicationInit(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
    LTCD__Init();
 800051c:	f001 fafe 	bl	8001b1c <LTCD__Init>
    LTCD_Layer_Init(0);
 8000520:	2000      	movs	r0, #0
 8000522:	f001 fabb 	bl	8001a9c <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_WHITE);
 8000526:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800052a:	2000      	movs	r0, #0
 800052c:	f001 fbc6 	bl	8001cbc <LCD_Clear>
	InitializeLCDTouch();
 8000530:	f001 fc9c 	bl	8001e6c <InitializeLCDTouch>
	Gyro_Init();
 8000534:	f001 f852 	bl	80015dc <Gyro_Init>
    HAL_Delay(100);
 8000538:	2064      	movs	r0, #100	@ 0x64
 800053a:	f003 f9cd 	bl	80038d8 <HAL_Delay>
	Button_Init_Interrupt();
 800053e:	f001 f823 	bl	8001588 <Button_Init_Interrupt>
	startGame();
 8000542:	f000 f803 	bl	800054c <startGame>
}
 8000546:	bf00      	nop
 8000548:	bd80      	pop	{r7, pc}
	...

0800054c <startGame>:

void startGame(void){
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
	Screen1_Display();
 8000550:	f000 fa36 	bl	80009c0 <Screen1_Display>
	checkPlayerMode();
 8000554:	f000 f85c 	bl	8000610 <checkPlayerMode>
	startTimer();
 8000558:	f000 fa10 	bl	800097c <startTimer>
	winner = 0;
 800055c:	4b04      	ldr	r3, [pc, #16]	@ (8000570 <startGame+0x24>)
 800055e:	2200      	movs	r2, #0
 8000560:	701a      	strb	r2, [r3, #0]
	newGame();
 8000562:	f000 f873 	bl	800064c <newGame>
	playGame();
 8000566:	f000 f805 	bl	8000574 <playGame>
}
 800056a:	bf00      	nop
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	20000044 	.word	0x20000044

08000574 <playGame>:

void playGame(void){
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
	while (winner == 0){
 8000578:	e022      	b.n	80005c0 <playGame+0x4c>
		Screen2_Display();
 800057a:	f000 fadb 	bl	8000b34 <Screen2_Display>
		if(TwoPlayerMode == false && player1turn == false){
 800057e:	4b1e      	ldr	r3, [pc, #120]	@ (80005f8 <playGame+0x84>)
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	f083 0301 	eor.w	r3, r3, #1
 8000586:	b2db      	uxtb	r3, r3
 8000588:	2b00      	cmp	r3, #0
 800058a:	d00f      	beq.n	80005ac <playGame+0x38>
 800058c:	4b1b      	ldr	r3, [pc, #108]	@ (80005fc <playGame+0x88>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	f083 0301 	eor.w	r3, r3, #1
 8000594:	b2db      	uxtb	r3, r3
 8000596:	2b00      	cmp	r3, #0
 8000598:	d008      	beq.n	80005ac <playGame+0x38>
			chipLoc = moveAI();
 800059a:	f000 fdab 	bl	80010f4 <moveAI>
 800059e:	4603      	mov	r3, r0
 80005a0:	461a      	mov	r2, r3
 80005a2:	4b17      	ldr	r3, [pc, #92]	@ (8000600 <playGame+0x8c>)
 80005a4:	701a      	strb	r2, [r3, #0]
			drop();
 80005a6:	f000 f891 	bl	80006cc <drop>
 80005aa:	e001      	b.n	80005b0 <playGame+0x3c>
		}
		else{
			moveGyro();
 80005ac:	f000 f8e6 	bl	800077c <moveGyro>
		}
		Screen2_Display();
 80005b0:	f000 fac0 	bl	8000b34 <Screen2_Display>
		winner = checkState();
 80005b4:	f000 f922 	bl	80007fc <checkState>
 80005b8:	4603      	mov	r3, r0
 80005ba:	461a      	mov	r2, r3
 80005bc:	4b11      	ldr	r3, [pc, #68]	@ (8000604 <playGame+0x90>)
 80005be:	701a      	strb	r2, [r3, #0]
	while (winner == 0){
 80005c0:	4b10      	ldr	r3, [pc, #64]	@ (8000604 <playGame+0x90>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d0d8      	beq.n	800057a <playGame+0x6>
	}
	if(winner == 1){
 80005c8:	4b0e      	ldr	r3, [pc, #56]	@ (8000604 <playGame+0x90>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	2b01      	cmp	r3, #1
 80005ce:	d106      	bne.n	80005de <playGame+0x6a>
		player1_Score++;
 80005d0:	4b0d      	ldr	r3, [pc, #52]	@ (8000608 <playGame+0x94>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	3301      	adds	r3, #1
 80005d6:	b2da      	uxtb	r2, r3
 80005d8:	4b0b      	ldr	r3, [pc, #44]	@ (8000608 <playGame+0x94>)
 80005da:	701a      	strb	r2, [r3, #0]
 80005dc:	e005      	b.n	80005ea <playGame+0x76>
	}
	else{
		player2_Score++;
 80005de:	4b0b      	ldr	r3, [pc, #44]	@ (800060c <playGame+0x98>)
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	3301      	adds	r3, #1
 80005e4:	b2da      	uxtb	r2, r3
 80005e6:	4b09      	ldr	r3, [pc, #36]	@ (800060c <playGame+0x98>)
 80005e8:	701a      	strb	r2, [r3, #0]
	}
	endTimer();
 80005ea:	f000 f9d3 	bl	8000994 <endTimer>
	Screen3_Display();
 80005ee:	f000 fb8f 	bl	8000d10 <Screen3_Display>
}
 80005f2:	bf00      	nop
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	20000054 	.word	0x20000054
 80005fc:	20000001 	.word	0x20000001
 8000600:	20000000 	.word	0x20000000
 8000604:	20000044 	.word	0x20000044
 8000608:	20000045 	.word	0x20000045
 800060c:	20000046 	.word	0x20000046

08000610 <checkPlayerMode>:


void checkPlayerMode(void){
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
	STMPE811_TouchData touch;
	touch.pressed = STMPE811_State_Released;
 8000616:	2301      	movs	r3, #1
 8000618:	713b      	strb	r3, [r7, #4]
	while(touch.pressed == STMPE811_State_Released){
 800061a:	e003      	b.n	8000624 <checkPlayerMode+0x14>
		returnTouchStateAndLocation(&touch);
 800061c:	463b      	mov	r3, r7
 800061e:	4618      	mov	r0, r3
 8000620:	f001 fc2f 	bl	8001e82 <returnTouchStateAndLocation>
	while(touch.pressed == STMPE811_State_Released){
 8000624:	793b      	ldrb	r3, [r7, #4]
 8000626:	2b01      	cmp	r3, #1
 8000628:	d0f8      	beq.n	800061c <checkPlayerMode+0xc>
	}
	if (touch.x > LCD_PIXEL_WIDTH/2){
 800062a:	883b      	ldrh	r3, [r7, #0]
 800062c:	2b78      	cmp	r3, #120	@ 0x78
 800062e:	d903      	bls.n	8000638 <checkPlayerMode+0x28>
		TwoPlayerMode = LEFT_TOUCH;
 8000630:	4b05      	ldr	r3, [pc, #20]	@ (8000648 <checkPlayerMode+0x38>)
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]
	}
	else{
		TwoPlayerMode = RIGHT_TOUCH;
	}
}
 8000636:	e002      	b.n	800063e <checkPlayerMode+0x2e>
		TwoPlayerMode = RIGHT_TOUCH;
 8000638:	4b03      	ldr	r3, [pc, #12]	@ (8000648 <checkPlayerMode+0x38>)
 800063a:	2201      	movs	r2, #1
 800063c:	701a      	strb	r2, [r3, #0]
}
 800063e:	bf00      	nop
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	20000054 	.word	0x20000054

0800064c <newGame>:

void newGame(void){
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
	startTimer();
 8000652:	f000 f993 	bl	800097c <startTimer>
	LCD_Clear(0, LCD_COLOR_GREY);
 8000656:	f24f 71de 	movw	r1, #63454	@ 0xf7de
 800065a:	2000      	movs	r0, #0
 800065c:	f001 fb2e 	bl	8001cbc <LCD_Clear>
	if (startPlayer1 == true){
 8000660:	4b17      	ldr	r3, [pc, #92]	@ (80006c0 <newGame+0x74>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d003      	beq.n	8000670 <newGame+0x24>
		startPlayer1 = false;
 8000668:	4b15      	ldr	r3, [pc, #84]	@ (80006c0 <newGame+0x74>)
 800066a:	2200      	movs	r2, #0
 800066c:	701a      	strb	r2, [r3, #0]
 800066e:	e002      	b.n	8000676 <newGame+0x2a>
	}
	else{
		startPlayer1 = true;
 8000670:	4b13      	ldr	r3, [pc, #76]	@ (80006c0 <newGame+0x74>)
 8000672:	2201      	movs	r2, #1
 8000674:	701a      	strb	r2, [r3, #0]
	}
	winner = 0;
 8000676:	4b13      	ldr	r3, [pc, #76]	@ (80006c4 <newGame+0x78>)
 8000678:	2200      	movs	r2, #0
 800067a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i<boardColumns; i++){
 800067c:	2300      	movs	r3, #0
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	e016      	b.n	80006b0 <newGame+0x64>
		for (int j = 0; j<boardRows; j++){
 8000682:	2300      	movs	r3, #0
 8000684:	603b      	str	r3, [r7, #0]
 8000686:	e00d      	b.n	80006a4 <newGame+0x58>
	        gameBoard[i][j] = 0;
 8000688:	490f      	ldr	r1, [pc, #60]	@ (80006c8 <newGame+0x7c>)
 800068a:	687a      	ldr	r2, [r7, #4]
 800068c:	4613      	mov	r3, r2
 800068e:	005b      	lsls	r3, r3, #1
 8000690:	4413      	add	r3, r2
 8000692:	005b      	lsls	r3, r3, #1
 8000694:	18ca      	adds	r2, r1, r3
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	4413      	add	r3, r2
 800069a:	2200      	movs	r2, #0
 800069c:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j<boardRows; j++){
 800069e:	683b      	ldr	r3, [r7, #0]
 80006a0:	3301      	adds	r3, #1
 80006a2:	603b      	str	r3, [r7, #0]
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	2b05      	cmp	r3, #5
 80006a8:	ddee      	ble.n	8000688 <newGame+0x3c>
	for (int i = 0; i<boardColumns; i++){
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	3301      	adds	r3, #1
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	2b06      	cmp	r3, #6
 80006b4:	dde5      	ble.n	8000682 <newGame+0x36>
		}
	}
}
 80006b6:	bf00      	nop
 80006b8:	bf00      	nop
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	20000002 	.word	0x20000002
 80006c4:	20000044 	.word	0x20000044
 80006c8:	20000058 	.word	0x20000058

080006cc <drop>:


void drop(void){
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
    int j = 0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	607b      	str	r3, [r7, #4]
    while (gameBoard[chipLoc][j] == 0 && j<6){
 80006d6:	e002      	b.n	80006de <drop+0x12>
        j++;
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	3301      	adds	r3, #1
 80006dc:	607b      	str	r3, [r7, #4]
    while (gameBoard[chipLoc][j] == 0 && j<6){
 80006de:	4b23      	ldr	r3, [pc, #140]	@ (800076c <drop+0xa0>)
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	4619      	mov	r1, r3
 80006e4:	4a22      	ldr	r2, [pc, #136]	@ (8000770 <drop+0xa4>)
 80006e6:	460b      	mov	r3, r1
 80006e8:	005b      	lsls	r3, r3, #1
 80006ea:	440b      	add	r3, r1
 80006ec:	005b      	lsls	r3, r3, #1
 80006ee:	441a      	add	r2, r3
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	4413      	add	r3, r2
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d102      	bne.n	8000700 <drop+0x34>
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	2b05      	cmp	r3, #5
 80006fe:	ddeb      	ble.n	80006d8 <drop+0xc>
    }
    if(j>0){
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	2b00      	cmp	r3, #0
 8000704:	dd2c      	ble.n	8000760 <drop+0x94>
		if (player1turn){
 8000706:	4b1b      	ldr	r3, [pc, #108]	@ (8000774 <drop+0xa8>)
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d011      	beq.n	8000732 <drop+0x66>
			gameBoard[chipLoc][j-1] = 1;
 800070e:	4b17      	ldr	r3, [pc, #92]	@ (800076c <drop+0xa0>)
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	4618      	mov	r0, r3
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	1e5a      	subs	r2, r3, #1
 8000718:	4915      	ldr	r1, [pc, #84]	@ (8000770 <drop+0xa4>)
 800071a:	4603      	mov	r3, r0
 800071c:	005b      	lsls	r3, r3, #1
 800071e:	4403      	add	r3, r0
 8000720:	005b      	lsls	r3, r3, #1
 8000722:	440b      	add	r3, r1
 8000724:	4413      	add	r3, r2
 8000726:	2201      	movs	r2, #1
 8000728:	701a      	strb	r2, [r3, #0]
			player1turn = false;
 800072a:	4b12      	ldr	r3, [pc, #72]	@ (8000774 <drop+0xa8>)
 800072c:	2200      	movs	r2, #0
 800072e:	701a      	strb	r2, [r3, #0]
 8000730:	e010      	b.n	8000754 <drop+0x88>
		}
		else{
			gameBoard[chipLoc][j-1] = 2;
 8000732:	4b0e      	ldr	r3, [pc, #56]	@ (800076c <drop+0xa0>)
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	4618      	mov	r0, r3
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	1e5a      	subs	r2, r3, #1
 800073c:	490c      	ldr	r1, [pc, #48]	@ (8000770 <drop+0xa4>)
 800073e:	4603      	mov	r3, r0
 8000740:	005b      	lsls	r3, r3, #1
 8000742:	4403      	add	r3, r0
 8000744:	005b      	lsls	r3, r3, #1
 8000746:	440b      	add	r3, r1
 8000748:	4413      	add	r3, r2
 800074a:	2202      	movs	r2, #2
 800074c:	701a      	strb	r2, [r3, #0]
			player1turn = true;
 800074e:	4b09      	ldr	r3, [pc, #36]	@ (8000774 <drop+0xa8>)
 8000750:	2201      	movs	r2, #1
 8000752:	701a      	strb	r2, [r3, #0]
		}
		chipLoc = 3;
 8000754:	4b05      	ldr	r3, [pc, #20]	@ (800076c <drop+0xa0>)
 8000756:	2203      	movs	r2, #3
 8000758:	701a      	strb	r2, [r3, #0]
		dropped = true;
 800075a:	4b07      	ldr	r3, [pc, #28]	@ (8000778 <drop+0xac>)
 800075c:	2201      	movs	r2, #1
 800075e:	701a      	strb	r2, [r3, #0]
    }
}
 8000760:	bf00      	nop
 8000762:	370c      	adds	r7, #12
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr
 800076c:	20000000 	.word	0x20000000
 8000770:	20000058 	.word	0x20000058
 8000774:	20000001 	.word	0x20000001
 8000778:	20000055 	.word	0x20000055

0800077c <moveGyro>:
*/
#define DEBOUNCE_TIME 50 // ms
#define MOVE_THRESHOLD 5000
uint32_t lastMoveTime = 0;

void moveGyro(void) {
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
    int16_t gyroLoc = Gyro_GetYLoc();
 8000782:	f001 f807 	bl	8001794 <Gyro_GetYLoc>
 8000786:	4603      	mov	r3, r0
 8000788:	80fb      	strh	r3, [r7, #6]
    uint32_t now = HAL_GetTick();
 800078a:	f003 f899 	bl	80038c0 <HAL_GetTick>
 800078e:	6038      	str	r0, [r7, #0]

    if (now - lastMoveTime > DEBOUNCE_TIME) {
 8000790:	4b17      	ldr	r3, [pc, #92]	@ (80007f0 <moveGyro+0x74>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	683a      	ldr	r2, [r7, #0]
 8000796:	1ad3      	subs	r3, r2, r3
 8000798:	2b32      	cmp	r3, #50	@ 0x32
 800079a:	d925      	bls.n	80007e8 <moveGyro+0x6c>
        if (gyroLoc > MOVE_THRESHOLD && chipLoc < 6) {
 800079c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80007a4:	4293      	cmp	r3, r2
 80007a6:	dd0d      	ble.n	80007c4 <moveGyro+0x48>
 80007a8:	4b12      	ldr	r3, [pc, #72]	@ (80007f4 <moveGyro+0x78>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	2b05      	cmp	r3, #5
 80007ae:	d809      	bhi.n	80007c4 <moveGyro+0x48>
            chipLoc++;
 80007b0:	4b10      	ldr	r3, [pc, #64]	@ (80007f4 <moveGyro+0x78>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	3301      	adds	r3, #1
 80007b6:	b2da      	uxtb	r2, r3
 80007b8:	4b0e      	ldr	r3, [pc, #56]	@ (80007f4 <moveGyro+0x78>)
 80007ba:	701a      	strb	r2, [r3, #0]
            lastMoveTime = now;
 80007bc:	4a0c      	ldr	r2, [pc, #48]	@ (80007f0 <moveGyro+0x74>)
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	6013      	str	r3, [r2, #0]
        } else if (gyroLoc < -MOVE_THRESHOLD && chipLoc > 0) {
            chipLoc--;
            lastMoveTime = now;
        }
    }
}
 80007c2:	e011      	b.n	80007e8 <moveGyro+0x6c>
        } else if (gyroLoc < -MOVE_THRESHOLD && chipLoc > 0) {
 80007c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007c8:	4a0b      	ldr	r2, [pc, #44]	@ (80007f8 <moveGyro+0x7c>)
 80007ca:	4293      	cmp	r3, r2
 80007cc:	da0c      	bge.n	80007e8 <moveGyro+0x6c>
 80007ce:	4b09      	ldr	r3, [pc, #36]	@ (80007f4 <moveGyro+0x78>)
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d008      	beq.n	80007e8 <moveGyro+0x6c>
            chipLoc--;
 80007d6:	4b07      	ldr	r3, [pc, #28]	@ (80007f4 <moveGyro+0x78>)
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	3b01      	subs	r3, #1
 80007dc:	b2da      	uxtb	r2, r3
 80007de:	4b05      	ldr	r3, [pc, #20]	@ (80007f4 <moveGyro+0x78>)
 80007e0:	701a      	strb	r2, [r3, #0]
            lastMoveTime = now;
 80007e2:	4a03      	ldr	r2, [pc, #12]	@ (80007f0 <moveGyro+0x74>)
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	6013      	str	r3, [r2, #0]
}
 80007e8:	bf00      	nop
 80007ea:	3708      	adds	r7, #8
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	20000084 	.word	0x20000084
 80007f4:	20000000 	.word	0x20000000
 80007f8:	ffffec78 	.word	0xffffec78

080007fc <checkState>:
uint8_t checkState(void){
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0
    int playerChecking = 0;
 8000802:	2300      	movs	r3, #0
 8000804:	607b      	str	r3, [r7, #4]
    dropped = false;
 8000806:	4b2c      	ldr	r3, [pc, #176]	@ (80008b8 <checkState+0xbc>)
 8000808:	2200      	movs	r2, #0
 800080a:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i< boardColumns; i++){
 800080c:	2300      	movs	r3, #0
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	e049      	b.n	80008a6 <checkState+0xaa>
        for (int j = 0; j < boardRows; j++){
 8000812:	2300      	movs	r3, #0
 8000814:	60bb      	str	r3, [r7, #8]
 8000816:	e040      	b.n	800089a <checkState+0x9e>
            playerChecking = gameBoard[i][j];
 8000818:	4928      	ldr	r1, [pc, #160]	@ (80008bc <checkState+0xc0>)
 800081a:	68fa      	ldr	r2, [r7, #12]
 800081c:	4613      	mov	r3, r2
 800081e:	005b      	lsls	r3, r3, #1
 8000820:	4413      	add	r3, r2
 8000822:	005b      	lsls	r3, r3, #1
 8000824:	18ca      	adds	r2, r1, r3
 8000826:	68bb      	ldr	r3, [r7, #8]
 8000828:	4413      	add	r3, r2
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	607b      	str	r3, [r7, #4]
            if (playerChecking != 0){
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d02f      	beq.n	8000894 <checkState+0x98>
                if (checkDirection(i, j, 1, 0)|| //checking horizontal
 8000834:	2300      	movs	r3, #0
 8000836:	2201      	movs	r2, #1
 8000838:	68b9      	ldr	r1, [r7, #8]
 800083a:	68f8      	ldr	r0, [r7, #12]
 800083c:	f000 f840 	bl	80008c0 <checkDirection>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d11b      	bne.n	800087e <checkState+0x82>
                    checkDirection(i, j, 0, 1)|| //checking vertical 
 8000846:	2301      	movs	r3, #1
 8000848:	2200      	movs	r2, #0
 800084a:	68b9      	ldr	r1, [r7, #8]
 800084c:	68f8      	ldr	r0, [r7, #12]
 800084e:	f000 f837 	bl	80008c0 <checkDirection>
 8000852:	4603      	mov	r3, r0
                if (checkDirection(i, j, 1, 0)|| //checking horizontal
 8000854:	2b00      	cmp	r3, #0
 8000856:	d112      	bne.n	800087e <checkState+0x82>
                    checkDirection(i, j, 1, 1)|| //checking / diagonal
 8000858:	2301      	movs	r3, #1
 800085a:	2201      	movs	r2, #1
 800085c:	68b9      	ldr	r1, [r7, #8]
 800085e:	68f8      	ldr	r0, [r7, #12]
 8000860:	f000 f82e 	bl	80008c0 <checkDirection>
 8000864:	4603      	mov	r3, r0
                    checkDirection(i, j, 0, 1)|| //checking vertical 
 8000866:	2b00      	cmp	r3, #0
 8000868:	d109      	bne.n	800087e <checkState+0x82>
                    checkDirection(i, j, 1, -1)){ //checking \ diagonal
 800086a:	f04f 33ff 	mov.w	r3, #4294967295
 800086e:	2201      	movs	r2, #1
 8000870:	68b9      	ldr	r1, [r7, #8]
 8000872:	68f8      	ldr	r0, [r7, #12]
 8000874:	f000 f824 	bl	80008c0 <checkDirection>
 8000878:	4603      	mov	r3, r0
                    checkDirection(i, j, 1, 1)|| //checking / diagonal
 800087a:	2b00      	cmp	r3, #0
 800087c:	d00a      	beq.n	8000894 <checkState+0x98>
                        return gameBoard[i][j];
 800087e:	490f      	ldr	r1, [pc, #60]	@ (80008bc <checkState+0xc0>)
 8000880:	68fa      	ldr	r2, [r7, #12]
 8000882:	4613      	mov	r3, r2
 8000884:	005b      	lsls	r3, r3, #1
 8000886:	4413      	add	r3, r2
 8000888:	005b      	lsls	r3, r3, #1
 800088a:	18ca      	adds	r2, r1, r3
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	4413      	add	r3, r2
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	e00c      	b.n	80008ae <checkState+0xb2>
        for (int j = 0; j < boardRows; j++){
 8000894:	68bb      	ldr	r3, [r7, #8]
 8000896:	3301      	adds	r3, #1
 8000898:	60bb      	str	r3, [r7, #8]
 800089a:	68bb      	ldr	r3, [r7, #8]
 800089c:	2b05      	cmp	r3, #5
 800089e:	ddbb      	ble.n	8000818 <checkState+0x1c>
    for (int i = 0; i< boardColumns; i++){
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	3301      	adds	r3, #1
 80008a4:	60fb      	str	r3, [r7, #12]
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	2b06      	cmp	r3, #6
 80008aa:	ddb2      	ble.n	8000812 <checkState+0x16>
                }
            }
        }
    }
	return 0;
 80008ac:	2300      	movs	r3, #0
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	3710      	adds	r7, #16
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	20000055 	.word	0x20000055
 80008bc:	20000058 	.word	0x20000058

080008c0 <checkDirection>:
bool checkDirection(int i, int j, int dir_i, int dir_j){
 80008c0:	b490      	push	{r4, r7}
 80008c2:	b086      	sub	sp, #24
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	60f8      	str	r0, [r7, #12]
 80008c8:	60b9      	str	r1, [r7, #8]
 80008ca:	607a      	str	r2, [r7, #4]
 80008cc:	603b      	str	r3, [r7, #0]
    for (int k = 1; k < 4; k++){
 80008ce:	2301      	movs	r3, #1
 80008d0:	617b      	str	r3, [r7, #20]
 80008d2:	e048      	b.n	8000966 <checkDirection+0xa6>
        if ((i+dir_i*k)>boardColumns || (i+dir_i*k)<0){
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	697a      	ldr	r2, [r7, #20]
 80008d8:	fb03 f202 	mul.w	r2, r3, r2
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	4413      	add	r3, r2
 80008e0:	2b07      	cmp	r3, #7
 80008e2:	dc07      	bgt.n	80008f4 <checkDirection+0x34>
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	697a      	ldr	r2, [r7, #20]
 80008e8:	fb03 f202 	mul.w	r2, r3, r2
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	4413      	add	r3, r2
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	da01      	bge.n	80008f8 <checkDirection+0x38>
            return false;
 80008f4:	2300      	movs	r3, #0
 80008f6:	e03a      	b.n	800096e <checkDirection+0xae>
        } 
        if ((j+dir_j*k)>boardRows || (j+dir_j*k)<0){
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	697a      	ldr	r2, [r7, #20]
 80008fc:	fb03 f202 	mul.w	r2, r3, r2
 8000900:	68bb      	ldr	r3, [r7, #8]
 8000902:	4413      	add	r3, r2
 8000904:	2b06      	cmp	r3, #6
 8000906:	dc07      	bgt.n	8000918 <checkDirection+0x58>
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	697a      	ldr	r2, [r7, #20]
 800090c:	fb03 f202 	mul.w	r2, r3, r2
 8000910:	68bb      	ldr	r3, [r7, #8]
 8000912:	4413      	add	r3, r2
 8000914:	2b00      	cmp	r3, #0
 8000916:	da01      	bge.n	800091c <checkDirection+0x5c>
            return false;
 8000918:	2300      	movs	r3, #0
 800091a:	e028      	b.n	800096e <checkDirection+0xae>
        } 
        if (gameBoard[i][j] != gameBoard[i+dir_i*k][j+dir_j*k]){
 800091c:	4916      	ldr	r1, [pc, #88]	@ (8000978 <checkDirection+0xb8>)
 800091e:	68fa      	ldr	r2, [r7, #12]
 8000920:	4613      	mov	r3, r2
 8000922:	005b      	lsls	r3, r3, #1
 8000924:	4413      	add	r3, r2
 8000926:	005b      	lsls	r3, r3, #1
 8000928:	18ca      	adds	r2, r1, r3
 800092a:	68bb      	ldr	r3, [r7, #8]
 800092c:	4413      	add	r3, r2
 800092e:	7819      	ldrb	r1, [r3, #0]
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	697a      	ldr	r2, [r7, #20]
 8000934:	fb03 f202 	mul.w	r2, r3, r2
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	441a      	add	r2, r3
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	6978      	ldr	r0, [r7, #20]
 8000940:	fb03 f000 	mul.w	r0, r3, r0
 8000944:	68bb      	ldr	r3, [r7, #8]
 8000946:	4418      	add	r0, r3
 8000948:	4c0b      	ldr	r4, [pc, #44]	@ (8000978 <checkDirection+0xb8>)
 800094a:	4613      	mov	r3, r2
 800094c:	005b      	lsls	r3, r3, #1
 800094e:	4413      	add	r3, r2
 8000950:	005b      	lsls	r3, r3, #1
 8000952:	4423      	add	r3, r4
 8000954:	4403      	add	r3, r0
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	4299      	cmp	r1, r3
 800095a:	d001      	beq.n	8000960 <checkDirection+0xa0>
            return false;
 800095c:	2300      	movs	r3, #0
 800095e:	e006      	b.n	800096e <checkDirection+0xae>
    for (int k = 1; k < 4; k++){
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	3301      	adds	r3, #1
 8000964:	617b      	str	r3, [r7, #20]
 8000966:	697b      	ldr	r3, [r7, #20]
 8000968:	2b03      	cmp	r3, #3
 800096a:	ddb3      	ble.n	80008d4 <checkDirection+0x14>
        }

    }
    return true;
 800096c:	2301      	movs	r3, #1

}
 800096e:	4618      	mov	r0, r3
 8000970:	3718      	adds	r7, #24
 8000972:	46bd      	mov	sp, r7
 8000974:	bc90      	pop	{r4, r7}
 8000976:	4770      	bx	lr
 8000978:	20000058 	.word	0x20000058

0800097c <startTimer>:

void startTimer(void){
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
	startTime = HAL_GetTick();
 8000980:	f002 ff9e 	bl	80038c0 <HAL_GetTick>
 8000984:	4603      	mov	r3, r0
 8000986:	4a02      	ldr	r2, [pc, #8]	@ (8000990 <startTimer+0x14>)
 8000988:	6013      	str	r3, [r2, #0]
}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	20000048 	.word	0x20000048

08000994 <endTimer>:

void endTimer(){
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
    endTime = HAL_GetTick();
 8000998:	f002 ff92 	bl	80038c0 <HAL_GetTick>
 800099c:	4603      	mov	r3, r0
 800099e:	4a05      	ldr	r2, [pc, #20]	@ (80009b4 <endTimer+0x20>)
 80009a0:	6013      	str	r3, [r2, #0]
	timePlayed = endTime-startTime;
 80009a2:	4b04      	ldr	r3, [pc, #16]	@ (80009b4 <endTimer+0x20>)
 80009a4:	681a      	ldr	r2, [r3, #0]
 80009a6:	4b04      	ldr	r3, [pc, #16]	@ (80009b8 <endTimer+0x24>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	1ad3      	subs	r3, r2, r3
 80009ac:	4a03      	ldr	r2, [pc, #12]	@ (80009bc <endTimer+0x28>)
 80009ae:	6013      	str	r3, [r2, #0]
}
 80009b0:	bf00      	nop
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	2000004c 	.word	0x2000004c
 80009b8:	20000048 	.word	0x20000048
 80009bc:	20000050 	.word	0x20000050

080009c0 <Screen1_Display>:


void Screen1_Display(void){
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
    LCD_Clear(0, LCD_COLOR_GREY);
 80009c4:	f24f 71de 	movw	r1, #63454	@ 0xf7de
 80009c8:	2000      	movs	r0, #0
 80009ca:	f001 f977 	bl	8001cbc <LCD_Clear>
    
    LCD_SetFont(&Font16x24);
 80009ce:	4857      	ldr	r0, [pc, #348]	@ (8000b2c <Screen1_Display+0x16c>)
 80009d0:	f001 f9a6 	bl	8001d20 <LCD_SetFont>
    LCD_SetTextColor(LCD_COLOR_BLACK);
 80009d4:	2000      	movs	r0, #0
 80009d6:	f001 f993 	bl	8001d00 <LCD_SetTextColor>
    LCD_DisplayChar(20, 20, 'C');
 80009da:	2243      	movs	r2, #67	@ 0x43
 80009dc:	2114      	movs	r1, #20
 80009de:	2014      	movs	r0, #20
 80009e0:	f001 fa1c 	bl	8001e1c <LCD_DisplayChar>
    LCD_DisplayChar(40, 20, 'O');
 80009e4:	224f      	movs	r2, #79	@ 0x4f
 80009e6:	2114      	movs	r1, #20
 80009e8:	2028      	movs	r0, #40	@ 0x28
 80009ea:	f001 fa17 	bl	8001e1c <LCD_DisplayChar>
    LCD_DisplayChar(60, 20, 'N');
 80009ee:	224e      	movs	r2, #78	@ 0x4e
 80009f0:	2114      	movs	r1, #20
 80009f2:	203c      	movs	r0, #60	@ 0x3c
 80009f4:	f001 fa12 	bl	8001e1c <LCD_DisplayChar>
    LCD_DisplayChar(80, 20, 'N');
 80009f8:	224e      	movs	r2, #78	@ 0x4e
 80009fa:	2114      	movs	r1, #20
 80009fc:	2050      	movs	r0, #80	@ 0x50
 80009fe:	f001 fa0d 	bl	8001e1c <LCD_DisplayChar>
    LCD_DisplayChar(100, 20, 'E');
 8000a02:	2245      	movs	r2, #69	@ 0x45
 8000a04:	2114      	movs	r1, #20
 8000a06:	2064      	movs	r0, #100	@ 0x64
 8000a08:	f001 fa08 	bl	8001e1c <LCD_DisplayChar>
    LCD_DisplayChar(120, 20, 'C');
 8000a0c:	2243      	movs	r2, #67	@ 0x43
 8000a0e:	2114      	movs	r1, #20
 8000a10:	2078      	movs	r0, #120	@ 0x78
 8000a12:	f001 fa03 	bl	8001e1c <LCD_DisplayChar>
    LCD_DisplayChar(140, 20, 'T');
 8000a16:	2254      	movs	r2, #84	@ 0x54
 8000a18:	2114      	movs	r1, #20
 8000a1a:	208c      	movs	r0, #140	@ 0x8c
 8000a1c:	f001 f9fe 	bl	8001e1c <LCD_DisplayChar>
    LCD_DisplayChar(180, 20, '4');
 8000a20:	2234      	movs	r2, #52	@ 0x34
 8000a22:	2114      	movs	r1, #20
 8000a24:	20b4      	movs	r0, #180	@ 0xb4
 8000a26:	f001 f9f9 	bl	8001e1c <LCD_DisplayChar>

    LCD_SetFont(&Font12x12);
 8000a2a:	4841      	ldr	r0, [pc, #260]	@ (8000b30 <Screen1_Display+0x170>)
 8000a2c:	f001 f978 	bl	8001d20 <LCD_SetFont>
    LCD_DisplayChar(20, 110, '1');
 8000a30:	2231      	movs	r2, #49	@ 0x31
 8000a32:	216e      	movs	r1, #110	@ 0x6e
 8000a34:	2014      	movs	r0, #20
 8000a36:	f001 f9f1 	bl	8001e1c <LCD_DisplayChar>
    LCD_DisplayChar(35, 110, 'P');
 8000a3a:	2250      	movs	r2, #80	@ 0x50
 8000a3c:	216e      	movs	r1, #110	@ 0x6e
 8000a3e:	2023      	movs	r0, #35	@ 0x23
 8000a40:	f001 f9ec 	bl	8001e1c <LCD_DisplayChar>
    LCD_DisplayChar(45, 110, 'L');
 8000a44:	224c      	movs	r2, #76	@ 0x4c
 8000a46:	216e      	movs	r1, #110	@ 0x6e
 8000a48:	202d      	movs	r0, #45	@ 0x2d
 8000a4a:	f001 f9e7 	bl	8001e1c <LCD_DisplayChar>
    LCD_DisplayChar(55, 110, 'A');
 8000a4e:	2241      	movs	r2, #65	@ 0x41
 8000a50:	216e      	movs	r1, #110	@ 0x6e
 8000a52:	2037      	movs	r0, #55	@ 0x37
 8000a54:	f001 f9e2 	bl	8001e1c <LCD_DisplayChar>
    LCD_DisplayChar(65, 110, 'Y');
 8000a58:	2259      	movs	r2, #89	@ 0x59
 8000a5a:	216e      	movs	r1, #110	@ 0x6e
 8000a5c:	2041      	movs	r0, #65	@ 0x41
 8000a5e:	f001 f9dd 	bl	8001e1c <LCD_DisplayChar>
    LCD_DisplayChar(75, 110, 'E');
 8000a62:	2245      	movs	r2, #69	@ 0x45
 8000a64:	216e      	movs	r1, #110	@ 0x6e
 8000a66:	204b      	movs	r0, #75	@ 0x4b
 8000a68:	f001 f9d8 	bl	8001e1c <LCD_DisplayChar>
    LCD_DisplayChar(85, 110, 'R');
 8000a6c:	2252      	movs	r2, #82	@ 0x52
 8000a6e:	216e      	movs	r1, #110	@ 0x6e
 8000a70:	2055      	movs	r0, #85	@ 0x55
 8000a72:	f001 f9d3 	bl	8001e1c <LCD_DisplayChar>
    LCD_DisplayChar(40, 125, 'M');
 8000a76:	224d      	movs	r2, #77	@ 0x4d
 8000a78:	217d      	movs	r1, #125	@ 0x7d
 8000a7a:	2028      	movs	r0, #40	@ 0x28
 8000a7c:	f001 f9ce 	bl	8001e1c <LCD_DisplayChar>
    LCD_DisplayChar(50, 125, 'O');
 8000a80:	224f      	movs	r2, #79	@ 0x4f
 8000a82:	217d      	movs	r1, #125	@ 0x7d
 8000a84:	2032      	movs	r0, #50	@ 0x32
 8000a86:	f001 f9c9 	bl	8001e1c <LCD_DisplayChar>
    LCD_DisplayChar(60, 125, 'D');
 8000a8a:	2244      	movs	r2, #68	@ 0x44
 8000a8c:	217d      	movs	r1, #125	@ 0x7d
 8000a8e:	203c      	movs	r0, #60	@ 0x3c
 8000a90:	f001 f9c4 	bl	8001e1c <LCD_DisplayChar>
    LCD_DisplayChar(70, 125, 'E');
 8000a94:	2245      	movs	r2, #69	@ 0x45
 8000a96:	217d      	movs	r1, #125	@ 0x7d
 8000a98:	2046      	movs	r0, #70	@ 0x46
 8000a9a:	f001 f9bf 	bl	8001e1c <LCD_DisplayChar>

    LCD_DisplayChar(140, 110, '2');
 8000a9e:	2232      	movs	r2, #50	@ 0x32
 8000aa0:	216e      	movs	r1, #110	@ 0x6e
 8000aa2:	208c      	movs	r0, #140	@ 0x8c
 8000aa4:	f001 f9ba 	bl	8001e1c <LCD_DisplayChar>
    LCD_DisplayChar(155, 110, 'P');
 8000aa8:	2250      	movs	r2, #80	@ 0x50
 8000aaa:	216e      	movs	r1, #110	@ 0x6e
 8000aac:	209b      	movs	r0, #155	@ 0x9b
 8000aae:	f001 f9b5 	bl	8001e1c <LCD_DisplayChar>
    LCD_DisplayChar(165, 110, 'L');
 8000ab2:	224c      	movs	r2, #76	@ 0x4c
 8000ab4:	216e      	movs	r1, #110	@ 0x6e
 8000ab6:	20a5      	movs	r0, #165	@ 0xa5
 8000ab8:	f001 f9b0 	bl	8001e1c <LCD_DisplayChar>
    LCD_DisplayChar(175, 110, 'A');
 8000abc:	2241      	movs	r2, #65	@ 0x41
 8000abe:	216e      	movs	r1, #110	@ 0x6e
 8000ac0:	20af      	movs	r0, #175	@ 0xaf
 8000ac2:	f001 f9ab 	bl	8001e1c <LCD_DisplayChar>
    LCD_DisplayChar(185, 110, 'Y');
 8000ac6:	2259      	movs	r2, #89	@ 0x59
 8000ac8:	216e      	movs	r1, #110	@ 0x6e
 8000aca:	20b9      	movs	r0, #185	@ 0xb9
 8000acc:	f001 f9a6 	bl	8001e1c <LCD_DisplayChar>
    LCD_DisplayChar(195, 110, 'E');
 8000ad0:	2245      	movs	r2, #69	@ 0x45
 8000ad2:	216e      	movs	r1, #110	@ 0x6e
 8000ad4:	20c3      	movs	r0, #195	@ 0xc3
 8000ad6:	f001 f9a1 	bl	8001e1c <LCD_DisplayChar>
    LCD_DisplayChar(205, 110, 'R');
 8000ada:	2252      	movs	r2, #82	@ 0x52
 8000adc:	216e      	movs	r1, #110	@ 0x6e
 8000ade:	20cd      	movs	r0, #205	@ 0xcd
 8000ae0:	f001 f99c 	bl	8001e1c <LCD_DisplayChar>
    LCD_DisplayChar(160, 125, 'M');
 8000ae4:	224d      	movs	r2, #77	@ 0x4d
 8000ae6:	217d      	movs	r1, #125	@ 0x7d
 8000ae8:	20a0      	movs	r0, #160	@ 0xa0
 8000aea:	f001 f997 	bl	8001e1c <LCD_DisplayChar>
    LCD_DisplayChar(170, 125, 'O');
 8000aee:	224f      	movs	r2, #79	@ 0x4f
 8000af0:	217d      	movs	r1, #125	@ 0x7d
 8000af2:	20aa      	movs	r0, #170	@ 0xaa
 8000af4:	f001 f992 	bl	8001e1c <LCD_DisplayChar>
    LCD_DisplayChar(180, 125, 'D');
 8000af8:	2244      	movs	r2, #68	@ 0x44
 8000afa:	217d      	movs	r1, #125	@ 0x7d
 8000afc:	20b4      	movs	r0, #180	@ 0xb4
 8000afe:	f001 f98d 	bl	8001e1c <LCD_DisplayChar>
    LCD_DisplayChar(190, 125, 'E');
 8000b02:	2245      	movs	r2, #69	@ 0x45
 8000b04:	217d      	movs	r1, #125	@ 0x7d
 8000b06:	20be      	movs	r0, #190	@ 0xbe
 8000b08:	f001 f988 	bl	8001e1c <LCD_DisplayChar>


    LCD_Draw_Circle_Fill(60, (LCD_PIXEL_HEIGHT/2)+20, 40, LCD_COLOR_RED);
 8000b0c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000b10:	2228      	movs	r2, #40	@ 0x28
 8000b12:	21b4      	movs	r1, #180	@ 0xb4
 8000b14:	203c      	movs	r0, #60	@ 0x3c
 8000b16:	f001 f87d 	bl	8001c14 <LCD_Draw_Circle_Fill>
    LCD_Draw_Circle_Fill(LCD_PIXEL_WIDTH-60, (LCD_PIXEL_HEIGHT/2)+20, 40, LCD_COLOR_BLUE);
 8000b1a:	231f      	movs	r3, #31
 8000b1c:	2228      	movs	r2, #40	@ 0x28
 8000b1e:	21b4      	movs	r1, #180	@ 0xb4
 8000b20:	20b4      	movs	r0, #180	@ 0xb4
 8000b22:	f001 f877 	bl	8001c14 <LCD_Draw_Circle_Fill>
}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	20000008 	.word	0x20000008
 8000b30:	20000010 	.word	0x20000010

08000b34 <Screen2_Display>:

void Screen2_Display(void){
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af00      	add	r7, sp, #0
    LCD_Clear(0, LCD_COLOR_GREY);
 8000b3a:	f24f 71de 	movw	r1, #63454	@ 0xf7de
 8000b3e:	2000      	movs	r0, #0
 8000b40:	f001 f8bc 	bl	8001cbc <LCD_Clear>
    
    LCD_SetFont(&Font16x24);
 8000b44:	486e      	ldr	r0, [pc, #440]	@ (8000d00 <Screen2_Display+0x1cc>)
 8000b46:	f001 f8eb 	bl	8001d20 <LCD_SetFont>
    LCD_SetTextColor(LCD_COLOR_BLACK);
 8000b4a:	2000      	movs	r0, #0
 8000b4c:	f001 f8d8 	bl	8001d00 <LCD_SetTextColor>
    LCD_DisplayChar(20, 20, 'C');
 8000b50:	2243      	movs	r2, #67	@ 0x43
 8000b52:	2114      	movs	r1, #20
 8000b54:	2014      	movs	r0, #20
 8000b56:	f001 f961 	bl	8001e1c <LCD_DisplayChar>
    LCD_DisplayChar(40, 20, 'O');
 8000b5a:	224f      	movs	r2, #79	@ 0x4f
 8000b5c:	2114      	movs	r1, #20
 8000b5e:	2028      	movs	r0, #40	@ 0x28
 8000b60:	f001 f95c 	bl	8001e1c <LCD_DisplayChar>
    LCD_DisplayChar(60, 20, 'N');
 8000b64:	224e      	movs	r2, #78	@ 0x4e
 8000b66:	2114      	movs	r1, #20
 8000b68:	203c      	movs	r0, #60	@ 0x3c
 8000b6a:	f001 f957 	bl	8001e1c <LCD_DisplayChar>
    LCD_DisplayChar(80, 20, 'N');
 8000b6e:	224e      	movs	r2, #78	@ 0x4e
 8000b70:	2114      	movs	r1, #20
 8000b72:	2050      	movs	r0, #80	@ 0x50
 8000b74:	f001 f952 	bl	8001e1c <LCD_DisplayChar>
    LCD_DisplayChar(100, 20, 'E');
 8000b78:	2245      	movs	r2, #69	@ 0x45
 8000b7a:	2114      	movs	r1, #20
 8000b7c:	2064      	movs	r0, #100	@ 0x64
 8000b7e:	f001 f94d 	bl	8001e1c <LCD_DisplayChar>
    LCD_DisplayChar(120, 20, 'C');
 8000b82:	2243      	movs	r2, #67	@ 0x43
 8000b84:	2114      	movs	r1, #20
 8000b86:	2078      	movs	r0, #120	@ 0x78
 8000b88:	f001 f948 	bl	8001e1c <LCD_DisplayChar>
    LCD_DisplayChar(140, 20, 'T');
 8000b8c:	2254      	movs	r2, #84	@ 0x54
 8000b8e:	2114      	movs	r1, #20
 8000b90:	208c      	movs	r0, #140	@ 0x8c
 8000b92:	f001 f943 	bl	8001e1c <LCD_DisplayChar>
    LCD_DisplayChar(180, 20, '4');
 8000b96:	2234      	movs	r2, #52	@ 0x34
 8000b98:	2114      	movs	r1, #20
 8000b9a:	20b4      	movs	r0, #180	@ 0xb4
 8000b9c:	f001 f93e 	bl	8001e1c <LCD_DisplayChar>
    
    for (int i = 0; i<boardColumns; i++){
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	e037      	b.n	8000c16 <Screen2_Display+0xe2>
        if (i == chipLoc){
 8000ba6:	4b57      	ldr	r3, [pc, #348]	@ (8000d04 <Screen2_Display+0x1d0>)
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	461a      	mov	r2, r3
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d120      	bne.n	8000bf4 <Screen2_Display+0xc0>
            if (player1turn){
 8000bb2:	4b55      	ldr	r3, [pc, #340]	@ (8000d08 <Screen2_Display+0x1d4>)
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d00d      	beq.n	8000bd6 <Screen2_Display+0xa2>
                LCD_Draw_Circle_Fill((i*30)+30, 80, 12, LCD_COLOR_BLUE);
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	b29b      	uxth	r3, r3
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	0112      	lsls	r2, r2, #4
 8000bc4:	1ad3      	subs	r3, r2, r3
 8000bc6:	005b      	lsls	r3, r3, #1
 8000bc8:	b298      	uxth	r0, r3
 8000bca:	231f      	movs	r3, #31
 8000bcc:	220c      	movs	r2, #12
 8000bce:	2150      	movs	r1, #80	@ 0x50
 8000bd0:	f001 f820 	bl	8001c14 <LCD_Draw_Circle_Fill>
 8000bd4:	e01c      	b.n	8000c10 <Screen2_Display+0xdc>
            }
            else{
                LCD_Draw_Circle_Fill((i*30)+30, 80, 12, LCD_COLOR_RED);
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	3301      	adds	r3, #1
 8000bda:	b29b      	uxth	r3, r3
 8000bdc:	461a      	mov	r2, r3
 8000bde:	0112      	lsls	r2, r2, #4
 8000be0:	1ad3      	subs	r3, r2, r3
 8000be2:	005b      	lsls	r3, r3, #1
 8000be4:	b298      	uxth	r0, r3
 8000be6:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000bea:	220c      	movs	r2, #12
 8000bec:	2150      	movs	r1, #80	@ 0x50
 8000bee:	f001 f811 	bl	8001c14 <LCD_Draw_Circle_Fill>
 8000bf2:	e00d      	b.n	8000c10 <Screen2_Display+0xdc>
            }
        }
        else{
            LCD_Draw_Circle_Fill((i*30)+30, 80, 12, LCD_COLOR_GREY);
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	3301      	adds	r3, #1
 8000bf8:	b29b      	uxth	r3, r3
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	0112      	lsls	r2, r2, #4
 8000bfe:	1ad3      	subs	r3, r2, r3
 8000c00:	005b      	lsls	r3, r3, #1
 8000c02:	b298      	uxth	r0, r3
 8000c04:	f24f 73de 	movw	r3, #63454	@ 0xf7de
 8000c08:	220c      	movs	r2, #12
 8000c0a:	2150      	movs	r1, #80	@ 0x50
 8000c0c:	f001 f802 	bl	8001c14 <LCD_Draw_Circle_Fill>
    for (int i = 0; i<boardColumns; i++){
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	3301      	adds	r3, #1
 8000c14:	60fb      	str	r3, [r7, #12]
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	2b06      	cmp	r3, #6
 8000c1a:	ddc4      	ble.n	8000ba6 <Screen2_Display+0x72>
        }
    }

    for (int i = 0; i<boardColumns; i++){
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	60bb      	str	r3, [r7, #8]
 8000c20:	e065      	b.n	8000cee <Screen2_Display+0x1ba>
        for (int j = 0; j<boardRows; j++){
 8000c22:	2300      	movs	r3, #0
 8000c24:	607b      	str	r3, [r7, #4]
 8000c26:	e05c      	b.n	8000ce2 <Screen2_Display+0x1ae>
            if (gameBoard[i][j] == 1){
 8000c28:	4938      	ldr	r1, [pc, #224]	@ (8000d0c <Screen2_Display+0x1d8>)
 8000c2a:	68ba      	ldr	r2, [r7, #8]
 8000c2c:	4613      	mov	r3, r2
 8000c2e:	005b      	lsls	r3, r3, #1
 8000c30:	4413      	add	r3, r2
 8000c32:	005b      	lsls	r3, r3, #1
 8000c34:	18ca      	adds	r2, r1, r3
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	4413      	add	r3, r2
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	2b01      	cmp	r3, #1
 8000c3e:	d115      	bne.n	8000c6c <Screen2_Display+0x138>
                LCD_Draw_Circle_Fill((i*30)+30, (j*30)+115, 12, LCD_COLOR_BLUE);
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	3301      	adds	r3, #1
 8000c44:	b29b      	uxth	r3, r3
 8000c46:	461a      	mov	r2, r3
 8000c48:	0112      	lsls	r2, r2, #4
 8000c4a:	1ad3      	subs	r3, r2, r3
 8000c4c:	005b      	lsls	r3, r3, #1
 8000c4e:	b298      	uxth	r0, r3
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	b29b      	uxth	r3, r3
 8000c54:	461a      	mov	r2, r3
 8000c56:	0112      	lsls	r2, r2, #4
 8000c58:	1ad3      	subs	r3, r2, r3
 8000c5a:	005b      	lsls	r3, r3, #1
 8000c5c:	b29b      	uxth	r3, r3
 8000c5e:	3373      	adds	r3, #115	@ 0x73
 8000c60:	b299      	uxth	r1, r3
 8000c62:	231f      	movs	r3, #31
 8000c64:	220c      	movs	r2, #12
 8000c66:	f000 ffd5 	bl	8001c14 <LCD_Draw_Circle_Fill>
 8000c6a:	e037      	b.n	8000cdc <Screen2_Display+0x1a8>
            }
            else if (gameBoard[i][j] == 2){
 8000c6c:	4927      	ldr	r1, [pc, #156]	@ (8000d0c <Screen2_Display+0x1d8>)
 8000c6e:	68ba      	ldr	r2, [r7, #8]
 8000c70:	4613      	mov	r3, r2
 8000c72:	005b      	lsls	r3, r3, #1
 8000c74:	4413      	add	r3, r2
 8000c76:	005b      	lsls	r3, r3, #1
 8000c78:	18ca      	adds	r2, r1, r3
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	2b02      	cmp	r3, #2
 8000c82:	d116      	bne.n	8000cb2 <Screen2_Display+0x17e>
                LCD_Draw_Circle_Fill((i*30)+30, (j*30)+115, 12, LCD_COLOR_RED);
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	3301      	adds	r3, #1
 8000c88:	b29b      	uxth	r3, r3
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	0112      	lsls	r2, r2, #4
 8000c8e:	1ad3      	subs	r3, r2, r3
 8000c90:	005b      	lsls	r3, r3, #1
 8000c92:	b298      	uxth	r0, r3
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	b29b      	uxth	r3, r3
 8000c98:	461a      	mov	r2, r3
 8000c9a:	0112      	lsls	r2, r2, #4
 8000c9c:	1ad3      	subs	r3, r2, r3
 8000c9e:	005b      	lsls	r3, r3, #1
 8000ca0:	b29b      	uxth	r3, r3
 8000ca2:	3373      	adds	r3, #115	@ 0x73
 8000ca4:	b299      	uxth	r1, r3
 8000ca6:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000caa:	220c      	movs	r2, #12
 8000cac:	f000 ffb2 	bl	8001c14 <LCD_Draw_Circle_Fill>
 8000cb0:	e014      	b.n	8000cdc <Screen2_Display+0x1a8>
            }
            else{
                LCD_Draw_Circle_Fill((i*30)+30, (j*30)+115, 12, LCD_COLOR_BLACK);
 8000cb2:	68bb      	ldr	r3, [r7, #8]
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	b29b      	uxth	r3, r3
 8000cb8:	461a      	mov	r2, r3
 8000cba:	0112      	lsls	r2, r2, #4
 8000cbc:	1ad3      	subs	r3, r2, r3
 8000cbe:	005b      	lsls	r3, r3, #1
 8000cc0:	b298      	uxth	r0, r3
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	b29b      	uxth	r3, r3
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	0112      	lsls	r2, r2, #4
 8000cca:	1ad3      	subs	r3, r2, r3
 8000ccc:	005b      	lsls	r3, r3, #1
 8000cce:	b29b      	uxth	r3, r3
 8000cd0:	3373      	adds	r3, #115	@ 0x73
 8000cd2:	b299      	uxth	r1, r3
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	220c      	movs	r2, #12
 8000cd8:	f000 ff9c 	bl	8001c14 <LCD_Draw_Circle_Fill>
        for (int j = 0; j<boardRows; j++){
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	3301      	adds	r3, #1
 8000ce0:	607b      	str	r3, [r7, #4]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2b05      	cmp	r3, #5
 8000ce6:	dd9f      	ble.n	8000c28 <Screen2_Display+0xf4>
    for (int i = 0; i<boardColumns; i++){
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	3301      	adds	r3, #1
 8000cec:	60bb      	str	r3, [r7, #8]
 8000cee:	68bb      	ldr	r3, [r7, #8]
 8000cf0:	2b06      	cmp	r3, #6
 8000cf2:	dd96      	ble.n	8000c22 <Screen2_Display+0xee>
            }
        }
    }
}
 8000cf4:	bf00      	nop
 8000cf6:	bf00      	nop
 8000cf8:	3710      	adds	r7, #16
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	20000008 	.word	0x20000008
 8000d04:	20000000 	.word	0x20000000
 8000d08:	20000001 	.word	0x20000001
 8000d0c:	20000058 	.word	0x20000058

08000d10 <Screen3_Display>:

void Screen3_Display(void){
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b086      	sub	sp, #24
 8000d14:	af00      	add	r7, sp, #0
    LCD_Clear(0, LCD_COLOR_GREY);
 8000d16:	f24f 71de 	movw	r1, #63454	@ 0xf7de
 8000d1a:	2000      	movs	r0, #0
 8000d1c:	f000 ffce 	bl	8001cbc <LCD_Clear>
    
    LCD_SetFont(&Font16x24);
 8000d20:	48d4      	ldr	r0, [pc, #848]	@ (8001074 <Screen3_Display+0x364>)
 8000d22:	f000 fffd 	bl	8001d20 <LCD_SetFont>
    LCD_SetTextColor(LCD_COLOR_BLACK);
 8000d26:	2000      	movs	r0, #0
 8000d28:	f000 ffea 	bl	8001d00 <LCD_SetTextColor>
    LCD_DisplayChar(20, 20, 'C');
 8000d2c:	2243      	movs	r2, #67	@ 0x43
 8000d2e:	2114      	movs	r1, #20
 8000d30:	2014      	movs	r0, #20
 8000d32:	f001 f873 	bl	8001e1c <LCD_DisplayChar>
    LCD_DisplayChar(40, 20, 'O');
 8000d36:	224f      	movs	r2, #79	@ 0x4f
 8000d38:	2114      	movs	r1, #20
 8000d3a:	2028      	movs	r0, #40	@ 0x28
 8000d3c:	f001 f86e 	bl	8001e1c <LCD_DisplayChar>
    LCD_DisplayChar(60, 20, 'N');
 8000d40:	224e      	movs	r2, #78	@ 0x4e
 8000d42:	2114      	movs	r1, #20
 8000d44:	203c      	movs	r0, #60	@ 0x3c
 8000d46:	f001 f869 	bl	8001e1c <LCD_DisplayChar>
    LCD_DisplayChar(80, 20, 'N');
 8000d4a:	224e      	movs	r2, #78	@ 0x4e
 8000d4c:	2114      	movs	r1, #20
 8000d4e:	2050      	movs	r0, #80	@ 0x50
 8000d50:	f001 f864 	bl	8001e1c <LCD_DisplayChar>
    LCD_DisplayChar(100, 20, 'E');
 8000d54:	2245      	movs	r2, #69	@ 0x45
 8000d56:	2114      	movs	r1, #20
 8000d58:	2064      	movs	r0, #100	@ 0x64
 8000d5a:	f001 f85f 	bl	8001e1c <LCD_DisplayChar>
    LCD_DisplayChar(120, 20, 'C');
 8000d5e:	2243      	movs	r2, #67	@ 0x43
 8000d60:	2114      	movs	r1, #20
 8000d62:	2078      	movs	r0, #120	@ 0x78
 8000d64:	f001 f85a 	bl	8001e1c <LCD_DisplayChar>
    LCD_DisplayChar(140, 20, 'T');
 8000d68:	2254      	movs	r2, #84	@ 0x54
 8000d6a:	2114      	movs	r1, #20
 8000d6c:	208c      	movs	r0, #140	@ 0x8c
 8000d6e:	f001 f855 	bl	8001e1c <LCD_DisplayChar>
    LCD_DisplayChar(180, 20, '4');
 8000d72:	2234      	movs	r2, #52	@ 0x34
 8000d74:	2114      	movs	r1, #20
 8000d76:	20b4      	movs	r0, #180	@ 0xb4
 8000d78:	f001 f850 	bl	8001e1c <LCD_DisplayChar>

    char score1 = (char)(player1_Score+48);
 8000d7c:	4bbe      	ldr	r3, [pc, #760]	@ (8001078 <Screen3_Display+0x368>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	3330      	adds	r3, #48	@ 0x30
 8000d82:	73fb      	strb	r3, [r7, #15]
	char score2 = (char)(player2_Score+48);
 8000d84:	4bbd      	ldr	r3, [pc, #756]	@ (800107c <Screen3_Display+0x36c>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	3330      	adds	r3, #48	@ 0x30
 8000d8a:	73bb      	strb	r3, [r7, #14]

    LCD_SetFont(&Font12x12);
 8000d8c:	48bc      	ldr	r0, [pc, #752]	@ (8001080 <Screen3_Display+0x370>)
 8000d8e:	f000 ffc7 	bl	8001d20 <LCD_SetFont>
	LCD_DisplayChar(20, 45, 'P');
 8000d92:	2250      	movs	r2, #80	@ 0x50
 8000d94:	212d      	movs	r1, #45	@ 0x2d
 8000d96:	2014      	movs	r0, #20
 8000d98:	f001 f840 	bl	8001e1c <LCD_DisplayChar>
    LCD_DisplayChar(30, 45, 'L');
 8000d9c:	224c      	movs	r2, #76	@ 0x4c
 8000d9e:	212d      	movs	r1, #45	@ 0x2d
 8000da0:	201e      	movs	r0, #30
 8000da2:	f001 f83b 	bl	8001e1c <LCD_DisplayChar>
    LCD_DisplayChar(40, 45, 'A');
 8000da6:	2241      	movs	r2, #65	@ 0x41
 8000da8:	212d      	movs	r1, #45	@ 0x2d
 8000daa:	2028      	movs	r0, #40	@ 0x28
 8000dac:	f001 f836 	bl	8001e1c <LCD_DisplayChar>
    LCD_DisplayChar(50, 45, 'Y');
 8000db0:	2259      	movs	r2, #89	@ 0x59
 8000db2:	212d      	movs	r1, #45	@ 0x2d
 8000db4:	2032      	movs	r0, #50	@ 0x32
 8000db6:	f001 f831 	bl	8001e1c <LCD_DisplayChar>
    LCD_DisplayChar(60, 45, 'E');
 8000dba:	2245      	movs	r2, #69	@ 0x45
 8000dbc:	212d      	movs	r1, #45	@ 0x2d
 8000dbe:	203c      	movs	r0, #60	@ 0x3c
 8000dc0:	f001 f82c 	bl	8001e1c <LCD_DisplayChar>
    LCD_DisplayChar(70, 45, 'R');
 8000dc4:	2252      	movs	r2, #82	@ 0x52
 8000dc6:	212d      	movs	r1, #45	@ 0x2d
 8000dc8:	2046      	movs	r0, #70	@ 0x46
 8000dca:	f001 f827 	bl	8001e1c <LCD_DisplayChar>
    LCD_DisplayChar(85, 45, '1');
 8000dce:	2231      	movs	r2, #49	@ 0x31
 8000dd0:	212d      	movs	r1, #45	@ 0x2d
 8000dd2:	2055      	movs	r0, #85	@ 0x55
 8000dd4:	f001 f822 	bl	8001e1c <LCD_DisplayChar>
    LCD_DisplayChar(25, 60, 'S');
 8000dd8:	2253      	movs	r2, #83	@ 0x53
 8000dda:	213c      	movs	r1, #60	@ 0x3c
 8000ddc:	2019      	movs	r0, #25
 8000dde:	f001 f81d 	bl	8001e1c <LCD_DisplayChar>
    LCD_DisplayChar(35, 60, 'C');
 8000de2:	2243      	movs	r2, #67	@ 0x43
 8000de4:	213c      	movs	r1, #60	@ 0x3c
 8000de6:	2023      	movs	r0, #35	@ 0x23
 8000de8:	f001 f818 	bl	8001e1c <LCD_DisplayChar>
    LCD_DisplayChar(45, 60, 'O');
 8000dec:	224f      	movs	r2, #79	@ 0x4f
 8000dee:	213c      	movs	r1, #60	@ 0x3c
 8000df0:	202d      	movs	r0, #45	@ 0x2d
 8000df2:	f001 f813 	bl	8001e1c <LCD_DisplayChar>
    LCD_DisplayChar(55, 60, 'R');
 8000df6:	2252      	movs	r2, #82	@ 0x52
 8000df8:	213c      	movs	r1, #60	@ 0x3c
 8000dfa:	2037      	movs	r0, #55	@ 0x37
 8000dfc:	f001 f80e 	bl	8001e1c <LCD_DisplayChar>
	LCD_DisplayChar(65, 60, 'E');
 8000e00:	2245      	movs	r2, #69	@ 0x45
 8000e02:	213c      	movs	r1, #60	@ 0x3c
 8000e04:	2041      	movs	r0, #65	@ 0x41
 8000e06:	f001 f809 	bl	8001e1c <LCD_DisplayChar>
	LCD_DisplayChar(75, 60, ':');
 8000e0a:	223a      	movs	r2, #58	@ 0x3a
 8000e0c:	213c      	movs	r1, #60	@ 0x3c
 8000e0e:	204b      	movs	r0, #75	@ 0x4b
 8000e10:	f001 f804 	bl	8001e1c <LCD_DisplayChar>
	LCD_DisplayChar(85, 60, score1);
 8000e14:	7bfb      	ldrb	r3, [r7, #15]
 8000e16:	461a      	mov	r2, r3
 8000e18:	213c      	movs	r1, #60	@ 0x3c
 8000e1a:	2055      	movs	r0, #85	@ 0x55
 8000e1c:	f000 fffe 	bl	8001e1c <LCD_DisplayChar>

    LCD_DisplayChar(140, 45, 'P');
 8000e20:	2250      	movs	r2, #80	@ 0x50
 8000e22:	212d      	movs	r1, #45	@ 0x2d
 8000e24:	208c      	movs	r0, #140	@ 0x8c
 8000e26:	f000 fff9 	bl	8001e1c <LCD_DisplayChar>
    LCD_DisplayChar(150, 45, 'L');
 8000e2a:	224c      	movs	r2, #76	@ 0x4c
 8000e2c:	212d      	movs	r1, #45	@ 0x2d
 8000e2e:	2096      	movs	r0, #150	@ 0x96
 8000e30:	f000 fff4 	bl	8001e1c <LCD_DisplayChar>
    LCD_DisplayChar(160, 45, 'A');
 8000e34:	2241      	movs	r2, #65	@ 0x41
 8000e36:	212d      	movs	r1, #45	@ 0x2d
 8000e38:	20a0      	movs	r0, #160	@ 0xa0
 8000e3a:	f000 ffef 	bl	8001e1c <LCD_DisplayChar>
    LCD_DisplayChar(170, 45, 'Y');
 8000e3e:	2259      	movs	r2, #89	@ 0x59
 8000e40:	212d      	movs	r1, #45	@ 0x2d
 8000e42:	20aa      	movs	r0, #170	@ 0xaa
 8000e44:	f000 ffea 	bl	8001e1c <LCD_DisplayChar>
    LCD_DisplayChar(180, 45, 'E');
 8000e48:	2245      	movs	r2, #69	@ 0x45
 8000e4a:	212d      	movs	r1, #45	@ 0x2d
 8000e4c:	20b4      	movs	r0, #180	@ 0xb4
 8000e4e:	f000 ffe5 	bl	8001e1c <LCD_DisplayChar>
    LCD_DisplayChar(190, 45, 'R');
 8000e52:	2252      	movs	r2, #82	@ 0x52
 8000e54:	212d      	movs	r1, #45	@ 0x2d
 8000e56:	20be      	movs	r0, #190	@ 0xbe
 8000e58:	f000 ffe0 	bl	8001e1c <LCD_DisplayChar>
    LCD_DisplayChar(205, 45, '2');
 8000e5c:	2232      	movs	r2, #50	@ 0x32
 8000e5e:	212d      	movs	r1, #45	@ 0x2d
 8000e60:	20cd      	movs	r0, #205	@ 0xcd
 8000e62:	f000 ffdb 	bl	8001e1c <LCD_DisplayChar>
    LCD_DisplayChar(145, 60, 'S');
 8000e66:	2253      	movs	r2, #83	@ 0x53
 8000e68:	213c      	movs	r1, #60	@ 0x3c
 8000e6a:	2091      	movs	r0, #145	@ 0x91
 8000e6c:	f000 ffd6 	bl	8001e1c <LCD_DisplayChar>
    LCD_DisplayChar(155, 60, 'C');
 8000e70:	2243      	movs	r2, #67	@ 0x43
 8000e72:	213c      	movs	r1, #60	@ 0x3c
 8000e74:	209b      	movs	r0, #155	@ 0x9b
 8000e76:	f000 ffd1 	bl	8001e1c <LCD_DisplayChar>
    LCD_DisplayChar(165, 60, 'O');
 8000e7a:	224f      	movs	r2, #79	@ 0x4f
 8000e7c:	213c      	movs	r1, #60	@ 0x3c
 8000e7e:	20a5      	movs	r0, #165	@ 0xa5
 8000e80:	f000 ffcc 	bl	8001e1c <LCD_DisplayChar>
    LCD_DisplayChar(175, 60, 'R');
 8000e84:	2252      	movs	r2, #82	@ 0x52
 8000e86:	213c      	movs	r1, #60	@ 0x3c
 8000e88:	20af      	movs	r0, #175	@ 0xaf
 8000e8a:	f000 ffc7 	bl	8001e1c <LCD_DisplayChar>
	LCD_DisplayChar(185, 60, 'E');
 8000e8e:	2245      	movs	r2, #69	@ 0x45
 8000e90:	213c      	movs	r1, #60	@ 0x3c
 8000e92:	20b9      	movs	r0, #185	@ 0xb9
 8000e94:	f000 ffc2 	bl	8001e1c <LCD_DisplayChar>
	LCD_DisplayChar(195, 60, ':');
 8000e98:	223a      	movs	r2, #58	@ 0x3a
 8000e9a:	213c      	movs	r1, #60	@ 0x3c
 8000e9c:	20c3      	movs	r0, #195	@ 0xc3
 8000e9e:	f000 ffbd 	bl	8001e1c <LCD_DisplayChar>
	LCD_DisplayChar(205, 60, score2);
 8000ea2:	7bbb      	ldrb	r3, [r7, #14]
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	213c      	movs	r1, #60	@ 0x3c
 8000ea8:	20cd      	movs	r0, #205	@ 0xcd
 8000eaa:	f000 ffb7 	bl	8001e1c <LCD_DisplayChar>

	LCD_DisplayChar(40, 80, 'T');
 8000eae:	2254      	movs	r2, #84	@ 0x54
 8000eb0:	2150      	movs	r1, #80	@ 0x50
 8000eb2:	2028      	movs	r0, #40	@ 0x28
 8000eb4:	f000 ffb2 	bl	8001e1c <LCD_DisplayChar>
	LCD_DisplayChar(50, 80, 'I');
 8000eb8:	2249      	movs	r2, #73	@ 0x49
 8000eba:	2150      	movs	r1, #80	@ 0x50
 8000ebc:	2032      	movs	r0, #50	@ 0x32
 8000ebe:	f000 ffad 	bl	8001e1c <LCD_DisplayChar>
	LCD_DisplayChar(55, 80, 'M');
 8000ec2:	224d      	movs	r2, #77	@ 0x4d
 8000ec4:	2150      	movs	r1, #80	@ 0x50
 8000ec6:	2037      	movs	r0, #55	@ 0x37
 8000ec8:	f000 ffa8 	bl	8001e1c <LCD_DisplayChar>
	LCD_DisplayChar(65, 80, 'E');
 8000ecc:	2245      	movs	r2, #69	@ 0x45
 8000ece:	2150      	movs	r1, #80	@ 0x50
 8000ed0:	2041      	movs	r0, #65	@ 0x41
 8000ed2:	f000 ffa3 	bl	8001e1c <LCD_DisplayChar>
	LCD_DisplayChar(80, 80, 'P');
 8000ed6:	2250      	movs	r2, #80	@ 0x50
 8000ed8:	2150      	movs	r1, #80	@ 0x50
 8000eda:	2050      	movs	r0, #80	@ 0x50
 8000edc:	f000 ff9e 	bl	8001e1c <LCD_DisplayChar>
	LCD_DisplayChar(90, 80, 'L');
 8000ee0:	224c      	movs	r2, #76	@ 0x4c
 8000ee2:	2150      	movs	r1, #80	@ 0x50
 8000ee4:	205a      	movs	r0, #90	@ 0x5a
 8000ee6:	f000 ff99 	bl	8001e1c <LCD_DisplayChar>
	LCD_DisplayChar(100, 80, 'A');
 8000eea:	2241      	movs	r2, #65	@ 0x41
 8000eec:	2150      	movs	r1, #80	@ 0x50
 8000eee:	2064      	movs	r0, #100	@ 0x64
 8000ef0:	f000 ff94 	bl	8001e1c <LCD_DisplayChar>
	LCD_DisplayChar(110, 80, 'Y');
 8000ef4:	2259      	movs	r2, #89	@ 0x59
 8000ef6:	2150      	movs	r1, #80	@ 0x50
 8000ef8:	206e      	movs	r0, #110	@ 0x6e
 8000efa:	f000 ff8f 	bl	8001e1c <LCD_DisplayChar>
	LCD_DisplayChar(120, 80, 'E');
 8000efe:	2245      	movs	r2, #69	@ 0x45
 8000f00:	2150      	movs	r1, #80	@ 0x50
 8000f02:	2078      	movs	r0, #120	@ 0x78
 8000f04:	f000 ff8a 	bl	8001e1c <LCD_DisplayChar>
	LCD_DisplayChar(130, 80, 'D');
 8000f08:	2244      	movs	r2, #68	@ 0x44
 8000f0a:	2150      	movs	r1, #80	@ 0x50
 8000f0c:	2082      	movs	r0, #130	@ 0x82
 8000f0e:	f000 ff85 	bl	8001e1c <LCD_DisplayChar>
	uint32_t seconds = timePlayed/1000;
 8000f12:	4b5c      	ldr	r3, [pc, #368]	@ (8001084 <Screen3_Display+0x374>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a5c      	ldr	r2, [pc, #368]	@ (8001088 <Screen3_Display+0x378>)
 8000f18:	fba2 2303 	umull	r2, r3, r2, r3
 8000f1c:	099b      	lsrs	r3, r3, #6
 8000f1e:	60bb      	str	r3, [r7, #8]
	uint32_t minutes = seconds/60;
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	4a5a      	ldr	r2, [pc, #360]	@ (800108c <Screen3_Display+0x37c>)
 8000f24:	fba2 2303 	umull	r2, r3, r2, r3
 8000f28:	095b      	lsrs	r3, r3, #5
 8000f2a:	607b      	str	r3, [r7, #4]
	seconds = seconds-(minutes*60);
 8000f2c:	687a      	ldr	r2, [r7, #4]
 8000f2e:	4613      	mov	r3, r2
 8000f30:	011b      	lsls	r3, r3, #4
 8000f32:	1a9b      	subs	r3, r3, r2
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	461a      	mov	r2, r3
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	1a9b      	subs	r3, r3, r2
 8000f3c:	60bb      	str	r3, [r7, #8]
	char msb_min = (char)((minutes/10)+48);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a53      	ldr	r2, [pc, #332]	@ (8001090 <Screen3_Display+0x380>)
 8000f42:	fba2 2303 	umull	r2, r3, r2, r3
 8000f46:	08db      	lsrs	r3, r3, #3
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	3330      	adds	r3, #48	@ 0x30
 8000f4c:	70fb      	strb	r3, [r7, #3]
	char lsb_min = (char)((minutes-((minutes/10)*10))+48);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	b2da      	uxtb	r2, r3
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	494e      	ldr	r1, [pc, #312]	@ (8001090 <Screen3_Display+0x380>)
 8000f56:	fba1 1303 	umull	r1, r3, r1, r3
 8000f5a:	08db      	lsrs	r3, r3, #3
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	4619      	mov	r1, r3
 8000f60:	0089      	lsls	r1, r1, #2
 8000f62:	440b      	add	r3, r1
 8000f64:	005b      	lsls	r3, r3, #1
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	3330      	adds	r3, #48	@ 0x30
 8000f6e:	70bb      	strb	r3, [r7, #2]
	char msb_sec = (char)((seconds/10)+48);
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	4a47      	ldr	r2, [pc, #284]	@ (8001090 <Screen3_Display+0x380>)
 8000f74:	fba2 2303 	umull	r2, r3, r2, r3
 8000f78:	08db      	lsrs	r3, r3, #3
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	3330      	adds	r3, #48	@ 0x30
 8000f7e:	707b      	strb	r3, [r7, #1]
	char lsb_sec = (char)((seconds-((seconds/10)*10))+48);
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	b2da      	uxtb	r2, r3
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	4942      	ldr	r1, [pc, #264]	@ (8001090 <Screen3_Display+0x380>)
 8000f88:	fba1 1303 	umull	r1, r3, r1, r3
 8000f8c:	08db      	lsrs	r3, r3, #3
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	4619      	mov	r1, r3
 8000f92:	0089      	lsls	r1, r1, #2
 8000f94:	440b      	add	r3, r1
 8000f96:	005b      	lsls	r3, r3, #1
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	1ad3      	subs	r3, r2, r3
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	3330      	adds	r3, #48	@ 0x30
 8000fa0:	703b      	strb	r3, [r7, #0]
	LCD_DisplayChar(150, 80, msb_min);
 8000fa2:	78fb      	ldrb	r3, [r7, #3]
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	2150      	movs	r1, #80	@ 0x50
 8000fa8:	2096      	movs	r0, #150	@ 0x96
 8000faa:	f000 ff37 	bl	8001e1c <LCD_DisplayChar>
	LCD_DisplayChar(160, 80, lsb_min);
 8000fae:	78bb      	ldrb	r3, [r7, #2]
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	2150      	movs	r1, #80	@ 0x50
 8000fb4:	20a0      	movs	r0, #160	@ 0xa0
 8000fb6:	f000 ff31 	bl	8001e1c <LCD_DisplayChar>
	LCD_DisplayChar(167, 80, ':');
 8000fba:	223a      	movs	r2, #58	@ 0x3a
 8000fbc:	2150      	movs	r1, #80	@ 0x50
 8000fbe:	20a7      	movs	r0, #167	@ 0xa7
 8000fc0:	f000 ff2c 	bl	8001e1c <LCD_DisplayChar>
	LCD_DisplayChar(170, 80, msb_sec);
 8000fc4:	787b      	ldrb	r3, [r7, #1]
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	2150      	movs	r1, #80	@ 0x50
 8000fca:	20aa      	movs	r0, #170	@ 0xaa
 8000fcc:	f000 ff26 	bl	8001e1c <LCD_DisplayChar>
	LCD_DisplayChar(180, 80, lsb_sec);
 8000fd0:	783b      	ldrb	r3, [r7, #0]
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	2150      	movs	r1, #80	@ 0x50
 8000fd6:	20b4      	movs	r0, #180	@ 0xb4
 8000fd8:	f000 ff20 	bl	8001e1c <LCD_DisplayChar>

    for (int i = 0; i<boardColumns; i++){
 8000fdc:	2300      	movs	r3, #0
 8000fde:	617b      	str	r3, [r7, #20]
 8000fe0:	e078      	b.n	80010d4 <Screen3_Display+0x3c4>
        for (int j = 0; j<boardRows; j++){
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	613b      	str	r3, [r7, #16]
 8000fe6:	e06f      	b.n	80010c8 <Screen3_Display+0x3b8>
            if (gameBoard[i][j] == 1){
 8000fe8:	492a      	ldr	r1, [pc, #168]	@ (8001094 <Screen3_Display+0x384>)
 8000fea:	697a      	ldr	r2, [r7, #20]
 8000fec:	4613      	mov	r3, r2
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	4413      	add	r3, r2
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	18ca      	adds	r2, r1, r3
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d115      	bne.n	800102c <Screen3_Display+0x31c>
                LCD_Draw_Circle_Fill((i*30)+30, (j*30)+115, 12, LCD_COLOR_BLUE);
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	3301      	adds	r3, #1
 8001004:	b29b      	uxth	r3, r3
 8001006:	461a      	mov	r2, r3
 8001008:	0112      	lsls	r2, r2, #4
 800100a:	1ad3      	subs	r3, r2, r3
 800100c:	005b      	lsls	r3, r3, #1
 800100e:	b298      	uxth	r0, r3
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	b29b      	uxth	r3, r3
 8001014:	461a      	mov	r2, r3
 8001016:	0112      	lsls	r2, r2, #4
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	b29b      	uxth	r3, r3
 800101e:	3373      	adds	r3, #115	@ 0x73
 8001020:	b299      	uxth	r1, r3
 8001022:	231f      	movs	r3, #31
 8001024:	220c      	movs	r2, #12
 8001026:	f000 fdf5 	bl	8001c14 <LCD_Draw_Circle_Fill>
 800102a:	e04a      	b.n	80010c2 <Screen3_Display+0x3b2>
            }
            else if (gameBoard[i][j] == 2){
 800102c:	4919      	ldr	r1, [pc, #100]	@ (8001094 <Screen3_Display+0x384>)
 800102e:	697a      	ldr	r2, [r7, #20]
 8001030:	4613      	mov	r3, r2
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	4413      	add	r3, r2
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	18ca      	adds	r2, r1, r3
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	4413      	add	r3, r2
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	2b02      	cmp	r3, #2
 8001042:	d129      	bne.n	8001098 <Screen3_Display+0x388>
                LCD_Draw_Circle_Fill((i*30)+30, (j*30)+115, 12, LCD_COLOR_RED);
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	3301      	adds	r3, #1
 8001048:	b29b      	uxth	r3, r3
 800104a:	461a      	mov	r2, r3
 800104c:	0112      	lsls	r2, r2, #4
 800104e:	1ad3      	subs	r3, r2, r3
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	b298      	uxth	r0, r3
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	b29b      	uxth	r3, r3
 8001058:	461a      	mov	r2, r3
 800105a:	0112      	lsls	r2, r2, #4
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	b29b      	uxth	r3, r3
 8001062:	3373      	adds	r3, #115	@ 0x73
 8001064:	b299      	uxth	r1, r3
 8001066:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800106a:	220c      	movs	r2, #12
 800106c:	f000 fdd2 	bl	8001c14 <LCD_Draw_Circle_Fill>
 8001070:	e027      	b.n	80010c2 <Screen3_Display+0x3b2>
 8001072:	bf00      	nop
 8001074:	20000008 	.word	0x20000008
 8001078:	20000045 	.word	0x20000045
 800107c:	20000046 	.word	0x20000046
 8001080:	20000010 	.word	0x20000010
 8001084:	20000050 	.word	0x20000050
 8001088:	10624dd3 	.word	0x10624dd3
 800108c:	88888889 	.word	0x88888889
 8001090:	cccccccd 	.word	0xcccccccd
 8001094:	20000058 	.word	0x20000058
            }
            else{
                LCD_Draw_Circle_Fill((i*30)+30, (j*30)+115, 12, LCD_COLOR_BLACK);
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	3301      	adds	r3, #1
 800109c:	b29b      	uxth	r3, r3
 800109e:	461a      	mov	r2, r3
 80010a0:	0112      	lsls	r2, r2, #4
 80010a2:	1ad3      	subs	r3, r2, r3
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	b298      	uxth	r0, r3
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	b29b      	uxth	r3, r3
 80010ac:	461a      	mov	r2, r3
 80010ae:	0112      	lsls	r2, r2, #4
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	b29b      	uxth	r3, r3
 80010b6:	3373      	adds	r3, #115	@ 0x73
 80010b8:	b299      	uxth	r1, r3
 80010ba:	2300      	movs	r3, #0
 80010bc:	220c      	movs	r2, #12
 80010be:	f000 fda9 	bl	8001c14 <LCD_Draw_Circle_Fill>
        for (int j = 0; j<boardRows; j++){
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	3301      	adds	r3, #1
 80010c6:	613b      	str	r3, [r7, #16]
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	2b05      	cmp	r3, #5
 80010cc:	dd8c      	ble.n	8000fe8 <Screen3_Display+0x2d8>
    for (int i = 0; i<boardColumns; i++){
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	3301      	adds	r3, #1
 80010d2:	617b      	str	r3, [r7, #20]
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	2b06      	cmp	r3, #6
 80010d8:	dd83      	ble.n	8000fe2 <Screen3_Display+0x2d2>
            }
        }
    }
    while (winner != 0);
 80010da:	bf00      	nop
 80010dc:	4b04      	ldr	r3, [pc, #16]	@ (80010f0 <Screen3_Display+0x3e0>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d1fb      	bne.n	80010dc <Screen3_Display+0x3cc>
    playGame();
 80010e4:	f7ff fa46 	bl	8000574 <playGame>
}
 80010e8:	bf00      	nop
 80010ea:	3718      	adds	r7, #24
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	20000044 	.word	0x20000044

080010f4 <moveAI>:

uint8_t moveAI(){
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b086      	sub	sp, #24
 80010f8:	af00      	add	r7, sp, #0
	uint8_t playerChecking =0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i< boardColumns; i++){
 80010fe:	2300      	movs	r3, #0
 8001100:	617b      	str	r3, [r7, #20]
 8001102:	e02e      	b.n	8001162 <moveAI+0x6e>
        for (int j = 0; j < boardRows; j++){
 8001104:	2300      	movs	r3, #0
 8001106:	613b      	str	r3, [r7, #16]
 8001108:	e025      	b.n	8001156 <moveAI+0x62>
            playerChecking = gameBoard[i][j];
 800110a:	4934      	ldr	r1, [pc, #208]	@ (80011dc <moveAI+0xe8>)
 800110c:	697a      	ldr	r2, [r7, #20]
 800110e:	4613      	mov	r3, r2
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	4413      	add	r3, r2
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	18ca      	adds	r2, r1, r3
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	4413      	add	r3, r2
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	71fb      	strb	r3, [r7, #7]
            if (playerChecking != 0){
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d014      	beq.n	8001150 <moveAI+0x5c>
                if(WinOrBlock(i, j)<8){
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	b2db      	uxtb	r3, r3
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	b2d2      	uxtb	r2, r2
 800112e:	4611      	mov	r1, r2
 8001130:	4618      	mov	r0, r3
 8001132:	f000 f855 	bl	80011e0 <WinOrBlock>
 8001136:	4603      	mov	r3, r0
 8001138:	2b07      	cmp	r3, #7
 800113a:	d809      	bhi.n	8001150 <moveAI+0x5c>
                    return WinOrBlock(i, j);
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	b2db      	uxtb	r3, r3
 8001140:	693a      	ldr	r2, [r7, #16]
 8001142:	b2d2      	uxtb	r2, r2
 8001144:	4611      	mov	r1, r2
 8001146:	4618      	mov	r0, r3
 8001148:	f000 f84a 	bl	80011e0 <WinOrBlock>
 800114c:	4603      	mov	r3, r0
 800114e:	e041      	b.n	80011d4 <moveAI+0xe0>
        for (int j = 0; j < boardRows; j++){
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	3301      	adds	r3, #1
 8001154:	613b      	str	r3, [r7, #16]
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	2b05      	cmp	r3, #5
 800115a:	ddd6      	ble.n	800110a <moveAI+0x16>
	for (int i = 0; i< boardColumns; i++){
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	3301      	adds	r3, #1
 8001160:	617b      	str	r3, [r7, #20]
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	2b06      	cmp	r3, #6
 8001166:	ddcd      	ble.n	8001104 <moveAI+0x10>
                }
            }
        }
    }
	for (int i = 0; i< boardColumns; i++){
 8001168:	2300      	movs	r3, #0
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	e02e      	b.n	80011cc <moveAI+0xd8>
        for (int j = 0; j < boardRows; j++){
 800116e:	2300      	movs	r3, #0
 8001170:	60bb      	str	r3, [r7, #8]
 8001172:	e025      	b.n	80011c0 <moveAI+0xcc>
            playerChecking = gameBoard[i][j];
 8001174:	4919      	ldr	r1, [pc, #100]	@ (80011dc <moveAI+0xe8>)
 8001176:	68fa      	ldr	r2, [r7, #12]
 8001178:	4613      	mov	r3, r2
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	4413      	add	r3, r2
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	18ca      	adds	r2, r1, r3
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	4413      	add	r3, r2
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	71fb      	strb	r3, [r7, #7]
            if (playerChecking != 0){
 800118a:	79fb      	ldrb	r3, [r7, #7]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d014      	beq.n	80011ba <moveAI+0xc6>
				if(twoAway(i, j)<8){
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	b2db      	uxtb	r3, r3
 8001194:	68ba      	ldr	r2, [r7, #8]
 8001196:	b2d2      	uxtb	r2, r2
 8001198:	4611      	mov	r1, r2
 800119a:	4618      	mov	r0, r3
 800119c:	f000 f8f8 	bl	8001390 <twoAway>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b07      	cmp	r3, #7
 80011a4:	d809      	bhi.n	80011ba <moveAI+0xc6>
					return twoAway(i, j);
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	68ba      	ldr	r2, [r7, #8]
 80011ac:	b2d2      	uxtb	r2, r2
 80011ae:	4611      	mov	r1, r2
 80011b0:	4618      	mov	r0, r3
 80011b2:	f000 f8ed 	bl	8001390 <twoAway>
 80011b6:	4603      	mov	r3, r0
 80011b8:	e00c      	b.n	80011d4 <moveAI+0xe0>
        for (int j = 0; j < boardRows; j++){
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	3301      	adds	r3, #1
 80011be:	60bb      	str	r3, [r7, #8]
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	2b05      	cmp	r3, #5
 80011c4:	ddd6      	ble.n	8001174 <moveAI+0x80>
	for (int i = 0; i< boardColumns; i++){
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	3301      	adds	r3, #1
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	2b06      	cmp	r3, #6
 80011d0:	ddcd      	ble.n	800116e <moveAI+0x7a>
				}
            }
        }
    }
	return 3;
 80011d2:	2303      	movs	r3, #3
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3718      	adds	r7, #24
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	20000058 	.word	0x20000058

080011e0 <WinOrBlock>:

uint8_t WinOrBlock(uint8_t i, uint8_t j){
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	460a      	mov	r2, r1
 80011ea:	71fb      	strb	r3, [r7, #7]
 80011ec:	4613      	mov	r3, r2
 80011ee:	71bb      	strb	r3, [r7, #6]
	if(CheckWinningMove(i, j, 1, 0)<8){
 80011f0:	79f8      	ldrb	r0, [r7, #7]
 80011f2:	79b9      	ldrb	r1, [r7, #6]
 80011f4:	2300      	movs	r3, #0
 80011f6:	2201      	movs	r2, #1
 80011f8:	f000 f844 	bl	8001284 <CheckWinningMove>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b07      	cmp	r3, #7
 8001200:	d807      	bhi.n	8001212 <WinOrBlock+0x32>
		return CheckWinningMove(i, j, 1, 0);
 8001202:	79f8      	ldrb	r0, [r7, #7]
 8001204:	79b9      	ldrb	r1, [r7, #6]
 8001206:	2300      	movs	r3, #0
 8001208:	2201      	movs	r2, #1
 800120a:	f000 f83b 	bl	8001284 <CheckWinningMove>
 800120e:	4603      	mov	r3, r0
 8001210:	e034      	b.n	800127c <WinOrBlock+0x9c>
	}
	if(CheckWinningMove(i, j, 0, 1)<8){
 8001212:	79f8      	ldrb	r0, [r7, #7]
 8001214:	79b9      	ldrb	r1, [r7, #6]
 8001216:	2301      	movs	r3, #1
 8001218:	2200      	movs	r2, #0
 800121a:	f000 f833 	bl	8001284 <CheckWinningMove>
 800121e:	4603      	mov	r3, r0
 8001220:	2b07      	cmp	r3, #7
 8001222:	d807      	bhi.n	8001234 <WinOrBlock+0x54>
		return CheckWinningMove(i, j, 0, 1);
 8001224:	79f8      	ldrb	r0, [r7, #7]
 8001226:	79b9      	ldrb	r1, [r7, #6]
 8001228:	2301      	movs	r3, #1
 800122a:	2200      	movs	r2, #0
 800122c:	f000 f82a 	bl	8001284 <CheckWinningMove>
 8001230:	4603      	mov	r3, r0
 8001232:	e023      	b.n	800127c <WinOrBlock+0x9c>
	}
	if(CheckWinningMove(i, j, 1, 1)<8){
 8001234:	79f8      	ldrb	r0, [r7, #7]
 8001236:	79b9      	ldrb	r1, [r7, #6]
 8001238:	2301      	movs	r3, #1
 800123a:	2201      	movs	r2, #1
 800123c:	f000 f822 	bl	8001284 <CheckWinningMove>
 8001240:	4603      	mov	r3, r0
 8001242:	2b07      	cmp	r3, #7
 8001244:	d807      	bhi.n	8001256 <WinOrBlock+0x76>
		return CheckWinningMove(i, j, 1, 1);
 8001246:	79f8      	ldrb	r0, [r7, #7]
 8001248:	79b9      	ldrb	r1, [r7, #6]
 800124a:	2301      	movs	r3, #1
 800124c:	2201      	movs	r2, #1
 800124e:	f000 f819 	bl	8001284 <CheckWinningMove>
 8001252:	4603      	mov	r3, r0
 8001254:	e012      	b.n	800127c <WinOrBlock+0x9c>
	}
	if(CheckWinningMove(i, j, 1, -1)){
 8001256:	79f8      	ldrb	r0, [r7, #7]
 8001258:	79b9      	ldrb	r1, [r7, #6]
 800125a:	f04f 33ff 	mov.w	r3, #4294967295
 800125e:	2201      	movs	r2, #1
 8001260:	f000 f810 	bl	8001284 <CheckWinningMove>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d007      	beq.n	800127a <WinOrBlock+0x9a>
		return CheckWinningMove(i, j, 1, 0);
 800126a:	79f8      	ldrb	r0, [r7, #7]
 800126c:	79b9      	ldrb	r1, [r7, #6]
 800126e:	2300      	movs	r3, #0
 8001270:	2201      	movs	r2, #1
 8001272:	f000 f807 	bl	8001284 <CheckWinningMove>
 8001276:	4603      	mov	r3, r0
 8001278:	e000      	b.n	800127c <WinOrBlock+0x9c>
	}
	return 8;
 800127a:	2308      	movs	r3, #8
}
 800127c:	4618      	mov	r0, r3
 800127e:	3708      	adds	r7, #8
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}

08001284 <CheckWinningMove>:

uint8_t CheckWinningMove(int i, int j, int dir_i, int dir_j){
 8001284:	b490      	push	{r4, r7}
 8001286:	b086      	sub	sp, #24
 8001288:	af00      	add	r7, sp, #0
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	607a      	str	r2, [r7, #4]
 8001290:	603b      	str	r3, [r7, #0]
    for (int k = 1; k < 3; k++){
 8001292:	2301      	movs	r3, #1
 8001294:	617b      	str	r3, [r7, #20]
 8001296:	e048      	b.n	800132a <CheckWinningMove+0xa6>
        if ((i+dir_i*k)>boardColumns || (i+dir_i*k)<0){
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	697a      	ldr	r2, [r7, #20]
 800129c:	fb03 f202 	mul.w	r2, r3, r2
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	4413      	add	r3, r2
 80012a4:	2b07      	cmp	r3, #7
 80012a6:	dc07      	bgt.n	80012b8 <CheckWinningMove+0x34>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	697a      	ldr	r2, [r7, #20]
 80012ac:	fb03 f202 	mul.w	r2, r3, r2
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	4413      	add	r3, r2
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	da01      	bge.n	80012bc <CheckWinningMove+0x38>
            return 8;
 80012b8:	2308      	movs	r3, #8
 80012ba:	e061      	b.n	8001380 <CheckWinningMove+0xfc>
        }
        if ((j+dir_j*k)>boardRows || (j+dir_j*k)<0){
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	697a      	ldr	r2, [r7, #20]
 80012c0:	fb03 f202 	mul.w	r2, r3, r2
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	4413      	add	r3, r2
 80012c8:	2b06      	cmp	r3, #6
 80012ca:	dc07      	bgt.n	80012dc <CheckWinningMove+0x58>
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	697a      	ldr	r2, [r7, #20]
 80012d0:	fb03 f202 	mul.w	r2, r3, r2
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	4413      	add	r3, r2
 80012d8:	2b00      	cmp	r3, #0
 80012da:	da01      	bge.n	80012e0 <CheckWinningMove+0x5c>
            return 8;
 80012dc:	2308      	movs	r3, #8
 80012de:	e04f      	b.n	8001380 <CheckWinningMove+0xfc>
        }
        if (gameBoard[i][j] != gameBoard[i+dir_i*k][j+dir_j*k]){
 80012e0:	492a      	ldr	r1, [pc, #168]	@ (800138c <CheckWinningMove+0x108>)
 80012e2:	68fa      	ldr	r2, [r7, #12]
 80012e4:	4613      	mov	r3, r2
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	4413      	add	r3, r2
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	18ca      	adds	r2, r1, r3
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	4413      	add	r3, r2
 80012f2:	7819      	ldrb	r1, [r3, #0]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	697a      	ldr	r2, [r7, #20]
 80012f8:	fb03 f202 	mul.w	r2, r3, r2
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	441a      	add	r2, r3
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	6978      	ldr	r0, [r7, #20]
 8001304:	fb03 f000 	mul.w	r0, r3, r0
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	4418      	add	r0, r3
 800130c:	4c1f      	ldr	r4, [pc, #124]	@ (800138c <CheckWinningMove+0x108>)
 800130e:	4613      	mov	r3, r2
 8001310:	005b      	lsls	r3, r3, #1
 8001312:	4413      	add	r3, r2
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	4423      	add	r3, r4
 8001318:	4403      	add	r3, r0
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	4299      	cmp	r1, r3
 800131e:	d001      	beq.n	8001324 <CheckWinningMove+0xa0>
            return 8;
 8001320:	2308      	movs	r3, #8
 8001322:	e02d      	b.n	8001380 <CheckWinningMove+0xfc>
    for (int k = 1; k < 3; k++){
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	3301      	adds	r3, #1
 8001328:	617b      	str	r3, [r7, #20]
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	2b02      	cmp	r3, #2
 800132e:	ddb3      	ble.n	8001298 <CheckWinningMove+0x14>
        }
    }
	if((i+dir_i*4)>boardColumns || (j+dir_j*4)>boardRows || gameBoard[i+dir_i*4][j+dir_j*4] != 0){
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	009a      	lsls	r2, r3, #2
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	4413      	add	r3, r2
 8001338:	2b07      	cmp	r3, #7
 800133a:	dc17      	bgt.n	800136c <CheckWinningMove+0xe8>
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	009a      	lsls	r2, r3, #2
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	4413      	add	r3, r2
 8001344:	2b06      	cmp	r3, #6
 8001346:	dc11      	bgt.n	800136c <CheckWinningMove+0xe8>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	009a      	lsls	r2, r3, #2
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	441a      	add	r2, r3
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	0099      	lsls	r1, r3, #2
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	4419      	add	r1, r3
 8001358:	480c      	ldr	r0, [pc, #48]	@ (800138c <CheckWinningMove+0x108>)
 800135a:	4613      	mov	r3, r2
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	4413      	add	r3, r2
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	4403      	add	r3, r0
 8001364:	440b      	add	r3, r1
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <CheckWinningMove+0xec>
		return 8;
 800136c:	2308      	movs	r3, #8
 800136e:	e007      	b.n	8001380 <CheckWinningMove+0xfc>
	}
    return i+dir_i*4;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	b2db      	uxtb	r3, r3
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	b2da      	uxtb	r2, r3
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	b2db      	uxtb	r3, r3
 800137c:	4413      	add	r3, r2
 800137e:	b2db      	uxtb	r3, r3

}
 8001380:	4618      	mov	r0, r3
 8001382:	3718      	adds	r7, #24
 8001384:	46bd      	mov	sp, r7
 8001386:	bc90      	pop	{r4, r7}
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	20000058 	.word	0x20000058

08001390 <twoAway>:

uint8_t twoAway(uint8_t i, uint8_t j){
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	460a      	mov	r2, r1
 800139a:	71fb      	strb	r3, [r7, #7]
 800139c:	4613      	mov	r3, r2
 800139e:	71bb      	strb	r3, [r7, #6]
	if(CheckTwoAway(i, j, 1, 0)<8){
 80013a0:	79f8      	ldrb	r0, [r7, #7]
 80013a2:	79b9      	ldrb	r1, [r7, #6]
 80013a4:	2300      	movs	r3, #0
 80013a6:	2201      	movs	r2, #1
 80013a8:	f000 f844 	bl	8001434 <CheckTwoAway>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b07      	cmp	r3, #7
 80013b0:	d807      	bhi.n	80013c2 <twoAway+0x32>
		return CheckTwoAway(i, j, 1, 0);
 80013b2:	79f8      	ldrb	r0, [r7, #7]
 80013b4:	79b9      	ldrb	r1, [r7, #6]
 80013b6:	2300      	movs	r3, #0
 80013b8:	2201      	movs	r2, #1
 80013ba:	f000 f83b 	bl	8001434 <CheckTwoAway>
 80013be:	4603      	mov	r3, r0
 80013c0:	e034      	b.n	800142c <twoAway+0x9c>
	}
	if(CheckTwoAway(i, j, 0, 1)<8){
 80013c2:	79f8      	ldrb	r0, [r7, #7]
 80013c4:	79b9      	ldrb	r1, [r7, #6]
 80013c6:	2301      	movs	r3, #1
 80013c8:	2200      	movs	r2, #0
 80013ca:	f000 f833 	bl	8001434 <CheckTwoAway>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b07      	cmp	r3, #7
 80013d2:	d807      	bhi.n	80013e4 <twoAway+0x54>
		return CheckTwoAway(i, j, 0, 1);
 80013d4:	79f8      	ldrb	r0, [r7, #7]
 80013d6:	79b9      	ldrb	r1, [r7, #6]
 80013d8:	2301      	movs	r3, #1
 80013da:	2200      	movs	r2, #0
 80013dc:	f000 f82a 	bl	8001434 <CheckTwoAway>
 80013e0:	4603      	mov	r3, r0
 80013e2:	e023      	b.n	800142c <twoAway+0x9c>
	}
	if(CheckTwoAway(i, j, 1, 1)<8){
 80013e4:	79f8      	ldrb	r0, [r7, #7]
 80013e6:	79b9      	ldrb	r1, [r7, #6]
 80013e8:	2301      	movs	r3, #1
 80013ea:	2201      	movs	r2, #1
 80013ec:	f000 f822 	bl	8001434 <CheckTwoAway>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b07      	cmp	r3, #7
 80013f4:	d807      	bhi.n	8001406 <twoAway+0x76>
		return CheckTwoAway(i, j, 1, 1);
 80013f6:	79f8      	ldrb	r0, [r7, #7]
 80013f8:	79b9      	ldrb	r1, [r7, #6]
 80013fa:	2301      	movs	r3, #1
 80013fc:	2201      	movs	r2, #1
 80013fe:	f000 f819 	bl	8001434 <CheckTwoAway>
 8001402:	4603      	mov	r3, r0
 8001404:	e012      	b.n	800142c <twoAway+0x9c>
	}
	if(CheckTwoAway(i, j, 1, -1)){
 8001406:	79f8      	ldrb	r0, [r7, #7]
 8001408:	79b9      	ldrb	r1, [r7, #6]
 800140a:	f04f 33ff 	mov.w	r3, #4294967295
 800140e:	2201      	movs	r2, #1
 8001410:	f000 f810 	bl	8001434 <CheckTwoAway>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d007      	beq.n	800142a <twoAway+0x9a>
		return CheckTwoAway(i, j, 1, 0);
 800141a:	79f8      	ldrb	r0, [r7, #7]
 800141c:	79b9      	ldrb	r1, [r7, #6]
 800141e:	2300      	movs	r3, #0
 8001420:	2201      	movs	r2, #1
 8001422:	f000 f807 	bl	8001434 <CheckTwoAway>
 8001426:	4603      	mov	r3, r0
 8001428:	e000      	b.n	800142c <twoAway+0x9c>
	}
	return 8;
 800142a:	2308      	movs	r3, #8
}
 800142c:	4618      	mov	r0, r3
 800142e:	3708      	adds	r7, #8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}

08001434 <CheckTwoAway>:

uint8_t CheckTwoAway(int i, int j, int dir_i, int dir_j){
 8001434:	b490      	push	{r4, r7}
 8001436:	b086      	sub	sp, #24
 8001438:	af00      	add	r7, sp, #0
 800143a:	60f8      	str	r0, [r7, #12]
 800143c:	60b9      	str	r1, [r7, #8]
 800143e:	607a      	str	r2, [r7, #4]
 8001440:	603b      	str	r3, [r7, #0]
    for (int k = 1; k < 2; k++){
 8001442:	2301      	movs	r3, #1
 8001444:	617b      	str	r3, [r7, #20]
 8001446:	e048      	b.n	80014da <CheckTwoAway+0xa6>
        if ((i+dir_i*k)>boardColumns || (i+dir_i*k)<0){
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	697a      	ldr	r2, [r7, #20]
 800144c:	fb03 f202 	mul.w	r2, r3, r2
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	4413      	add	r3, r2
 8001454:	2b07      	cmp	r3, #7
 8001456:	dc07      	bgt.n	8001468 <CheckTwoAway+0x34>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	697a      	ldr	r2, [r7, #20]
 800145c:	fb03 f202 	mul.w	r2, r3, r2
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	4413      	add	r3, r2
 8001464:	2b00      	cmp	r3, #0
 8001466:	da01      	bge.n	800146c <CheckTwoAway+0x38>
            return 8;
 8001468:	2308      	movs	r3, #8
 800146a:	e06b      	b.n	8001544 <CheckTwoAway+0x110>
        }
        if ((j+dir_j*k)>boardRows || (j+dir_j*k)<0){
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	697a      	ldr	r2, [r7, #20]
 8001470:	fb03 f202 	mul.w	r2, r3, r2
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	4413      	add	r3, r2
 8001478:	2b06      	cmp	r3, #6
 800147a:	dc07      	bgt.n	800148c <CheckTwoAway+0x58>
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	697a      	ldr	r2, [r7, #20]
 8001480:	fb03 f202 	mul.w	r2, r3, r2
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	4413      	add	r3, r2
 8001488:	2b00      	cmp	r3, #0
 800148a:	da01      	bge.n	8001490 <CheckTwoAway+0x5c>
            return 8;
 800148c:	2308      	movs	r3, #8
 800148e:	e059      	b.n	8001544 <CheckTwoAway+0x110>
        }
        if (gameBoard[i][j] != gameBoard[i+dir_i*k][j+dir_j*k]){
 8001490:	492f      	ldr	r1, [pc, #188]	@ (8001550 <CheckTwoAway+0x11c>)
 8001492:	68fa      	ldr	r2, [r7, #12]
 8001494:	4613      	mov	r3, r2
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	4413      	add	r3, r2
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	18ca      	adds	r2, r1, r3
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	4413      	add	r3, r2
 80014a2:	7819      	ldrb	r1, [r3, #0]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	697a      	ldr	r2, [r7, #20]
 80014a8:	fb03 f202 	mul.w	r2, r3, r2
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	441a      	add	r2, r3
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	6978      	ldr	r0, [r7, #20]
 80014b4:	fb03 f000 	mul.w	r0, r3, r0
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	4418      	add	r0, r3
 80014bc:	4c24      	ldr	r4, [pc, #144]	@ (8001550 <CheckTwoAway+0x11c>)
 80014be:	4613      	mov	r3, r2
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	4413      	add	r3, r2
 80014c4:	005b      	lsls	r3, r3, #1
 80014c6:	4423      	add	r3, r4
 80014c8:	4403      	add	r3, r0
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	4299      	cmp	r1, r3
 80014ce:	d001      	beq.n	80014d4 <CheckTwoAway+0xa0>
            return 8;
 80014d0:	2308      	movs	r3, #8
 80014d2:	e037      	b.n	8001544 <CheckTwoAway+0x110>
    for (int k = 1; k < 2; k++){
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	3301      	adds	r3, #1
 80014d8:	617b      	str	r3, [r7, #20]
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	2b01      	cmp	r3, #1
 80014de:	ddb3      	ble.n	8001448 <CheckTwoAway+0x14>
        }
    }
	if((i+dir_i*3)>boardColumns || (j+dir_j*3)>boardRows || gameBoard[i+dir_i*3][j+dir_j*3] != 0){
 80014e0:	687a      	ldr	r2, [r7, #4]
 80014e2:	4613      	mov	r3, r2
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	441a      	add	r2, r3
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	4413      	add	r3, r2
 80014ec:	2b07      	cmp	r3, #7
 80014ee:	dc1d      	bgt.n	800152c <CheckTwoAway+0xf8>
 80014f0:	683a      	ldr	r2, [r7, #0]
 80014f2:	4613      	mov	r3, r2
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	441a      	add	r2, r3
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	4413      	add	r3, r2
 80014fc:	2b06      	cmp	r3, #6
 80014fe:	dc15      	bgt.n	800152c <CheckTwoAway+0xf8>
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	4613      	mov	r3, r2
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	441a      	add	r2, r3
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	441a      	add	r2, r3
 800150c:	6839      	ldr	r1, [r7, #0]
 800150e:	460b      	mov	r3, r1
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	4419      	add	r1, r3
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	4419      	add	r1, r3
 8001518:	480d      	ldr	r0, [pc, #52]	@ (8001550 <CheckTwoAway+0x11c>)
 800151a:	4613      	mov	r3, r2
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	4413      	add	r3, r2
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	4403      	add	r3, r0
 8001524:	440b      	add	r3, r1
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <CheckTwoAway+0xfc>
		return 8;
 800152c:	2308      	movs	r3, #8
 800152e:	e009      	b.n	8001544 <CheckTwoAway+0x110>
	}
    return i+dir_i*3;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	b2db      	uxtb	r3, r3
 8001534:	461a      	mov	r2, r3
 8001536:	0052      	lsls	r2, r2, #1
 8001538:	4413      	add	r3, r2
 800153a:	b2da      	uxtb	r2, r3
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	b2db      	uxtb	r3, r3
 8001540:	4413      	add	r3, r2
 8001542:	b2db      	uxtb	r3, r3

}
 8001544:	4618      	mov	r0, r3
 8001546:	3718      	adds	r7, #24
 8001548:	46bd      	mov	sp, r7
 800154a:	bc90      	pop	{r4, r7}
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	20000058 	.word	0x20000058

08001554 <EXTI0_IRQHandler>:
		}
	}
}

	
void EXTI0_IRQHandler(){
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8001558:	2006      	movs	r0, #6
 800155a:	f002 fb0a 	bl	8003b72 <HAL_NVIC_DisableIRQ>
	if(winner == 0){
 800155e:	4b08      	ldr	r3, [pc, #32]	@ (8001580 <EXTI0_IRQHandler+0x2c>)
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d102      	bne.n	800156c <EXTI0_IRQHandler+0x18>
		drop();
 8001566:	f7ff f8b1 	bl	80006cc <drop>
 800156a:	e001      	b.n	8001570 <EXTI0_IRQHandler+0x1c>
	}
	else{
		newGame();
 800156c:	f7ff f86e 	bl	800064c <newGame>
	}
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);
 8001570:	4b04      	ldr	r3, [pc, #16]	@ (8001584 <EXTI0_IRQHandler+0x30>)
 8001572:	2201      	movs	r2, #1
 8001574:	615a      	str	r2, [r3, #20]
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001576:	2006      	movs	r0, #6
 8001578:	f002 faed 	bl	8003b56 <HAL_NVIC_EnableIRQ>
}
 800157c:	bf00      	nop
 800157e:	bd80      	pop	{r7, pc}
 8001580:	20000044 	.word	0x20000044
 8001584:	40013c00 	.word	0x40013c00

08001588 <Button_Init_Interrupt>:
#include "Button_Driver.h"



void Button_Init_Interrupt(){
 8001588:	b580      	push	{r7, lr}
 800158a:	b086      	sub	sp, #24
 800158c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef PinConfig;
	PinConfig.Mode = GPIO_MODE_IT_RISING;
 800158e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001592:	60bb      	str	r3, [r7, #8]
	PinConfig.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001594:	2301      	movs	r3, #1
 8001596:	613b      	str	r3, [r7, #16]
	PinConfig.Pull = GPIO_NOPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	60fb      	str	r3, [r7, #12]
	PinConfig.Pin = GPIO_PIN_0;
 800159c:	2301      	movs	r3, #1
 800159e:	607b      	str	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80015a0:	2300      	movs	r3, #0
 80015a2:	603b      	str	r3, [r7, #0]
 80015a4:	4b0b      	ldr	r3, [pc, #44]	@ (80015d4 <Button_Init_Interrupt+0x4c>)
 80015a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a8:	4a0a      	ldr	r2, [pc, #40]	@ (80015d4 <Button_Init_Interrupt+0x4c>)
 80015aa:	f043 0301 	orr.w	r3, r3, #1
 80015ae:	6313      	str	r3, [r2, #48]	@ 0x30
 80015b0:	4b08      	ldr	r3, [pc, #32]	@ (80015d4 <Button_Init_Interrupt+0x4c>)
 80015b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b4:	f003 0301 	and.w	r3, r3, #1
 80015b8:	603b      	str	r3, [r7, #0]
 80015ba:	683b      	ldr	r3, [r7, #0]
	HAL_GPIO_Init(GPIOA, &PinConfig);
 80015bc:	1d3b      	adds	r3, r7, #4
 80015be:	4619      	mov	r1, r3
 80015c0:	4805      	ldr	r0, [pc, #20]	@ (80015d8 <Button_Init_Interrupt+0x50>)
 80015c2:	f002 faf1 	bl	8003ba8 <HAL_GPIO_Init>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80015c6:	2006      	movs	r0, #6
 80015c8:	f002 fac5 	bl	8003b56 <HAL_NVIC_EnableIRQ>
}
 80015cc:	bf00      	nop
 80015ce:	3718      	adds	r7, #24
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	40023800 	.word	0x40023800
 80015d8:	40020000 	.word	0x40020000

080015dc <Gyro_Init>:

static HAL_StatusTypeDef HAL_Status;

static SPI_HandleTypeDef hspi5;

void Gyro_Init(){
 80015dc:	b580      	push	{r7, lr}
 80015de:	b098      	sub	sp, #96	@ 0x60
 80015e0:	af00      	add	r7, sp, #0
		__HAL_RCC_GPIOF_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	60bb      	str	r3, [r7, #8]
 80015e6:	4b65      	ldr	r3, [pc, #404]	@ (800177c <Gyro_Init+0x1a0>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ea:	4a64      	ldr	r2, [pc, #400]	@ (800177c <Gyro_Init+0x1a0>)
 80015ec:	f043 0320 	orr.w	r3, r3, #32
 80015f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015f2:	4b62      	ldr	r3, [pc, #392]	@ (800177c <Gyro_Init+0x1a0>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f6:	f003 0320 	and.w	r3, r3, #32
 80015fa:	60bb      	str	r3, [r7, #8]
 80015fc:	68bb      	ldr	r3, [r7, #8]
		__HAL_RCC_GPIOC_CLK_ENABLE();
 80015fe:	2300      	movs	r3, #0
 8001600:	607b      	str	r3, [r7, #4]
 8001602:	4b5e      	ldr	r3, [pc, #376]	@ (800177c <Gyro_Init+0x1a0>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001606:	4a5d      	ldr	r2, [pc, #372]	@ (800177c <Gyro_Init+0x1a0>)
 8001608:	f043 0304 	orr.w	r3, r3, #4
 800160c:	6313      	str	r3, [r2, #48]	@ 0x30
 800160e:	4b5b      	ldr	r3, [pc, #364]	@ (800177c <Gyro_Init+0x1a0>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001612:	f003 0304 	and.w	r3, r3, #4
 8001616:	607b      	str	r3, [r7, #4]
 8001618:	687b      	ldr	r3, [r7, #4]
		__HAL_RCC_SPI5_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	603b      	str	r3, [r7, #0]
 800161e:	4b57      	ldr	r3, [pc, #348]	@ (800177c <Gyro_Init+0x1a0>)
 8001620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001622:	4a56      	ldr	r2, [pc, #344]	@ (800177c <Gyro_Init+0x1a0>)
 8001624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001628:	6453      	str	r3, [r2, #68]	@ 0x44
 800162a:	4b54      	ldr	r3, [pc, #336]	@ (800177c <Gyro_Init+0x1a0>)
 800162c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800162e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001632:	603b      	str	r3, [r7, #0]
 8001634:	683b      	ldr	r3, [r7, #0]

	GPIO_InitTypeDef PinConfig0;
	PinConfig0.Mode = GPIO_MODE_AF_PP;
 8001636:	2302      	movs	r3, #2
 8001638:	64fb      	str	r3, [r7, #76]	@ 0x4c
	PinConfig0.Pull = GPIO_NOPULL;
 800163a:	2300      	movs	r3, #0
 800163c:	653b      	str	r3, [r7, #80]	@ 0x50
	PinConfig0.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800163e:	2301      	movs	r3, #1
 8001640:	657b      	str	r3, [r7, #84]	@ 0x54
	PinConfig0.Alternate = GPIO_AF5_SPI5;
 8001642:	2305      	movs	r3, #5
 8001644:	65bb      	str	r3, [r7, #88]	@ 0x58
	PinConfig0.Pin = GPIO_PIN_7;
 8001646:	2380      	movs	r3, #128	@ 0x80
 8001648:	64bb      	str	r3, [r7, #72]	@ 0x48
	HAL_GPIO_Init(GPIOF, &PinConfig0);
 800164a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800164e:	4619      	mov	r1, r3
 8001650:	484b      	ldr	r0, [pc, #300]	@ (8001780 <Gyro_Init+0x1a4>)
 8001652:	f002 faa9 	bl	8003ba8 <HAL_GPIO_Init>

	GPIO_InitTypeDef PinConfig1;
	PinConfig1.Mode = GPIO_MODE_AF_PP;
 8001656:	2302      	movs	r3, #2
 8001658:	63bb      	str	r3, [r7, #56]	@ 0x38
	PinConfig1.Pull = GPIO_NOPULL;
 800165a:	2300      	movs	r3, #0
 800165c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	PinConfig1.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800165e:	2301      	movs	r3, #1
 8001660:	643b      	str	r3, [r7, #64]	@ 0x40
	PinConfig1.Alternate = GPIO_AF5_SPI5;
 8001662:	2305      	movs	r3, #5
 8001664:	647b      	str	r3, [r7, #68]	@ 0x44
	PinConfig1.Pin = GPIO_PIN_8;
 8001666:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800166a:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(GPIOF, &PinConfig1);
 800166c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001670:	4619      	mov	r1, r3
 8001672:	4843      	ldr	r0, [pc, #268]	@ (8001780 <Gyro_Init+0x1a4>)
 8001674:	f002 fa98 	bl	8003ba8 <HAL_GPIO_Init>

	GPIO_InitTypeDef PinConfig2;
	PinConfig2.Mode = GPIO_MODE_AF_PP;
 8001678:	2302      	movs	r3, #2
 800167a:	627b      	str	r3, [r7, #36]	@ 0x24
	PinConfig2.Pull = GPIO_NOPULL;
 800167c:	2300      	movs	r3, #0
 800167e:	62bb      	str	r3, [r7, #40]	@ 0x28
	PinConfig2.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001680:	2301      	movs	r3, #1
 8001682:	62fb      	str	r3, [r7, #44]	@ 0x2c
	PinConfig2.Alternate = GPIO_AF5_SPI5;
 8001684:	2305      	movs	r3, #5
 8001686:	633b      	str	r3, [r7, #48]	@ 0x30
	PinConfig2.Pin = GPIO_PIN_9;
 8001688:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800168c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOF, &PinConfig2);
 800168e:	f107 0320 	add.w	r3, r7, #32
 8001692:	4619      	mov	r1, r3
 8001694:	483a      	ldr	r0, [pc, #232]	@ (8001780 <Gyro_Init+0x1a4>)
 8001696:	f002 fa87 	bl	8003ba8 <HAL_GPIO_Init>

	GPIO_InitTypeDef PinConfig3;
	PinConfig3.Mode = GPIO_MODE_OUTPUT_PP;
 800169a:	2301      	movs	r3, #1
 800169c:	613b      	str	r3, [r7, #16]
	PinConfig3.Pull = GPIO_NOPULL;
 800169e:	2300      	movs	r3, #0
 80016a0:	617b      	str	r3, [r7, #20]
	PinConfig3.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80016a2:	2301      	movs	r3, #1
 80016a4:	61bb      	str	r3, [r7, #24]
	PinConfig3.Pin = GPIO_PIN_1;
 80016a6:	2302      	movs	r3, #2
 80016a8:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOC, &PinConfig3);
 80016aa:	f107 030c 	add.w	r3, r7, #12
 80016ae:	4619      	mov	r1, r3
 80016b0:	4834      	ldr	r0, [pc, #208]	@ (8001784 <Gyro_Init+0x1a8>)
 80016b2:	f002 fa79 	bl	8003ba8 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 1);
 80016b6:	2201      	movs	r2, #1
 80016b8:	2102      	movs	r1, #2
 80016ba:	4832      	ldr	r0, [pc, #200]	@ (8001784 <Gyro_Init+0x1a8>)
 80016bc:	f002 fd44 	bl	8004148 <HAL_GPIO_WritePin>

	hspi5.Instance = SPI5;
 80016c0:	4b31      	ldr	r3, [pc, #196]	@ (8001788 <Gyro_Init+0x1ac>)
 80016c2:	4a32      	ldr	r2, [pc, #200]	@ (800178c <Gyro_Init+0x1b0>)
 80016c4:	601a      	str	r2, [r3, #0]
	hspi5.Init.Mode = SPI_MODE_MASTER;
 80016c6:	4b30      	ldr	r3, [pc, #192]	@ (8001788 <Gyro_Init+0x1ac>)
 80016c8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80016cc:	605a      	str	r2, [r3, #4]
	hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80016ce:	4b2e      	ldr	r3, [pc, #184]	@ (8001788 <Gyro_Init+0x1ac>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	609a      	str	r2, [r3, #8]
	hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80016d4:	4b2c      	ldr	r3, [pc, #176]	@ (8001788 <Gyro_Init+0x1ac>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	60da      	str	r2, [r3, #12]
	hspi5.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80016da:	4b2b      	ldr	r3, [pc, #172]	@ (8001788 <Gyro_Init+0x1ac>)
 80016dc:	2202      	movs	r2, #2
 80016de:	611a      	str	r2, [r3, #16]
	hspi5.Init.CLKPhase = SPI_PHASE_2EDGE;
 80016e0:	4b29      	ldr	r3, [pc, #164]	@ (8001788 <Gyro_Init+0x1ac>)
 80016e2:	2201      	movs	r2, #1
 80016e4:	615a      	str	r2, [r3, #20]
	hspi5.Init.NSS = SPI_NSS_SOFT;
 80016e6:	4b28      	ldr	r3, [pc, #160]	@ (8001788 <Gyro_Init+0x1ac>)
 80016e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016ec:	619a      	str	r2, [r3, #24]
	hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80016ee:	4b26      	ldr	r3, [pc, #152]	@ (8001788 <Gyro_Init+0x1ac>)
 80016f0:	2210      	movs	r2, #16
 80016f2:	61da      	str	r2, [r3, #28]
	hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016f4:	4b24      	ldr	r3, [pc, #144]	@ (8001788 <Gyro_Init+0x1ac>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	621a      	str	r2, [r3, #32]
	hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80016fa:	4b23      	ldr	r3, [pc, #140]	@ (8001788 <Gyro_Init+0x1ac>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_Status = HAL_SPI_Init(&hspi5);
 8001700:	4821      	ldr	r0, [pc, #132]	@ (8001788 <Gyro_Init+0x1ac>)
 8001702:	f004 feef 	bl	80064e4 <HAL_SPI_Init>
 8001706:	4603      	mov	r3, r0
 8001708:	461a      	mov	r2, r3
 800170a:	4b21      	ldr	r3, [pc, #132]	@ (8001790 <Gyro_Init+0x1b4>)
 800170c:	701a      	strb	r2, [r3, #0]

	Gyro_Power();
 800170e:	f000 f85d 	bl	80017cc <Gyro_Power>
	uint8_t CR5_Config = 0;
 8001712:	2300      	movs	r3, #0
 8001714:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	CR5_Config |= (GYRO_CR5_REBOOTMEMCONTENT);
 8001718:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800171c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001720:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	CR5_Config |= (GYRO_CR5_FIFO);
 8001724:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8001728:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800172c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	Gyro_ConfigureReg(GYRO_CR5, CR5_Config);
 8001730:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8001734:	4619      	mov	r1, r3
 8001736:	2024      	movs	r0, #36	@ 0x24
 8001738:	f000 f85e 	bl	80017f8 <Gyro_ConfigureReg>
	uint8_t CR1_Config = 0;
 800173c:	2300      	movs	r3, #0
 800173e:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
	CR1_Config |= GYRO_CR1_POWERDOWN_NORMAL_ENABLE;
 8001742:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8001746:	f043 0308 	orr.w	r3, r3, #8
 800174a:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
	CR1_Config |= GYRO_CR1_BANDWIDTH_SET;
 800174e:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8001752:	f043 0310 	orr.w	r3, r3, #16
 8001756:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
	CR1_Config |= GYRO_CR1_Y_ENABLE;
 800175a:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 800175e:	f043 0302 	orr.w	r3, r3, #2
 8001762:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
	Gyro_ConfigureReg(GYRO_CR1, CR1_Config);
 8001766:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 800176a:	4619      	mov	r1, r3
 800176c:	2020      	movs	r0, #32
 800176e:	f000 f843 	bl	80017f8 <Gyro_ConfigureReg>
}
 8001772:	bf00      	nop
 8001774:	3760      	adds	r7, #96	@ 0x60
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	40023800 	.word	0x40023800
 8001780:	40021400 	.word	0x40021400
 8001784:	40020800 	.word	0x40020800
 8001788:	2000008c 	.word	0x2000008c
 800178c:	40015000 	.word	0x40015000
 8001790:	20000088 	.word	0x20000088

08001794 <Gyro_GetYLoc>:
int16_t Gyro_GetYLoc(){
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
	uint8_t yLow = Gyro_ReadReg(GYRO_OUT_Y_L);
 800179a:	202a      	movs	r0, #42	@ 0x2a
 800179c:	f000 f854 	bl	8001848 <Gyro_ReadReg>
 80017a0:	4603      	mov	r3, r0
 80017a2:	71fb      	strb	r3, [r7, #7]
	uint16_t yHigh = Gyro_ReadReg(GYRO_OUT_Y_H);
 80017a4:	202b      	movs	r0, #43	@ 0x2b
 80017a6:	f000 f84f 	bl	8001848 <Gyro_ReadReg>
 80017aa:	4603      	mov	r3, r0
 80017ac:	80bb      	strh	r3, [r7, #4]
	yHigh = yHigh << 8;
 80017ae:	88bb      	ldrh	r3, [r7, #4]
 80017b0:	021b      	lsls	r3, r3, #8
 80017b2:	80bb      	strh	r3, [r7, #4]
	int16_t yLoc = (int16_t)(yLow | yHigh);
 80017b4:	79fb      	ldrb	r3, [r7, #7]
 80017b6:	b29a      	uxth	r2, r3
 80017b8:	88bb      	ldrh	r3, [r7, #4]
 80017ba:	4313      	orrs	r3, r2
 80017bc:	b29b      	uxth	r3, r3
 80017be:	807b      	strh	r3, [r7, #2]
	return yLoc;
 80017c0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3708      	adds	r7, #8
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}

080017cc <Gyro_Power>:
void Gyro_GetPrintID	(){
	uint8_t ID = Gyro_ReadReg(GYRO_WHO_AM_I);
	printf("Gyro ID: 0x%02X\n", ID);
}

void Gyro_Power(){
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
	uint8_t CR1_Config = 0;
 80017d2:	2300      	movs	r3, #0
 80017d4:	71fb      	strb	r3, [r7, #7]
	CR1_Config |= GYRO_CR1_POWERDOWN_NORMAL_ENABLE;
 80017d6:	79fb      	ldrb	r3, [r7, #7]
 80017d8:	f043 0308 	orr.w	r3, r3, #8
 80017dc:	71fb      	strb	r3, [r7, #7]
	Gyro_ConfigureReg(GYRO_CR1, CR1_Config);
 80017de:	79fb      	ldrb	r3, [r7, #7]
 80017e0:	4619      	mov	r1, r3
 80017e2:	2020      	movs	r0, #32
 80017e4:	f000 f808 	bl	80017f8 <Gyro_ConfigureReg>
	HAL_Delay(100);
 80017e8:	2064      	movs	r0, #100	@ 0x64
 80017ea:	f002 f875 	bl	80038d8 <HAL_Delay>
}
 80017ee:	bf00      	nop
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
	...

080017f8 <Gyro_ConfigureReg>:
void Gyro_GetPrintTemp(){
	uint8_t Temp = Gyro_ReadReg(GYRO_OUT_TEMP);
	printf("Temperature: %d\n", Temp);
}

void Gyro_ConfigureReg(uint16_t Reg, uint8_t data){
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	4603      	mov	r3, r0
 8001800:	460a      	mov	r2, r1
 8001802:	80fb      	strh	r3, [r7, #6]
 8001804:	4613      	mov	r3, r2
 8001806:	717b      	strb	r3, [r7, #5]
	uint16_t package = 0;
 8001808:	2300      	movs	r3, #0
 800180a:	81fb      	strh	r3, [r7, #14]
	package = SPI_WRITE | Reg ;
 800180c:	88fb      	ldrh	r3, [r7, #6]
 800180e:	81fb      	strh	r3, [r7, #14]
	package |= (data << SPI_DATA_OFFSET);
 8001810:	797b      	ldrb	r3, [r7, #5]
 8001812:	b21b      	sxth	r3, r3
 8001814:	021b      	lsls	r3, r3, #8
 8001816:	b21a      	sxth	r2, r3
 8001818:	89fb      	ldrh	r3, [r7, #14]
 800181a:	b21b      	sxth	r3, r3
 800181c:	4313      	orrs	r3, r2
 800181e:	b21b      	sxth	r3, r3
 8001820:	b29b      	uxth	r3, r3
 8001822:	81fb      	strh	r3, [r7, #14]
	Gyro_EnableSlaveConnection();
 8001824:	f000 f85a 	bl	80018dc <Gyro_EnableSlaveConnection>

	HAL_SPI_Transmit(&hspi5, (uint8_t*) &package, 2, timeout);
 8001828:	f107 010e 	add.w	r1, r7, #14
 800182c:	f640 2328 	movw	r3, #2600	@ 0xa28
 8001830:	2202      	movs	r2, #2
 8001832:	4804      	ldr	r0, [pc, #16]	@ (8001844 <Gyro_ConfigureReg+0x4c>)
 8001834:	f004 ff07 	bl	8006646 <HAL_SPI_Transmit>

	Gyro_DisableSlaveConnection();
 8001838:	f000 f85c 	bl	80018f4 <Gyro_DisableSlaveConnection>

}
 800183c:	bf00      	nop
 800183e:	3710      	adds	r7, #16
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	2000008c 	.word	0x2000008c

08001848 <Gyro_ReadReg>:

uint16_t Gyro_ReadReg(uint16_t Reg){
 8001848:	b580      	push	{r7, lr}
 800184a:	b086      	sub	sp, #24
 800184c:	af02      	add	r7, sp, #8
 800184e:	4603      	mov	r3, r0
 8001850:	80fb      	strh	r3, [r7, #6]
	uint8_t package = 0;
 8001852:	2300      	movs	r3, #0
 8001854:	737b      	strb	r3, [r7, #13]
	package = SPI_READ | Reg;
 8001856:	88fb      	ldrh	r3, [r7, #6]
 8001858:	b2db      	uxtb	r3, r3
 800185a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800185e:	b2db      	uxtb	r3, r3
 8001860:	737b      	strb	r3, [r7, #13]
	uint16_t data = 0;
 8001862:	2300      	movs	r3, #0
 8001864:	817b      	strh	r3, [r7, #10]
	Gyro_EnableSlaveConnection();
 8001866:	f000 f839 	bl	80018dc <Gyro_EnableSlaveConnection>

	while (HAL_GPIO_ReadPin(GYRO_CS_PORT, GYRO_CS_PIN) != GPIO_PIN_RESET);
 800186a:	bf00      	nop
 800186c:	2102      	movs	r1, #2
 800186e:	4810      	ldr	r0, [pc, #64]	@ (80018b0 <Gyro_ReadReg+0x68>)
 8001870:	f002 fc52 	bl	8004118 <HAL_GPIO_ReadPin>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d1f8      	bne.n	800186c <Gyro_ReadReg+0x24>
	HAL_Status = HAL_SPI_TransmitReceive(&hspi5, &package,(uint8_t*) &data, 2, timeout);
 800187a:	f107 020a 	add.w	r2, r7, #10
 800187e:	f107 010d 	add.w	r1, r7, #13
 8001882:	f640 2328 	movw	r3, #2600	@ 0xa28
 8001886:	9300      	str	r3, [sp, #0]
 8001888:	2302      	movs	r3, #2
 800188a:	480a      	ldr	r0, [pc, #40]	@ (80018b4 <Gyro_ReadReg+0x6c>)
 800188c:	f005 f81f 	bl	80068ce <HAL_SPI_TransmitReceive>
 8001890:	4603      	mov	r3, r0
 8001892:	461a      	mov	r2, r3
 8001894:	4b08      	ldr	r3, [pc, #32]	@ (80018b8 <Gyro_ReadReg+0x70>)
 8001896:	701a      	strb	r2, [r3, #0]
	Gyro_VerifyHAL();
 8001898:	f000 f810 	bl	80018bc <Gyro_VerifyHAL>
	uint16_t DataReturned = (0xFF00 & data) >> 8;
 800189c:	897b      	ldrh	r3, [r7, #10]
 800189e:	0a1b      	lsrs	r3, r3, #8
 80018a0:	81fb      	strh	r3, [r7, #14]
	Gyro_DisableSlaveConnection();
 80018a2:	f000 f827 	bl	80018f4 <Gyro_DisableSlaveConnection>
	return DataReturned;
 80018a6:	89fb      	ldrh	r3, [r7, #14]

}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3710      	adds	r7, #16
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	40020800 	.word	0x40020800
 80018b4:	2000008c 	.word	0x2000008c
 80018b8:	20000088 	.word	0x20000088

080018bc <Gyro_VerifyHAL>:

void Gyro_VerifyHAL(){
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
	while(HAL_Status != HAL_OK);
 80018c0:	bf00      	nop
 80018c2:	4b05      	ldr	r3, [pc, #20]	@ (80018d8 <Gyro_VerifyHAL+0x1c>)
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d1fb      	bne.n	80018c2 <Gyro_VerifyHAL+0x6>
}
 80018ca:	bf00      	nop
 80018cc:	bf00      	nop
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	20000088 	.word	0x20000088

080018dc <Gyro_EnableSlaveConnection>:

void Gyro_EnableSlaveConnection(){
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GYRO_CS_PORT, GYRO_CS_PIN, 0);
 80018e0:	2200      	movs	r2, #0
 80018e2:	2102      	movs	r1, #2
 80018e4:	4802      	ldr	r0, [pc, #8]	@ (80018f0 <Gyro_EnableSlaveConnection+0x14>)
 80018e6:	f002 fc2f 	bl	8004148 <HAL_GPIO_WritePin>
}
 80018ea:	bf00      	nop
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	40020800 	.word	0x40020800

080018f4 <Gyro_DisableSlaveConnection>:

void Gyro_DisableSlaveConnection(){
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GYRO_CS_PORT, GYRO_CS_PIN, 1);
 80018f8:	2201      	movs	r2, #1
 80018fa:	2102      	movs	r1, #2
 80018fc:	4802      	ldr	r0, [pc, #8]	@ (8001908 <Gyro_DisableSlaveConnection+0x14>)
 80018fe:	f002 fc23 	bl	8004148 <HAL_GPIO_WritePin>
}
 8001902:	bf00      	nop
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40020800 	.word	0x40020800

0800190c <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b08c      	sub	sp, #48	@ 0x30
 8001910:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001912:	2300      	movs	r3, #0
 8001914:	61bb      	str	r3, [r7, #24]
 8001916:	4b5a      	ldr	r3, [pc, #360]	@ (8001a80 <LCD_GPIO_Init+0x174>)
 8001918:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800191a:	4a59      	ldr	r2, [pc, #356]	@ (8001a80 <LCD_GPIO_Init+0x174>)
 800191c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001920:	6453      	str	r3, [r2, #68]	@ 0x44
 8001922:	4b57      	ldr	r3, [pc, #348]	@ (8001a80 <LCD_GPIO_Init+0x174>)
 8001924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001926:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800192a:	61bb      	str	r3, [r7, #24]
 800192c:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800192e:	2300      	movs	r3, #0
 8001930:	617b      	str	r3, [r7, #20]
 8001932:	4b53      	ldr	r3, [pc, #332]	@ (8001a80 <LCD_GPIO_Init+0x174>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001936:	4a52      	ldr	r2, [pc, #328]	@ (8001a80 <LCD_GPIO_Init+0x174>)
 8001938:	f043 0301 	orr.w	r3, r3, #1
 800193c:	6313      	str	r3, [r2, #48]	@ 0x30
 800193e:	4b50      	ldr	r3, [pc, #320]	@ (8001a80 <LCD_GPIO_Init+0x174>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001942:	f003 0301 	and.w	r3, r3, #1
 8001946:	617b      	str	r3, [r7, #20]
 8001948:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800194a:	2300      	movs	r3, #0
 800194c:	613b      	str	r3, [r7, #16]
 800194e:	4b4c      	ldr	r3, [pc, #304]	@ (8001a80 <LCD_GPIO_Init+0x174>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001952:	4a4b      	ldr	r2, [pc, #300]	@ (8001a80 <LCD_GPIO_Init+0x174>)
 8001954:	f043 0302 	orr.w	r3, r3, #2
 8001958:	6313      	str	r3, [r2, #48]	@ 0x30
 800195a:	4b49      	ldr	r3, [pc, #292]	@ (8001a80 <LCD_GPIO_Init+0x174>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800195e:	f003 0302 	and.w	r3, r3, #2
 8001962:	613b      	str	r3, [r7, #16]
 8001964:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001966:	2300      	movs	r3, #0
 8001968:	60fb      	str	r3, [r7, #12]
 800196a:	4b45      	ldr	r3, [pc, #276]	@ (8001a80 <LCD_GPIO_Init+0x174>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800196e:	4a44      	ldr	r2, [pc, #272]	@ (8001a80 <LCD_GPIO_Init+0x174>)
 8001970:	f043 0304 	orr.w	r3, r3, #4
 8001974:	6313      	str	r3, [r2, #48]	@ 0x30
 8001976:	4b42      	ldr	r3, [pc, #264]	@ (8001a80 <LCD_GPIO_Init+0x174>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800197a:	f003 0304 	and.w	r3, r3, #4
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001982:	2300      	movs	r3, #0
 8001984:	60bb      	str	r3, [r7, #8]
 8001986:	4b3e      	ldr	r3, [pc, #248]	@ (8001a80 <LCD_GPIO_Init+0x174>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800198a:	4a3d      	ldr	r2, [pc, #244]	@ (8001a80 <LCD_GPIO_Init+0x174>)
 800198c:	f043 0308 	orr.w	r3, r3, #8
 8001990:	6313      	str	r3, [r2, #48]	@ 0x30
 8001992:	4b3b      	ldr	r3, [pc, #236]	@ (8001a80 <LCD_GPIO_Init+0x174>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001996:	f003 0308 	and.w	r3, r3, #8
 800199a:	60bb      	str	r3, [r7, #8]
 800199c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800199e:	2300      	movs	r3, #0
 80019a0:	607b      	str	r3, [r7, #4]
 80019a2:	4b37      	ldr	r3, [pc, #220]	@ (8001a80 <LCD_GPIO_Init+0x174>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a6:	4a36      	ldr	r2, [pc, #216]	@ (8001a80 <LCD_GPIO_Init+0x174>)
 80019a8:	f043 0320 	orr.w	r3, r3, #32
 80019ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ae:	4b34      	ldr	r3, [pc, #208]	@ (8001a80 <LCD_GPIO_Init+0x174>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019b2:	f003 0320 	and.w	r3, r3, #32
 80019b6:	607b      	str	r3, [r7, #4]
 80019b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	603b      	str	r3, [r7, #0]
 80019be:	4b30      	ldr	r3, [pc, #192]	@ (8001a80 <LCD_GPIO_Init+0x174>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c2:	4a2f      	ldr	r2, [pc, #188]	@ (8001a80 <LCD_GPIO_Init+0x174>)
 80019c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80019c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ca:	4b2d      	ldr	r3, [pc, #180]	@ (8001a80 <LCD_GPIO_Init+0x174>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019d2:	603b      	str	r3, [r7, #0]
 80019d4:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 80019d6:	f641 0358 	movw	r3, #6232	@ 0x1858
 80019da:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80019dc:	2302      	movs	r3, #2
 80019de:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80019e0:	2300      	movs	r3, #0
 80019e2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80019e4:	2302      	movs	r3, #2
 80019e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 80019e8:	230e      	movs	r3, #14
 80019ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80019ec:	f107 031c 	add.w	r3, r7, #28
 80019f0:	4619      	mov	r1, r3
 80019f2:	4824      	ldr	r0, [pc, #144]	@ (8001a84 <LCD_GPIO_Init+0x178>)
 80019f4:	f002 f8d8 	bl	8003ba8 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 80019f8:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80019fc:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80019fe:	f107 031c 	add.w	r3, r7, #28
 8001a02:	4619      	mov	r1, r3
 8001a04:	4820      	ldr	r0, [pc, #128]	@ (8001a88 <LCD_GPIO_Init+0x17c>)
 8001a06:	f002 f8cf 	bl	8003ba8 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8001a0a:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8001a0e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001a10:	f107 031c 	add.w	r3, r7, #28
 8001a14:	4619      	mov	r1, r3
 8001a16:	481d      	ldr	r0, [pc, #116]	@ (8001a8c <LCD_GPIO_Init+0x180>)
 8001a18:	f002 f8c6 	bl	8003ba8 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8001a1c:	2348      	movs	r3, #72	@ 0x48
 8001a1e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001a20:	f107 031c 	add.w	r3, r7, #28
 8001a24:	4619      	mov	r1, r3
 8001a26:	481a      	ldr	r0, [pc, #104]	@ (8001a90 <LCD_GPIO_Init+0x184>)
 8001a28:	f002 f8be 	bl	8003ba8 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8001a2c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8001a32:	f107 031c 	add.w	r3, r7, #28
 8001a36:	4619      	mov	r1, r3
 8001a38:	4816      	ldr	r0, [pc, #88]	@ (8001a94 <LCD_GPIO_Init+0x188>)
 8001a3a:	f002 f8b5 	bl	8003ba8 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8001a3e:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8001a42:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001a44:	f107 031c 	add.w	r3, r7, #28
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4813      	ldr	r0, [pc, #76]	@ (8001a98 <LCD_GPIO_Init+0x18c>)
 8001a4c:	f002 f8ac 	bl	8003ba8 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8001a50:	2303      	movs	r3, #3
 8001a52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8001a54:	2309      	movs	r3, #9
 8001a56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001a58:	f107 031c 	add.w	r3, r7, #28
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	480a      	ldr	r0, [pc, #40]	@ (8001a88 <LCD_GPIO_Init+0x17c>)
 8001a60:	f002 f8a2 	bl	8003ba8 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8001a64:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001a68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001a6a:	f107 031c 	add.w	r3, r7, #28
 8001a6e:	4619      	mov	r1, r3
 8001a70:	4809      	ldr	r0, [pc, #36]	@ (8001a98 <LCD_GPIO_Init+0x18c>)
 8001a72:	f002 f899 	bl	8003ba8 <HAL_GPIO_Init>
}
 8001a76:	bf00      	nop
 8001a78:	3730      	adds	r7, #48	@ 0x30
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	40023800 	.word	0x40023800
 8001a84:	40020000 	.word	0x40020000
 8001a88:	40020400 	.word	0x40020400
 8001a8c:	40020800 	.word	0x40020800
 8001a90:	40020c00 	.word	0x40020c00
 8001a94:	40021400 	.word	0x40021400
 8001a98:	40021800 	.word	0x40021800

08001a9c <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b090      	sub	sp, #64	@ 0x40
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 8001aaa:	23f0      	movs	r3, #240	@ 0xf0
 8001aac:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 8001aae:	2300      	movs	r3, #0
 8001ab0:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 8001ab2:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001ab6:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 8001ab8:	2302      	movs	r3, #2
 8001aba:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8001abc:	23ff      	movs	r3, #255	@ 0xff
 8001abe:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001ac4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ac8:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001aca:	2305      	movs	r3, #5
 8001acc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 8001ace:	79fb      	ldrb	r3, [r7, #7]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d101      	bne.n	8001ad8 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 8001ad4:	4b0f      	ldr	r3, [pc, #60]	@ (8001b14 <LTCD_Layer_Init+0x78>)
 8001ad6:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 8001ad8:	23f0      	movs	r3, #240	@ 0xf0
 8001ada:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8001adc:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001ae0:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 8001aee:	2300      	movs	r3, #0
 8001af0:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 8001af4:	79fa      	ldrb	r2, [r7, #7]
 8001af6:	f107 030c 	add.w	r3, r7, #12
 8001afa:	4619      	mov	r1, r3
 8001afc:	4806      	ldr	r0, [pc, #24]	@ (8001b18 <LTCD_Layer_Init+0x7c>)
 8001afe:	f003 fcad 	bl	800545c <HAL_LTDC_ConfigLayer>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 8001b08:	f000 f9aa 	bl	8001e60 <LCD_Error_Handler>
	}
}
 8001b0c:	bf00      	nop
 8001b0e:	3740      	adds	r7, #64	@ 0x40
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	200001c0 	.word	0x200001c0
 8001b18:	200000e4 	.word	0x200000e4

08001b1c <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 8001b20:	4b2a      	ldr	r3, [pc, #168]	@ (8001bcc <LTCD__Init+0xb0>)
 8001b22:	4a2b      	ldr	r2, [pc, #172]	@ (8001bd0 <LTCD__Init+0xb4>)
 8001b24:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 8001b26:	4b29      	ldr	r3, [pc, #164]	@ (8001bcc <LTCD__Init+0xb0>)
 8001b28:	2209      	movs	r2, #9
 8001b2a:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 8001b2c:	4b27      	ldr	r3, [pc, #156]	@ (8001bcc <LTCD__Init+0xb0>)
 8001b2e:	2201      	movs	r2, #1
 8001b30:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 8001b32:	4b26      	ldr	r3, [pc, #152]	@ (8001bcc <LTCD__Init+0xb0>)
 8001b34:	221d      	movs	r2, #29
 8001b36:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8001b38:	4b24      	ldr	r3, [pc, #144]	@ (8001bcc <LTCD__Init+0xb0>)
 8001b3a:	2203      	movs	r2, #3
 8001b3c:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 8001b3e:	4b23      	ldr	r3, [pc, #140]	@ (8001bcc <LTCD__Init+0xb0>)
 8001b40:	f240 120d 	movw	r2, #269	@ 0x10d
 8001b44:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 8001b46:	4b21      	ldr	r3, [pc, #132]	@ (8001bcc <LTCD__Init+0xb0>)
 8001b48:	f240 1243 	movw	r2, #323	@ 0x143
 8001b4c:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 8001b4e:	4b1f      	ldr	r3, [pc, #124]	@ (8001bcc <LTCD__Init+0xb0>)
 8001b50:	f240 1217 	movw	r2, #279	@ 0x117
 8001b54:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 8001b56:	4b1d      	ldr	r3, [pc, #116]	@ (8001bcc <LTCD__Init+0xb0>)
 8001b58:	f240 1247 	movw	r2, #327	@ 0x147
 8001b5c:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 8001b5e:	4b1b      	ldr	r3, [pc, #108]	@ (8001bcc <LTCD__Init+0xb0>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 8001b66:	4b19      	ldr	r3, [pc, #100]	@ (8001bcc <LTCD__Init+0xb0>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 8001b6e:	4b17      	ldr	r3, [pc, #92]	@ (8001bcc <LTCD__Init+0xb0>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001b76:	4b17      	ldr	r3, [pc, #92]	@ (8001bd4 <LTCD__Init+0xb8>)
 8001b78:	2208      	movs	r2, #8
 8001b7a:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001b7c:	4b15      	ldr	r3, [pc, #84]	@ (8001bd4 <LTCD__Init+0xb8>)
 8001b7e:	22c0      	movs	r2, #192	@ 0xc0
 8001b80:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8001b82:	4b14      	ldr	r3, [pc, #80]	@ (8001bd4 <LTCD__Init+0xb8>)
 8001b84:	2204      	movs	r2, #4
 8001b86:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001b88:	4b12      	ldr	r3, [pc, #72]	@ (8001bd4 <LTCD__Init+0xb8>)
 8001b8a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001b8e:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8001b90:	4810      	ldr	r0, [pc, #64]	@ (8001bd4 <LTCD__Init+0xb8>)
 8001b92:	f004 fabd 	bl	8006110 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001b96:	4b0d      	ldr	r3, [pc, #52]	@ (8001bcc <LTCD__Init+0xb0>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8001bcc <LTCD__Init+0xb0>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001ba2:	4b0a      	ldr	r3, [pc, #40]	@ (8001bcc <LTCD__Init+0xb0>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001ba8:	4b08      	ldr	r3, [pc, #32]	@ (8001bcc <LTCD__Init+0xb0>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 8001bae:	f7ff fead 	bl	800190c <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001bb2:	4806      	ldr	r0, [pc, #24]	@ (8001bcc <LTCD__Init+0xb0>)
 8001bb4:	f003 fb82 	bl	80052bc <HAL_LTDC_Init>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 8001bbe:	f000 f94f 	bl	8001e60 <LCD_Error_Handler>
	 }

	ili9341_Init();
 8001bc2:	f000 f96a 	bl	8001e9a <ili9341_Init>
}
 8001bc6:	bf00      	nop
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	200000e4 	.word	0x200000e4
 8001bd0:	40016800 	.word	0x40016800
 8001bd4:	2000018c 	.word	0x2000018c

08001bd8 <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	4603      	mov	r3, r0
 8001be0:	80fb      	strh	r3, [r7, #6]
 8001be2:	460b      	mov	r3, r1
 8001be4:	80bb      	strh	r3, [r7, #4]
 8001be6:	4613      	mov	r3, r2
 8001be8:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 8001bea:	88ba      	ldrh	r2, [r7, #4]
 8001bec:	4613      	mov	r3, r2
 8001bee:	011b      	lsls	r3, r3, #4
 8001bf0:	1a9b      	subs	r3, r3, r2
 8001bf2:	011b      	lsls	r3, r3, #4
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	88fb      	ldrh	r3, [r7, #6]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	4905      	ldr	r1, [pc, #20]	@ (8001c10 <LCD_Draw_Pixel+0x38>)
 8001bfc:	887a      	ldrh	r2, [r7, #2]
 8001bfe:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8001c02:	bf00      	nop
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	200001c0 	.word	0x200001c0

08001c14 <LCD_Draw_Circle_Fill>:
 * These functions are simple examples. Most computer graphics like OpenGl and stm's graphics library use a state machine. Where you first call some function like SetColor(color), SetPosition(x,y), then DrawSqure(size)
 * Instead all of these are explicit where color, size, and position are passed in.
 * There is tons of ways to handle drawing. I dont think it matters too much.
 */
void LCD_Draw_Circle_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t radius, uint16_t color)
{
 8001c14:	b590      	push	{r4, r7, lr}
 8001c16:	b085      	sub	sp, #20
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	4604      	mov	r4, r0
 8001c1c:	4608      	mov	r0, r1
 8001c1e:	4611      	mov	r1, r2
 8001c20:	461a      	mov	r2, r3
 8001c22:	4623      	mov	r3, r4
 8001c24:	80fb      	strh	r3, [r7, #6]
 8001c26:	4603      	mov	r3, r0
 8001c28:	80bb      	strh	r3, [r7, #4]
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	807b      	strh	r3, [r7, #2]
 8001c2e:	4613      	mov	r3, r2
 8001c30:	803b      	strh	r3, [r7, #0]
    for(int16_t y=-radius; y<=radius; y++)
 8001c32:	887b      	ldrh	r3, [r7, #2]
 8001c34:	425b      	negs	r3, r3
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	81fb      	strh	r3, [r7, #14]
 8001c3a:	e034      	b.n	8001ca6 <LCD_Draw_Circle_Fill+0x92>
    {
        for(int16_t x=-radius; x<=radius; x++)
 8001c3c:	887b      	ldrh	r3, [r7, #2]
 8001c3e:	425b      	negs	r3, r3
 8001c40:	b29b      	uxth	r3, r3
 8001c42:	81bb      	strh	r3, [r7, #12]
 8001c44:	e024      	b.n	8001c90 <LCD_Draw_Circle_Fill+0x7c>
        {
            if(x*x+y*y <= radius*radius)
 8001c46:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001c4a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001c4e:	fb03 f202 	mul.w	r2, r3, r2
 8001c52:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c56:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8001c5a:	fb01 f303 	mul.w	r3, r1, r3
 8001c5e:	441a      	add	r2, r3
 8001c60:	887b      	ldrh	r3, [r7, #2]
 8001c62:	8879      	ldrh	r1, [r7, #2]
 8001c64:	fb01 f303 	mul.w	r3, r1, r3
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	dc0b      	bgt.n	8001c84 <LCD_Draw_Circle_Fill+0x70>
            {
            	LCD_Draw_Pixel(x+Xpos, y+Ypos, color);
 8001c6c:	89ba      	ldrh	r2, [r7, #12]
 8001c6e:	88fb      	ldrh	r3, [r7, #6]
 8001c70:	4413      	add	r3, r2
 8001c72:	b298      	uxth	r0, r3
 8001c74:	89fa      	ldrh	r2, [r7, #14]
 8001c76:	88bb      	ldrh	r3, [r7, #4]
 8001c78:	4413      	add	r3, r2
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	883a      	ldrh	r2, [r7, #0]
 8001c7e:	4619      	mov	r1, r3
 8001c80:	f7ff ffaa 	bl	8001bd8 <LCD_Draw_Pixel>
        for(int16_t x=-radius; x<=radius; x++)
 8001c84:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	81bb      	strh	r3, [r7, #12]
 8001c90:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001c94:	887b      	ldrh	r3, [r7, #2]
 8001c96:	429a      	cmp	r2, r3
 8001c98:	ddd5      	ble.n	8001c46 <LCD_Draw_Circle_Fill+0x32>
    for(int16_t y=-radius; y<=radius; y++)
 8001c9a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	81fb      	strh	r3, [r7, #14]
 8001ca6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001caa:	887b      	ldrh	r3, [r7, #2]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	ddc5      	ble.n	8001c3c <LCD_Draw_Circle_Fill+0x28>
            }
        }
    }
}
 8001cb0:	bf00      	nop
 8001cb2:	bf00      	nop
 8001cb4:	3714      	adds	r7, #20
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd90      	pop	{r4, r7, pc}
	...

08001cbc <LCD_Clear>:
	  LCD_Draw_Pixel(x, i+y, color);
  }
}

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b085      	sub	sp, #20
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	460a      	mov	r2, r1
 8001cc6:	71fb      	strb	r3, [r7, #7]
 8001cc8:	4613      	mov	r3, r2
 8001cca:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 8001ccc:	79fb      	ldrb	r3, [r7, #7]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d10e      	bne.n	8001cf0 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	60fb      	str	r3, [r7, #12]
 8001cd6:	e007      	b.n	8001ce8 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 8001cd8:	4908      	ldr	r1, [pc, #32]	@ (8001cfc <LCD_Clear+0x40>)
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	88ba      	ldrh	r2, [r7, #4]
 8001cde:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	60fb      	str	r3, [r7, #12]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8001cee:	d3f3      	bcc.n	8001cd8 <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 8001cf0:	bf00      	nop
 8001cf2:	3714      	adds	r7, #20
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr
 8001cfc:	200001c0 	.word	0x200001c0

08001d00 <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	4603      	mov	r3, r0
 8001d08:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 8001d0a:	4a04      	ldr	r2, [pc, #16]	@ (8001d1c <LCD_SetTextColor+0x1c>)
 8001d0c:	88fb      	ldrh	r3, [r7, #6]
 8001d0e:	8013      	strh	r3, [r2, #0]
}
 8001d10:	bf00      	nop
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr
 8001d1c:	20000004 	.word	0x20000004

08001d20 <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8001d28:	4a04      	ldr	r2, [pc, #16]	@ (8001d3c <LCD_SetFont+0x1c>)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6013      	str	r3, [r2, #0]
}
 8001d2e:	bf00      	nop
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	200001bc 	.word	0x200001bc

08001d40 <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	4603      	mov	r3, r0
 8001d48:	603a      	str	r2, [r7, #0]
 8001d4a:	80fb      	strh	r3, [r7, #6]
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 8001d50:	2300      	movs	r3, #0
 8001d52:	60fb      	str	r3, [r7, #12]
 8001d54:	2300      	movs	r3, #0
 8001d56:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8001d58:	2300      	movs	r3, #0
 8001d5a:	60fb      	str	r3, [r7, #12]
 8001d5c:	e04c      	b.n	8001df8 <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8001d5e:	2300      	movs	r3, #0
 8001d60:	60bb      	str	r3, [r7, #8]
 8001d62:	e03f      	b.n	8001de4 <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	683a      	ldr	r2, [r7, #0]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	881b      	ldrh	r3, [r3, #0]
 8001d6e:	4619      	mov	r1, r3
 8001d70:	4b27      	ldr	r3, [pc, #156]	@ (8001e10 <LCD_Draw_Char+0xd0>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	889b      	ldrh	r3, [r3, #4]
 8001d76:	4a27      	ldr	r2, [pc, #156]	@ (8001e14 <LCD_Draw_Char+0xd4>)
 8001d78:	fba2 2303 	umull	r2, r3, r2, r3
 8001d7c:	08db      	lsrs	r3, r3, #3
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	00db      	lsls	r3, r3, #3
 8001d82:	2280      	movs	r2, #128	@ 0x80
 8001d84:	409a      	lsls	r2, r3
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	fa42 f303 	asr.w	r3, r2, r3
 8001d8c:	400b      	ands	r3, r1
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d104      	bne.n	8001d9c <LCD_Draw_Char+0x5c>
 8001d92:	4b1f      	ldr	r3, [pc, #124]	@ (8001e10 <LCD_Draw_Char+0xd0>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	889b      	ldrh	r3, [r3, #4]
 8001d98:	2b0c      	cmp	r3, #12
 8001d9a:	d920      	bls.n	8001dde <LCD_Draw_Char+0x9e>
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	683a      	ldr	r2, [r7, #0]
 8001da2:	4413      	add	r3, r2
 8001da4:	881b      	ldrh	r3, [r3, #0]
 8001da6:	461a      	mov	r2, r3
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	fa42 f303 	asr.w	r3, r2, r3
 8001dae:	f003 0301 	and.w	r3, r3, #1
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d104      	bne.n	8001dc0 <LCD_Draw_Char+0x80>
 8001db6:	4b16      	ldr	r3, [pc, #88]	@ (8001e10 <LCD_Draw_Char+0xd0>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	889b      	ldrh	r3, [r3, #4]
 8001dbc:	2b0c      	cmp	r3, #12
 8001dbe:	d80e      	bhi.n	8001dde <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	88fb      	ldrh	r3, [r7, #6]
 8001dc6:	4413      	add	r3, r2
 8001dc8:	b298      	uxth	r0, r3
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	b29a      	uxth	r2, r3
 8001dce:	88bb      	ldrh	r3, [r7, #4]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	4a10      	ldr	r2, [pc, #64]	@ (8001e18 <LCD_Draw_Char+0xd8>)
 8001dd6:	8812      	ldrh	r2, [r2, #0]
 8001dd8:	4619      	mov	r1, r3
 8001dda:	f7ff fefd 	bl	8001bd8 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	3301      	adds	r3, #1
 8001de2:	60bb      	str	r3, [r7, #8]
 8001de4:	4b0a      	ldr	r3, [pc, #40]	@ (8001e10 <LCD_Draw_Char+0xd0>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	889b      	ldrh	r3, [r3, #4]
 8001dea:	461a      	mov	r2, r3
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d3b8      	bcc.n	8001d64 <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	3301      	adds	r3, #1
 8001df6:	60fb      	str	r3, [r7, #12]
 8001df8:	4b05      	ldr	r3, [pc, #20]	@ (8001e10 <LCD_Draw_Char+0xd0>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	88db      	ldrh	r3, [r3, #6]
 8001dfe:	461a      	mov	r2, r3
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d3ab      	bcc.n	8001d5e <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 8001e06:	bf00      	nop
 8001e08:	bf00      	nop
 8001e0a:	3710      	adds	r7, #16
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	200001bc 	.word	0x200001bc
 8001e14:	aaaaaaab 	.word	0xaaaaaaab
 8001e18:	20000004 	.word	0x20000004

08001e1c <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	4603      	mov	r3, r0
 8001e24:	80fb      	strh	r3, [r7, #6]
 8001e26:	460b      	mov	r3, r1
 8001e28:	80bb      	strh	r3, [r7, #4]
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8001e2e:	78fb      	ldrb	r3, [r7, #3]
 8001e30:	3b20      	subs	r3, #32
 8001e32:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8001e34:	4b09      	ldr	r3, [pc, #36]	@ (8001e5c <LCD_DisplayChar+0x40>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	78fb      	ldrb	r3, [r7, #3]
 8001e3c:	4907      	ldr	r1, [pc, #28]	@ (8001e5c <LCD_DisplayChar+0x40>)
 8001e3e:	6809      	ldr	r1, [r1, #0]
 8001e40:	88c9      	ldrh	r1, [r1, #6]
 8001e42:	fb01 f303 	mul.w	r3, r1, r3
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	441a      	add	r2, r3
 8001e4a:	88b9      	ldrh	r1, [r7, #4]
 8001e4c:	88fb      	ldrh	r3, [r7, #6]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7ff ff76 	bl	8001d40 <LCD_Draw_Char>
}
 8001e54:	bf00      	nop
 8001e56:	3708      	adds	r7, #8
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	200001bc 	.word	0x200001bc

08001e60 <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e64:	b672      	cpsid	i
}
 8001e66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e68:	bf00      	nop
 8001e6a:	e7fd      	b.n	8001e68 <LCD_Error_Handler+0x8>

08001e6c <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 8001e70:	f001 f931 	bl	80030d6 <STMPE811_Init>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d001      	beq.n	8001e7e <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialzation
 8001e7a:	bf00      	nop
 8001e7c:	e7fd      	b.n	8001e7a <InitializeLCDTouch+0xe>
  }
}
 8001e7e:	bf00      	nop
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <returnTouchStateAndLocation>:

STMPE811_State_t returnTouchStateAndLocation(STMPE811_TouchData * touchStruct)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b082      	sub	sp, #8
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
	return STMPE811_ReadTouch(touchStruct);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f001 f9db 	bl	8003246 <STMPE811_ReadTouch>
 8001e90:	4603      	mov	r3, r0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001e9e:	f000 f9ff 	bl	80022a0 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 8001ea2:	20ca      	movs	r0, #202	@ 0xca
 8001ea4:	f000 f943 	bl	800212e <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 8001ea8:	20c3      	movs	r0, #195	@ 0xc3
 8001eaa:	f000 f94d 	bl	8002148 <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 8001eae:	2008      	movs	r0, #8
 8001eb0:	f000 f94a 	bl	8002148 <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 8001eb4:	2050      	movs	r0, #80	@ 0x50
 8001eb6:	f000 f947 	bl	8002148 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 8001eba:	20cf      	movs	r0, #207	@ 0xcf
 8001ebc:	f000 f937 	bl	800212e <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 8001ec0:	2000      	movs	r0, #0
 8001ec2:	f000 f941 	bl	8002148 <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8001ec6:	20c1      	movs	r0, #193	@ 0xc1
 8001ec8:	f000 f93e 	bl	8002148 <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 8001ecc:	2030      	movs	r0, #48	@ 0x30
 8001ece:	f000 f93b 	bl	8002148 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 8001ed2:	20ed      	movs	r0, #237	@ 0xed
 8001ed4:	f000 f92b 	bl	800212e <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 8001ed8:	2064      	movs	r0, #100	@ 0x64
 8001eda:	f000 f935 	bl	8002148 <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 8001ede:	2003      	movs	r0, #3
 8001ee0:	f000 f932 	bl	8002148 <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 8001ee4:	2012      	movs	r0, #18
 8001ee6:	f000 f92f 	bl	8002148 <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8001eea:	2081      	movs	r0, #129	@ 0x81
 8001eec:	f000 f92c 	bl	8002148 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 8001ef0:	20e8      	movs	r0, #232	@ 0xe8
 8001ef2:	f000 f91c 	bl	800212e <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8001ef6:	2085      	movs	r0, #133	@ 0x85
 8001ef8:	f000 f926 	bl	8002148 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001efc:	2000      	movs	r0, #0
 8001efe:	f000 f923 	bl	8002148 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001f02:	2078      	movs	r0, #120	@ 0x78
 8001f04:	f000 f920 	bl	8002148 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8001f08:	20cb      	movs	r0, #203	@ 0xcb
 8001f0a:	f000 f910 	bl	800212e <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 8001f0e:	2039      	movs	r0, #57	@ 0x39
 8001f10:	f000 f91a 	bl	8002148 <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 8001f14:	202c      	movs	r0, #44	@ 0x2c
 8001f16:	f000 f917 	bl	8002148 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001f1a:	2000      	movs	r0, #0
 8001f1c:	f000 f914 	bl	8002148 <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 8001f20:	2034      	movs	r0, #52	@ 0x34
 8001f22:	f000 f911 	bl	8002148 <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8001f26:	2002      	movs	r0, #2
 8001f28:	f000 f90e 	bl	8002148 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 8001f2c:	20f7      	movs	r0, #247	@ 0xf7
 8001f2e:	f000 f8fe 	bl	800212e <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 8001f32:	2020      	movs	r0, #32
 8001f34:	f000 f908 	bl	8002148 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8001f38:	20ea      	movs	r0, #234	@ 0xea
 8001f3a:	f000 f8f8 	bl	800212e <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001f3e:	2000      	movs	r0, #0
 8001f40:	f000 f902 	bl	8002148 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001f44:	2000      	movs	r0, #0
 8001f46:	f000 f8ff 	bl	8002148 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 8001f4a:	20b1      	movs	r0, #177	@ 0xb1
 8001f4c:	f000 f8ef 	bl	800212e <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001f50:	2000      	movs	r0, #0
 8001f52:	f000 f8f9 	bl	8002148 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8001f56:	201b      	movs	r0, #27
 8001f58:	f000 f8f6 	bl	8002148 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8001f5c:	20b6      	movs	r0, #182	@ 0xb6
 8001f5e:	f000 f8e6 	bl	800212e <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8001f62:	200a      	movs	r0, #10
 8001f64:	f000 f8f0 	bl	8002148 <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 8001f68:	20a2      	movs	r0, #162	@ 0xa2
 8001f6a:	f000 f8ed 	bl	8002148 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 8001f6e:	20c0      	movs	r0, #192	@ 0xc0
 8001f70:	f000 f8dd 	bl	800212e <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001f74:	2010      	movs	r0, #16
 8001f76:	f000 f8e7 	bl	8002148 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 8001f7a:	20c1      	movs	r0, #193	@ 0xc1
 8001f7c:	f000 f8d7 	bl	800212e <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001f80:	2010      	movs	r0, #16
 8001f82:	f000 f8e1 	bl	8002148 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 8001f86:	20c5      	movs	r0, #197	@ 0xc5
 8001f88:	f000 f8d1 	bl	800212e <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 8001f8c:	2045      	movs	r0, #69	@ 0x45
 8001f8e:	f000 f8db 	bl	8002148 <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 8001f92:	2015      	movs	r0, #21
 8001f94:	f000 f8d8 	bl	8002148 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 8001f98:	20c7      	movs	r0, #199	@ 0xc7
 8001f9a:	f000 f8c8 	bl	800212e <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 8001f9e:	2090      	movs	r0, #144	@ 0x90
 8001fa0:	f000 f8d2 	bl	8002148 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 8001fa4:	2036      	movs	r0, #54	@ 0x36
 8001fa6:	f000 f8c2 	bl	800212e <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 8001faa:	20c8      	movs	r0, #200	@ 0xc8
 8001fac:	f000 f8cc 	bl	8002148 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 8001fb0:	20f2      	movs	r0, #242	@ 0xf2
 8001fb2:	f000 f8bc 	bl	800212e <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001fb6:	2000      	movs	r0, #0
 8001fb8:	f000 f8c6 	bl	8002148 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 8001fbc:	20b0      	movs	r0, #176	@ 0xb0
 8001fbe:	f000 f8b6 	bl	800212e <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 8001fc2:	20c2      	movs	r0, #194	@ 0xc2
 8001fc4:	f000 f8c0 	bl	8002148 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8001fc8:	20b6      	movs	r0, #182	@ 0xb6
 8001fca:	f000 f8b0 	bl	800212e <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8001fce:	200a      	movs	r0, #10
 8001fd0:	f000 f8ba 	bl	8002148 <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 8001fd4:	20a7      	movs	r0, #167	@ 0xa7
 8001fd6:	f000 f8b7 	bl	8002148 <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 8001fda:	2027      	movs	r0, #39	@ 0x27
 8001fdc:	f000 f8b4 	bl	8002148 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8001fe0:	2004      	movs	r0, #4
 8001fe2:	f000 f8b1 	bl	8002148 <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 8001fe6:	202a      	movs	r0, #42	@ 0x2a
 8001fe8:	f000 f8a1 	bl	800212e <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001fec:	2000      	movs	r0, #0
 8001fee:	f000 f8ab 	bl	8002148 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001ff2:	2000      	movs	r0, #0
 8001ff4:	f000 f8a8 	bl	8002148 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001ff8:	2000      	movs	r0, #0
 8001ffa:	f000 f8a5 	bl	8002148 <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 8001ffe:	20ef      	movs	r0, #239	@ 0xef
 8002000:	f000 f8a2 	bl	8002148 <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 8002004:	202b      	movs	r0, #43	@ 0x2b
 8002006:	f000 f892 	bl	800212e <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800200a:	2000      	movs	r0, #0
 800200c:	f000 f89c 	bl	8002148 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002010:	2000      	movs	r0, #0
 8002012:	f000 f899 	bl	8002148 <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 8002016:	2001      	movs	r0, #1
 8002018:	f000 f896 	bl	8002148 <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 800201c:	203f      	movs	r0, #63	@ 0x3f
 800201e:	f000 f893 	bl	8002148 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 8002022:	20f6      	movs	r0, #246	@ 0xf6
 8002024:	f000 f883 	bl	800212e <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8002028:	2001      	movs	r0, #1
 800202a:	f000 f88d 	bl	8002148 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800202e:	2000      	movs	r0, #0
 8002030:	f000 f88a 	bl	8002148 <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 8002034:	2006      	movs	r0, #6
 8002036:	f000 f887 	bl	8002148 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 800203a:	202c      	movs	r0, #44	@ 0x2c
 800203c:	f000 f877 	bl	800212e <ili9341_Write_Reg>
  LCD_Delay(200);
 8002040:	20c8      	movs	r0, #200	@ 0xc8
 8002042:	f000 f9e9 	bl	8002418 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 8002046:	2026      	movs	r0, #38	@ 0x26
 8002048:	f000 f871 	bl	800212e <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 800204c:	2001      	movs	r0, #1
 800204e:	f000 f87b 	bl	8002148 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 8002052:	20e0      	movs	r0, #224	@ 0xe0
 8002054:	f000 f86b 	bl	800212e <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 8002058:	200f      	movs	r0, #15
 800205a:	f000 f875 	bl	8002148 <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 800205e:	2029      	movs	r0, #41	@ 0x29
 8002060:	f000 f872 	bl	8002148 <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 8002064:	2024      	movs	r0, #36	@ 0x24
 8002066:	f000 f86f 	bl	8002148 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 800206a:	200c      	movs	r0, #12
 800206c:	f000 f86c 	bl	8002148 <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 8002070:	200e      	movs	r0, #14
 8002072:	f000 f869 	bl	8002148 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8002076:	2009      	movs	r0, #9
 8002078:	f000 f866 	bl	8002148 <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 800207c:	204e      	movs	r0, #78	@ 0x4e
 800207e:	f000 f863 	bl	8002148 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8002082:	2078      	movs	r0, #120	@ 0x78
 8002084:	f000 f860 	bl	8002148 <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 8002088:	203c      	movs	r0, #60	@ 0x3c
 800208a:	f000 f85d 	bl	8002148 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 800208e:	2009      	movs	r0, #9
 8002090:	f000 f85a 	bl	8002148 <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 8002094:	2013      	movs	r0, #19
 8002096:	f000 f857 	bl	8002148 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 800209a:	2005      	movs	r0, #5
 800209c:	f000 f854 	bl	8002148 <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 80020a0:	2017      	movs	r0, #23
 80020a2:	f000 f851 	bl	8002148 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 80020a6:	2011      	movs	r0, #17
 80020a8:	f000 f84e 	bl	8002148 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80020ac:	2000      	movs	r0, #0
 80020ae:	f000 f84b 	bl	8002148 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 80020b2:	20e1      	movs	r0, #225	@ 0xe1
 80020b4:	f000 f83b 	bl	800212e <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80020b8:	2000      	movs	r0, #0
 80020ba:	f000 f845 	bl	8002148 <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 80020be:	2016      	movs	r0, #22
 80020c0:	f000 f842 	bl	8002148 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 80020c4:	201b      	movs	r0, #27
 80020c6:	f000 f83f 	bl	8002148 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 80020ca:	2004      	movs	r0, #4
 80020cc:	f000 f83c 	bl	8002148 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 80020d0:	2011      	movs	r0, #17
 80020d2:	f000 f839 	bl	8002148 <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 80020d6:	2007      	movs	r0, #7
 80020d8:	f000 f836 	bl	8002148 <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 80020dc:	2031      	movs	r0, #49	@ 0x31
 80020de:	f000 f833 	bl	8002148 <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 80020e2:	2033      	movs	r0, #51	@ 0x33
 80020e4:	f000 f830 	bl	8002148 <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 80020e8:	2042      	movs	r0, #66	@ 0x42
 80020ea:	f000 f82d 	bl	8002148 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 80020ee:	2005      	movs	r0, #5
 80020f0:	f000 f82a 	bl	8002148 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 80020f4:	200c      	movs	r0, #12
 80020f6:	f000 f827 	bl	8002148 <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 80020fa:	200a      	movs	r0, #10
 80020fc:	f000 f824 	bl	8002148 <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 8002100:	2028      	movs	r0, #40	@ 0x28
 8002102:	f000 f821 	bl	8002148 <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 8002106:	202f      	movs	r0, #47	@ 0x2f
 8002108:	f000 f81e 	bl	8002148 <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 800210c:	200f      	movs	r0, #15
 800210e:	f000 f81b 	bl	8002148 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 8002112:	2011      	movs	r0, #17
 8002114:	f000 f80b 	bl	800212e <ili9341_Write_Reg>
  LCD_Delay(200);
 8002118:	20c8      	movs	r0, #200	@ 0xc8
 800211a:	f000 f97d 	bl	8002418 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 800211e:	2029      	movs	r0, #41	@ 0x29
 8002120:	f000 f805 	bl	800212e <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 8002124:	202c      	movs	r0, #44	@ 0x2c
 8002126:	f000 f802 	bl	800212e <ili9341_Write_Reg>
}
 800212a:	bf00      	nop
 800212c:	bd80      	pop	{r7, pc}

0800212e <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b082      	sub	sp, #8
 8002132:	af00      	add	r7, sp, #0
 8002134:	4603      	mov	r3, r0
 8002136:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8002138:	79fb      	ldrb	r3, [r7, #7]
 800213a:	4618      	mov	r0, r3
 800213c:	f000 f94a 	bl	80023d4 <LCD_IO_WriteReg>
}
 8002140:	bf00      	nop
 8002142:	3708      	adds	r7, #8
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}

08002148 <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	4603      	mov	r3, r0
 8002150:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8002152:	88fb      	ldrh	r3, [r7, #6]
 8002154:	4618      	mov	r0, r3
 8002156:	f000 f91b 	bl	8002390 <LCD_IO_WriteData>
}
 800215a:	bf00      	nop
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
	...

08002164 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8002168:	4819      	ldr	r0, [pc, #100]	@ (80021d0 <SPI_Init+0x6c>)
 800216a:	f004 fd59 	bl	8006c20 <HAL_SPI_GetState>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d12b      	bne.n	80021cc <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 8002174:	4b16      	ldr	r3, [pc, #88]	@ (80021d0 <SPI_Init+0x6c>)
 8002176:	4a17      	ldr	r2, [pc, #92]	@ (80021d4 <SPI_Init+0x70>)
 8002178:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800217a:	4b15      	ldr	r3, [pc, #84]	@ (80021d0 <SPI_Init+0x6c>)
 800217c:	2218      	movs	r2, #24
 800217e:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8002180:	4b13      	ldr	r3, [pc, #76]	@ (80021d0 <SPI_Init+0x6c>)
 8002182:	2200      	movs	r2, #0
 8002184:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8002186:	4b12      	ldr	r3, [pc, #72]	@ (80021d0 <SPI_Init+0x6c>)
 8002188:	2200      	movs	r2, #0
 800218a:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 800218c:	4b10      	ldr	r3, [pc, #64]	@ (80021d0 <SPI_Init+0x6c>)
 800218e:	2200      	movs	r2, #0
 8002190:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8002192:	4b0f      	ldr	r3, [pc, #60]	@ (80021d0 <SPI_Init+0x6c>)
 8002194:	2200      	movs	r2, #0
 8002196:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8002198:	4b0d      	ldr	r3, [pc, #52]	@ (80021d0 <SPI_Init+0x6c>)
 800219a:	2207      	movs	r2, #7
 800219c:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 800219e:	4b0c      	ldr	r3, [pc, #48]	@ (80021d0 <SPI_Init+0x6c>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 80021a4:	4b0a      	ldr	r3, [pc, #40]	@ (80021d0 <SPI_Init+0x6c>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 80021aa:	4b09      	ldr	r3, [pc, #36]	@ (80021d0 <SPI_Init+0x6c>)
 80021ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80021b0:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 80021b2:	4b07      	ldr	r3, [pc, #28]	@ (80021d0 <SPI_Init+0x6c>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 80021b8:	4b05      	ldr	r3, [pc, #20]	@ (80021d0 <SPI_Init+0x6c>)
 80021ba:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80021be:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 80021c0:	4803      	ldr	r0, [pc, #12]	@ (80021d0 <SPI_Init+0x6c>)
 80021c2:	f000 f833 	bl	800222c <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 80021c6:	4802      	ldr	r0, [pc, #8]	@ (80021d0 <SPI_Init+0x6c>)
 80021c8:	f004 f98c 	bl	80064e4 <HAL_SPI_Init>
  }
}
 80021cc:	bf00      	nop
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	200259c0 	.word	0x200259c0
 80021d4:	40015000 	.word	0x40015000

080021d8 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0
 80021de:	4603      	mov	r3, r0
 80021e0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80021e2:	2300      	movs	r3, #0
 80021e4:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 80021e6:	4b09      	ldr	r3, [pc, #36]	@ (800220c <SPI_Write+0x34>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	1db9      	adds	r1, r7, #6
 80021ec:	2201      	movs	r2, #1
 80021ee:	4808      	ldr	r0, [pc, #32]	@ (8002210 <SPI_Write+0x38>)
 80021f0:	f004 fa29 	bl	8006646 <HAL_SPI_Transmit>
 80021f4:	4603      	mov	r3, r0
 80021f6:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 80021f8:	7bfb      	ldrb	r3, [r7, #15]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 80021fe:	f000 f809 	bl	8002214 <SPI_Error>
  }
}
 8002202:	bf00      	nop
 8002204:	3710      	adds	r7, #16
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	20000018 	.word	0x20000018
 8002210:	200259c0 	.word	0x200259c0

08002214 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8002218:	4803      	ldr	r0, [pc, #12]	@ (8002228 <SPI_Error+0x14>)
 800221a:	f004 f9ec 	bl	80065f6 <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 800221e:	f7ff ffa1 	bl	8002164 <SPI_Init>
}
 8002222:	bf00      	nop
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	200259c0 	.word	0x200259c0

0800222c <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b08a      	sub	sp, #40	@ 0x28
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 8002234:	2300      	movs	r3, #0
 8002236:	613b      	str	r3, [r7, #16]
 8002238:	4b17      	ldr	r3, [pc, #92]	@ (8002298 <SPI_MspInit+0x6c>)
 800223a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800223c:	4a16      	ldr	r2, [pc, #88]	@ (8002298 <SPI_MspInit+0x6c>)
 800223e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002242:	6453      	str	r3, [r2, #68]	@ 0x44
 8002244:	4b14      	ldr	r3, [pc, #80]	@ (8002298 <SPI_MspInit+0x6c>)
 8002246:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002248:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800224c:	613b      	str	r3, [r7, #16]
 800224e:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 8002250:	2300      	movs	r3, #0
 8002252:	60fb      	str	r3, [r7, #12]
 8002254:	4b10      	ldr	r3, [pc, #64]	@ (8002298 <SPI_MspInit+0x6c>)
 8002256:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002258:	4a0f      	ldr	r2, [pc, #60]	@ (8002298 <SPI_MspInit+0x6c>)
 800225a:	f043 0320 	orr.w	r3, r3, #32
 800225e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002260:	4b0d      	ldr	r3, [pc, #52]	@ (8002298 <SPI_MspInit+0x6c>)
 8002262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002264:	f003 0320 	and.w	r3, r3, #32
 8002268:	60fb      	str	r3, [r7, #12]
 800226a:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 800226c:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8002270:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8002272:	2302      	movs	r3, #2
 8002274:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8002276:	2302      	movs	r3, #2
 8002278:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 800227a:	2301      	movs	r3, #1
 800227c:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 800227e:	2305      	movs	r3, #5
 8002280:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 8002282:	f107 0314 	add.w	r3, r7, #20
 8002286:	4619      	mov	r1, r3
 8002288:	4804      	ldr	r0, [pc, #16]	@ (800229c <SPI_MspInit+0x70>)
 800228a:	f001 fc8d 	bl	8003ba8 <HAL_GPIO_Init>
}
 800228e:	bf00      	nop
 8002290:	3728      	adds	r7, #40	@ 0x28
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	40023800 	.word	0x40023800
 800229c:	40021400 	.word	0x40021400

080022a0 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b088      	sub	sp, #32
 80022a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 80022a6:	4b36      	ldr	r3, [pc, #216]	@ (8002380 <LCD_IO_Init+0xe0>)
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d164      	bne.n	8002378 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 80022ae:	4b34      	ldr	r3, [pc, #208]	@ (8002380 <LCD_IO_Init+0xe0>)
 80022b0:	2201      	movs	r2, #1
 80022b2:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 80022b4:	2300      	movs	r3, #0
 80022b6:	60bb      	str	r3, [r7, #8]
 80022b8:	4b32      	ldr	r3, [pc, #200]	@ (8002384 <LCD_IO_Init+0xe4>)
 80022ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022bc:	4a31      	ldr	r2, [pc, #196]	@ (8002384 <LCD_IO_Init+0xe4>)
 80022be:	f043 0308 	orr.w	r3, r3, #8
 80022c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80022c4:	4b2f      	ldr	r3, [pc, #188]	@ (8002384 <LCD_IO_Init+0xe4>)
 80022c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c8:	f003 0308 	and.w	r3, r3, #8
 80022cc:	60bb      	str	r3, [r7, #8]
 80022ce:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 80022d0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80022d4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80022d6:	2301      	movs	r3, #1
 80022d8:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80022da:	2300      	movs	r3, #0
 80022dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80022de:	2302      	movs	r3, #2
 80022e0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80022e2:	f107 030c 	add.w	r3, r7, #12
 80022e6:	4619      	mov	r1, r3
 80022e8:	4827      	ldr	r0, [pc, #156]	@ (8002388 <LCD_IO_Init+0xe8>)
 80022ea:	f001 fc5d 	bl	8003ba8 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 80022ee:	2300      	movs	r3, #0
 80022f0:	607b      	str	r3, [r7, #4]
 80022f2:	4b24      	ldr	r3, [pc, #144]	@ (8002384 <LCD_IO_Init+0xe4>)
 80022f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022f6:	4a23      	ldr	r2, [pc, #140]	@ (8002384 <LCD_IO_Init+0xe4>)
 80022f8:	f043 0308 	orr.w	r3, r3, #8
 80022fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80022fe:	4b21      	ldr	r3, [pc, #132]	@ (8002384 <LCD_IO_Init+0xe4>)
 8002300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002302:	f003 0308 	and.w	r3, r3, #8
 8002306:	607b      	str	r3, [r7, #4]
 8002308:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 800230a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800230e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002310:	2301      	movs	r3, #1
 8002312:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002314:	2300      	movs	r3, #0
 8002316:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002318:	2302      	movs	r3, #2
 800231a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 800231c:	f107 030c 	add.w	r3, r7, #12
 8002320:	4619      	mov	r1, r3
 8002322:	4819      	ldr	r0, [pc, #100]	@ (8002388 <LCD_IO_Init+0xe8>)
 8002324:	f001 fc40 	bl	8003ba8 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8002328:	2300      	movs	r3, #0
 800232a:	603b      	str	r3, [r7, #0]
 800232c:	4b15      	ldr	r3, [pc, #84]	@ (8002384 <LCD_IO_Init+0xe4>)
 800232e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002330:	4a14      	ldr	r2, [pc, #80]	@ (8002384 <LCD_IO_Init+0xe4>)
 8002332:	f043 0304 	orr.w	r3, r3, #4
 8002336:	6313      	str	r3, [r2, #48]	@ 0x30
 8002338:	4b12      	ldr	r3, [pc, #72]	@ (8002384 <LCD_IO_Init+0xe4>)
 800233a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800233c:	f003 0304 	and.w	r3, r3, #4
 8002340:	603b      	str	r3, [r7, #0]
 8002342:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8002344:	2304      	movs	r3, #4
 8002346:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002348:	2301      	movs	r3, #1
 800234a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800234c:	2300      	movs	r3, #0
 800234e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002350:	2302      	movs	r3, #2
 8002352:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8002354:	f107 030c 	add.w	r3, r7, #12
 8002358:	4619      	mov	r1, r3
 800235a:	480c      	ldr	r0, [pc, #48]	@ (800238c <LCD_IO_Init+0xec>)
 800235c:	f001 fc24 	bl	8003ba8 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8002360:	2200      	movs	r2, #0
 8002362:	2104      	movs	r1, #4
 8002364:	4809      	ldr	r0, [pc, #36]	@ (800238c <LCD_IO_Init+0xec>)
 8002366:	f001 feef 	bl	8004148 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 800236a:	2201      	movs	r2, #1
 800236c:	2104      	movs	r1, #4
 800236e:	4807      	ldr	r0, [pc, #28]	@ (800238c <LCD_IO_Init+0xec>)
 8002370:	f001 feea 	bl	8004148 <HAL_GPIO_WritePin>

    SPI_Init();
 8002374:	f7ff fef6 	bl	8002164 <SPI_Init>
  }
}
 8002378:	bf00      	nop
 800237a:	3720      	adds	r7, #32
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	20025a18 	.word	0x20025a18
 8002384:	40023800 	.word	0x40023800
 8002388:	40020c00 	.word	0x40020c00
 800238c:	40020800 	.word	0x40020800

08002390 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	4603      	mov	r3, r0
 8002398:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800239a:	2201      	movs	r2, #1
 800239c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80023a0:	480a      	ldr	r0, [pc, #40]	@ (80023cc <LCD_IO_WriteData+0x3c>)
 80023a2:	f001 fed1 	bl	8004148 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 80023a6:	2200      	movs	r2, #0
 80023a8:	2104      	movs	r1, #4
 80023aa:	4809      	ldr	r0, [pc, #36]	@ (80023d0 <LCD_IO_WriteData+0x40>)
 80023ac:	f001 fecc 	bl	8004148 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 80023b0:	88fb      	ldrh	r3, [r7, #6]
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7ff ff10 	bl	80021d8 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80023b8:	2201      	movs	r2, #1
 80023ba:	2104      	movs	r1, #4
 80023bc:	4804      	ldr	r0, [pc, #16]	@ (80023d0 <LCD_IO_WriteData+0x40>)
 80023be:	f001 fec3 	bl	8004148 <HAL_GPIO_WritePin>
}
 80023c2:	bf00      	nop
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	40020c00 	.word	0x40020c00
 80023d0:	40020800 	.word	0x40020800

080023d4 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	4603      	mov	r3, r0
 80023dc:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80023de:	2200      	movs	r2, #0
 80023e0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80023e4:	480a      	ldr	r0, [pc, #40]	@ (8002410 <LCD_IO_WriteReg+0x3c>)
 80023e6:	f001 feaf 	bl	8004148 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 80023ea:	2200      	movs	r2, #0
 80023ec:	2104      	movs	r1, #4
 80023ee:	4809      	ldr	r0, [pc, #36]	@ (8002414 <LCD_IO_WriteReg+0x40>)
 80023f0:	f001 feaa 	bl	8004148 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 80023f4:	79fb      	ldrb	r3, [r7, #7]
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7ff feed 	bl	80021d8 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80023fe:	2201      	movs	r2, #1
 8002400:	2104      	movs	r1, #4
 8002402:	4804      	ldr	r0, [pc, #16]	@ (8002414 <LCD_IO_WriteReg+0x40>)
 8002404:	f001 fea0 	bl	8004148 <HAL_GPIO_WritePin>
}
 8002408:	bf00      	nop
 800240a:	3708      	adds	r7, #8
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	40020c00 	.word	0x40020c00
 8002414:	40020800 	.word	0x40020800

08002418 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f001 fa59 	bl	80038d8 <HAL_Delay>
}
 8002426:	bf00      	nop
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}

0800242e <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800242e:	b580      	push	{r7, lr}
 8002430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/
	initialise_monitor_handles();
 8002432:	f001 f99b 	bl	800376c <initialise_monitor_handles>
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002436:	f001 f9dd 	bl	80037f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800243a:	f000 f815 	bl	8002468 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800243e:	f000 fa05 	bl	800284c <MX_GPIO_Init>
  MX_LTDC_Init();
 8002442:	f000 f8bb 	bl	80025bc <MX_LTDC_Init>
  MX_RNG_Init();
 8002446:	f000 f96b 	bl	8002720 <MX_RNG_Init>
  MX_TIM2_Init();
 800244a:	f000 f9b3 	bl	80027b4 <MX_TIM2_Init>
  MX_SPI5_Init();
 800244e:	f000 f97b 	bl	8002748 <MX_SPI5_Init>
  MX_I2C3_Init();
 8002452:	f000 f873 	bl	800253c <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  ApplicationInit(); // Initializes the LCD functionality
 8002456:	f7fe f85f 	bl	8000518 <ApplicationInit>
  HAL_Delay(5000);
 800245a:	f241 3088 	movw	r0, #5000	@ 0x1388
 800245e:	f001 fa3b 	bl	80038d8 <HAL_Delay>
  /* USER CODE END 2 */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002462:	bf00      	nop
 8002464:	e7fd      	b.n	8002462 <main+0x34>
	...

08002468 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b094      	sub	sp, #80	@ 0x50
 800246c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800246e:	f107 0320 	add.w	r3, r7, #32
 8002472:	2230      	movs	r2, #48	@ 0x30
 8002474:	2100      	movs	r1, #0
 8002476:	4618      	mov	r0, r3
 8002478:	f004 ff94 	bl	80073a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800247c:	f107 030c 	add.w	r3, r7, #12
 8002480:	2200      	movs	r2, #0
 8002482:	601a      	str	r2, [r3, #0]
 8002484:	605a      	str	r2, [r3, #4]
 8002486:	609a      	str	r2, [r3, #8]
 8002488:	60da      	str	r2, [r3, #12]
 800248a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800248c:	2300      	movs	r3, #0
 800248e:	60bb      	str	r3, [r7, #8]
 8002490:	4b28      	ldr	r3, [pc, #160]	@ (8002534 <SystemClock_Config+0xcc>)
 8002492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002494:	4a27      	ldr	r2, [pc, #156]	@ (8002534 <SystemClock_Config+0xcc>)
 8002496:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800249a:	6413      	str	r3, [r2, #64]	@ 0x40
 800249c:	4b25      	ldr	r3, [pc, #148]	@ (8002534 <SystemClock_Config+0xcc>)
 800249e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024a4:	60bb      	str	r3, [r7, #8]
 80024a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80024a8:	2300      	movs	r3, #0
 80024aa:	607b      	str	r3, [r7, #4]
 80024ac:	4b22      	ldr	r3, [pc, #136]	@ (8002538 <SystemClock_Config+0xd0>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a21      	ldr	r2, [pc, #132]	@ (8002538 <SystemClock_Config+0xd0>)
 80024b2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80024b6:	6013      	str	r3, [r2, #0]
 80024b8:	4b1f      	ldr	r3, [pc, #124]	@ (8002538 <SystemClock_Config+0xd0>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80024c0:	607b      	str	r3, [r7, #4]
 80024c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80024c4:	2301      	movs	r3, #1
 80024c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80024c8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80024cc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024ce:	2302      	movs	r3, #2
 80024d0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80024d2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80024d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80024d8:	2308      	movs	r3, #8
 80024da:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80024dc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80024e0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80024e2:	2302      	movs	r3, #2
 80024e4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80024e6:	2307      	movs	r3, #7
 80024e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024ea:	f107 0320 	add.w	r3, r7, #32
 80024ee:	4618      	mov	r0, r3
 80024f0:	f003 f98a 	bl	8005808 <HAL_RCC_OscConfig>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d001      	beq.n	80024fe <SystemClock_Config+0x96>
  {
    Error_Handler();
 80024fa:	f000 fb55 	bl	8002ba8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024fe:	230f      	movs	r3, #15
 8002500:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002502:	2302      	movs	r3, #2
 8002504:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002506:	2300      	movs	r3, #0
 8002508:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800250a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800250e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002510:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002514:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002516:	f107 030c 	add.w	r3, r7, #12
 800251a:	2105      	movs	r1, #5
 800251c:	4618      	mov	r0, r3
 800251e:	f003 fbeb 	bl	8005cf8 <HAL_RCC_ClockConfig>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d001      	beq.n	800252c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002528:	f000 fb3e 	bl	8002ba8 <Error_Handler>
  }
}
 800252c:	bf00      	nop
 800252e:	3750      	adds	r7, #80	@ 0x50
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	40023800 	.word	0x40023800
 8002538:	40007000 	.word	0x40007000

0800253c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002540:	4b1b      	ldr	r3, [pc, #108]	@ (80025b0 <MX_I2C3_Init+0x74>)
 8002542:	4a1c      	ldr	r2, [pc, #112]	@ (80025b4 <MX_I2C3_Init+0x78>)
 8002544:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8002546:	4b1a      	ldr	r3, [pc, #104]	@ (80025b0 <MX_I2C3_Init+0x74>)
 8002548:	4a1b      	ldr	r2, [pc, #108]	@ (80025b8 <MX_I2C3_Init+0x7c>)
 800254a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800254c:	4b18      	ldr	r3, [pc, #96]	@ (80025b0 <MX_I2C3_Init+0x74>)
 800254e:	2200      	movs	r2, #0
 8002550:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8002552:	4b17      	ldr	r3, [pc, #92]	@ (80025b0 <MX_I2C3_Init+0x74>)
 8002554:	2200      	movs	r2, #0
 8002556:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002558:	4b15      	ldr	r3, [pc, #84]	@ (80025b0 <MX_I2C3_Init+0x74>)
 800255a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800255e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002560:	4b13      	ldr	r3, [pc, #76]	@ (80025b0 <MX_I2C3_Init+0x74>)
 8002562:	2200      	movs	r2, #0
 8002564:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8002566:	4b12      	ldr	r3, [pc, #72]	@ (80025b0 <MX_I2C3_Init+0x74>)
 8002568:	2200      	movs	r2, #0
 800256a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800256c:	4b10      	ldr	r3, [pc, #64]	@ (80025b0 <MX_I2C3_Init+0x74>)
 800256e:	2200      	movs	r2, #0
 8002570:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002572:	4b0f      	ldr	r3, [pc, #60]	@ (80025b0 <MX_I2C3_Init+0x74>)
 8002574:	2200      	movs	r2, #0
 8002576:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002578:	480d      	ldr	r0, [pc, #52]	@ (80025b0 <MX_I2C3_Init+0x74>)
 800257a:	f001 fdff 	bl	800417c <HAL_I2C_Init>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d001      	beq.n	8002588 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002584:	f000 fb10 	bl	8002ba8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002588:	2100      	movs	r1, #0
 800258a:	4809      	ldr	r0, [pc, #36]	@ (80025b0 <MX_I2C3_Init+0x74>)
 800258c:	f002 fe1a 	bl	80051c4 <HAL_I2CEx_ConfigAnalogFilter>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d001      	beq.n	800259a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8002596:	f000 fb07 	bl	8002ba8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800259a:	2100      	movs	r1, #0
 800259c:	4804      	ldr	r0, [pc, #16]	@ (80025b0 <MX_I2C3_Init+0x74>)
 800259e:	f002 fe4d 	bl	800523c <HAL_I2CEx_ConfigDigitalFilter>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d001      	beq.n	80025ac <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80025a8:	f000 fafe 	bl	8002ba8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80025ac:	bf00      	nop
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	20025a1c 	.word	0x20025a1c
 80025b4:	40005c00 	.word	0x40005c00
 80025b8:	000186a0 	.word	0x000186a0

080025bc <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b09a      	sub	sp, #104	@ 0x68
 80025c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80025c2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80025c6:	2234      	movs	r2, #52	@ 0x34
 80025c8:	2100      	movs	r1, #0
 80025ca:	4618      	mov	r0, r3
 80025cc:	f004 feea 	bl	80073a4 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 80025d0:	463b      	mov	r3, r7
 80025d2:	2234      	movs	r2, #52	@ 0x34
 80025d4:	2100      	movs	r1, #0
 80025d6:	4618      	mov	r0, r3
 80025d8:	f004 fee4 	bl	80073a4 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80025dc:	4b4e      	ldr	r3, [pc, #312]	@ (8002718 <MX_LTDC_Init+0x15c>)
 80025de:	4a4f      	ldr	r2, [pc, #316]	@ (800271c <MX_LTDC_Init+0x160>)
 80025e0:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80025e2:	4b4d      	ldr	r3, [pc, #308]	@ (8002718 <MX_LTDC_Init+0x15c>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80025e8:	4b4b      	ldr	r3, [pc, #300]	@ (8002718 <MX_LTDC_Init+0x15c>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80025ee:	4b4a      	ldr	r3, [pc, #296]	@ (8002718 <MX_LTDC_Init+0x15c>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80025f4:	4b48      	ldr	r3, [pc, #288]	@ (8002718 <MX_LTDC_Init+0x15c>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 80025fa:	4b47      	ldr	r3, [pc, #284]	@ (8002718 <MX_LTDC_Init+0x15c>)
 80025fc:	2207      	movs	r2, #7
 80025fe:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8002600:	4b45      	ldr	r3, [pc, #276]	@ (8002718 <MX_LTDC_Init+0x15c>)
 8002602:	2203      	movs	r2, #3
 8002604:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8002606:	4b44      	ldr	r3, [pc, #272]	@ (8002718 <MX_LTDC_Init+0x15c>)
 8002608:	220e      	movs	r2, #14
 800260a:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 800260c:	4b42      	ldr	r3, [pc, #264]	@ (8002718 <MX_LTDC_Init+0x15c>)
 800260e:	2205      	movs	r2, #5
 8002610:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8002612:	4b41      	ldr	r3, [pc, #260]	@ (8002718 <MX_LTDC_Init+0x15c>)
 8002614:	f240 228e 	movw	r2, #654	@ 0x28e
 8002618:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 800261a:	4b3f      	ldr	r3, [pc, #252]	@ (8002718 <MX_LTDC_Init+0x15c>)
 800261c:	f240 12e5 	movw	r2, #485	@ 0x1e5
 8002620:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 8002622:	4b3d      	ldr	r3, [pc, #244]	@ (8002718 <MX_LTDC_Init+0x15c>)
 8002624:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8002628:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 800262a:	4b3b      	ldr	r3, [pc, #236]	@ (8002718 <MX_LTDC_Init+0x15c>)
 800262c:	f240 12e7 	movw	r2, #487	@ 0x1e7
 8002630:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8002632:	4b39      	ldr	r3, [pc, #228]	@ (8002718 <MX_LTDC_Init+0x15c>)
 8002634:	2200      	movs	r2, #0
 8002636:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 800263a:	4b37      	ldr	r3, [pc, #220]	@ (8002718 <MX_LTDC_Init+0x15c>)
 800263c:	2200      	movs	r2, #0
 800263e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8002642:	4b35      	ldr	r3, [pc, #212]	@ (8002718 <MX_LTDC_Init+0x15c>)
 8002644:	2200      	movs	r2, #0
 8002646:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800264a:	4833      	ldr	r0, [pc, #204]	@ (8002718 <MX_LTDC_Init+0x15c>)
 800264c:	f002 fe36 	bl	80052bc <HAL_LTDC_Init>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8002656:	f000 faa7 	bl	8002ba8 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800265a:	2300      	movs	r3, #0
 800265c:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 800265e:	2300      	movs	r3, #0
 8002660:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 8002662:	2300      	movs	r3, #0
 8002664:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 8002666:	2300      	movs	r3, #0
 8002668:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800266a:	2300      	movs	r3, #0
 800266c:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 800266e:	2300      	movs	r3, #0
 8002670:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 8002672:	2300      	movs	r3, #0
 8002674:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8002676:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800267a:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800267c:	2305      	movs	r3, #5
 800267e:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 8002680:	2300      	movs	r3, #0
 8002682:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 8002684:	2300      	movs	r3, #0
 8002686:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 8002688:	2300      	movs	r3, #0
 800268a:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 800268c:	2300      	movs	r3, #0
 800268e:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 8002692:	2300      	movs	r3, #0
 8002694:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 8002698:	2300      	movs	r3, #0
 800269a:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800269e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80026a2:	2200      	movs	r2, #0
 80026a4:	4619      	mov	r1, r3
 80026a6:	481c      	ldr	r0, [pc, #112]	@ (8002718 <MX_LTDC_Init+0x15c>)
 80026a8:	f002 fed8 	bl	800545c <HAL_LTDC_ConfigLayer>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 80026b2:	f000 fa79 	bl	8002ba8 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 80026b6:	2300      	movs	r3, #0
 80026b8:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 80026ba:	2300      	movs	r3, #0
 80026bc:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 80026be:	2300      	movs	r3, #0
 80026c0:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 80026c2:	2300      	movs	r3, #0
 80026c4:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80026c6:	2300      	movs	r3, #0
 80026c8:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 80026ca:	2300      	movs	r3, #0
 80026cc:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 80026ce:	2300      	movs	r3, #0
 80026d0:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80026d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80026d6:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80026d8:	2305      	movs	r3, #5
 80026da:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 80026dc:	2300      	movs	r3, #0
 80026de:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 80026e0:	2300      	movs	r3, #0
 80026e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 80026e4:	2300      	movs	r3, #0
 80026e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 80026e8:	2300      	movs	r3, #0
 80026ea:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 80026ee:	2300      	movs	r3, #0
 80026f0:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 80026f4:	2300      	movs	r3, #0
 80026f6:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 80026fa:	463b      	mov	r3, r7
 80026fc:	2201      	movs	r2, #1
 80026fe:	4619      	mov	r1, r3
 8002700:	4805      	ldr	r0, [pc, #20]	@ (8002718 <MX_LTDC_Init+0x15c>)
 8002702:	f002 feab 	bl	800545c <HAL_LTDC_ConfigLayer>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 800270c:	f000 fa4c 	bl	8002ba8 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8002710:	bf00      	nop
 8002712:	3768      	adds	r7, #104	@ 0x68
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	20025a70 	.word	0x20025a70
 800271c:	40016800 	.word	0x40016800

08002720 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8002724:	4b06      	ldr	r3, [pc, #24]	@ (8002740 <MX_RNG_Init+0x20>)
 8002726:	4a07      	ldr	r2, [pc, #28]	@ (8002744 <MX_RNG_Init+0x24>)
 8002728:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800272a:	4805      	ldr	r0, [pc, #20]	@ (8002740 <MX_RNG_Init+0x20>)
 800272c:	f003 feb0 	bl	8006490 <HAL_RNG_Init>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d001      	beq.n	800273a <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8002736:	f000 fa37 	bl	8002ba8 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800273a:	bf00      	nop
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	20025b18 	.word	0x20025b18
 8002744:	50060800 	.word	0x50060800

08002748 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 800274c:	4b17      	ldr	r3, [pc, #92]	@ (80027ac <MX_SPI5_Init+0x64>)
 800274e:	4a18      	ldr	r2, [pc, #96]	@ (80027b0 <MX_SPI5_Init+0x68>)
 8002750:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8002752:	4b16      	ldr	r3, [pc, #88]	@ (80027ac <MX_SPI5_Init+0x64>)
 8002754:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002758:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800275a:	4b14      	ldr	r3, [pc, #80]	@ (80027ac <MX_SPI5_Init+0x64>)
 800275c:	2200      	movs	r2, #0
 800275e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8002760:	4b12      	ldr	r3, [pc, #72]	@ (80027ac <MX_SPI5_Init+0x64>)
 8002762:	2200      	movs	r2, #0
 8002764:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002766:	4b11      	ldr	r3, [pc, #68]	@ (80027ac <MX_SPI5_Init+0x64>)
 8002768:	2200      	movs	r2, #0
 800276a:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800276c:	4b0f      	ldr	r3, [pc, #60]	@ (80027ac <MX_SPI5_Init+0x64>)
 800276e:	2200      	movs	r2, #0
 8002770:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8002772:	4b0e      	ldr	r3, [pc, #56]	@ (80027ac <MX_SPI5_Init+0x64>)
 8002774:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002778:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800277a:	4b0c      	ldr	r3, [pc, #48]	@ (80027ac <MX_SPI5_Init+0x64>)
 800277c:	2200      	movs	r2, #0
 800277e:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002780:	4b0a      	ldr	r3, [pc, #40]	@ (80027ac <MX_SPI5_Init+0x64>)
 8002782:	2200      	movs	r2, #0
 8002784:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8002786:	4b09      	ldr	r3, [pc, #36]	@ (80027ac <MX_SPI5_Init+0x64>)
 8002788:	2200      	movs	r2, #0
 800278a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800278c:	4b07      	ldr	r3, [pc, #28]	@ (80027ac <MX_SPI5_Init+0x64>)
 800278e:	2200      	movs	r2, #0
 8002790:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 8002792:	4b06      	ldr	r3, [pc, #24]	@ (80027ac <MX_SPI5_Init+0x64>)
 8002794:	220a      	movs	r2, #10
 8002796:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8002798:	4804      	ldr	r0, [pc, #16]	@ (80027ac <MX_SPI5_Init+0x64>)
 800279a:	f003 fea3 	bl	80064e4 <HAL_SPI_Init>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d001      	beq.n	80027a8 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80027a4:	f000 fa00 	bl	8002ba8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80027a8:	bf00      	nop
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	20025b28 	.word	0x20025b28
 80027b0:	40015000 	.word	0x40015000

080027b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b086      	sub	sp, #24
 80027b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027ba:	f107 0308 	add.w	r3, r7, #8
 80027be:	2200      	movs	r2, #0
 80027c0:	601a      	str	r2, [r3, #0]
 80027c2:	605a      	str	r2, [r3, #4]
 80027c4:	609a      	str	r2, [r3, #8]
 80027c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027c8:	463b      	mov	r3, r7
 80027ca:	2200      	movs	r2, #0
 80027cc:	601a      	str	r2, [r3, #0]
 80027ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80027d0:	4b1d      	ldr	r3, [pc, #116]	@ (8002848 <MX_TIM2_Init+0x94>)
 80027d2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80027d6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80027d8:	4b1b      	ldr	r3, [pc, #108]	@ (8002848 <MX_TIM2_Init+0x94>)
 80027da:	2200      	movs	r2, #0
 80027dc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027de:	4b1a      	ldr	r3, [pc, #104]	@ (8002848 <MX_TIM2_Init+0x94>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80027e4:	4b18      	ldr	r3, [pc, #96]	@ (8002848 <MX_TIM2_Init+0x94>)
 80027e6:	f04f 32ff 	mov.w	r2, #4294967295
 80027ea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027ec:	4b16      	ldr	r3, [pc, #88]	@ (8002848 <MX_TIM2_Init+0x94>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027f2:	4b15      	ldr	r3, [pc, #84]	@ (8002848 <MX_TIM2_Init+0x94>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80027f8:	4813      	ldr	r0, [pc, #76]	@ (8002848 <MX_TIM2_Init+0x94>)
 80027fa:	f004 fafb 	bl	8006df4 <HAL_TIM_Base_Init>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d001      	beq.n	8002808 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002804:	f000 f9d0 	bl	8002ba8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002808:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800280c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800280e:	f107 0308 	add.w	r3, r7, #8
 8002812:	4619      	mov	r1, r3
 8002814:	480c      	ldr	r0, [pc, #48]	@ (8002848 <MX_TIM2_Init+0x94>)
 8002816:	f004 fb3c 	bl	8006e92 <HAL_TIM_ConfigClockSource>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002820:	f000 f9c2 	bl	8002ba8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002824:	2300      	movs	r3, #0
 8002826:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002828:	2300      	movs	r3, #0
 800282a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800282c:	463b      	mov	r3, r7
 800282e:	4619      	mov	r1, r3
 8002830:	4805      	ldr	r0, [pc, #20]	@ (8002848 <MX_TIM2_Init+0x94>)
 8002832:	f004 fd3b 	bl	80072ac <HAL_TIMEx_MasterConfigSynchronization>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d001      	beq.n	8002840 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800283c:	f000 f9b4 	bl	8002ba8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002840:	bf00      	nop
 8002842:	3718      	adds	r7, #24
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	20025b80 	.word	0x20025b80

0800284c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b08e      	sub	sp, #56	@ 0x38
 8002850:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002852:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002856:	2200      	movs	r2, #0
 8002858:	601a      	str	r2, [r3, #0]
 800285a:	605a      	str	r2, [r3, #4]
 800285c:	609a      	str	r2, [r3, #8]
 800285e:	60da      	str	r2, [r3, #12]
 8002860:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002862:	2300      	movs	r3, #0
 8002864:	623b      	str	r3, [r7, #32]
 8002866:	4bb2      	ldr	r3, [pc, #712]	@ (8002b30 <MX_GPIO_Init+0x2e4>)
 8002868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800286a:	4ab1      	ldr	r2, [pc, #708]	@ (8002b30 <MX_GPIO_Init+0x2e4>)
 800286c:	f043 0304 	orr.w	r3, r3, #4
 8002870:	6313      	str	r3, [r2, #48]	@ 0x30
 8002872:	4baf      	ldr	r3, [pc, #700]	@ (8002b30 <MX_GPIO_Init+0x2e4>)
 8002874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002876:	f003 0304 	and.w	r3, r3, #4
 800287a:	623b      	str	r3, [r7, #32]
 800287c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800287e:	2300      	movs	r3, #0
 8002880:	61fb      	str	r3, [r7, #28]
 8002882:	4bab      	ldr	r3, [pc, #684]	@ (8002b30 <MX_GPIO_Init+0x2e4>)
 8002884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002886:	4aaa      	ldr	r2, [pc, #680]	@ (8002b30 <MX_GPIO_Init+0x2e4>)
 8002888:	f043 0320 	orr.w	r3, r3, #32
 800288c:	6313      	str	r3, [r2, #48]	@ 0x30
 800288e:	4ba8      	ldr	r3, [pc, #672]	@ (8002b30 <MX_GPIO_Init+0x2e4>)
 8002890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002892:	f003 0320 	and.w	r3, r3, #32
 8002896:	61fb      	str	r3, [r7, #28]
 8002898:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800289a:	2300      	movs	r3, #0
 800289c:	61bb      	str	r3, [r7, #24]
 800289e:	4ba4      	ldr	r3, [pc, #656]	@ (8002b30 <MX_GPIO_Init+0x2e4>)
 80028a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028a2:	4aa3      	ldr	r2, [pc, #652]	@ (8002b30 <MX_GPIO_Init+0x2e4>)
 80028a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80028aa:	4ba1      	ldr	r3, [pc, #644]	@ (8002b30 <MX_GPIO_Init+0x2e4>)
 80028ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028b2:	61bb      	str	r3, [r7, #24]
 80028b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028b6:	2300      	movs	r3, #0
 80028b8:	617b      	str	r3, [r7, #20]
 80028ba:	4b9d      	ldr	r3, [pc, #628]	@ (8002b30 <MX_GPIO_Init+0x2e4>)
 80028bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028be:	4a9c      	ldr	r2, [pc, #624]	@ (8002b30 <MX_GPIO_Init+0x2e4>)
 80028c0:	f043 0301 	orr.w	r3, r3, #1
 80028c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80028c6:	4b9a      	ldr	r3, [pc, #616]	@ (8002b30 <MX_GPIO_Init+0x2e4>)
 80028c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ca:	f003 0301 	and.w	r3, r3, #1
 80028ce:	617b      	str	r3, [r7, #20]
 80028d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028d2:	2300      	movs	r3, #0
 80028d4:	613b      	str	r3, [r7, #16]
 80028d6:	4b96      	ldr	r3, [pc, #600]	@ (8002b30 <MX_GPIO_Init+0x2e4>)
 80028d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028da:	4a95      	ldr	r2, [pc, #596]	@ (8002b30 <MX_GPIO_Init+0x2e4>)
 80028dc:	f043 0302 	orr.w	r3, r3, #2
 80028e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80028e2:	4b93      	ldr	r3, [pc, #588]	@ (8002b30 <MX_GPIO_Init+0x2e4>)
 80028e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028e6:	f003 0302 	and.w	r3, r3, #2
 80028ea:	613b      	str	r3, [r7, #16]
 80028ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80028ee:	2300      	movs	r3, #0
 80028f0:	60fb      	str	r3, [r7, #12]
 80028f2:	4b8f      	ldr	r3, [pc, #572]	@ (8002b30 <MX_GPIO_Init+0x2e4>)
 80028f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f6:	4a8e      	ldr	r2, [pc, #568]	@ (8002b30 <MX_GPIO_Init+0x2e4>)
 80028f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80028fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80028fe:	4b8c      	ldr	r3, [pc, #560]	@ (8002b30 <MX_GPIO_Init+0x2e4>)
 8002900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002902:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002906:	60fb      	str	r3, [r7, #12]
 8002908:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800290a:	2300      	movs	r3, #0
 800290c:	60bb      	str	r3, [r7, #8]
 800290e:	4b88      	ldr	r3, [pc, #544]	@ (8002b30 <MX_GPIO_Init+0x2e4>)
 8002910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002912:	4a87      	ldr	r2, [pc, #540]	@ (8002b30 <MX_GPIO_Init+0x2e4>)
 8002914:	f043 0310 	orr.w	r3, r3, #16
 8002918:	6313      	str	r3, [r2, #48]	@ 0x30
 800291a:	4b85      	ldr	r3, [pc, #532]	@ (8002b30 <MX_GPIO_Init+0x2e4>)
 800291c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800291e:	f003 0310 	and.w	r3, r3, #16
 8002922:	60bb      	str	r3, [r7, #8]
 8002924:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002926:	2300      	movs	r3, #0
 8002928:	607b      	str	r3, [r7, #4]
 800292a:	4b81      	ldr	r3, [pc, #516]	@ (8002b30 <MX_GPIO_Init+0x2e4>)
 800292c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800292e:	4a80      	ldr	r2, [pc, #512]	@ (8002b30 <MX_GPIO_Init+0x2e4>)
 8002930:	f043 0308 	orr.w	r3, r3, #8
 8002934:	6313      	str	r3, [r2, #48]	@ 0x30
 8002936:	4b7e      	ldr	r3, [pc, #504]	@ (8002b30 <MX_GPIO_Init+0x2e4>)
 8002938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800293a:	f003 0308 	and.w	r3, r3, #8
 800293e:	607b      	str	r3, [r7, #4]
 8002940:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8002942:	2200      	movs	r2, #0
 8002944:	2116      	movs	r1, #22
 8002946:	487b      	ldr	r0, [pc, #492]	@ (8002b34 <MX_GPIO_Init+0x2e8>)
 8002948:	f001 fbfe 	bl	8004148 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 800294c:	2200      	movs	r2, #0
 800294e:	2180      	movs	r1, #128	@ 0x80
 8002950:	4879      	ldr	r0, [pc, #484]	@ (8002b38 <MX_GPIO_Init+0x2ec>)
 8002952:	f001 fbf9 	bl	8004148 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8002956:	2200      	movs	r2, #0
 8002958:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 800295c:	4877      	ldr	r0, [pc, #476]	@ (8002b3c <MX_GPIO_Init+0x2f0>)
 800295e:	f001 fbf3 	bl	8004148 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8002962:	2200      	movs	r2, #0
 8002964:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8002968:	4875      	ldr	r0, [pc, #468]	@ (8002b40 <MX_GPIO_Init+0x2f4>)
 800296a:	f001 fbed 	bl	8004148 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 800296e:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8002972:	627b      	str	r3, [r7, #36]	@ 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002974:	2302      	movs	r3, #2
 8002976:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002978:	2300      	movs	r3, #0
 800297a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800297c:	2303      	movs	r3, #3
 800297e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002980:	230c      	movs	r3, #12
 8002982:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002984:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002988:	4619      	mov	r1, r3
 800298a:	486e      	ldr	r0, [pc, #440]	@ (8002b44 <MX_GPIO_Init+0x2f8>)
 800298c:	f001 f90c 	bl	8003ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8002990:	2301      	movs	r3, #1
 8002992:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002994:	2302      	movs	r3, #2
 8002996:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002998:	2300      	movs	r3, #0
 800299a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800299c:	2303      	movs	r3, #3
 800299e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80029a0:	230c      	movs	r3, #12
 80029a2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80029a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029a8:	4619      	mov	r1, r3
 80029aa:	4862      	ldr	r0, [pc, #392]	@ (8002b34 <MX_GPIO_Init+0x2e8>)
 80029ac:	f001 f8fc 	bl	8003ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80029b0:	2316      	movs	r3, #22
 80029b2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029b4:	2301      	movs	r3, #1
 80029b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b8:	2300      	movs	r3, #0
 80029ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029bc:	2300      	movs	r3, #0
 80029be:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029c4:	4619      	mov	r1, r3
 80029c6:	485b      	ldr	r0, [pc, #364]	@ (8002b34 <MX_GPIO_Init+0x2e8>)
 80029c8:	f001 f8ee 	bl	8003ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 80029cc:	f248 0307 	movw	r3, #32775	@ 0x8007
 80029d0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80029d2:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80029d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d8:	2300      	movs	r3, #0
 80029da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029e0:	4619      	mov	r1, r3
 80029e2:	4855      	ldr	r0, [pc, #340]	@ (8002b38 <MX_GPIO_Init+0x2ec>)
 80029e4:	f001 f8e0 	bl	8003ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 80029e8:	2380      	movs	r3, #128	@ 0x80
 80029ea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029ec:	2301      	movs	r3, #1
 80029ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f0:	2300      	movs	r3, #0
 80029f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029f4:	2300      	movs	r3, #0
 80029f6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 80029f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029fc:	4619      	mov	r1, r3
 80029fe:	484e      	ldr	r0, [pc, #312]	@ (8002b38 <MX_GPIO_Init+0x2ec>)
 8002a00:	f001 f8d2 	bl	8003ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8002a04:	2320      	movs	r3, #32
 8002a06:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002a08:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002a0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8002a12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a16:	4619      	mov	r1, r3
 8002a18:	4846      	ldr	r0, [pc, #280]	@ (8002b34 <MX_GPIO_Init+0x2e8>)
 8002a1a:	f001 f8c5 	bl	8003ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8002a1e:	2304      	movs	r3, #4
 8002a20:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a22:	2300      	movs	r3, #0
 8002a24:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a26:	2300      	movs	r3, #0
 8002a28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8002a2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a2e:	4619      	mov	r1, r3
 8002a30:	4845      	ldr	r0, [pc, #276]	@ (8002b48 <MX_GPIO_Init+0x2fc>)
 8002a32:	f001 f8b9 	bl	8003ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8002a36:	f248 1333 	movw	r3, #33075	@ 0x8133
 8002a3a:	627b      	str	r3, [r7, #36]	@ 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a3c:	2302      	movs	r3, #2
 8002a3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a40:	2300      	movs	r3, #0
 8002a42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a44:	2303      	movs	r3, #3
 8002a46:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002a48:	230c      	movs	r3, #12
 8002a4a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002a4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a50:	4619      	mov	r1, r3
 8002a52:	483b      	ldr	r0, [pc, #236]	@ (8002b40 <MX_GPIO_Init+0x2f4>)
 8002a54:	f001 f8a8 	bl	8003ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8002a58:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8002a5c:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a5e:	2302      	movs	r3, #2
 8002a60:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a62:	2300      	movs	r3, #0
 8002a64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a66:	2303      	movs	r3, #3
 8002a68:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002a6a:	230c      	movs	r3, #12
 8002a6c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a72:	4619      	mov	r1, r3
 8002a74:	4835      	ldr	r0, [pc, #212]	@ (8002b4c <MX_GPIO_Init+0x300>)
 8002a76:	f001 f897 	bl	8003ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8002a7a:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8002a7e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a80:	2302      	movs	r3, #2
 8002a82:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a84:	2300      	movs	r3, #0
 8002a86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8002a8c:	230c      	movs	r3, #12
 8002a8e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a94:	4619      	mov	r1, r3
 8002a96:	482c      	ldr	r0, [pc, #176]	@ (8002b48 <MX_GPIO_Init+0x2fc>)
 8002a98:	f001 f886 	bl	8003ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8002a9c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002aa0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8002aaa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002aae:	4619      	mov	r1, r3
 8002ab0:	4825      	ldr	r0, [pc, #148]	@ (8002b48 <MX_GPIO_Init+0x2fc>)
 8002ab2:	f001 f879 	bl	8003ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8002ab6:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8002aba:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002abc:	2302      	movs	r3, #2
 8002abe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002ac8:	230c      	movs	r3, #12
 8002aca:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002acc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	481a      	ldr	r0, [pc, #104]	@ (8002b3c <MX_GPIO_Init+0x2f0>)
 8002ad4:	f001 f868 	bl	8003ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8002ad8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002adc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8002ae6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002aea:	4619      	mov	r1, r3
 8002aec:	4813      	ldr	r0, [pc, #76]	@ (8002b3c <MX_GPIO_Init+0x2f0>)
 8002aee:	f001 f85b 	bl	8003ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8002af2:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002af6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002af8:	2301      	movs	r3, #1
 8002afa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002afc:	2300      	movs	r3, #0
 8002afe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b00:	2300      	movs	r3, #0
 8002b02:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b08:	4619      	mov	r1, r3
 8002b0a:	480c      	ldr	r0, [pc, #48]	@ (8002b3c <MX_GPIO_Init+0x2f0>)
 8002b0c:	f001 f84c 	bl	8003ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002b10:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002b14:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b16:	2302      	movs	r3, #2
 8002b18:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002b22:	2307      	movs	r3, #7
 8002b24:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	e010      	b.n	8002b50 <MX_GPIO_Init+0x304>
 8002b2e:	bf00      	nop
 8002b30:	40023800 	.word	0x40023800
 8002b34:	40020800 	.word	0x40020800
 8002b38:	40020000 	.word	0x40020000
 8002b3c:	40020c00 	.word	0x40020c00
 8002b40:	40021800 	.word	0x40021800
 8002b44:	40021400 	.word	0x40021400
 8002b48:	40020400 	.word	0x40020400
 8002b4c:	40021000 	.word	0x40021000
 8002b50:	4812      	ldr	r0, [pc, #72]	@ (8002b9c <MX_GPIO_Init+0x350>)
 8002b52:	f001 f829 	bl	8003ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8002b56:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8002b5a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b60:	2300      	movs	r3, #0
 8002b62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b64:	2300      	movs	r3, #0
 8002b66:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002b68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	480c      	ldr	r0, [pc, #48]	@ (8002ba0 <MX_GPIO_Init+0x354>)
 8002b70:	f001 f81a 	bl	8003ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8002b74:	2360      	movs	r3, #96	@ 0x60
 8002b76:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b78:	2302      	movs	r3, #2
 8002b7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b80:	2303      	movs	r3, #3
 8002b82:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002b84:	230c      	movs	r3, #12
 8002b86:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	4805      	ldr	r0, [pc, #20]	@ (8002ba4 <MX_GPIO_Init+0x358>)
 8002b90:	f001 f80a 	bl	8003ba8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002b94:	bf00      	nop
 8002b96:	3738      	adds	r7, #56	@ 0x38
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	40020000 	.word	0x40020000
 8002ba0:	40021800 	.word	0x40021800
 8002ba4:	40020400 	.word	0x40020400

08002ba8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002bac:	b672      	cpsid	i
}
 8002bae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002bb0:	bf00      	nop
 8002bb2:	e7fd      	b.n	8002bb0 <Error_Handler+0x8>

08002bb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bba:	2300      	movs	r3, #0
 8002bbc:	607b      	str	r3, [r7, #4]
 8002bbe:	4b10      	ldr	r3, [pc, #64]	@ (8002c00 <HAL_MspInit+0x4c>)
 8002bc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bc2:	4a0f      	ldr	r2, [pc, #60]	@ (8002c00 <HAL_MspInit+0x4c>)
 8002bc4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002bc8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002bca:	4b0d      	ldr	r3, [pc, #52]	@ (8002c00 <HAL_MspInit+0x4c>)
 8002bcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bd2:	607b      	str	r3, [r7, #4]
 8002bd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	603b      	str	r3, [r7, #0]
 8002bda:	4b09      	ldr	r3, [pc, #36]	@ (8002c00 <HAL_MspInit+0x4c>)
 8002bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bde:	4a08      	ldr	r2, [pc, #32]	@ (8002c00 <HAL_MspInit+0x4c>)
 8002be0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002be4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002be6:	4b06      	ldr	r3, [pc, #24]	@ (8002c00 <HAL_MspInit+0x4c>)
 8002be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bee:	603b      	str	r3, [r7, #0]
 8002bf0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002bf2:	2007      	movs	r0, #7
 8002bf4:	f000 ff88 	bl	8003b08 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002bf8:	bf00      	nop
 8002bfa:	3708      	adds	r7, #8
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	40023800 	.word	0x40023800

08002c04 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b08a      	sub	sp, #40	@ 0x28
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c0c:	f107 0314 	add.w	r3, r7, #20
 8002c10:	2200      	movs	r2, #0
 8002c12:	601a      	str	r2, [r3, #0]
 8002c14:	605a      	str	r2, [r3, #4]
 8002c16:	609a      	str	r2, [r3, #8]
 8002c18:	60da      	str	r2, [r3, #12]
 8002c1a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a29      	ldr	r2, [pc, #164]	@ (8002cc8 <HAL_I2C_MspInit+0xc4>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d14b      	bne.n	8002cbe <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c26:	2300      	movs	r3, #0
 8002c28:	613b      	str	r3, [r7, #16]
 8002c2a:	4b28      	ldr	r3, [pc, #160]	@ (8002ccc <HAL_I2C_MspInit+0xc8>)
 8002c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c2e:	4a27      	ldr	r2, [pc, #156]	@ (8002ccc <HAL_I2C_MspInit+0xc8>)
 8002c30:	f043 0304 	orr.w	r3, r3, #4
 8002c34:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c36:	4b25      	ldr	r3, [pc, #148]	@ (8002ccc <HAL_I2C_MspInit+0xc8>)
 8002c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c3a:	f003 0304 	and.w	r3, r3, #4
 8002c3e:	613b      	str	r3, [r7, #16]
 8002c40:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c42:	2300      	movs	r3, #0
 8002c44:	60fb      	str	r3, [r7, #12]
 8002c46:	4b21      	ldr	r3, [pc, #132]	@ (8002ccc <HAL_I2C_MspInit+0xc8>)
 8002c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c4a:	4a20      	ldr	r2, [pc, #128]	@ (8002ccc <HAL_I2C_MspInit+0xc8>)
 8002c4c:	f043 0301 	orr.w	r3, r3, #1
 8002c50:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c52:	4b1e      	ldr	r3, [pc, #120]	@ (8002ccc <HAL_I2C_MspInit+0xc8>)
 8002c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c56:	f003 0301 	and.w	r3, r3, #1
 8002c5a:	60fb      	str	r3, [r7, #12]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8002c5e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002c62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c64:	2312      	movs	r3, #18
 8002c66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002c70:	2304      	movs	r3, #4
 8002c72:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8002c74:	f107 0314 	add.w	r3, r7, #20
 8002c78:	4619      	mov	r1, r3
 8002c7a:	4815      	ldr	r0, [pc, #84]	@ (8002cd0 <HAL_I2C_MspInit+0xcc>)
 8002c7c:	f000 ff94 	bl	8003ba8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8002c80:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c86:	2312      	movs	r3, #18
 8002c88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002c92:	2304      	movs	r3, #4
 8002c94:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8002c96:	f107 0314 	add.w	r3, r7, #20
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	480d      	ldr	r0, [pc, #52]	@ (8002cd4 <HAL_I2C_MspInit+0xd0>)
 8002c9e:	f000 ff83 	bl	8003ba8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	60bb      	str	r3, [r7, #8]
 8002ca6:	4b09      	ldr	r3, [pc, #36]	@ (8002ccc <HAL_I2C_MspInit+0xc8>)
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002caa:	4a08      	ldr	r2, [pc, #32]	@ (8002ccc <HAL_I2C_MspInit+0xc8>)
 8002cac:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002cb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cb2:	4b06      	ldr	r3, [pc, #24]	@ (8002ccc <HAL_I2C_MspInit+0xc8>)
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002cba:	60bb      	str	r3, [r7, #8]
 8002cbc:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8002cbe:	bf00      	nop
 8002cc0:	3728      	adds	r7, #40	@ 0x28
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	40005c00 	.word	0x40005c00
 8002ccc:	40023800 	.word	0x40023800
 8002cd0:	40020800 	.word	0x40020800
 8002cd4:	40020000 	.word	0x40020000

08002cd8 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b09a      	sub	sp, #104	@ 0x68
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ce0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	601a      	str	r2, [r3, #0]
 8002ce8:	605a      	str	r2, [r3, #4]
 8002cea:	609a      	str	r2, [r3, #8]
 8002cec:	60da      	str	r2, [r3, #12]
 8002cee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002cf0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002cf4:	2230      	movs	r2, #48	@ 0x30
 8002cf6:	2100      	movs	r1, #0
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f004 fb53 	bl	80073a4 <memset>
  if(hltdc->Instance==LTDC)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a81      	ldr	r2, [pc, #516]	@ (8002f08 <HAL_LTDC_MspInit+0x230>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	f040 80fb 	bne.w	8002f00 <HAL_LTDC_MspInit+0x228>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002d0a:	2308      	movs	r3, #8
 8002d0c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 200;
 8002d0e:	23c8      	movs	r3, #200	@ 0xc8
 8002d10:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8002d12:	2302      	movs	r3, #2
 8002d14:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_16;
 8002d16:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8002d1a:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d20:	4618      	mov	r0, r3
 8002d22:	f003 f9f5 	bl	8006110 <HAL_RCCEx_PeriphCLKConfig>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d001      	beq.n	8002d30 <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 8002d2c:	f7ff ff3c 	bl	8002ba8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002d30:	2300      	movs	r3, #0
 8002d32:	623b      	str	r3, [r7, #32]
 8002d34:	4b75      	ldr	r3, [pc, #468]	@ (8002f0c <HAL_LTDC_MspInit+0x234>)
 8002d36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d38:	4a74      	ldr	r2, [pc, #464]	@ (8002f0c <HAL_LTDC_MspInit+0x234>)
 8002d3a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002d3e:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d40:	4b72      	ldr	r3, [pc, #456]	@ (8002f0c <HAL_LTDC_MspInit+0x234>)
 8002d42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d44:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002d48:	623b      	str	r3, [r7, #32]
 8002d4a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	61fb      	str	r3, [r7, #28]
 8002d50:	4b6e      	ldr	r3, [pc, #440]	@ (8002f0c <HAL_LTDC_MspInit+0x234>)
 8002d52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d54:	4a6d      	ldr	r2, [pc, #436]	@ (8002f0c <HAL_LTDC_MspInit+0x234>)
 8002d56:	f043 0320 	orr.w	r3, r3, #32
 8002d5a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d5c:	4b6b      	ldr	r3, [pc, #428]	@ (8002f0c <HAL_LTDC_MspInit+0x234>)
 8002d5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d60:	f003 0320 	and.w	r3, r3, #32
 8002d64:	61fb      	str	r3, [r7, #28]
 8002d66:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d68:	2300      	movs	r3, #0
 8002d6a:	61bb      	str	r3, [r7, #24]
 8002d6c:	4b67      	ldr	r3, [pc, #412]	@ (8002f0c <HAL_LTDC_MspInit+0x234>)
 8002d6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d70:	4a66      	ldr	r2, [pc, #408]	@ (8002f0c <HAL_LTDC_MspInit+0x234>)
 8002d72:	f043 0301 	orr.w	r3, r3, #1
 8002d76:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d78:	4b64      	ldr	r3, [pc, #400]	@ (8002f0c <HAL_LTDC_MspInit+0x234>)
 8002d7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d7c:	f003 0301 	and.w	r3, r3, #1
 8002d80:	61bb      	str	r3, [r7, #24]
 8002d82:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d84:	2300      	movs	r3, #0
 8002d86:	617b      	str	r3, [r7, #20]
 8002d88:	4b60      	ldr	r3, [pc, #384]	@ (8002f0c <HAL_LTDC_MspInit+0x234>)
 8002d8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d8c:	4a5f      	ldr	r2, [pc, #380]	@ (8002f0c <HAL_LTDC_MspInit+0x234>)
 8002d8e:	f043 0302 	orr.w	r3, r3, #2
 8002d92:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d94:	4b5d      	ldr	r3, [pc, #372]	@ (8002f0c <HAL_LTDC_MspInit+0x234>)
 8002d96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d98:	f003 0302 	and.w	r3, r3, #2
 8002d9c:	617b      	str	r3, [r7, #20]
 8002d9e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002da0:	2300      	movs	r3, #0
 8002da2:	613b      	str	r3, [r7, #16]
 8002da4:	4b59      	ldr	r3, [pc, #356]	@ (8002f0c <HAL_LTDC_MspInit+0x234>)
 8002da6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002da8:	4a58      	ldr	r2, [pc, #352]	@ (8002f0c <HAL_LTDC_MspInit+0x234>)
 8002daa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002dae:	6313      	str	r3, [r2, #48]	@ 0x30
 8002db0:	4b56      	ldr	r3, [pc, #344]	@ (8002f0c <HAL_LTDC_MspInit+0x234>)
 8002db2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002db4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002db8:	613b      	str	r3, [r7, #16]
 8002dba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	60fb      	str	r3, [r7, #12]
 8002dc0:	4b52      	ldr	r3, [pc, #328]	@ (8002f0c <HAL_LTDC_MspInit+0x234>)
 8002dc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dc4:	4a51      	ldr	r2, [pc, #324]	@ (8002f0c <HAL_LTDC_MspInit+0x234>)
 8002dc6:	f043 0304 	orr.w	r3, r3, #4
 8002dca:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dcc:	4b4f      	ldr	r3, [pc, #316]	@ (8002f0c <HAL_LTDC_MspInit+0x234>)
 8002dce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dd0:	f003 0304 	and.w	r3, r3, #4
 8002dd4:	60fb      	str	r3, [r7, #12]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002dd8:	2300      	movs	r3, #0
 8002dda:	60bb      	str	r3, [r7, #8]
 8002ddc:	4b4b      	ldr	r3, [pc, #300]	@ (8002f0c <HAL_LTDC_MspInit+0x234>)
 8002dde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002de0:	4a4a      	ldr	r2, [pc, #296]	@ (8002f0c <HAL_LTDC_MspInit+0x234>)
 8002de2:	f043 0308 	orr.w	r3, r3, #8
 8002de6:	6313      	str	r3, [r2, #48]	@ 0x30
 8002de8:	4b48      	ldr	r3, [pc, #288]	@ (8002f0c <HAL_LTDC_MspInit+0x234>)
 8002dea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dec:	f003 0308 	and.w	r3, r3, #8
 8002df0:	60bb      	str	r3, [r7, #8]
 8002df2:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8002df4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002df8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dfa:	2302      	movs	r3, #2
 8002dfc:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e02:	2300      	movs	r3, #0
 8002e04:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002e06:	230e      	movs	r3, #14
 8002e08:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8002e0a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002e0e:	4619      	mov	r1, r3
 8002e10:	483f      	ldr	r0, [pc, #252]	@ (8002f10 <HAL_LTDC_MspInit+0x238>)
 8002e12:	f000 fec9 	bl	8003ba8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8002e16:	f641 0358 	movw	r3, #6232	@ 0x1858
 8002e1a:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e1c:	2302      	movs	r3, #2
 8002e1e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e20:	2300      	movs	r3, #0
 8002e22:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e24:	2300      	movs	r3, #0
 8002e26:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002e28:	230e      	movs	r3, #14
 8002e2a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e2c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002e30:	4619      	mov	r1, r3
 8002e32:	4838      	ldr	r0, [pc, #224]	@ (8002f14 <HAL_LTDC_MspInit+0x23c>)
 8002e34:	f000 feb8 	bl	8003ba8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e3c:	2302      	movs	r3, #2
 8002e3e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e40:	2300      	movs	r3, #0
 8002e42:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e44:	2300      	movs	r3, #0
 8002e46:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002e48:	2309      	movs	r3, #9
 8002e4a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e4c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002e50:	4619      	mov	r1, r3
 8002e52:	4831      	ldr	r0, [pc, #196]	@ (8002f18 <HAL_LTDC_MspInit+0x240>)
 8002e54:	f000 fea8 	bl	8003ba8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8002e58:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8002e5c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e5e:	2302      	movs	r3, #2
 8002e60:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e62:	2300      	movs	r3, #0
 8002e64:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e66:	2300      	movs	r3, #0
 8002e68:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002e6a:	230e      	movs	r3, #14
 8002e6c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e6e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002e72:	4619      	mov	r1, r3
 8002e74:	4828      	ldr	r0, [pc, #160]	@ (8002f18 <HAL_LTDC_MspInit+0x240>)
 8002e76:	f000 fe97 	bl	8003ba8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8002e7a:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8002e7e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e80:	2302      	movs	r3, #2
 8002e82:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e84:	2300      	movs	r3, #0
 8002e86:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002e8c:	230e      	movs	r3, #14
 8002e8e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002e90:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002e94:	4619      	mov	r1, r3
 8002e96:	4821      	ldr	r0, [pc, #132]	@ (8002f1c <HAL_LTDC_MspInit+0x244>)
 8002e98:	f000 fe86 	bl	8003ba8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8002e9c:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8002ea0:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002eae:	230e      	movs	r3, #14
 8002eb0:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002eb2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	4819      	ldr	r0, [pc, #100]	@ (8002f20 <HAL_LTDC_MspInit+0x248>)
 8002eba:	f000 fe75 	bl	8003ba8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8002ebe:	2348      	movs	r3, #72	@ 0x48
 8002ec0:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ec2:	2302      	movs	r3, #2
 8002ec4:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002ece:	230e      	movs	r3, #14
 8002ed0:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ed2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	4812      	ldr	r0, [pc, #72]	@ (8002f24 <HAL_LTDC_MspInit+0x24c>)
 8002eda:	f000 fe65 	bl	8003ba8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8002ede:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002ee2:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ee4:	2302      	movs	r3, #2
 8002ee6:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eec:	2300      	movs	r3, #0
 8002eee:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002ef0:	2309      	movs	r3, #9
 8002ef2:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002ef4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002ef8:	4619      	mov	r1, r3
 8002efa:	4808      	ldr	r0, [pc, #32]	@ (8002f1c <HAL_LTDC_MspInit+0x244>)
 8002efc:	f000 fe54 	bl	8003ba8 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8002f00:	bf00      	nop
 8002f02:	3768      	adds	r7, #104	@ 0x68
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	40016800 	.word	0x40016800
 8002f0c:	40023800 	.word	0x40023800
 8002f10:	40021400 	.word	0x40021400
 8002f14:	40020000 	.word	0x40020000
 8002f18:	40020400 	.word	0x40020400
 8002f1c:	40021800 	.word	0x40021800
 8002f20:	40020800 	.word	0x40020800
 8002f24:	40020c00 	.word	0x40020c00

08002f28 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b085      	sub	sp, #20
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a0b      	ldr	r2, [pc, #44]	@ (8002f64 <HAL_RNG_MspInit+0x3c>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d10d      	bne.n	8002f56 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	60fb      	str	r3, [r7, #12]
 8002f3e:	4b0a      	ldr	r3, [pc, #40]	@ (8002f68 <HAL_RNG_MspInit+0x40>)
 8002f40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f42:	4a09      	ldr	r2, [pc, #36]	@ (8002f68 <HAL_RNG_MspInit+0x40>)
 8002f44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f48:	6353      	str	r3, [r2, #52]	@ 0x34
 8002f4a:	4b07      	ldr	r3, [pc, #28]	@ (8002f68 <HAL_RNG_MspInit+0x40>)
 8002f4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f52:	60fb      	str	r3, [r7, #12]
 8002f54:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8002f56:	bf00      	nop
 8002f58:	3714      	adds	r7, #20
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop
 8002f64:	50060800 	.word	0x50060800
 8002f68:	40023800 	.word	0x40023800

08002f6c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b08a      	sub	sp, #40	@ 0x28
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f74:	f107 0314 	add.w	r3, r7, #20
 8002f78:	2200      	movs	r2, #0
 8002f7a:	601a      	str	r2, [r3, #0]
 8002f7c:	605a      	str	r2, [r3, #4]
 8002f7e:	609a      	str	r2, [r3, #8]
 8002f80:	60da      	str	r2, [r3, #12]
 8002f82:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a19      	ldr	r2, [pc, #100]	@ (8002ff0 <HAL_SPI_MspInit+0x84>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d12c      	bne.n	8002fe8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002f8e:	2300      	movs	r3, #0
 8002f90:	613b      	str	r3, [r7, #16]
 8002f92:	4b18      	ldr	r3, [pc, #96]	@ (8002ff4 <HAL_SPI_MspInit+0x88>)
 8002f94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f96:	4a17      	ldr	r2, [pc, #92]	@ (8002ff4 <HAL_SPI_MspInit+0x88>)
 8002f98:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f9e:	4b15      	ldr	r3, [pc, #84]	@ (8002ff4 <HAL_SPI_MspInit+0x88>)
 8002fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fa2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002fa6:	613b      	str	r3, [r7, #16]
 8002fa8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002faa:	2300      	movs	r3, #0
 8002fac:	60fb      	str	r3, [r7, #12]
 8002fae:	4b11      	ldr	r3, [pc, #68]	@ (8002ff4 <HAL_SPI_MspInit+0x88>)
 8002fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fb2:	4a10      	ldr	r2, [pc, #64]	@ (8002ff4 <HAL_SPI_MspInit+0x88>)
 8002fb4:	f043 0320 	orr.w	r3, r3, #32
 8002fb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fba:	4b0e      	ldr	r3, [pc, #56]	@ (8002ff4 <HAL_SPI_MspInit+0x88>)
 8002fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fbe:	f003 0320 	and.w	r3, r3, #32
 8002fc2:	60fb      	str	r3, [r7, #12]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8002fc6:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8002fca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fcc:	2302      	movs	r3, #2
 8002fce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002fd8:	2305      	movs	r3, #5
 8002fda:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002fdc:	f107 0314 	add.w	r3, r7, #20
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	4805      	ldr	r0, [pc, #20]	@ (8002ff8 <HAL_SPI_MspInit+0x8c>)
 8002fe4:	f000 fde0 	bl	8003ba8 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8002fe8:	bf00      	nop
 8002fea:	3728      	adds	r7, #40	@ 0x28
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	40015000 	.word	0x40015000
 8002ff4:	40023800 	.word	0x40023800
 8002ff8:	40021400 	.word	0x40021400

08002ffc <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a08      	ldr	r2, [pc, #32]	@ (800302c <HAL_SPI_MspDeInit+0x30>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d10a      	bne.n	8003024 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 800300e:	4b08      	ldr	r3, [pc, #32]	@ (8003030 <HAL_SPI_MspDeInit+0x34>)
 8003010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003012:	4a07      	ldr	r2, [pc, #28]	@ (8003030 <HAL_SPI_MspDeInit+0x34>)
 8003014:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003018:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 800301a:	f44f 7160 	mov.w	r1, #896	@ 0x380
 800301e:	4805      	ldr	r0, [pc, #20]	@ (8003034 <HAL_SPI_MspDeInit+0x38>)
 8003020:	f000 ff6e 	bl	8003f00 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8003024:	bf00      	nop
 8003026:	3708      	adds	r7, #8
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}
 800302c:	40015000 	.word	0x40015000
 8003030:	40023800 	.word	0x40023800
 8003034:	40021400 	.word	0x40021400

08003038 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003038:	b480      	push	{r7}
 800303a:	b085      	sub	sp, #20
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003048:	d10d      	bne.n	8003066 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800304a:	2300      	movs	r3, #0
 800304c:	60fb      	str	r3, [r7, #12]
 800304e:	4b09      	ldr	r3, [pc, #36]	@ (8003074 <HAL_TIM_Base_MspInit+0x3c>)
 8003050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003052:	4a08      	ldr	r2, [pc, #32]	@ (8003074 <HAL_TIM_Base_MspInit+0x3c>)
 8003054:	f043 0301 	orr.w	r3, r3, #1
 8003058:	6413      	str	r3, [r2, #64]	@ 0x40
 800305a:	4b06      	ldr	r3, [pc, #24]	@ (8003074 <HAL_TIM_Base_MspInit+0x3c>)
 800305c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800305e:	f003 0301 	and.w	r3, r3, #1
 8003062:	60fb      	str	r3, [r7, #12]
 8003064:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8003066:	bf00      	nop
 8003068:	3714      	adds	r7, #20
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr
 8003072:	bf00      	nop
 8003074:	40023800 	.word	0x40023800

08003078 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003078:	b480      	push	{r7}
 800307a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800307c:	bf00      	nop
 800307e:	e7fd      	b.n	800307c <NMI_Handler+0x4>

08003080 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003084:	bf00      	nop
 8003086:	e7fd      	b.n	8003084 <HardFault_Handler+0x4>

08003088 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003088:	b480      	push	{r7}
 800308a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800308c:	bf00      	nop
 800308e:	e7fd      	b.n	800308c <MemManage_Handler+0x4>

08003090 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003090:	b480      	push	{r7}
 8003092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003094:	bf00      	nop
 8003096:	e7fd      	b.n	8003094 <BusFault_Handler+0x4>

08003098 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003098:	b480      	push	{r7}
 800309a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800309c:	bf00      	nop
 800309e:	e7fd      	b.n	800309c <UsageFault_Handler+0x4>

080030a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80030a0:	b480      	push	{r7}
 80030a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80030a4:	bf00      	nop
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr

080030ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030ae:	b480      	push	{r7}
 80030b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030b2:	bf00      	nop
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030bc:	b480      	push	{r7}
 80030be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030c0:	bf00      	nop
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr

080030ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030ca:	b580      	push	{r7, lr}
 80030cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030ce:	f000 fbe3 	bl	8003898 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030d2:	bf00      	nop
 80030d4:	bd80      	pop	{r7, pc}

080030d6 <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 80030d6:	b580      	push	{r7, lr}
 80030d8:	b082      	sub	sp, #8
 80030da:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports 
    I2C3_MspInit();
 80030dc:	f000 f9ce 	bl	800347c <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 80030e0:	f000 f98e 	bl	8003400 <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 80030e4:	2202      	movs	r2, #2
 80030e6:	2103      	movs	r1, #3
 80030e8:	2082      	movs	r0, #130	@ 0x82
 80030ea:	f000 fa1b 	bl	8003524 <I2C3_Write>
    HAL_Delay(5);
 80030ee:	2005      	movs	r0, #5
 80030f0:	f000 fbf2 	bl	80038d8 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 80030f4:	2200      	movs	r2, #0
 80030f6:	2103      	movs	r1, #3
 80030f8:	2082      	movs	r0, #130	@ 0x82
 80030fa:	f000 fa13 	bl	8003524 <I2C3_Write>
    HAL_Delay(2);
 80030fe:	2002      	movs	r0, #2
 8003100:	f000 fbea 	bl	80038d8 <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 8003104:	1cba      	adds	r2, r7, #2
 8003106:	2302      	movs	r3, #2
 8003108:	2100      	movs	r1, #0
 800310a:	2082      	movs	r0, #130	@ 0x82
 800310c:	f000 fa5a 	bl	80035c4 <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 8003110:	887b      	ldrh	r3, [r7, #2]
 8003112:	021b      	lsls	r3, r3, #8
 8003114:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 8003116:	887b      	ldrh	r3, [r7, #2]
 8003118:	0a1b      	lsrs	r3, r3, #8
 800311a:	b29a      	uxth	r2, r3
 800311c:	88fb      	ldrh	r3, [r7, #6]
 800311e:	4313      	orrs	r3, r2
 8003120:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 8003122:	88fb      	ldrh	r3, [r7, #6]
 8003124:	f640 0211 	movw	r2, #2065	@ 0x811
 8003128:	4293      	cmp	r3, r2
 800312a:	d001      	beq.n	8003130 <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 800312c:	2303      	movs	r3, #3
 800312e:	e075      	b.n	800321c <STMPE811_Init+0x146>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8003130:	2202      	movs	r2, #2
 8003132:	2103      	movs	r1, #3
 8003134:	2082      	movs	r0, #130	@ 0x82
 8003136:	f000 f9f5 	bl	8003524 <I2C3_Write>
    HAL_Delay(5);
 800313a:	2005      	movs	r0, #5
 800313c:	f000 fbcc 	bl	80038d8 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8003140:	2200      	movs	r2, #0
 8003142:	2103      	movs	r1, #3
 8003144:	2082      	movs	r0, #130	@ 0x82
 8003146:	f000 f9ed 	bl	8003524 <I2C3_Write>
    HAL_Delay(2);
 800314a:	2002      	movs	r0, #2
 800314c:	f000 fbc4 	bl	80038d8 <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8003150:	2004      	movs	r0, #4
 8003152:	f000 f867 	bl	8003224 <STMPE811_Read>
 8003156:	4603      	mov	r3, r0
 8003158:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 800315a:	797b      	ldrb	r3, [r7, #5]
 800315c:	f023 0301 	bic.w	r3, r3, #1
 8003160:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8003162:	797b      	ldrb	r3, [r7, #5]
 8003164:	461a      	mov	r2, r3
 8003166:	2104      	movs	r1, #4
 8003168:	2082      	movs	r0, #130	@ 0x82
 800316a:	f000 f9db 	bl	8003524 <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 800316e:	2004      	movs	r0, #4
 8003170:	f000 f858 	bl	8003224 <STMPE811_Read>
 8003174:	4603      	mov	r3, r0
 8003176:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 8003178:	797b      	ldrb	r3, [r7, #5]
 800317a:	f023 0302 	bic.w	r3, r3, #2
 800317e:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8003180:	797b      	ldrb	r3, [r7, #5]
 8003182:	461a      	mov	r2, r3
 8003184:	2104      	movs	r1, #4
 8003186:	2082      	movs	r0, #130	@ 0x82
 8003188:	f000 f9cc 	bl	8003524 <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 800318c:	2249      	movs	r2, #73	@ 0x49
 800318e:	2120      	movs	r1, #32
 8003190:	2082      	movs	r0, #130	@ 0x82
 8003192:	f000 f9c7 	bl	8003524 <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 8003196:	2002      	movs	r0, #2
 8003198:	f000 fb9e 	bl	80038d8 <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 800319c:	2201      	movs	r2, #1
 800319e:	2121      	movs	r1, #33	@ 0x21
 80031a0:	2082      	movs	r0, #130	@ 0x82
 80031a2:	f000 f9bf 	bl	8003524 <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 80031a6:	2017      	movs	r0, #23
 80031a8:	f000 f83c 	bl	8003224 <STMPE811_Read>
 80031ac:	4603      	mov	r3, r0
 80031ae:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 80031b0:	797b      	ldrb	r3, [r7, #5]
 80031b2:	f043 031e 	orr.w	r3, r3, #30
 80031b6:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 80031b8:	797b      	ldrb	r3, [r7, #5]
 80031ba:	461a      	mov	r2, r3
 80031bc:	2117      	movs	r1, #23
 80031be:	2082      	movs	r0, #130	@ 0x82
 80031c0:	f000 f9b0 	bl	8003524 <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 80031c4:	229a      	movs	r2, #154	@ 0x9a
 80031c6:	2141      	movs	r1, #65	@ 0x41
 80031c8:	2082      	movs	r0, #130	@ 0x82
 80031ca:	f000 f9ab 	bl	8003524 <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 80031ce:	2201      	movs	r2, #1
 80031d0:	214a      	movs	r1, #74	@ 0x4a
 80031d2:	2082      	movs	r0, #130	@ 0x82
 80031d4:	f000 f9a6 	bl	8003524 <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 80031d8:	2201      	movs	r2, #1
 80031da:	214b      	movs	r1, #75	@ 0x4b
 80031dc:	2082      	movs	r0, #130	@ 0x82
 80031de:	f000 f9a1 	bl	8003524 <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 80031e2:	2200      	movs	r2, #0
 80031e4:	214b      	movs	r1, #75	@ 0x4b
 80031e6:	2082      	movs	r0, #130	@ 0x82
 80031e8:	f000 f99c 	bl	8003524 <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 80031ec:	2201      	movs	r2, #1
 80031ee:	2156      	movs	r1, #86	@ 0x56
 80031f0:	2082      	movs	r0, #130	@ 0x82
 80031f2:	f000 f997 	bl	8003524 <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 80031f6:	2201      	movs	r2, #1
 80031f8:	2158      	movs	r1, #88	@ 0x58
 80031fa:	2082      	movs	r0, #130	@ 0x82
 80031fc:	f000 f992 	bl	8003524 <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 8003200:	2203      	movs	r2, #3
 8003202:	2140      	movs	r1, #64	@ 0x40
 8003204:	2082      	movs	r0, #130	@ 0x82
 8003206:	f000 f98d 	bl	8003524 <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 800320a:	22ff      	movs	r2, #255	@ 0xff
 800320c:	210b      	movs	r1, #11
 800320e:	2082      	movs	r0, #130	@ 0x82
 8003210:	f000 f988 	bl	8003524 <I2C3_Write>
    
    /* Wait for 2 ms delay */
    HAL_Delay(200);
 8003214:	20c8      	movs	r0, #200	@ 0xc8
 8003216:	f000 fb5f 	bl	80038d8 <HAL_Delay>

    return STMPE811_State_Ok;
 800321a:	2302      	movs	r3, #2

}
 800321c:	4618      	mov	r0, r3
 800321e:	3708      	adds	r7, #8
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	4603      	mov	r3, r0
 800322c:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 800322e:	f107 020f 	add.w	r2, r7, #15
 8003232:	79fb      	ldrb	r3, [r7, #7]
 8003234:	4619      	mov	r1, r3
 8003236:	2082      	movs	r0, #130	@ 0x82
 8003238:	f000 f99e 	bl	8003578 <I2C3_Read>

    return readData;
 800323c:	7bfb      	ldrb	r3, [r7, #15]
}
 800323e:	4618      	mov	r0, r3
 8003240:	3710      	adds	r7, #16
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}

08003246 <STMPE811_ReadTouch>:
}

/* The below function was created by Tilen MAJERLE but modified by Xavion */

STMPE811_State_t STMPE811_ReadTouch(STMPE811_TouchData *structdata)  //TM Function
{
 8003246:	b580      	push	{r7, lr}
 8003248:	b084      	sub	sp, #16
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
    uint8_t val;

    /* Save state */
    structdata->last_pressed = structdata->pressed;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	791a      	ldrb	r2, [r3, #4]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	715a      	strb	r2, [r3, #5]

    /* Read */
    val = STMPE811_Read(STMPE811_TSC_CTRL);
 8003256:	2040      	movs	r0, #64	@ 0x40
 8003258:	f7ff ffe4 	bl	8003224 <STMPE811_Read>
 800325c:	4603      	mov	r3, r0
 800325e:	73fb      	strb	r3, [r7, #15]
    if ((val & 0x80) == 0) {
 8003260:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003264:	2b00      	cmp	r3, #0
 8003266:	db0e      	blt.n	8003286 <STMPE811_ReadTouch+0x40>
        //Not pressed
        structdata->pressed = STMPE811_State_Released;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	711a      	strb	r2, [r3, #4]

        //Reset Fifo
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 800326e:	2201      	movs	r2, #1
 8003270:	214b      	movs	r1, #75	@ 0x4b
 8003272:	2082      	movs	r0, #130	@ 0x82
 8003274:	f000 f956 	bl	8003524 <I2C3_Write>
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8003278:	2200      	movs	r2, #0
 800327a:	214b      	movs	r1, #75	@ 0x4b
 800327c:	2082      	movs	r0, #130	@ 0x82
 800327e:	f000 f951 	bl	8003524 <I2C3_Write>

        return STMPE811_State_Released;
 8003282:	2301      	movs	r3, #1
 8003284:	e0a7      	b.n	80033d6 <STMPE811_ReadTouch+0x190>

    /* Clear all the status pending bits if any */
    //TM_I2C_Write(STMPE811_I2C, STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);

    //Pressed
    if (structdata->orientation == STMPE811_Orientation_Portrait_1) {
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	799b      	ldrb	r3, [r3, #6]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d117      	bne.n	80032be <STMPE811_ReadTouch+0x78>
        structdata->x = 239 - TM_STMPE811_ReadX(structdata->x);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	881b      	ldrh	r3, [r3, #0]
 8003292:	4618      	mov	r0, r3
 8003294:	f000 f9b8 	bl	8003608 <TM_STMPE811_ReadX>
 8003298:	4603      	mov	r3, r0
 800329a:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 800329e:	b29a      	uxth	r2, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	801a      	strh	r2, [r3, #0]
        structdata->y = 319 - TM_STMPE811_ReadY(structdata->y);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	885b      	ldrh	r3, [r3, #2]
 80032a8:	4618      	mov	r0, r3
 80032aa:	f000 fa0d 	bl	80036c8 <TM_STMPE811_ReadY>
 80032ae:	4603      	mov	r3, r0
 80032b0:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 80032b4:	3301      	adds	r3, #1
 80032b6:	b29a      	uxth	r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	805a      	strh	r2, [r3, #2]
 80032bc:	e048      	b.n	8003350 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Portrait_2) {
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	799b      	ldrb	r3, [r3, #6]
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d112      	bne.n	80032ec <STMPE811_ReadTouch+0xa6>
        structdata->x = TM_STMPE811_ReadX(structdata->x);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	881b      	ldrh	r3, [r3, #0]
 80032ca:	4618      	mov	r0, r3
 80032cc:	f000 f99c 	bl	8003608 <TM_STMPE811_ReadX>
 80032d0:	4603      	mov	r3, r0
 80032d2:	461a      	mov	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	801a      	strh	r2, [r3, #0]
        structdata->y = TM_STMPE811_ReadY(structdata->y);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	885b      	ldrh	r3, [r3, #2]
 80032dc:	4618      	mov	r0, r3
 80032de:	f000 f9f3 	bl	80036c8 <TM_STMPE811_ReadY>
 80032e2:	4603      	mov	r3, r0
 80032e4:	461a      	mov	r2, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	805a      	strh	r2, [r3, #2]
 80032ea:	e031      	b.n	8003350 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_1) {
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	799b      	ldrb	r3, [r3, #6]
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	d115      	bne.n	8003320 <STMPE811_ReadTouch+0xda>
        structdata->y = TM_STMPE811_ReadX(structdata->y);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	885b      	ldrh	r3, [r3, #2]
 80032f8:	4618      	mov	r0, r3
 80032fa:	f000 f985 	bl	8003608 <TM_STMPE811_ReadX>
 80032fe:	4603      	mov	r3, r0
 8003300:	461a      	mov	r2, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	805a      	strh	r2, [r3, #2]
        structdata->x = 319 - TM_STMPE811_ReadY(structdata->x);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	881b      	ldrh	r3, [r3, #0]
 800330a:	4618      	mov	r0, r3
 800330c:	f000 f9dc 	bl	80036c8 <TM_STMPE811_ReadY>
 8003310:	4603      	mov	r3, r0
 8003312:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8003316:	3301      	adds	r3, #1
 8003318:	b29a      	uxth	r2, r3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	801a      	strh	r2, [r3, #0]
 800331e:	e017      	b.n	8003350 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_2) {
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	799b      	ldrb	r3, [r3, #6]
 8003324:	2b03      	cmp	r3, #3
 8003326:	d113      	bne.n	8003350 <STMPE811_ReadTouch+0x10a>
        structdata->y = 239 - TM_STMPE811_ReadX(structdata->x);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	881b      	ldrh	r3, [r3, #0]
 800332c:	4618      	mov	r0, r3
 800332e:	f000 f96b 	bl	8003608 <TM_STMPE811_ReadX>
 8003332:	4603      	mov	r3, r0
 8003334:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8003338:	b29a      	uxth	r2, r3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	805a      	strh	r2, [r3, #2]
        structdata->x = TM_STMPE811_ReadY(structdata->x);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	881b      	ldrh	r3, [r3, #0]
 8003342:	4618      	mov	r0, r3
 8003344:	f000 f9c0 	bl	80036c8 <TM_STMPE811_ReadY>
 8003348:	4603      	mov	r3, r0
 800334a:	461a      	mov	r2, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8003350:	2201      	movs	r2, #1
 8003352:	214b      	movs	r1, #75	@ 0x4b
 8003354:	2082      	movs	r0, #130	@ 0x82
 8003356:	f000 f8e5 	bl	8003524 <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 800335a:	2200      	movs	r2, #0
 800335c:	214b      	movs	r1, #75	@ 0x4b
 800335e:	2082      	movs	r0, #130	@ 0x82
 8003360:	f000 f8e0 	bl	8003524 <I2C3_Write>

    //Check for valid data
    if (structdata->orientation == STMPE811_Orientation_Portrait_1 || structdata->orientation == STMPE811_Orientation_Portrait_2) {
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	799b      	ldrb	r3, [r3, #6]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d003      	beq.n	8003374 <STMPE811_ReadTouch+0x12e>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	799b      	ldrb	r3, [r3, #6]
 8003370:	2b01      	cmp	r3, #1
 8003372:	d115      	bne.n	80033a0 <STMPE811_ReadTouch+0x15a>
        //Portrait
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	881b      	ldrh	r3, [r3, #0]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d027      	beq.n	80033cc <STMPE811_ReadTouch+0x186>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	881b      	ldrh	r3, [r3, #0]
 8003380:	2bee      	cmp	r3, #238	@ 0xee
 8003382:	d823      	bhi.n	80033cc <STMPE811_ReadTouch+0x186>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	885b      	ldrh	r3, [r3, #2]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d01f      	beq.n	80033cc <STMPE811_ReadTouch+0x186>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	885b      	ldrh	r3, [r3, #2]
 8003390:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 8003394:	d81a      	bhi.n	80033cc <STMPE811_ReadTouch+0x186>
            structdata->pressed = STMPE811_State_Pressed;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 800339c:	2300      	movs	r3, #0
 800339e:	e01a      	b.n	80033d6 <STMPE811_ReadTouch+0x190>
        }
    } else {
        //Landscape
        if (structdata->x > 0 && structdata->x < 319 && structdata->y > 0 && structdata->y < 239) {
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	881b      	ldrh	r3, [r3, #0]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d012      	beq.n	80033ce <STMPE811_ReadTouch+0x188>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	881b      	ldrh	r3, [r3, #0]
 80033ac:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 80033b0:	d80d      	bhi.n	80033ce <STMPE811_ReadTouch+0x188>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	885b      	ldrh	r3, [r3, #2]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d009      	beq.n	80033ce <STMPE811_ReadTouch+0x188>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	885b      	ldrh	r3, [r3, #2]
 80033be:	2bee      	cmp	r3, #238	@ 0xee
 80033c0:	d805      	bhi.n	80033ce <STMPE811_ReadTouch+0x188>
            structdata->pressed = STMPE811_State_Pressed;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 80033c8:	2300      	movs	r3, #0
 80033ca:	e004      	b.n	80033d6 <STMPE811_ReadTouch+0x190>
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 80033cc:	bf00      	nop
        }
    }

    structdata->pressed = STMPE811_State_Released;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2201      	movs	r2, #1
 80033d2:	711a      	strb	r2, [r3, #4]

    return STMPE811_State_Released;
 80033d4:	2301      	movs	r3, #1
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3710      	adds	r7, #16
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
	...

080033e0 <verifyHAL_I2C_IS_OKAY>:
    }
    return true;
}

//  ******************************** I2C Functions ********************************//
void verifyHAL_I2C_IS_OKAY(){
 80033e0:	b480      	push	{r7}
 80033e2:	af00      	add	r7, sp, #0
    if (HAL_status != HAL_OK)
 80033e4:	4b05      	ldr	r3, [pc, #20]	@ (80033fc <verifyHAL_I2C_IS_OKAY+0x1c>)
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d001      	beq.n	80033f0 <verifyHAL_I2C_IS_OKAY+0x10>
    {
        while(1);
 80033ec:	bf00      	nop
 80033ee:	e7fd      	b.n	80033ec <verifyHAL_I2C_IS_OKAY+0xc>
    }
}
 80033f0:	bf00      	nop
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop
 80033fc:	20025c1c 	.word	0x20025c1c

08003400 <I2C3_Init>:

static void I2C3_Init()
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 8003406:	2300      	movs	r3, #0
 8003408:	603b      	str	r3, [r7, #0]
 800340a:	4b18      	ldr	r3, [pc, #96]	@ (800346c <I2C3_Init+0x6c>)
 800340c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800340e:	4a17      	ldr	r2, [pc, #92]	@ (800346c <I2C3_Init+0x6c>)
 8003410:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003414:	6413      	str	r3, [r2, #64]	@ 0x40
 8003416:	4b15      	ldr	r3, [pc, #84]	@ (800346c <I2C3_Init+0x6c>)
 8003418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800341a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800341e:	603b      	str	r3, [r7, #0]
 8003420:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 8003422:	4b13      	ldr	r3, [pc, #76]	@ (8003470 <I2C3_Init+0x70>)
 8003424:	4a13      	ldr	r2, [pc, #76]	@ (8003474 <I2C3_Init+0x74>)
 8003426:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 8003428:	4b11      	ldr	r3, [pc, #68]	@ (8003470 <I2C3_Init+0x70>)
 800342a:	4a13      	ldr	r2, [pc, #76]	@ (8003478 <I2C3_Init+0x78>)
 800342c:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800342e:	4b10      	ldr	r3, [pc, #64]	@ (8003470 <I2C3_Init+0x70>)
 8003430:	2200      	movs	r2, #0
 8003432:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 8003434:	4b0e      	ldr	r3, [pc, #56]	@ (8003470 <I2C3_Init+0x70>)
 8003436:	2200      	movs	r2, #0
 8003438:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800343a:	4b0d      	ldr	r3, [pc, #52]	@ (8003470 <I2C3_Init+0x70>)
 800343c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003440:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 8003442:	4b0b      	ldr	r3, [pc, #44]	@ (8003470 <I2C3_Init+0x70>)
 8003444:	2200      	movs	r2, #0
 8003446:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003448:	4b09      	ldr	r3, [pc, #36]	@ (8003470 <I2C3_Init+0x70>)
 800344a:	2200      	movs	r2, #0
 800344c:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode? 

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 800344e:	4808      	ldr	r0, [pc, #32]	@ (8003470 <I2C3_Init+0x70>)
 8003450:	f000 fe94 	bl	800417c <HAL_I2C_Init>
 8003454:	4603      	mov	r3, r0
 8003456:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8003458:	79fb      	ldrb	r3, [r7, #7]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d001      	beq.n	8003462 <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 800345e:	bf00      	nop
 8003460:	e7fd      	b.n	800345e <I2C3_Init+0x5e>
    }
    return;
 8003462:	bf00      	nop
}
 8003464:	3708      	adds	r7, #8
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	40023800 	.word	0x40023800
 8003470:	20025bc8 	.word	0x20025bc8
 8003474:	40005c00 	.word	0x40005c00
 8003478:	000186a0 	.word	0x000186a0

0800347c <I2C3_MspInit>:

// GPIO Initializations 
static void I2C3_MspInit(void)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b088      	sub	sp, #32
 8003480:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003482:	f107 030c 	add.w	r3, r7, #12
 8003486:	2200      	movs	r2, #0
 8003488:	601a      	str	r2, [r3, #0]
 800348a:	605a      	str	r2, [r3, #4]
 800348c:	609a      	str	r2, [r3, #8]
 800348e:	60da      	str	r2, [r3, #12]
 8003490:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003492:	2300      	movs	r3, #0
 8003494:	60bb      	str	r3, [r7, #8]
 8003496:	4b20      	ldr	r3, [pc, #128]	@ (8003518 <I2C3_MspInit+0x9c>)
 8003498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800349a:	4a1f      	ldr	r2, [pc, #124]	@ (8003518 <I2C3_MspInit+0x9c>)
 800349c:	f043 0304 	orr.w	r3, r3, #4
 80034a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80034a2:	4b1d      	ldr	r3, [pc, #116]	@ (8003518 <I2C3_MspInit+0x9c>)
 80034a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034a6:	f003 0304 	and.w	r3, r3, #4
 80034aa:	60bb      	str	r3, [r7, #8]
 80034ac:	68bb      	ldr	r3, [r7, #8]

    // GPIOA 
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034ae:	2300      	movs	r3, #0
 80034b0:	607b      	str	r3, [r7, #4]
 80034b2:	4b19      	ldr	r3, [pc, #100]	@ (8003518 <I2C3_MspInit+0x9c>)
 80034b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034b6:	4a18      	ldr	r2, [pc, #96]	@ (8003518 <I2C3_MspInit+0x9c>)
 80034b8:	f043 0301 	orr.w	r3, r3, #1
 80034bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80034be:	4b16      	ldr	r3, [pc, #88]	@ (8003518 <I2C3_MspInit+0x9c>)
 80034c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034c2:	f003 0301 	and.w	r3, r3, #1
 80034c6:	607b      	str	r3, [r7, #4]
 80034c8:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80034ca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80034ce:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80034d0:	2312      	movs	r3, #18
 80034d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d4:	2300      	movs	r3, #0
 80034d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034d8:	2300      	movs	r3, #0
 80034da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80034dc:	2304      	movs	r3, #4
 80034de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80034e0:	f107 030c 	add.w	r3, r7, #12
 80034e4:	4619      	mov	r1, r3
 80034e6:	480d      	ldr	r0, [pc, #52]	@ (800351c <I2C3_MspInit+0xa0>)
 80034e8:	f000 fb5e 	bl	8003ba8 <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80034ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80034f0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80034f2:	2312      	movs	r3, #18
 80034f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f6:	2300      	movs	r3, #0
 80034f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034fa:	2300      	movs	r3, #0
 80034fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80034fe:	2304      	movs	r3, #4
 8003500:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8003502:	f107 030c 	add.w	r3, r7, #12
 8003506:	4619      	mov	r1, r3
 8003508:	4805      	ldr	r0, [pc, #20]	@ (8003520 <I2C3_MspInit+0xa4>)
 800350a:	f000 fb4d 	bl	8003ba8 <HAL_GPIO_Init>
    
}
 800350e:	bf00      	nop
 8003510:	3720      	adds	r7, #32
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	40023800 	.word	0x40023800
 800351c:	40020800 	.word	0x40020800
 8003520:	40020000 	.word	0x40020000

08003524 <I2C3_Write>:

// This function should only be used for single BYTE transfers 
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b088      	sub	sp, #32
 8003528:	af04      	add	r7, sp, #16
 800352a:	4603      	mov	r3, r0
 800352c:	80fb      	strh	r3, [r7, #6]
 800352e:	460b      	mov	r3, r1
 8003530:	717b      	strb	r3, [r7, #5]
 8003532:	4613      	mov	r3, r2
 8003534:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 8003536:	793b      	ldrb	r3, [r7, #4]
 8003538:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call? 
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 800353a:	797b      	ldrb	r3, [r7, #5]
 800353c:	b29a      	uxth	r2, r3
 800353e:	88f9      	ldrh	r1, [r7, #6]
 8003540:	4b0a      	ldr	r3, [pc, #40]	@ (800356c <I2C3_Write+0x48>)
 8003542:	9302      	str	r3, [sp, #8]
 8003544:	2301      	movs	r3, #1
 8003546:	9301      	str	r3, [sp, #4]
 8003548:	f107 030f 	add.w	r3, r7, #15
 800354c:	9300      	str	r3, [sp, #0]
 800354e:	2301      	movs	r3, #1
 8003550:	4807      	ldr	r0, [pc, #28]	@ (8003570 <I2C3_Write+0x4c>)
 8003552:	f000 ff57 	bl	8004404 <HAL_I2C_Mem_Write>
 8003556:	4603      	mov	r3, r0
 8003558:	461a      	mov	r2, r3
 800355a:	4b06      	ldr	r3, [pc, #24]	@ (8003574 <I2C3_Write+0x50>)
 800355c:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 800355e:	f7ff ff3f 	bl	80033e0 <verifyHAL_I2C_IS_OKAY>
}
 8003562:	bf00      	nop
 8003564:	3710      	adds	r7, #16
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	0003d090 	.word	0x0003d090
 8003570:	20025bc8 	.word	0x20025bc8
 8003574:	20025c1c 	.word	0x20025c1c

08003578 <I2C3_Read>:

// This function should only be used for single BYTE transfers 
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b086      	sub	sp, #24
 800357c:	af04      	add	r7, sp, #16
 800357e:	4603      	mov	r3, r0
 8003580:	603a      	str	r2, [r7, #0]
 8003582:	71fb      	strb	r3, [r7, #7]
 8003584:	460b      	mov	r3, r1
 8003586:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8003588:	79fb      	ldrb	r3, [r7, #7]
 800358a:	b299      	uxth	r1, r3
 800358c:	79bb      	ldrb	r3, [r7, #6]
 800358e:	b29a      	uxth	r2, r3
 8003590:	4b09      	ldr	r3, [pc, #36]	@ (80035b8 <I2C3_Read+0x40>)
 8003592:	9302      	str	r3, [sp, #8]
 8003594:	2301      	movs	r3, #1
 8003596:	9301      	str	r3, [sp, #4]
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	9300      	str	r3, [sp, #0]
 800359c:	2301      	movs	r3, #1
 800359e:	4807      	ldr	r0, [pc, #28]	@ (80035bc <I2C3_Read+0x44>)
 80035a0:	f001 f82a 	bl	80045f8 <HAL_I2C_Mem_Read>
 80035a4:	4603      	mov	r3, r0
 80035a6:	461a      	mov	r2, r3
 80035a8:	4b05      	ldr	r3, [pc, #20]	@ (80035c0 <I2C3_Read+0x48>)
 80035aa:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 80035ac:	f7ff ff18 	bl	80033e0 <verifyHAL_I2C_IS_OKAY>
}
 80035b0:	bf00      	nop
 80035b2:	3708      	adds	r7, #8
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	0003d090 	.word	0x0003d090
 80035bc:	20025bc8 	.word	0x20025bc8
 80035c0:	20025c1c 	.word	0x20025c1c

080035c4 <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b086      	sub	sp, #24
 80035c8:	af04      	add	r7, sp, #16
 80035ca:	603a      	str	r2, [r7, #0]
 80035cc:	461a      	mov	r2, r3
 80035ce:	4603      	mov	r3, r0
 80035d0:	71fb      	strb	r3, [r7, #7]
 80035d2:	460b      	mov	r3, r1
 80035d4:	71bb      	strb	r3, [r7, #6]
 80035d6:	4613      	mov	r3, r2
 80035d8:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 80035da:	79fb      	ldrb	r3, [r7, #7]
 80035dc:	b299      	uxth	r1, r3
 80035de:	79bb      	ldrb	r3, [r7, #6]
 80035e0:	b29a      	uxth	r2, r3
 80035e2:	4b07      	ldr	r3, [pc, #28]	@ (8003600 <I2C3_MulitByteRead+0x3c>)
 80035e4:	9302      	str	r3, [sp, #8]
 80035e6:	88bb      	ldrh	r3, [r7, #4]
 80035e8:	9301      	str	r3, [sp, #4]
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	9300      	str	r3, [sp, #0]
 80035ee:	2301      	movs	r3, #1
 80035f0:	4804      	ldr	r0, [pc, #16]	@ (8003604 <I2C3_MulitByteRead+0x40>)
 80035f2:	f001 f801 	bl	80045f8 <HAL_I2C_Mem_Read>
}
 80035f6:	bf00      	nop
 80035f8:	3708      	adds	r7, #8
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	0003d090 	.word	0x0003d090
 8003604:	20025bc8 	.word	0x20025bc8

08003608 <TM_STMPE811_ReadX>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x) { // TM FUNCTION 
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0
 800360e:	4603      	mov	r3, r0
 8003610:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 8003612:	204d      	movs	r0, #77	@ 0x4d
 8003614:	f7ff fe06 	bl	8003224 <STMPE811_Read>
 8003618:	4603      	mov	r3, r0
 800361a:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 800361c:	204e      	movs	r0, #78	@ 0x4e
 800361e:	f7ff fe01 	bl	8003224 <STMPE811_Read>
 8003622:	4603      	mov	r3, r0
 8003624:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8003626:	7a7b      	ldrb	r3, [r7, #9]
 8003628:	b21b      	sxth	r3, r3
 800362a:	021b      	lsls	r3, r3, #8
 800362c:	b21a      	sxth	r2, r3
 800362e:	7a3b      	ldrb	r3, [r7, #8]
 8003630:	b21b      	sxth	r3, r3
 8003632:	4313      	orrs	r3, r2
 8003634:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000) {
 8003636:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800363a:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800363e:	4293      	cmp	r3, r2
 8003640:	dc06      	bgt.n	8003650 <TM_STMPE811_ReadX+0x48>
        val = 3900 - val;
 8003642:	89fb      	ldrh	r3, [r7, #14]
 8003644:	f5c3 6373 	rsb	r3, r3, #3888	@ 0xf30
 8003648:	330c      	adds	r3, #12
 800364a:	b29b      	uxth	r3, r3
 800364c:	81fb      	strh	r3, [r7, #14]
 800364e:	e005      	b.n	800365c <TM_STMPE811_ReadX+0x54>
    } else {
        val = 3800 - val;
 8003650:	89fb      	ldrh	r3, [r7, #14]
 8003652:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 8003656:	3308      	adds	r3, #8
 8003658:	b29b      	uxth	r3, r3
 800365a:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 800365c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003660:	4a18      	ldr	r2, [pc, #96]	@ (80036c4 <TM_STMPE811_ReadX+0xbc>)
 8003662:	fb82 1203 	smull	r1, r2, r2, r3
 8003666:	441a      	add	r2, r3
 8003668:	10d2      	asrs	r2, r2, #3
 800366a:	17db      	asrs	r3, r3, #31
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	81fb      	strh	r3, [r7, #14]

    if (val > 239) {
 8003670:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003674:	2bef      	cmp	r3, #239	@ 0xef
 8003676:	dd02      	ble.n	800367e <TM_STMPE811_ReadX+0x76>
        val = 239;
 8003678:	23ef      	movs	r3, #239	@ 0xef
 800367a:	81fb      	strh	r3, [r7, #14]
 800367c:	e005      	b.n	800368a <TM_STMPE811_ReadX+0x82>
    } else if (val < 0) {
 800367e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003682:	2b00      	cmp	r3, #0
 8003684:	da01      	bge.n	800368a <TM_STMPE811_ReadX+0x82>
        val = 0;
 8003686:	2300      	movs	r3, #0
 8003688:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 800368a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800368e:	88fb      	ldrh	r3, [r7, #6]
 8003690:	429a      	cmp	r2, r3
 8003692:	dd05      	ble.n	80036a0 <TM_STMPE811_ReadX+0x98>
 8003694:	89fa      	ldrh	r2, [r7, #14]
 8003696:	88fb      	ldrh	r3, [r7, #6]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	b29b      	uxth	r3, r3
 800369c:	b21b      	sxth	r3, r3
 800369e:	e004      	b.n	80036aa <TM_STMPE811_ReadX+0xa2>
 80036a0:	89fb      	ldrh	r3, [r7, #14]
 80036a2:	88fa      	ldrh	r2, [r7, #6]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	b21b      	sxth	r3, r3
 80036aa:	81bb      	strh	r3, [r7, #12]
    if (dx > 4) {
 80036ac:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80036b0:	2b04      	cmp	r3, #4
 80036b2:	dd01      	ble.n	80036b8 <TM_STMPE811_ReadX+0xb0>
        return val;
 80036b4:	89fb      	ldrh	r3, [r7, #14]
 80036b6:	e000      	b.n	80036ba <TM_STMPE811_ReadX+0xb2>
    }
    return x;
 80036b8:	88fb      	ldrh	r3, [r7, #6]
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3710      	adds	r7, #16
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	88888889 	.word	0x88888889

080036c8 <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y) { // TM FUNCTION 
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	4603      	mov	r3, r0
 80036d0:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 80036d2:	204f      	movs	r0, #79	@ 0x4f
 80036d4:	f7ff fda6 	bl	8003224 <STMPE811_Read>
 80036d8:	4603      	mov	r3, r0
 80036da:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 80036dc:	2050      	movs	r0, #80	@ 0x50
 80036de:	f7ff fda1 	bl	8003224 <STMPE811_Read>
 80036e2:	4603      	mov	r3, r0
 80036e4:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 80036e6:	7a7b      	ldrb	r3, [r7, #9]
 80036e8:	b21b      	sxth	r3, r3
 80036ea:	021b      	lsls	r3, r3, #8
 80036ec:	b21a      	sxth	r2, r3
 80036ee:	7a3b      	ldrb	r3, [r7, #8]
 80036f0:	b21b      	sxth	r3, r3
 80036f2:	4313      	orrs	r3, r2
 80036f4:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 80036f6:	89fb      	ldrh	r3, [r7, #14]
 80036f8:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 8003700:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003704:	4a18      	ldr	r2, [pc, #96]	@ (8003768 <TM_STMPE811_ReadY+0xa0>)
 8003706:	fb82 1203 	smull	r1, r2, r2, r3
 800370a:	1052      	asrs	r2, r2, #1
 800370c:	17db      	asrs	r3, r3, #31
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	81fb      	strh	r3, [r7, #14]

    if (val <= 0) {
 8003712:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003716:	2b00      	cmp	r3, #0
 8003718:	dc02      	bgt.n	8003720 <TM_STMPE811_ReadY+0x58>
        val = 0;
 800371a:	2300      	movs	r3, #0
 800371c:	81fb      	strh	r3, [r7, #14]
 800371e:	e007      	b.n	8003730 <TM_STMPE811_ReadY+0x68>
    } else if (val >= 320) {
 8003720:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003724:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003728:	db02      	blt.n	8003730 <TM_STMPE811_ReadY+0x68>
        val = 319;
 800372a:	f240 133f 	movw	r3, #319	@ 0x13f
 800372e:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 8003730:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003734:	88fb      	ldrh	r3, [r7, #6]
 8003736:	429a      	cmp	r2, r3
 8003738:	dd05      	ble.n	8003746 <TM_STMPE811_ReadY+0x7e>
 800373a:	89fa      	ldrh	r2, [r7, #14]
 800373c:	88fb      	ldrh	r3, [r7, #6]
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	b29b      	uxth	r3, r3
 8003742:	b21b      	sxth	r3, r3
 8003744:	e004      	b.n	8003750 <TM_STMPE811_ReadY+0x88>
 8003746:	89fb      	ldrh	r3, [r7, #14]
 8003748:	88fa      	ldrh	r2, [r7, #6]
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	b29b      	uxth	r3, r3
 800374e:	b21b      	sxth	r3, r3
 8003750:	81bb      	strh	r3, [r7, #12]
    if (dy > 4) {
 8003752:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003756:	2b04      	cmp	r3, #4
 8003758:	dd01      	ble.n	800375e <TM_STMPE811_ReadY+0x96>
        return val;
 800375a:	89fb      	ldrh	r3, [r7, #14]
 800375c:	e000      	b.n	8003760 <TM_STMPE811_ReadY+0x98>
    }
    return y;
 800375e:	88fb      	ldrh	r3, [r7, #6]
}
 8003760:	4618      	mov	r0, r3
 8003762:	3710      	adds	r7, #16
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}
 8003768:	2e8ba2e9 	.word	0x2e8ba2e9

0800376c <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 800376c:	b480      	push	{r7}
 800376e:	af00      	add	r7, sp, #0
}
 8003770:	bf00      	nop
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
	...

0800377c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800377c:	b480      	push	{r7}
 800377e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003780:	4b06      	ldr	r3, [pc, #24]	@ (800379c <SystemInit+0x20>)
 8003782:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003786:	4a05      	ldr	r2, [pc, #20]	@ (800379c <SystemInit+0x20>)
 8003788:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800378c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003790:	bf00      	nop
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr
 800379a:	bf00      	nop
 800379c:	e000ed00 	.word	0xe000ed00

080037a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80037a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80037d8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80037a4:	f7ff ffea 	bl	800377c <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80037a8:	480c      	ldr	r0, [pc, #48]	@ (80037dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80037aa:	490d      	ldr	r1, [pc, #52]	@ (80037e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80037ac:	4a0d      	ldr	r2, [pc, #52]	@ (80037e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80037ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80037b0:	e002      	b.n	80037b8 <LoopCopyDataInit>

080037b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80037b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80037b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80037b6:	3304      	adds	r3, #4

080037b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80037b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80037ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80037bc:	d3f9      	bcc.n	80037b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80037be:	4a0a      	ldr	r2, [pc, #40]	@ (80037e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80037c0:	4c0a      	ldr	r4, [pc, #40]	@ (80037ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80037c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80037c4:	e001      	b.n	80037ca <LoopFillZerobss>

080037c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80037c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80037c8:	3204      	adds	r2, #4

080037ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80037ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80037cc:	d3fb      	bcc.n	80037c6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80037ce:	f003 fdf1 	bl	80073b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80037d2:	f7fe fe2c 	bl	800242e <main>
  bx  lr    
 80037d6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80037d8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80037dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80037e0:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 80037e4:	08008f0c 	.word	0x08008f0c
  ldr r2, =_sbss
 80037e8:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 80037ec:	20025c24 	.word	0x20025c24

080037f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80037f0:	e7fe      	b.n	80037f0 <ADC_IRQHandler>
	...

080037f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80037f8:	4b0e      	ldr	r3, [pc, #56]	@ (8003834 <HAL_Init+0x40>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a0d      	ldr	r2, [pc, #52]	@ (8003834 <HAL_Init+0x40>)
 80037fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003802:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003804:	4b0b      	ldr	r3, [pc, #44]	@ (8003834 <HAL_Init+0x40>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a0a      	ldr	r2, [pc, #40]	@ (8003834 <HAL_Init+0x40>)
 800380a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800380e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003810:	4b08      	ldr	r3, [pc, #32]	@ (8003834 <HAL_Init+0x40>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a07      	ldr	r2, [pc, #28]	@ (8003834 <HAL_Init+0x40>)
 8003816:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800381a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800381c:	2003      	movs	r0, #3
 800381e:	f000 f973 	bl	8003b08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003822:	2000      	movs	r0, #0
 8003824:	f000 f808 	bl	8003838 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003828:	f7ff f9c4 	bl	8002bb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800382c:	2300      	movs	r3, #0
}
 800382e:	4618      	mov	r0, r3
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	40023c00 	.word	0x40023c00

08003838 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003840:	4b12      	ldr	r3, [pc, #72]	@ (800388c <HAL_InitTick+0x54>)
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	4b12      	ldr	r3, [pc, #72]	@ (8003890 <HAL_InitTick+0x58>)
 8003846:	781b      	ldrb	r3, [r3, #0]
 8003848:	4619      	mov	r1, r3
 800384a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800384e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003852:	fbb2 f3f3 	udiv	r3, r2, r3
 8003856:	4618      	mov	r0, r3
 8003858:	f000 f999 	bl	8003b8e <HAL_SYSTICK_Config>
 800385c:	4603      	mov	r3, r0
 800385e:	2b00      	cmp	r3, #0
 8003860:	d001      	beq.n	8003866 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e00e      	b.n	8003884 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2b0f      	cmp	r3, #15
 800386a:	d80a      	bhi.n	8003882 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800386c:	2200      	movs	r2, #0
 800386e:	6879      	ldr	r1, [r7, #4]
 8003870:	f04f 30ff 	mov.w	r0, #4294967295
 8003874:	f000 f953 	bl	8003b1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003878:	4a06      	ldr	r2, [pc, #24]	@ (8003894 <HAL_InitTick+0x5c>)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800387e:	2300      	movs	r3, #0
 8003880:	e000      	b.n	8003884 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
}
 8003884:	4618      	mov	r0, r3
 8003886:	3708      	adds	r7, #8
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}
 800388c:	2000001c 	.word	0x2000001c
 8003890:	20000024 	.word	0x20000024
 8003894:	20000020 	.word	0x20000020

08003898 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003898:	b480      	push	{r7}
 800389a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800389c:	4b06      	ldr	r3, [pc, #24]	@ (80038b8 <HAL_IncTick+0x20>)
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	461a      	mov	r2, r3
 80038a2:	4b06      	ldr	r3, [pc, #24]	@ (80038bc <HAL_IncTick+0x24>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4413      	add	r3, r2
 80038a8:	4a04      	ldr	r2, [pc, #16]	@ (80038bc <HAL_IncTick+0x24>)
 80038aa:	6013      	str	r3, [r2, #0]
}
 80038ac:	bf00      	nop
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr
 80038b6:	bf00      	nop
 80038b8:	20000024 	.word	0x20000024
 80038bc:	20025c20 	.word	0x20025c20

080038c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038c0:	b480      	push	{r7}
 80038c2:	af00      	add	r7, sp, #0
  return uwTick;
 80038c4:	4b03      	ldr	r3, [pc, #12]	@ (80038d4 <HAL_GetTick+0x14>)
 80038c6:	681b      	ldr	r3, [r3, #0]
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr
 80038d2:	bf00      	nop
 80038d4:	20025c20 	.word	0x20025c20

080038d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80038e0:	f7ff ffee 	bl	80038c0 <HAL_GetTick>
 80038e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038f0:	d005      	beq.n	80038fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80038f2:	4b0a      	ldr	r3, [pc, #40]	@ (800391c <HAL_Delay+0x44>)
 80038f4:	781b      	ldrb	r3, [r3, #0]
 80038f6:	461a      	mov	r2, r3
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	4413      	add	r3, r2
 80038fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80038fe:	bf00      	nop
 8003900:	f7ff ffde 	bl	80038c0 <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	68fa      	ldr	r2, [r7, #12]
 800390c:	429a      	cmp	r2, r3
 800390e:	d8f7      	bhi.n	8003900 <HAL_Delay+0x28>
  {
  }
}
 8003910:	bf00      	nop
 8003912:	bf00      	nop
 8003914:	3710      	adds	r7, #16
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	20000024 	.word	0x20000024

08003920 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003920:	b480      	push	{r7}
 8003922:	b085      	sub	sp, #20
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f003 0307 	and.w	r3, r3, #7
 800392e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003930:	4b0c      	ldr	r3, [pc, #48]	@ (8003964 <__NVIC_SetPriorityGrouping+0x44>)
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003936:	68ba      	ldr	r2, [r7, #8]
 8003938:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800393c:	4013      	ands	r3, r2
 800393e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003948:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800394c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003950:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003952:	4a04      	ldr	r2, [pc, #16]	@ (8003964 <__NVIC_SetPriorityGrouping+0x44>)
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	60d3      	str	r3, [r2, #12]
}
 8003958:	bf00      	nop
 800395a:	3714      	adds	r7, #20
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr
 8003964:	e000ed00 	.word	0xe000ed00

08003968 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003968:	b480      	push	{r7}
 800396a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800396c:	4b04      	ldr	r3, [pc, #16]	@ (8003980 <__NVIC_GetPriorityGrouping+0x18>)
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	0a1b      	lsrs	r3, r3, #8
 8003972:	f003 0307 	and.w	r3, r3, #7
}
 8003976:	4618      	mov	r0, r3
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr
 8003980:	e000ed00 	.word	0xe000ed00

08003984 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	4603      	mov	r3, r0
 800398c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800398e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003992:	2b00      	cmp	r3, #0
 8003994:	db0b      	blt.n	80039ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003996:	79fb      	ldrb	r3, [r7, #7]
 8003998:	f003 021f 	and.w	r2, r3, #31
 800399c:	4907      	ldr	r1, [pc, #28]	@ (80039bc <__NVIC_EnableIRQ+0x38>)
 800399e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039a2:	095b      	lsrs	r3, r3, #5
 80039a4:	2001      	movs	r0, #1
 80039a6:	fa00 f202 	lsl.w	r2, r0, r2
 80039aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80039ae:	bf00      	nop
 80039b0:	370c      	adds	r7, #12
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	e000e100 	.word	0xe000e100

080039c0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	4603      	mov	r3, r0
 80039c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	db12      	blt.n	80039f8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039d2:	79fb      	ldrb	r3, [r7, #7]
 80039d4:	f003 021f 	and.w	r2, r3, #31
 80039d8:	490a      	ldr	r1, [pc, #40]	@ (8003a04 <__NVIC_DisableIRQ+0x44>)
 80039da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039de:	095b      	lsrs	r3, r3, #5
 80039e0:	2001      	movs	r0, #1
 80039e2:	fa00 f202 	lsl.w	r2, r0, r2
 80039e6:	3320      	adds	r3, #32
 80039e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80039ec:	f3bf 8f4f 	dsb	sy
}
 80039f0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80039f2:	f3bf 8f6f 	isb	sy
}
 80039f6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80039f8:	bf00      	nop
 80039fa:	370c      	adds	r7, #12
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr
 8003a04:	e000e100 	.word	0xe000e100

08003a08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	4603      	mov	r3, r0
 8003a10:	6039      	str	r1, [r7, #0]
 8003a12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	db0a      	blt.n	8003a32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	b2da      	uxtb	r2, r3
 8003a20:	490c      	ldr	r1, [pc, #48]	@ (8003a54 <__NVIC_SetPriority+0x4c>)
 8003a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a26:	0112      	lsls	r2, r2, #4
 8003a28:	b2d2      	uxtb	r2, r2
 8003a2a:	440b      	add	r3, r1
 8003a2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a30:	e00a      	b.n	8003a48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	b2da      	uxtb	r2, r3
 8003a36:	4908      	ldr	r1, [pc, #32]	@ (8003a58 <__NVIC_SetPriority+0x50>)
 8003a38:	79fb      	ldrb	r3, [r7, #7]
 8003a3a:	f003 030f 	and.w	r3, r3, #15
 8003a3e:	3b04      	subs	r3, #4
 8003a40:	0112      	lsls	r2, r2, #4
 8003a42:	b2d2      	uxtb	r2, r2
 8003a44:	440b      	add	r3, r1
 8003a46:	761a      	strb	r2, [r3, #24]
}
 8003a48:	bf00      	nop
 8003a4a:	370c      	adds	r7, #12
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr
 8003a54:	e000e100 	.word	0xe000e100
 8003a58:	e000ed00 	.word	0xe000ed00

08003a5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b089      	sub	sp, #36	@ 0x24
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	60f8      	str	r0, [r7, #12]
 8003a64:	60b9      	str	r1, [r7, #8]
 8003a66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f003 0307 	and.w	r3, r3, #7
 8003a6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	f1c3 0307 	rsb	r3, r3, #7
 8003a76:	2b04      	cmp	r3, #4
 8003a78:	bf28      	it	cs
 8003a7a:	2304      	movcs	r3, #4
 8003a7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	3304      	adds	r3, #4
 8003a82:	2b06      	cmp	r3, #6
 8003a84:	d902      	bls.n	8003a8c <NVIC_EncodePriority+0x30>
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	3b03      	subs	r3, #3
 8003a8a:	e000      	b.n	8003a8e <NVIC_EncodePriority+0x32>
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a90:	f04f 32ff 	mov.w	r2, #4294967295
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9a:	43da      	mvns	r2, r3
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	401a      	ands	r2, r3
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003aa4:	f04f 31ff 	mov.w	r1, #4294967295
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8003aae:	43d9      	mvns	r1, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ab4:	4313      	orrs	r3, r2
         );
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3724      	adds	r7, #36	@ 0x24
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr
	...

08003ac4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b082      	sub	sp, #8
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	3b01      	subs	r3, #1
 8003ad0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ad4:	d301      	bcc.n	8003ada <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e00f      	b.n	8003afa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ada:	4a0a      	ldr	r2, [pc, #40]	@ (8003b04 <SysTick_Config+0x40>)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	3b01      	subs	r3, #1
 8003ae0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ae2:	210f      	movs	r1, #15
 8003ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ae8:	f7ff ff8e 	bl	8003a08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003aec:	4b05      	ldr	r3, [pc, #20]	@ (8003b04 <SysTick_Config+0x40>)
 8003aee:	2200      	movs	r2, #0
 8003af0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003af2:	4b04      	ldr	r3, [pc, #16]	@ (8003b04 <SysTick_Config+0x40>)
 8003af4:	2207      	movs	r2, #7
 8003af6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003af8:	2300      	movs	r3, #0
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3708      	adds	r7, #8
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	e000e010 	.word	0xe000e010

08003b08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f7ff ff05 	bl	8003920 <__NVIC_SetPriorityGrouping>
}
 8003b16:	bf00      	nop
 8003b18:	3708      	adds	r7, #8
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}

08003b1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b1e:	b580      	push	{r7, lr}
 8003b20:	b086      	sub	sp, #24
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	4603      	mov	r3, r0
 8003b26:	60b9      	str	r1, [r7, #8]
 8003b28:	607a      	str	r2, [r7, #4]
 8003b2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b30:	f7ff ff1a 	bl	8003968 <__NVIC_GetPriorityGrouping>
 8003b34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	68b9      	ldr	r1, [r7, #8]
 8003b3a:	6978      	ldr	r0, [r7, #20]
 8003b3c:	f7ff ff8e 	bl	8003a5c <NVIC_EncodePriority>
 8003b40:	4602      	mov	r2, r0
 8003b42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b46:	4611      	mov	r1, r2
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f7ff ff5d 	bl	8003a08 <__NVIC_SetPriority>
}
 8003b4e:	bf00      	nop
 8003b50:	3718      	adds	r7, #24
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}

08003b56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b56:	b580      	push	{r7, lr}
 8003b58:	b082      	sub	sp, #8
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b64:	4618      	mov	r0, r3
 8003b66:	f7ff ff0d 	bl	8003984 <__NVIC_EnableIRQ>
}
 8003b6a:	bf00      	nop
 8003b6c:	3708      	adds	r7, #8
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}

08003b72 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003b72:	b580      	push	{r7, lr}
 8003b74:	b082      	sub	sp, #8
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	4603      	mov	r3, r0
 8003b7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003b7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b80:	4618      	mov	r0, r3
 8003b82:	f7ff ff1d 	bl	80039c0 <__NVIC_DisableIRQ>
}
 8003b86:	bf00      	nop
 8003b88:	3708      	adds	r7, #8
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}

08003b8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b8e:	b580      	push	{r7, lr}
 8003b90:	b082      	sub	sp, #8
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f7ff ff94 	bl	8003ac4 <SysTick_Config>
 8003b9c:	4603      	mov	r3, r0
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3708      	adds	r7, #8
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
	...

08003ba8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b089      	sub	sp, #36	@ 0x24
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	61fb      	str	r3, [r7, #28]
 8003bc2:	e177      	b.n	8003eb4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bcc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	697a      	ldr	r2, [r7, #20]
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003bd8:	693a      	ldr	r2, [r7, #16]
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	f040 8166 	bne.w	8003eae <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	f003 0303 	and.w	r3, r3, #3
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d005      	beq.n	8003bfa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d130      	bne.n	8003c5c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	005b      	lsls	r3, r3, #1
 8003c04:	2203      	movs	r2, #3
 8003c06:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0a:	43db      	mvns	r3, r3
 8003c0c:	69ba      	ldr	r2, [r7, #24]
 8003c0e:	4013      	ands	r3, r2
 8003c10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	68da      	ldr	r2, [r3, #12]
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	005b      	lsls	r3, r3, #1
 8003c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1e:	69ba      	ldr	r2, [r7, #24]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	69ba      	ldr	r2, [r7, #24]
 8003c28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c30:	2201      	movs	r2, #1
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	fa02 f303 	lsl.w	r3, r2, r3
 8003c38:	43db      	mvns	r3, r3
 8003c3a:	69ba      	ldr	r2, [r7, #24]
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	091b      	lsrs	r3, r3, #4
 8003c46:	f003 0201 	and.w	r2, r3, #1
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c50:	69ba      	ldr	r2, [r7, #24]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	69ba      	ldr	r2, [r7, #24]
 8003c5a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	f003 0303 	and.w	r3, r3, #3
 8003c64:	2b03      	cmp	r3, #3
 8003c66:	d017      	beq.n	8003c98 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	005b      	lsls	r3, r3, #1
 8003c72:	2203      	movs	r2, #3
 8003c74:	fa02 f303 	lsl.w	r3, r2, r3
 8003c78:	43db      	mvns	r3, r3
 8003c7a:	69ba      	ldr	r2, [r7, #24]
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	689a      	ldr	r2, [r3, #8]
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	005b      	lsls	r3, r3, #1
 8003c88:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8c:	69ba      	ldr	r2, [r7, #24]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	69ba      	ldr	r2, [r7, #24]
 8003c96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	f003 0303 	and.w	r3, r3, #3
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d123      	bne.n	8003cec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	08da      	lsrs	r2, r3, #3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	3208      	adds	r2, #8
 8003cac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	f003 0307 	and.w	r3, r3, #7
 8003cb8:	009b      	lsls	r3, r3, #2
 8003cba:	220f      	movs	r2, #15
 8003cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc0:	43db      	mvns	r3, r3
 8003cc2:	69ba      	ldr	r2, [r7, #24]
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	691a      	ldr	r2, [r3, #16]
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	f003 0307 	and.w	r3, r3, #7
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd8:	69ba      	ldr	r2, [r7, #24]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	08da      	lsrs	r2, r3, #3
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	3208      	adds	r2, #8
 8003ce6:	69b9      	ldr	r1, [r7, #24]
 8003ce8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	005b      	lsls	r3, r3, #1
 8003cf6:	2203      	movs	r2, #3
 8003cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfc:	43db      	mvns	r3, r3
 8003cfe:	69ba      	ldr	r2, [r7, #24]
 8003d00:	4013      	ands	r3, r2
 8003d02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	f003 0203 	and.w	r2, r3, #3
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	005b      	lsls	r3, r3, #1
 8003d10:	fa02 f303 	lsl.w	r3, r2, r3
 8003d14:	69ba      	ldr	r2, [r7, #24]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	69ba      	ldr	r2, [r7, #24]
 8003d1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	f000 80c0 	beq.w	8003eae <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d2e:	2300      	movs	r3, #0
 8003d30:	60fb      	str	r3, [r7, #12]
 8003d32:	4b66      	ldr	r3, [pc, #408]	@ (8003ecc <HAL_GPIO_Init+0x324>)
 8003d34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d36:	4a65      	ldr	r2, [pc, #404]	@ (8003ecc <HAL_GPIO_Init+0x324>)
 8003d38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003d3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003d3e:	4b63      	ldr	r3, [pc, #396]	@ (8003ecc <HAL_GPIO_Init+0x324>)
 8003d40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d46:	60fb      	str	r3, [r7, #12]
 8003d48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d4a:	4a61      	ldr	r2, [pc, #388]	@ (8003ed0 <HAL_GPIO_Init+0x328>)
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	089b      	lsrs	r3, r3, #2
 8003d50:	3302      	adds	r3, #2
 8003d52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	f003 0303 	and.w	r3, r3, #3
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	220f      	movs	r2, #15
 8003d62:	fa02 f303 	lsl.w	r3, r2, r3
 8003d66:	43db      	mvns	r3, r3
 8003d68:	69ba      	ldr	r2, [r7, #24]
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a58      	ldr	r2, [pc, #352]	@ (8003ed4 <HAL_GPIO_Init+0x32c>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d037      	beq.n	8003de6 <HAL_GPIO_Init+0x23e>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a57      	ldr	r2, [pc, #348]	@ (8003ed8 <HAL_GPIO_Init+0x330>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d031      	beq.n	8003de2 <HAL_GPIO_Init+0x23a>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a56      	ldr	r2, [pc, #344]	@ (8003edc <HAL_GPIO_Init+0x334>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d02b      	beq.n	8003dde <HAL_GPIO_Init+0x236>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a55      	ldr	r2, [pc, #340]	@ (8003ee0 <HAL_GPIO_Init+0x338>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d025      	beq.n	8003dda <HAL_GPIO_Init+0x232>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a54      	ldr	r2, [pc, #336]	@ (8003ee4 <HAL_GPIO_Init+0x33c>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d01f      	beq.n	8003dd6 <HAL_GPIO_Init+0x22e>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a53      	ldr	r2, [pc, #332]	@ (8003ee8 <HAL_GPIO_Init+0x340>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d019      	beq.n	8003dd2 <HAL_GPIO_Init+0x22a>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a52      	ldr	r2, [pc, #328]	@ (8003eec <HAL_GPIO_Init+0x344>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d013      	beq.n	8003dce <HAL_GPIO_Init+0x226>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4a51      	ldr	r2, [pc, #324]	@ (8003ef0 <HAL_GPIO_Init+0x348>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d00d      	beq.n	8003dca <HAL_GPIO_Init+0x222>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a50      	ldr	r2, [pc, #320]	@ (8003ef4 <HAL_GPIO_Init+0x34c>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d007      	beq.n	8003dc6 <HAL_GPIO_Init+0x21e>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a4f      	ldr	r2, [pc, #316]	@ (8003ef8 <HAL_GPIO_Init+0x350>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d101      	bne.n	8003dc2 <HAL_GPIO_Init+0x21a>
 8003dbe:	2309      	movs	r3, #9
 8003dc0:	e012      	b.n	8003de8 <HAL_GPIO_Init+0x240>
 8003dc2:	230a      	movs	r3, #10
 8003dc4:	e010      	b.n	8003de8 <HAL_GPIO_Init+0x240>
 8003dc6:	2308      	movs	r3, #8
 8003dc8:	e00e      	b.n	8003de8 <HAL_GPIO_Init+0x240>
 8003dca:	2307      	movs	r3, #7
 8003dcc:	e00c      	b.n	8003de8 <HAL_GPIO_Init+0x240>
 8003dce:	2306      	movs	r3, #6
 8003dd0:	e00a      	b.n	8003de8 <HAL_GPIO_Init+0x240>
 8003dd2:	2305      	movs	r3, #5
 8003dd4:	e008      	b.n	8003de8 <HAL_GPIO_Init+0x240>
 8003dd6:	2304      	movs	r3, #4
 8003dd8:	e006      	b.n	8003de8 <HAL_GPIO_Init+0x240>
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e004      	b.n	8003de8 <HAL_GPIO_Init+0x240>
 8003dde:	2302      	movs	r3, #2
 8003de0:	e002      	b.n	8003de8 <HAL_GPIO_Init+0x240>
 8003de2:	2301      	movs	r3, #1
 8003de4:	e000      	b.n	8003de8 <HAL_GPIO_Init+0x240>
 8003de6:	2300      	movs	r3, #0
 8003de8:	69fa      	ldr	r2, [r7, #28]
 8003dea:	f002 0203 	and.w	r2, r2, #3
 8003dee:	0092      	lsls	r2, r2, #2
 8003df0:	4093      	lsls	r3, r2
 8003df2:	69ba      	ldr	r2, [r7, #24]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003df8:	4935      	ldr	r1, [pc, #212]	@ (8003ed0 <HAL_GPIO_Init+0x328>)
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	089b      	lsrs	r3, r3, #2
 8003dfe:	3302      	adds	r3, #2
 8003e00:	69ba      	ldr	r2, [r7, #24]
 8003e02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e06:	4b3d      	ldr	r3, [pc, #244]	@ (8003efc <HAL_GPIO_Init+0x354>)
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	43db      	mvns	r3, r3
 8003e10:	69ba      	ldr	r2, [r7, #24]
 8003e12:	4013      	ands	r3, r2
 8003e14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d003      	beq.n	8003e2a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003e22:	69ba      	ldr	r2, [r7, #24]
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e2a:	4a34      	ldr	r2, [pc, #208]	@ (8003efc <HAL_GPIO_Init+0x354>)
 8003e2c:	69bb      	ldr	r3, [r7, #24]
 8003e2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e30:	4b32      	ldr	r3, [pc, #200]	@ (8003efc <HAL_GPIO_Init+0x354>)
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	43db      	mvns	r3, r3
 8003e3a:	69ba      	ldr	r2, [r7, #24]
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d003      	beq.n	8003e54 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003e4c:	69ba      	ldr	r2, [r7, #24]
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e54:	4a29      	ldr	r2, [pc, #164]	@ (8003efc <HAL_GPIO_Init+0x354>)
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003e5a:	4b28      	ldr	r3, [pc, #160]	@ (8003efc <HAL_GPIO_Init+0x354>)
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	43db      	mvns	r3, r3
 8003e64:	69ba      	ldr	r2, [r7, #24]
 8003e66:	4013      	ands	r3, r2
 8003e68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d003      	beq.n	8003e7e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003e76:	69ba      	ldr	r2, [r7, #24]
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003e7e:	4a1f      	ldr	r2, [pc, #124]	@ (8003efc <HAL_GPIO_Init+0x354>)
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e84:	4b1d      	ldr	r3, [pc, #116]	@ (8003efc <HAL_GPIO_Init+0x354>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	43db      	mvns	r3, r3
 8003e8e:	69ba      	ldr	r2, [r7, #24]
 8003e90:	4013      	ands	r3, r2
 8003e92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d003      	beq.n	8003ea8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003ea0:	69ba      	ldr	r2, [r7, #24]
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ea8:	4a14      	ldr	r2, [pc, #80]	@ (8003efc <HAL_GPIO_Init+0x354>)
 8003eaa:	69bb      	ldr	r3, [r7, #24]
 8003eac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	3301      	adds	r3, #1
 8003eb2:	61fb      	str	r3, [r7, #28]
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	2b0f      	cmp	r3, #15
 8003eb8:	f67f ae84 	bls.w	8003bc4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ebc:	bf00      	nop
 8003ebe:	bf00      	nop
 8003ec0:	3724      	adds	r7, #36	@ 0x24
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr
 8003eca:	bf00      	nop
 8003ecc:	40023800 	.word	0x40023800
 8003ed0:	40013800 	.word	0x40013800
 8003ed4:	40020000 	.word	0x40020000
 8003ed8:	40020400 	.word	0x40020400
 8003edc:	40020800 	.word	0x40020800
 8003ee0:	40020c00 	.word	0x40020c00
 8003ee4:	40021000 	.word	0x40021000
 8003ee8:	40021400 	.word	0x40021400
 8003eec:	40021800 	.word	0x40021800
 8003ef0:	40021c00 	.word	0x40021c00
 8003ef4:	40022000 	.word	0x40022000
 8003ef8:	40022400 	.word	0x40022400
 8003efc:	40013c00 	.word	0x40013c00

08003f00 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b087      	sub	sp, #28
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003f12:	2300      	movs	r3, #0
 8003f14:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f16:	2300      	movs	r3, #0
 8003f18:	617b      	str	r3, [r7, #20]
 8003f1a:	e0d9      	b.n	80040d0 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	fa02 f303 	lsl.w	r3, r2, r3
 8003f24:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003f26:	683a      	ldr	r2, [r7, #0]
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003f2e:	68fa      	ldr	r2, [r7, #12]
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	429a      	cmp	r2, r3
 8003f34:	f040 80c9 	bne.w	80040ca <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003f38:	4a6b      	ldr	r2, [pc, #428]	@ (80040e8 <HAL_GPIO_DeInit+0x1e8>)
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	089b      	lsrs	r3, r3, #2
 8003f3e:	3302      	adds	r3, #2
 8003f40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f44:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	f003 0303 	and.w	r3, r3, #3
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	220f      	movs	r2, #15
 8003f50:	fa02 f303 	lsl.w	r3, r2, r3
 8003f54:	68ba      	ldr	r2, [r7, #8]
 8003f56:	4013      	ands	r3, r2
 8003f58:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4a63      	ldr	r2, [pc, #396]	@ (80040ec <HAL_GPIO_DeInit+0x1ec>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d037      	beq.n	8003fd2 <HAL_GPIO_DeInit+0xd2>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4a62      	ldr	r2, [pc, #392]	@ (80040f0 <HAL_GPIO_DeInit+0x1f0>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d031      	beq.n	8003fce <HAL_GPIO_DeInit+0xce>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a61      	ldr	r2, [pc, #388]	@ (80040f4 <HAL_GPIO_DeInit+0x1f4>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d02b      	beq.n	8003fca <HAL_GPIO_DeInit+0xca>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a60      	ldr	r2, [pc, #384]	@ (80040f8 <HAL_GPIO_DeInit+0x1f8>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d025      	beq.n	8003fc6 <HAL_GPIO_DeInit+0xc6>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a5f      	ldr	r2, [pc, #380]	@ (80040fc <HAL_GPIO_DeInit+0x1fc>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d01f      	beq.n	8003fc2 <HAL_GPIO_DeInit+0xc2>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a5e      	ldr	r2, [pc, #376]	@ (8004100 <HAL_GPIO_DeInit+0x200>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d019      	beq.n	8003fbe <HAL_GPIO_DeInit+0xbe>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a5d      	ldr	r2, [pc, #372]	@ (8004104 <HAL_GPIO_DeInit+0x204>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d013      	beq.n	8003fba <HAL_GPIO_DeInit+0xba>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a5c      	ldr	r2, [pc, #368]	@ (8004108 <HAL_GPIO_DeInit+0x208>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d00d      	beq.n	8003fb6 <HAL_GPIO_DeInit+0xb6>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a5b      	ldr	r2, [pc, #364]	@ (800410c <HAL_GPIO_DeInit+0x20c>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d007      	beq.n	8003fb2 <HAL_GPIO_DeInit+0xb2>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a5a      	ldr	r2, [pc, #360]	@ (8004110 <HAL_GPIO_DeInit+0x210>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d101      	bne.n	8003fae <HAL_GPIO_DeInit+0xae>
 8003faa:	2309      	movs	r3, #9
 8003fac:	e012      	b.n	8003fd4 <HAL_GPIO_DeInit+0xd4>
 8003fae:	230a      	movs	r3, #10
 8003fb0:	e010      	b.n	8003fd4 <HAL_GPIO_DeInit+0xd4>
 8003fb2:	2308      	movs	r3, #8
 8003fb4:	e00e      	b.n	8003fd4 <HAL_GPIO_DeInit+0xd4>
 8003fb6:	2307      	movs	r3, #7
 8003fb8:	e00c      	b.n	8003fd4 <HAL_GPIO_DeInit+0xd4>
 8003fba:	2306      	movs	r3, #6
 8003fbc:	e00a      	b.n	8003fd4 <HAL_GPIO_DeInit+0xd4>
 8003fbe:	2305      	movs	r3, #5
 8003fc0:	e008      	b.n	8003fd4 <HAL_GPIO_DeInit+0xd4>
 8003fc2:	2304      	movs	r3, #4
 8003fc4:	e006      	b.n	8003fd4 <HAL_GPIO_DeInit+0xd4>
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e004      	b.n	8003fd4 <HAL_GPIO_DeInit+0xd4>
 8003fca:	2302      	movs	r3, #2
 8003fcc:	e002      	b.n	8003fd4 <HAL_GPIO_DeInit+0xd4>
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e000      	b.n	8003fd4 <HAL_GPIO_DeInit+0xd4>
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	697a      	ldr	r2, [r7, #20]
 8003fd6:	f002 0203 	and.w	r2, r2, #3
 8003fda:	0092      	lsls	r2, r2, #2
 8003fdc:	4093      	lsls	r3, r2
 8003fde:	68ba      	ldr	r2, [r7, #8]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d132      	bne.n	800404a <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003fe4:	4b4b      	ldr	r3, [pc, #300]	@ (8004114 <HAL_GPIO_DeInit+0x214>)
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	43db      	mvns	r3, r3
 8003fec:	4949      	ldr	r1, [pc, #292]	@ (8004114 <HAL_GPIO_DeInit+0x214>)
 8003fee:	4013      	ands	r3, r2
 8003ff0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003ff2:	4b48      	ldr	r3, [pc, #288]	@ (8004114 <HAL_GPIO_DeInit+0x214>)
 8003ff4:	685a      	ldr	r2, [r3, #4]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	43db      	mvns	r3, r3
 8003ffa:	4946      	ldr	r1, [pc, #280]	@ (8004114 <HAL_GPIO_DeInit+0x214>)
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004000:	4b44      	ldr	r3, [pc, #272]	@ (8004114 <HAL_GPIO_DeInit+0x214>)
 8004002:	68da      	ldr	r2, [r3, #12]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	43db      	mvns	r3, r3
 8004008:	4942      	ldr	r1, [pc, #264]	@ (8004114 <HAL_GPIO_DeInit+0x214>)
 800400a:	4013      	ands	r3, r2
 800400c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800400e:	4b41      	ldr	r3, [pc, #260]	@ (8004114 <HAL_GPIO_DeInit+0x214>)
 8004010:	689a      	ldr	r2, [r3, #8]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	43db      	mvns	r3, r3
 8004016:	493f      	ldr	r1, [pc, #252]	@ (8004114 <HAL_GPIO_DeInit+0x214>)
 8004018:	4013      	ands	r3, r2
 800401a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	f003 0303 	and.w	r3, r3, #3
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	220f      	movs	r2, #15
 8004026:	fa02 f303 	lsl.w	r3, r2, r3
 800402a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800402c:	4a2e      	ldr	r2, [pc, #184]	@ (80040e8 <HAL_GPIO_DeInit+0x1e8>)
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	089b      	lsrs	r3, r3, #2
 8004032:	3302      	adds	r3, #2
 8004034:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	43da      	mvns	r2, r3
 800403c:	482a      	ldr	r0, [pc, #168]	@ (80040e8 <HAL_GPIO_DeInit+0x1e8>)
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	089b      	lsrs	r3, r3, #2
 8004042:	400a      	ands	r2, r1
 8004044:	3302      	adds	r3, #2
 8004046:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	005b      	lsls	r3, r3, #1
 8004052:	2103      	movs	r1, #3
 8004054:	fa01 f303 	lsl.w	r3, r1, r3
 8004058:	43db      	mvns	r3, r3
 800405a:	401a      	ands	r2, r3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	08da      	lsrs	r2, r3, #3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	3208      	adds	r2, #8
 8004068:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	f003 0307 	and.w	r3, r3, #7
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	220f      	movs	r2, #15
 8004076:	fa02 f303 	lsl.w	r3, r2, r3
 800407a:	43db      	mvns	r3, r3
 800407c:	697a      	ldr	r2, [r7, #20]
 800407e:	08d2      	lsrs	r2, r2, #3
 8004080:	4019      	ands	r1, r3
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	3208      	adds	r2, #8
 8004086:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	68da      	ldr	r2, [r3, #12]
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	005b      	lsls	r3, r3, #1
 8004092:	2103      	movs	r1, #3
 8004094:	fa01 f303 	lsl.w	r3, r1, r3
 8004098:	43db      	mvns	r3, r3
 800409a:	401a      	ands	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685a      	ldr	r2, [r3, #4]
 80040a4:	2101      	movs	r1, #1
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	fa01 f303 	lsl.w	r3, r1, r3
 80040ac:	43db      	mvns	r3, r3
 80040ae:	401a      	ands	r2, r3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	689a      	ldr	r2, [r3, #8]
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	005b      	lsls	r3, r3, #1
 80040bc:	2103      	movs	r1, #3
 80040be:	fa01 f303 	lsl.w	r3, r1, r3
 80040c2:	43db      	mvns	r3, r3
 80040c4:	401a      	ands	r2, r3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	3301      	adds	r3, #1
 80040ce:	617b      	str	r3, [r7, #20]
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	2b0f      	cmp	r3, #15
 80040d4:	f67f af22 	bls.w	8003f1c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80040d8:	bf00      	nop
 80040da:	bf00      	nop
 80040dc:	371c      	adds	r7, #28
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr
 80040e6:	bf00      	nop
 80040e8:	40013800 	.word	0x40013800
 80040ec:	40020000 	.word	0x40020000
 80040f0:	40020400 	.word	0x40020400
 80040f4:	40020800 	.word	0x40020800
 80040f8:	40020c00 	.word	0x40020c00
 80040fc:	40021000 	.word	0x40021000
 8004100:	40021400 	.word	0x40021400
 8004104:	40021800 	.word	0x40021800
 8004108:	40021c00 	.word	0x40021c00
 800410c:	40022000 	.word	0x40022000
 8004110:	40022400 	.word	0x40022400
 8004114:	40013c00 	.word	0x40013c00

08004118 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004118:	b480      	push	{r7}
 800411a:	b085      	sub	sp, #20
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	460b      	mov	r3, r1
 8004122:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	691a      	ldr	r2, [r3, #16]
 8004128:	887b      	ldrh	r3, [r7, #2]
 800412a:	4013      	ands	r3, r2
 800412c:	2b00      	cmp	r3, #0
 800412e:	d002      	beq.n	8004136 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004130:	2301      	movs	r3, #1
 8004132:	73fb      	strb	r3, [r7, #15]
 8004134:	e001      	b.n	800413a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004136:	2300      	movs	r3, #0
 8004138:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800413a:	7bfb      	ldrb	r3, [r7, #15]
}
 800413c:	4618      	mov	r0, r3
 800413e:	3714      	adds	r7, #20
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004148:	b480      	push	{r7}
 800414a:	b083      	sub	sp, #12
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	460b      	mov	r3, r1
 8004152:	807b      	strh	r3, [r7, #2]
 8004154:	4613      	mov	r3, r2
 8004156:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004158:	787b      	ldrb	r3, [r7, #1]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d003      	beq.n	8004166 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800415e:	887a      	ldrh	r2, [r7, #2]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004164:	e003      	b.n	800416e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004166:	887b      	ldrh	r3, [r7, #2]
 8004168:	041a      	lsls	r2, r3, #16
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	619a      	str	r2, [r3, #24]
}
 800416e:	bf00      	nop
 8004170:	370c      	adds	r7, #12
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr
	...

0800417c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d101      	bne.n	800418e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e12b      	b.n	80043e6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004194:	b2db      	uxtb	r3, r3
 8004196:	2b00      	cmp	r3, #0
 8004198:	d106      	bne.n	80041a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f7fe fd2e 	bl	8002c04 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2224      	movs	r2, #36	@ 0x24
 80041ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f022 0201 	bic.w	r2, r2, #1
 80041be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80041ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80041de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80041e0:	f001 ff82 	bl	80060e8 <HAL_RCC_GetPCLK1Freq>
 80041e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	4a81      	ldr	r2, [pc, #516]	@ (80043f0 <HAL_I2C_Init+0x274>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d807      	bhi.n	8004200 <HAL_I2C_Init+0x84>
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	4a80      	ldr	r2, [pc, #512]	@ (80043f4 <HAL_I2C_Init+0x278>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	bf94      	ite	ls
 80041f8:	2301      	movls	r3, #1
 80041fa:	2300      	movhi	r3, #0
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	e006      	b.n	800420e <HAL_I2C_Init+0x92>
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	4a7d      	ldr	r2, [pc, #500]	@ (80043f8 <HAL_I2C_Init+0x27c>)
 8004204:	4293      	cmp	r3, r2
 8004206:	bf94      	ite	ls
 8004208:	2301      	movls	r3, #1
 800420a:	2300      	movhi	r3, #0
 800420c:	b2db      	uxtb	r3, r3
 800420e:	2b00      	cmp	r3, #0
 8004210:	d001      	beq.n	8004216 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e0e7      	b.n	80043e6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	4a78      	ldr	r2, [pc, #480]	@ (80043fc <HAL_I2C_Init+0x280>)
 800421a:	fba2 2303 	umull	r2, r3, r2, r3
 800421e:	0c9b      	lsrs	r3, r3, #18
 8004220:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	68ba      	ldr	r2, [r7, #8]
 8004232:	430a      	orrs	r2, r1
 8004234:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	6a1b      	ldr	r3, [r3, #32]
 800423c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	4a6a      	ldr	r2, [pc, #424]	@ (80043f0 <HAL_I2C_Init+0x274>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d802      	bhi.n	8004250 <HAL_I2C_Init+0xd4>
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	3301      	adds	r3, #1
 800424e:	e009      	b.n	8004264 <HAL_I2C_Init+0xe8>
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004256:	fb02 f303 	mul.w	r3, r2, r3
 800425a:	4a69      	ldr	r2, [pc, #420]	@ (8004400 <HAL_I2C_Init+0x284>)
 800425c:	fba2 2303 	umull	r2, r3, r2, r3
 8004260:	099b      	lsrs	r3, r3, #6
 8004262:	3301      	adds	r3, #1
 8004264:	687a      	ldr	r2, [r7, #4]
 8004266:	6812      	ldr	r2, [r2, #0]
 8004268:	430b      	orrs	r3, r1
 800426a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	69db      	ldr	r3, [r3, #28]
 8004272:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004276:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	495c      	ldr	r1, [pc, #368]	@ (80043f0 <HAL_I2C_Init+0x274>)
 8004280:	428b      	cmp	r3, r1
 8004282:	d819      	bhi.n	80042b8 <HAL_I2C_Init+0x13c>
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	1e59      	subs	r1, r3, #1
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	005b      	lsls	r3, r3, #1
 800428e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004292:	1c59      	adds	r1, r3, #1
 8004294:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004298:	400b      	ands	r3, r1
 800429a:	2b00      	cmp	r3, #0
 800429c:	d00a      	beq.n	80042b4 <HAL_I2C_Init+0x138>
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	1e59      	subs	r1, r3, #1
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	005b      	lsls	r3, r3, #1
 80042a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80042ac:	3301      	adds	r3, #1
 80042ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042b2:	e051      	b.n	8004358 <HAL_I2C_Init+0x1dc>
 80042b4:	2304      	movs	r3, #4
 80042b6:	e04f      	b.n	8004358 <HAL_I2C_Init+0x1dc>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d111      	bne.n	80042e4 <HAL_I2C_Init+0x168>
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	1e58      	subs	r0, r3, #1
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6859      	ldr	r1, [r3, #4]
 80042c8:	460b      	mov	r3, r1
 80042ca:	005b      	lsls	r3, r3, #1
 80042cc:	440b      	add	r3, r1
 80042ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80042d2:	3301      	adds	r3, #1
 80042d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042d8:	2b00      	cmp	r3, #0
 80042da:	bf0c      	ite	eq
 80042dc:	2301      	moveq	r3, #1
 80042de:	2300      	movne	r3, #0
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	e012      	b.n	800430a <HAL_I2C_Init+0x18e>
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	1e58      	subs	r0, r3, #1
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6859      	ldr	r1, [r3, #4]
 80042ec:	460b      	mov	r3, r1
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	440b      	add	r3, r1
 80042f2:	0099      	lsls	r1, r3, #2
 80042f4:	440b      	add	r3, r1
 80042f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80042fa:	3301      	adds	r3, #1
 80042fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004300:	2b00      	cmp	r3, #0
 8004302:	bf0c      	ite	eq
 8004304:	2301      	moveq	r3, #1
 8004306:	2300      	movne	r3, #0
 8004308:	b2db      	uxtb	r3, r3
 800430a:	2b00      	cmp	r3, #0
 800430c:	d001      	beq.n	8004312 <HAL_I2C_Init+0x196>
 800430e:	2301      	movs	r3, #1
 8004310:	e022      	b.n	8004358 <HAL_I2C_Init+0x1dc>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d10e      	bne.n	8004338 <HAL_I2C_Init+0x1bc>
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	1e58      	subs	r0, r3, #1
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6859      	ldr	r1, [r3, #4]
 8004322:	460b      	mov	r3, r1
 8004324:	005b      	lsls	r3, r3, #1
 8004326:	440b      	add	r3, r1
 8004328:	fbb0 f3f3 	udiv	r3, r0, r3
 800432c:	3301      	adds	r3, #1
 800432e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004332:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004336:	e00f      	b.n	8004358 <HAL_I2C_Init+0x1dc>
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	1e58      	subs	r0, r3, #1
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6859      	ldr	r1, [r3, #4]
 8004340:	460b      	mov	r3, r1
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	440b      	add	r3, r1
 8004346:	0099      	lsls	r1, r3, #2
 8004348:	440b      	add	r3, r1
 800434a:	fbb0 f3f3 	udiv	r3, r0, r3
 800434e:	3301      	adds	r3, #1
 8004350:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004354:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004358:	6879      	ldr	r1, [r7, #4]
 800435a:	6809      	ldr	r1, [r1, #0]
 800435c:	4313      	orrs	r3, r2
 800435e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	69da      	ldr	r2, [r3, #28]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a1b      	ldr	r3, [r3, #32]
 8004372:	431a      	orrs	r2, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	430a      	orrs	r2, r1
 800437a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004386:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	6911      	ldr	r1, [r2, #16]
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	68d2      	ldr	r2, [r2, #12]
 8004392:	4311      	orrs	r1, r2
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	6812      	ldr	r2, [r2, #0]
 8004398:	430b      	orrs	r3, r1
 800439a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	695a      	ldr	r2, [r3, #20]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	699b      	ldr	r3, [r3, #24]
 80043ae:	431a      	orrs	r2, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	430a      	orrs	r2, r1
 80043b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f042 0201 	orr.w	r2, r2, #1
 80043c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2220      	movs	r2, #32
 80043d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80043e4:	2300      	movs	r3, #0
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3710      	adds	r7, #16
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	000186a0 	.word	0x000186a0
 80043f4:	001e847f 	.word	0x001e847f
 80043f8:	003d08ff 	.word	0x003d08ff
 80043fc:	431bde83 	.word	0x431bde83
 8004400:	10624dd3 	.word	0x10624dd3

08004404 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b088      	sub	sp, #32
 8004408:	af02      	add	r7, sp, #8
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	4608      	mov	r0, r1
 800440e:	4611      	mov	r1, r2
 8004410:	461a      	mov	r2, r3
 8004412:	4603      	mov	r3, r0
 8004414:	817b      	strh	r3, [r7, #10]
 8004416:	460b      	mov	r3, r1
 8004418:	813b      	strh	r3, [r7, #8]
 800441a:	4613      	mov	r3, r2
 800441c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800441e:	f7ff fa4f 	bl	80038c0 <HAL_GetTick>
 8004422:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800442a:	b2db      	uxtb	r3, r3
 800442c:	2b20      	cmp	r3, #32
 800442e:	f040 80d9 	bne.w	80045e4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	9300      	str	r3, [sp, #0]
 8004436:	2319      	movs	r3, #25
 8004438:	2201      	movs	r2, #1
 800443a:	496d      	ldr	r1, [pc, #436]	@ (80045f0 <HAL_I2C_Mem_Write+0x1ec>)
 800443c:	68f8      	ldr	r0, [r7, #12]
 800443e:	f000 fc8b 	bl	8004d58 <I2C_WaitOnFlagUntilTimeout>
 8004442:	4603      	mov	r3, r0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d001      	beq.n	800444c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004448:	2302      	movs	r3, #2
 800444a:	e0cc      	b.n	80045e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004452:	2b01      	cmp	r3, #1
 8004454:	d101      	bne.n	800445a <HAL_I2C_Mem_Write+0x56>
 8004456:	2302      	movs	r3, #2
 8004458:	e0c5      	b.n	80045e6 <HAL_I2C_Mem_Write+0x1e2>
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2201      	movs	r2, #1
 800445e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 0301 	and.w	r3, r3, #1
 800446c:	2b01      	cmp	r3, #1
 800446e:	d007      	beq.n	8004480 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f042 0201 	orr.w	r2, r2, #1
 800447e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800448e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2221      	movs	r2, #33	@ 0x21
 8004494:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2240      	movs	r2, #64	@ 0x40
 800449c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2200      	movs	r2, #0
 80044a4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6a3a      	ldr	r2, [r7, #32]
 80044aa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80044b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044b6:	b29a      	uxth	r2, r3
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	4a4d      	ldr	r2, [pc, #308]	@ (80045f4 <HAL_I2C_Mem_Write+0x1f0>)
 80044c0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80044c2:	88f8      	ldrh	r0, [r7, #6]
 80044c4:	893a      	ldrh	r2, [r7, #8]
 80044c6:	8979      	ldrh	r1, [r7, #10]
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	9301      	str	r3, [sp, #4]
 80044cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044ce:	9300      	str	r3, [sp, #0]
 80044d0:	4603      	mov	r3, r0
 80044d2:	68f8      	ldr	r0, [r7, #12]
 80044d4:	f000 fac2 	bl	8004a5c <I2C_RequestMemoryWrite>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d052      	beq.n	8004584 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e081      	b.n	80045e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044e2:	697a      	ldr	r2, [r7, #20]
 80044e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80044e6:	68f8      	ldr	r0, [r7, #12]
 80044e8:	f000 fd50 	bl	8004f8c <I2C_WaitOnTXEFlagUntilTimeout>
 80044ec:	4603      	mov	r3, r0
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d00d      	beq.n	800450e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044f6:	2b04      	cmp	r3, #4
 80044f8:	d107      	bne.n	800450a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004508:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e06b      	b.n	80045e6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004512:	781a      	ldrb	r2, [r3, #0]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800451e:	1c5a      	adds	r2, r3, #1
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004528:	3b01      	subs	r3, #1
 800452a:	b29a      	uxth	r2, r3
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004534:	b29b      	uxth	r3, r3
 8004536:	3b01      	subs	r3, #1
 8004538:	b29a      	uxth	r2, r3
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	695b      	ldr	r3, [r3, #20]
 8004544:	f003 0304 	and.w	r3, r3, #4
 8004548:	2b04      	cmp	r3, #4
 800454a:	d11b      	bne.n	8004584 <HAL_I2C_Mem_Write+0x180>
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004550:	2b00      	cmp	r3, #0
 8004552:	d017      	beq.n	8004584 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004558:	781a      	ldrb	r2, [r3, #0]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004564:	1c5a      	adds	r2, r3, #1
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800456e:	3b01      	subs	r3, #1
 8004570:	b29a      	uxth	r2, r3
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800457a:	b29b      	uxth	r3, r3
 800457c:	3b01      	subs	r3, #1
 800457e:	b29a      	uxth	r2, r3
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004588:	2b00      	cmp	r3, #0
 800458a:	d1aa      	bne.n	80044e2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800458c:	697a      	ldr	r2, [r7, #20]
 800458e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004590:	68f8      	ldr	r0, [r7, #12]
 8004592:	f000 fd43 	bl	800501c <I2C_WaitOnBTFFlagUntilTimeout>
 8004596:	4603      	mov	r3, r0
 8004598:	2b00      	cmp	r3, #0
 800459a:	d00d      	beq.n	80045b8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045a0:	2b04      	cmp	r3, #4
 80045a2:	d107      	bne.n	80045b4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045b2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e016      	b.n	80045e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2220      	movs	r2, #32
 80045cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2200      	movs	r2, #0
 80045d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2200      	movs	r2, #0
 80045dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80045e0:	2300      	movs	r3, #0
 80045e2:	e000      	b.n	80045e6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80045e4:	2302      	movs	r3, #2
  }
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3718      	adds	r7, #24
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	bf00      	nop
 80045f0:	00100002 	.word	0x00100002
 80045f4:	ffff0000 	.word	0xffff0000

080045f8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b08c      	sub	sp, #48	@ 0x30
 80045fc:	af02      	add	r7, sp, #8
 80045fe:	60f8      	str	r0, [r7, #12]
 8004600:	4608      	mov	r0, r1
 8004602:	4611      	mov	r1, r2
 8004604:	461a      	mov	r2, r3
 8004606:	4603      	mov	r3, r0
 8004608:	817b      	strh	r3, [r7, #10]
 800460a:	460b      	mov	r3, r1
 800460c:	813b      	strh	r3, [r7, #8]
 800460e:	4613      	mov	r3, r2
 8004610:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004612:	f7ff f955 	bl	80038c0 <HAL_GetTick>
 8004616:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800461e:	b2db      	uxtb	r3, r3
 8004620:	2b20      	cmp	r3, #32
 8004622:	f040 8214 	bne.w	8004a4e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004628:	9300      	str	r3, [sp, #0]
 800462a:	2319      	movs	r3, #25
 800462c:	2201      	movs	r2, #1
 800462e:	497b      	ldr	r1, [pc, #492]	@ (800481c <HAL_I2C_Mem_Read+0x224>)
 8004630:	68f8      	ldr	r0, [r7, #12]
 8004632:	f000 fb91 	bl	8004d58 <I2C_WaitOnFlagUntilTimeout>
 8004636:	4603      	mov	r3, r0
 8004638:	2b00      	cmp	r3, #0
 800463a:	d001      	beq.n	8004640 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800463c:	2302      	movs	r3, #2
 800463e:	e207      	b.n	8004a50 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004646:	2b01      	cmp	r3, #1
 8004648:	d101      	bne.n	800464e <HAL_I2C_Mem_Read+0x56>
 800464a:	2302      	movs	r3, #2
 800464c:	e200      	b.n	8004a50 <HAL_I2C_Mem_Read+0x458>
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2201      	movs	r2, #1
 8004652:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0301 	and.w	r3, r3, #1
 8004660:	2b01      	cmp	r3, #1
 8004662:	d007      	beq.n	8004674 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f042 0201 	orr.w	r2, r2, #1
 8004672:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004682:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2222      	movs	r2, #34	@ 0x22
 8004688:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2240      	movs	r2, #64	@ 0x40
 8004690:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2200      	movs	r2, #0
 8004698:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800469e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80046a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046aa:	b29a      	uxth	r2, r3
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	4a5b      	ldr	r2, [pc, #364]	@ (8004820 <HAL_I2C_Mem_Read+0x228>)
 80046b4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80046b6:	88f8      	ldrh	r0, [r7, #6]
 80046b8:	893a      	ldrh	r2, [r7, #8]
 80046ba:	8979      	ldrh	r1, [r7, #10]
 80046bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046be:	9301      	str	r3, [sp, #4]
 80046c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046c2:	9300      	str	r3, [sp, #0]
 80046c4:	4603      	mov	r3, r0
 80046c6:	68f8      	ldr	r0, [r7, #12]
 80046c8:	f000 fa5e 	bl	8004b88 <I2C_RequestMemoryRead>
 80046cc:	4603      	mov	r3, r0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d001      	beq.n	80046d6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e1bc      	b.n	8004a50 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d113      	bne.n	8004706 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046de:	2300      	movs	r3, #0
 80046e0:	623b      	str	r3, [r7, #32]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	695b      	ldr	r3, [r3, #20]
 80046e8:	623b      	str	r3, [r7, #32]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	699b      	ldr	r3, [r3, #24]
 80046f0:	623b      	str	r3, [r7, #32]
 80046f2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004702:	601a      	str	r2, [r3, #0]
 8004704:	e190      	b.n	8004a28 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800470a:	2b01      	cmp	r3, #1
 800470c:	d11b      	bne.n	8004746 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800471c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800471e:	2300      	movs	r3, #0
 8004720:	61fb      	str	r3, [r7, #28]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	695b      	ldr	r3, [r3, #20]
 8004728:	61fb      	str	r3, [r7, #28]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	699b      	ldr	r3, [r3, #24]
 8004730:	61fb      	str	r3, [r7, #28]
 8004732:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004742:	601a      	str	r2, [r3, #0]
 8004744:	e170      	b.n	8004a28 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800474a:	2b02      	cmp	r3, #2
 800474c:	d11b      	bne.n	8004786 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800475c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800476c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800476e:	2300      	movs	r3, #0
 8004770:	61bb      	str	r3, [r7, #24]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	695b      	ldr	r3, [r3, #20]
 8004778:	61bb      	str	r3, [r7, #24]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	699b      	ldr	r3, [r3, #24]
 8004780:	61bb      	str	r3, [r7, #24]
 8004782:	69bb      	ldr	r3, [r7, #24]
 8004784:	e150      	b.n	8004a28 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004786:	2300      	movs	r3, #0
 8004788:	617b      	str	r3, [r7, #20]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	695b      	ldr	r3, [r3, #20]
 8004790:	617b      	str	r3, [r7, #20]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	699b      	ldr	r3, [r3, #24]
 8004798:	617b      	str	r3, [r7, #20]
 800479a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800479c:	e144      	b.n	8004a28 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047a2:	2b03      	cmp	r3, #3
 80047a4:	f200 80f1 	bhi.w	800498a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d123      	bne.n	80047f8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047b2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80047b4:	68f8      	ldr	r0, [r7, #12]
 80047b6:	f000 fc79 	bl	80050ac <I2C_WaitOnRXNEFlagUntilTimeout>
 80047ba:	4603      	mov	r3, r0
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d001      	beq.n	80047c4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	e145      	b.n	8004a50 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	691a      	ldr	r2, [r3, #16]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ce:	b2d2      	uxtb	r2, r2
 80047d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047d6:	1c5a      	adds	r2, r3, #1
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047e0:	3b01      	subs	r3, #1
 80047e2:	b29a      	uxth	r2, r3
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	3b01      	subs	r3, #1
 80047f0:	b29a      	uxth	r2, r3
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80047f6:	e117      	b.n	8004a28 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047fc:	2b02      	cmp	r3, #2
 80047fe:	d14e      	bne.n	800489e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004802:	9300      	str	r3, [sp, #0]
 8004804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004806:	2200      	movs	r2, #0
 8004808:	4906      	ldr	r1, [pc, #24]	@ (8004824 <HAL_I2C_Mem_Read+0x22c>)
 800480a:	68f8      	ldr	r0, [r7, #12]
 800480c:	f000 faa4 	bl	8004d58 <I2C_WaitOnFlagUntilTimeout>
 8004810:	4603      	mov	r3, r0
 8004812:	2b00      	cmp	r3, #0
 8004814:	d008      	beq.n	8004828 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e11a      	b.n	8004a50 <HAL_I2C_Mem_Read+0x458>
 800481a:	bf00      	nop
 800481c:	00100002 	.word	0x00100002
 8004820:	ffff0000 	.word	0xffff0000
 8004824:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004836:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	691a      	ldr	r2, [r3, #16]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004842:	b2d2      	uxtb	r2, r2
 8004844:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800484a:	1c5a      	adds	r2, r3, #1
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004854:	3b01      	subs	r3, #1
 8004856:	b29a      	uxth	r2, r3
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004860:	b29b      	uxth	r3, r3
 8004862:	3b01      	subs	r3, #1
 8004864:	b29a      	uxth	r2, r3
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	691a      	ldr	r2, [r3, #16]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004874:	b2d2      	uxtb	r2, r2
 8004876:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800487c:	1c5a      	adds	r2, r3, #1
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004886:	3b01      	subs	r3, #1
 8004888:	b29a      	uxth	r2, r3
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004892:	b29b      	uxth	r3, r3
 8004894:	3b01      	subs	r3, #1
 8004896:	b29a      	uxth	r2, r3
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800489c:	e0c4      	b.n	8004a28 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800489e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048a0:	9300      	str	r3, [sp, #0]
 80048a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048a4:	2200      	movs	r2, #0
 80048a6:	496c      	ldr	r1, [pc, #432]	@ (8004a58 <HAL_I2C_Mem_Read+0x460>)
 80048a8:	68f8      	ldr	r0, [r7, #12]
 80048aa:	f000 fa55 	bl	8004d58 <I2C_WaitOnFlagUntilTimeout>
 80048ae:	4603      	mov	r3, r0
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d001      	beq.n	80048b8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	e0cb      	b.n	8004a50 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	691a      	ldr	r2, [r3, #16]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048d2:	b2d2      	uxtb	r2, r2
 80048d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048da:	1c5a      	adds	r2, r3, #1
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048e4:	3b01      	subs	r3, #1
 80048e6:	b29a      	uxth	r2, r3
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	3b01      	subs	r3, #1
 80048f4:	b29a      	uxth	r2, r3
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80048fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048fc:	9300      	str	r3, [sp, #0]
 80048fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004900:	2200      	movs	r2, #0
 8004902:	4955      	ldr	r1, [pc, #340]	@ (8004a58 <HAL_I2C_Mem_Read+0x460>)
 8004904:	68f8      	ldr	r0, [r7, #12]
 8004906:	f000 fa27 	bl	8004d58 <I2C_WaitOnFlagUntilTimeout>
 800490a:	4603      	mov	r3, r0
 800490c:	2b00      	cmp	r3, #0
 800490e:	d001      	beq.n	8004914 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	e09d      	b.n	8004a50 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004922:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	691a      	ldr	r2, [r3, #16]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800492e:	b2d2      	uxtb	r2, r2
 8004930:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004936:	1c5a      	adds	r2, r3, #1
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004940:	3b01      	subs	r3, #1
 8004942:	b29a      	uxth	r2, r3
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800494c:	b29b      	uxth	r3, r3
 800494e:	3b01      	subs	r3, #1
 8004950:	b29a      	uxth	r2, r3
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	691a      	ldr	r2, [r3, #16]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004960:	b2d2      	uxtb	r2, r2
 8004962:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004968:	1c5a      	adds	r2, r3, #1
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004972:	3b01      	subs	r3, #1
 8004974:	b29a      	uxth	r2, r3
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800497e:	b29b      	uxth	r3, r3
 8004980:	3b01      	subs	r3, #1
 8004982:	b29a      	uxth	r2, r3
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004988:	e04e      	b.n	8004a28 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800498a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800498c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800498e:	68f8      	ldr	r0, [r7, #12]
 8004990:	f000 fb8c 	bl	80050ac <I2C_WaitOnRXNEFlagUntilTimeout>
 8004994:	4603      	mov	r3, r0
 8004996:	2b00      	cmp	r3, #0
 8004998:	d001      	beq.n	800499e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e058      	b.n	8004a50 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	691a      	ldr	r2, [r3, #16]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049a8:	b2d2      	uxtb	r2, r2
 80049aa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049b0:	1c5a      	adds	r2, r3, #1
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049ba:	3b01      	subs	r3, #1
 80049bc:	b29a      	uxth	r2, r3
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	3b01      	subs	r3, #1
 80049ca:	b29a      	uxth	r2, r3
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	695b      	ldr	r3, [r3, #20]
 80049d6:	f003 0304 	and.w	r3, r3, #4
 80049da:	2b04      	cmp	r3, #4
 80049dc:	d124      	bne.n	8004a28 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049e2:	2b03      	cmp	r3, #3
 80049e4:	d107      	bne.n	80049f6 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049f4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	691a      	ldr	r2, [r3, #16]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a00:	b2d2      	uxtb	r2, r2
 8004a02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a08:	1c5a      	adds	r2, r3, #1
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a12:	3b01      	subs	r3, #1
 8004a14:	b29a      	uxth	r2, r3
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	3b01      	subs	r3, #1
 8004a22:	b29a      	uxth	r2, r3
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	f47f aeb6 	bne.w	800479e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2220      	movs	r2, #32
 8004a36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2200      	movs	r2, #0
 8004a46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	e000      	b.n	8004a50 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004a4e:	2302      	movs	r3, #2
  }
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3728      	adds	r7, #40	@ 0x28
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}
 8004a58:	00010004 	.word	0x00010004

08004a5c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b088      	sub	sp, #32
 8004a60:	af02      	add	r7, sp, #8
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	4608      	mov	r0, r1
 8004a66:	4611      	mov	r1, r2
 8004a68:	461a      	mov	r2, r3
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	817b      	strh	r3, [r7, #10]
 8004a6e:	460b      	mov	r3, r1
 8004a70:	813b      	strh	r3, [r7, #8]
 8004a72:	4613      	mov	r3, r2
 8004a74:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a84:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a88:	9300      	str	r3, [sp, #0]
 8004a8a:	6a3b      	ldr	r3, [r7, #32]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004a92:	68f8      	ldr	r0, [r7, #12]
 8004a94:	f000 f960 	bl	8004d58 <I2C_WaitOnFlagUntilTimeout>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d00d      	beq.n	8004aba <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004aa8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004aac:	d103      	bne.n	8004ab6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ab4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	e05f      	b.n	8004b7a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004aba:	897b      	ldrh	r3, [r7, #10]
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	461a      	mov	r2, r3
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004ac8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004acc:	6a3a      	ldr	r2, [r7, #32]
 8004ace:	492d      	ldr	r1, [pc, #180]	@ (8004b84 <I2C_RequestMemoryWrite+0x128>)
 8004ad0:	68f8      	ldr	r0, [r7, #12]
 8004ad2:	f000 f9bb 	bl	8004e4c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d001      	beq.n	8004ae0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	e04c      	b.n	8004b7a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	617b      	str	r3, [r7, #20]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	695b      	ldr	r3, [r3, #20]
 8004aea:	617b      	str	r3, [r7, #20]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	699b      	ldr	r3, [r3, #24]
 8004af2:	617b      	str	r3, [r7, #20]
 8004af4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004af6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004af8:	6a39      	ldr	r1, [r7, #32]
 8004afa:	68f8      	ldr	r0, [r7, #12]
 8004afc:	f000 fa46 	bl	8004f8c <I2C_WaitOnTXEFlagUntilTimeout>
 8004b00:	4603      	mov	r3, r0
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d00d      	beq.n	8004b22 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b0a:	2b04      	cmp	r3, #4
 8004b0c:	d107      	bne.n	8004b1e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b1c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e02b      	b.n	8004b7a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004b22:	88fb      	ldrh	r3, [r7, #6]
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d105      	bne.n	8004b34 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b28:	893b      	ldrh	r3, [r7, #8]
 8004b2a:	b2da      	uxtb	r2, r3
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	611a      	str	r2, [r3, #16]
 8004b32:	e021      	b.n	8004b78 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004b34:	893b      	ldrh	r3, [r7, #8]
 8004b36:	0a1b      	lsrs	r3, r3, #8
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	b2da      	uxtb	r2, r3
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b44:	6a39      	ldr	r1, [r7, #32]
 8004b46:	68f8      	ldr	r0, [r7, #12]
 8004b48:	f000 fa20 	bl	8004f8c <I2C_WaitOnTXEFlagUntilTimeout>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d00d      	beq.n	8004b6e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b56:	2b04      	cmp	r3, #4
 8004b58:	d107      	bne.n	8004b6a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b68:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e005      	b.n	8004b7a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b6e:	893b      	ldrh	r3, [r7, #8]
 8004b70:	b2da      	uxtb	r2, r3
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004b78:	2300      	movs	r3, #0
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3718      	adds	r7, #24
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	00010002 	.word	0x00010002

08004b88 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b088      	sub	sp, #32
 8004b8c:	af02      	add	r7, sp, #8
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	4608      	mov	r0, r1
 8004b92:	4611      	mov	r1, r2
 8004b94:	461a      	mov	r2, r3
 8004b96:	4603      	mov	r3, r0
 8004b98:	817b      	strh	r3, [r7, #10]
 8004b9a:	460b      	mov	r3, r1
 8004b9c:	813b      	strh	r3, [r7, #8]
 8004b9e:	4613      	mov	r3, r2
 8004ba0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004bb0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004bc0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bc4:	9300      	str	r3, [sp, #0]
 8004bc6:	6a3b      	ldr	r3, [r7, #32]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004bce:	68f8      	ldr	r0, [r7, #12]
 8004bd0:	f000 f8c2 	bl	8004d58 <I2C_WaitOnFlagUntilTimeout>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d00d      	beq.n	8004bf6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004be4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004be8:	d103      	bne.n	8004bf2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004bf0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	e0aa      	b.n	8004d4c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004bf6:	897b      	ldrh	r3, [r7, #10]
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004c04:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c08:	6a3a      	ldr	r2, [r7, #32]
 8004c0a:	4952      	ldr	r1, [pc, #328]	@ (8004d54 <I2C_RequestMemoryRead+0x1cc>)
 8004c0c:	68f8      	ldr	r0, [r7, #12]
 8004c0e:	f000 f91d 	bl	8004e4c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c12:	4603      	mov	r3, r0
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d001      	beq.n	8004c1c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e097      	b.n	8004d4c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	617b      	str	r3, [r7, #20]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	695b      	ldr	r3, [r3, #20]
 8004c26:	617b      	str	r3, [r7, #20]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	699b      	ldr	r3, [r3, #24]
 8004c2e:	617b      	str	r3, [r7, #20]
 8004c30:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c34:	6a39      	ldr	r1, [r7, #32]
 8004c36:	68f8      	ldr	r0, [r7, #12]
 8004c38:	f000 f9a8 	bl	8004f8c <I2C_WaitOnTXEFlagUntilTimeout>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d00d      	beq.n	8004c5e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c46:	2b04      	cmp	r3, #4
 8004c48:	d107      	bne.n	8004c5a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c58:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e076      	b.n	8004d4c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004c5e:	88fb      	ldrh	r3, [r7, #6]
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d105      	bne.n	8004c70 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c64:	893b      	ldrh	r3, [r7, #8]
 8004c66:	b2da      	uxtb	r2, r3
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	611a      	str	r2, [r3, #16]
 8004c6e:	e021      	b.n	8004cb4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004c70:	893b      	ldrh	r3, [r7, #8]
 8004c72:	0a1b      	lsrs	r3, r3, #8
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	b2da      	uxtb	r2, r3
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c80:	6a39      	ldr	r1, [r7, #32]
 8004c82:	68f8      	ldr	r0, [r7, #12]
 8004c84:	f000 f982 	bl	8004f8c <I2C_WaitOnTXEFlagUntilTimeout>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d00d      	beq.n	8004caa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c92:	2b04      	cmp	r3, #4
 8004c94:	d107      	bne.n	8004ca6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ca4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e050      	b.n	8004d4c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004caa:	893b      	ldrh	r3, [r7, #8]
 8004cac:	b2da      	uxtb	r2, r3
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cb6:	6a39      	ldr	r1, [r7, #32]
 8004cb8:	68f8      	ldr	r0, [r7, #12]
 8004cba:	f000 f967 	bl	8004f8c <I2C_WaitOnTXEFlagUntilTimeout>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d00d      	beq.n	8004ce0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cc8:	2b04      	cmp	r3, #4
 8004cca:	d107      	bne.n	8004cdc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004cda:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e035      	b.n	8004d4c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004cee:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cf2:	9300      	str	r3, [sp, #0]
 8004cf4:	6a3b      	ldr	r3, [r7, #32]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004cfc:	68f8      	ldr	r0, [r7, #12]
 8004cfe:	f000 f82b 	bl	8004d58 <I2C_WaitOnFlagUntilTimeout>
 8004d02:	4603      	mov	r3, r0
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d00d      	beq.n	8004d24 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d16:	d103      	bne.n	8004d20 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d1e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004d20:	2303      	movs	r3, #3
 8004d22:	e013      	b.n	8004d4c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004d24:	897b      	ldrh	r3, [r7, #10]
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	f043 0301 	orr.w	r3, r3, #1
 8004d2c:	b2da      	uxtb	r2, r3
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d36:	6a3a      	ldr	r2, [r7, #32]
 8004d38:	4906      	ldr	r1, [pc, #24]	@ (8004d54 <I2C_RequestMemoryRead+0x1cc>)
 8004d3a:	68f8      	ldr	r0, [r7, #12]
 8004d3c:	f000 f886 	bl	8004e4c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d40:	4603      	mov	r3, r0
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d001      	beq.n	8004d4a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e000      	b.n	8004d4c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004d4a:	2300      	movs	r3, #0
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3718      	adds	r7, #24
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}
 8004d54:	00010002 	.word	0x00010002

08004d58 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b084      	sub	sp, #16
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	60f8      	str	r0, [r7, #12]
 8004d60:	60b9      	str	r1, [r7, #8]
 8004d62:	603b      	str	r3, [r7, #0]
 8004d64:	4613      	mov	r3, r2
 8004d66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d68:	e048      	b.n	8004dfc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d70:	d044      	beq.n	8004dfc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d72:	f7fe fda5 	bl	80038c0 <HAL_GetTick>
 8004d76:	4602      	mov	r2, r0
 8004d78:	69bb      	ldr	r3, [r7, #24]
 8004d7a:	1ad3      	subs	r3, r2, r3
 8004d7c:	683a      	ldr	r2, [r7, #0]
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d302      	bcc.n	8004d88 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d139      	bne.n	8004dfc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	0c1b      	lsrs	r3, r3, #16
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d10d      	bne.n	8004dae <I2C_WaitOnFlagUntilTimeout+0x56>
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	695b      	ldr	r3, [r3, #20]
 8004d98:	43da      	mvns	r2, r3
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	bf0c      	ite	eq
 8004da4:	2301      	moveq	r3, #1
 8004da6:	2300      	movne	r3, #0
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	461a      	mov	r2, r3
 8004dac:	e00c      	b.n	8004dc8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	699b      	ldr	r3, [r3, #24]
 8004db4:	43da      	mvns	r2, r3
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	4013      	ands	r3, r2
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	bf0c      	ite	eq
 8004dc0:	2301      	moveq	r3, #1
 8004dc2:	2300      	movne	r3, #0
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	79fb      	ldrb	r3, [r7, #7]
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d116      	bne.n	8004dfc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2220      	movs	r2, #32
 8004dd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2200      	movs	r2, #0
 8004de0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004de8:	f043 0220 	orr.w	r2, r3, #32
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2200      	movs	r2, #0
 8004df4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	e023      	b.n	8004e44 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	0c1b      	lsrs	r3, r3, #16
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d10d      	bne.n	8004e22 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	695b      	ldr	r3, [r3, #20]
 8004e0c:	43da      	mvns	r2, r3
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	4013      	ands	r3, r2
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	bf0c      	ite	eq
 8004e18:	2301      	moveq	r3, #1
 8004e1a:	2300      	movne	r3, #0
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	461a      	mov	r2, r3
 8004e20:	e00c      	b.n	8004e3c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	699b      	ldr	r3, [r3, #24]
 8004e28:	43da      	mvns	r2, r3
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	4013      	ands	r3, r2
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	bf0c      	ite	eq
 8004e34:	2301      	moveq	r3, #1
 8004e36:	2300      	movne	r3, #0
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	79fb      	ldrb	r3, [r7, #7]
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d093      	beq.n	8004d6a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e42:	2300      	movs	r3, #0
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3710      	adds	r7, #16
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}

08004e4c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b084      	sub	sp, #16
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	607a      	str	r2, [r7, #4]
 8004e58:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004e5a:	e071      	b.n	8004f40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	695b      	ldr	r3, [r3, #20]
 8004e62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e6a:	d123      	bne.n	8004eb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e7a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004e84:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2220      	movs	r2, #32
 8004e90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2200      	movs	r2, #0
 8004e98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ea0:	f043 0204 	orr.w	r2, r3, #4
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e067      	b.n	8004f84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eba:	d041      	beq.n	8004f40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ebc:	f7fe fd00 	bl	80038c0 <HAL_GetTick>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d302      	bcc.n	8004ed2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d136      	bne.n	8004f40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	0c1b      	lsrs	r3, r3, #16
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d10c      	bne.n	8004ef6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	695b      	ldr	r3, [r3, #20]
 8004ee2:	43da      	mvns	r2, r3
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	bf14      	ite	ne
 8004eee:	2301      	movne	r3, #1
 8004ef0:	2300      	moveq	r3, #0
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	e00b      	b.n	8004f0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	699b      	ldr	r3, [r3, #24]
 8004efc:	43da      	mvns	r2, r3
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	4013      	ands	r3, r2
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	bf14      	ite	ne
 8004f08:	2301      	movne	r3, #1
 8004f0a:	2300      	moveq	r3, #0
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d016      	beq.n	8004f40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2200      	movs	r2, #0
 8004f16:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2220      	movs	r2, #32
 8004f1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2200      	movs	r2, #0
 8004f24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f2c:	f043 0220 	orr.w	r2, r3, #32
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2200      	movs	r2, #0
 8004f38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e021      	b.n	8004f84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	0c1b      	lsrs	r3, r3, #16
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d10c      	bne.n	8004f64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	695b      	ldr	r3, [r3, #20]
 8004f50:	43da      	mvns	r2, r3
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	4013      	ands	r3, r2
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	bf14      	ite	ne
 8004f5c:	2301      	movne	r3, #1
 8004f5e:	2300      	moveq	r3, #0
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	e00b      	b.n	8004f7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	699b      	ldr	r3, [r3, #24]
 8004f6a:	43da      	mvns	r2, r3
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	4013      	ands	r3, r2
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	bf14      	ite	ne
 8004f76:	2301      	movne	r3, #1
 8004f78:	2300      	moveq	r3, #0
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	f47f af6d 	bne.w	8004e5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004f82:	2300      	movs	r3, #0
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3710      	adds	r7, #16
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}

08004f8c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b084      	sub	sp, #16
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	60f8      	str	r0, [r7, #12]
 8004f94:	60b9      	str	r1, [r7, #8]
 8004f96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f98:	e034      	b.n	8005004 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004f9a:	68f8      	ldr	r0, [r7, #12]
 8004f9c:	f000 f8e3 	bl	8005166 <I2C_IsAcknowledgeFailed>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d001      	beq.n	8004faa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e034      	b.n	8005014 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fb0:	d028      	beq.n	8005004 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fb2:	f7fe fc85 	bl	80038c0 <HAL_GetTick>
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	1ad3      	subs	r3, r2, r3
 8004fbc:	68ba      	ldr	r2, [r7, #8]
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d302      	bcc.n	8004fc8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d11d      	bne.n	8005004 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	695b      	ldr	r3, [r3, #20]
 8004fce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fd2:	2b80      	cmp	r3, #128	@ 0x80
 8004fd4:	d016      	beq.n	8005004 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2220      	movs	r2, #32
 8004fe0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ff0:	f043 0220 	orr.w	r2, r3, #32
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	e007      	b.n	8005014 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	695b      	ldr	r3, [r3, #20]
 800500a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800500e:	2b80      	cmp	r3, #128	@ 0x80
 8005010:	d1c3      	bne.n	8004f9a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005012:	2300      	movs	r3, #0
}
 8005014:	4618      	mov	r0, r3
 8005016:	3710      	adds	r7, #16
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}

0800501c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b084      	sub	sp, #16
 8005020:	af00      	add	r7, sp, #0
 8005022:	60f8      	str	r0, [r7, #12]
 8005024:	60b9      	str	r1, [r7, #8]
 8005026:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005028:	e034      	b.n	8005094 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800502a:	68f8      	ldr	r0, [r7, #12]
 800502c:	f000 f89b 	bl	8005166 <I2C_IsAcknowledgeFailed>
 8005030:	4603      	mov	r3, r0
 8005032:	2b00      	cmp	r3, #0
 8005034:	d001      	beq.n	800503a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e034      	b.n	80050a4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005040:	d028      	beq.n	8005094 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005042:	f7fe fc3d 	bl	80038c0 <HAL_GetTick>
 8005046:	4602      	mov	r2, r0
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	1ad3      	subs	r3, r2, r3
 800504c:	68ba      	ldr	r2, [r7, #8]
 800504e:	429a      	cmp	r2, r3
 8005050:	d302      	bcc.n	8005058 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d11d      	bne.n	8005094 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	695b      	ldr	r3, [r3, #20]
 800505e:	f003 0304 	and.w	r3, r3, #4
 8005062:	2b04      	cmp	r3, #4
 8005064:	d016      	beq.n	8005094 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2200      	movs	r2, #0
 800506a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2220      	movs	r2, #32
 8005070:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2200      	movs	r2, #0
 8005078:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005080:	f043 0220 	orr.w	r2, r3, #32
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2200      	movs	r2, #0
 800508c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005090:	2301      	movs	r3, #1
 8005092:	e007      	b.n	80050a4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	695b      	ldr	r3, [r3, #20]
 800509a:	f003 0304 	and.w	r3, r3, #4
 800509e:	2b04      	cmp	r3, #4
 80050a0:	d1c3      	bne.n	800502a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80050a2:	2300      	movs	r3, #0
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3710      	adds	r7, #16
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}

080050ac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b084      	sub	sp, #16
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	60f8      	str	r0, [r7, #12]
 80050b4:	60b9      	str	r1, [r7, #8]
 80050b6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80050b8:	e049      	b.n	800514e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	695b      	ldr	r3, [r3, #20]
 80050c0:	f003 0310 	and.w	r3, r3, #16
 80050c4:	2b10      	cmp	r3, #16
 80050c6:	d119      	bne.n	80050fc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f06f 0210 	mvn.w	r2, #16
 80050d0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2200      	movs	r2, #0
 80050d6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2220      	movs	r2, #32
 80050dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2200      	movs	r2, #0
 80050e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2200      	movs	r2, #0
 80050f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	e030      	b.n	800515e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050fc:	f7fe fbe0 	bl	80038c0 <HAL_GetTick>
 8005100:	4602      	mov	r2, r0
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	1ad3      	subs	r3, r2, r3
 8005106:	68ba      	ldr	r2, [r7, #8]
 8005108:	429a      	cmp	r2, r3
 800510a:	d302      	bcc.n	8005112 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d11d      	bne.n	800514e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	695b      	ldr	r3, [r3, #20]
 8005118:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800511c:	2b40      	cmp	r3, #64	@ 0x40
 800511e:	d016      	beq.n	800514e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2200      	movs	r2, #0
 8005124:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2220      	movs	r2, #32
 800512a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2200      	movs	r2, #0
 8005132:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800513a:	f043 0220 	orr.w	r2, r3, #32
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2200      	movs	r2, #0
 8005146:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e007      	b.n	800515e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	695b      	ldr	r3, [r3, #20]
 8005154:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005158:	2b40      	cmp	r3, #64	@ 0x40
 800515a:	d1ae      	bne.n	80050ba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800515c:	2300      	movs	r3, #0
}
 800515e:	4618      	mov	r0, r3
 8005160:	3710      	adds	r7, #16
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}

08005166 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005166:	b480      	push	{r7}
 8005168:	b083      	sub	sp, #12
 800516a:	af00      	add	r7, sp, #0
 800516c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	695b      	ldr	r3, [r3, #20]
 8005174:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005178:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800517c:	d11b      	bne.n	80051b6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005186:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2200      	movs	r2, #0
 800518c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2220      	movs	r2, #32
 8005192:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051a2:	f043 0204 	orr.w	r2, r3, #4
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	e000      	b.n	80051b8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80051b6:	2300      	movs	r3, #0
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	370c      	adds	r7, #12
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr

080051c4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b083      	sub	sp, #12
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	2b20      	cmp	r3, #32
 80051d8:	d129      	bne.n	800522e <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2224      	movs	r2, #36	@ 0x24
 80051de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f022 0201 	bic.w	r2, r2, #1
 80051f0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f022 0210 	bic.w	r2, r2, #16
 8005200:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	683a      	ldr	r2, [r7, #0]
 800520e:	430a      	orrs	r2, r1
 8005210:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f042 0201 	orr.w	r2, r2, #1
 8005220:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2220      	movs	r2, #32
 8005226:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800522a:	2300      	movs	r3, #0
 800522c:	e000      	b.n	8005230 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800522e:	2302      	movs	r3, #2
  }
}
 8005230:	4618      	mov	r0, r3
 8005232:	370c      	adds	r7, #12
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr

0800523c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800523c:	b480      	push	{r7}
 800523e:	b085      	sub	sp, #20
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8005246:	2300      	movs	r3, #0
 8005248:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005250:	b2db      	uxtb	r3, r3
 8005252:	2b20      	cmp	r3, #32
 8005254:	d12a      	bne.n	80052ac <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2224      	movs	r2, #36	@ 0x24
 800525a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f022 0201 	bic.w	r2, r2, #1
 800526c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005274:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8005276:	89fb      	ldrh	r3, [r7, #14]
 8005278:	f023 030f 	bic.w	r3, r3, #15
 800527c:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	b29a      	uxth	r2, r3
 8005282:	89fb      	ldrh	r3, [r7, #14]
 8005284:	4313      	orrs	r3, r2
 8005286:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	89fa      	ldrh	r2, [r7, #14]
 800528e:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f042 0201 	orr.w	r2, r2, #1
 800529e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2220      	movs	r2, #32
 80052a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80052a8:	2300      	movs	r3, #0
 80052aa:	e000      	b.n	80052ae <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80052ac:	2302      	movs	r3, #2
  }
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3714      	adds	r7, #20
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr
	...

080052bc <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b084      	sub	sp, #16
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d101      	bne.n	80052ce <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	e0bf      	b.n	800544e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d106      	bne.n	80052e8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f7fd fcf8 	bl	8002cd8 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2202      	movs	r2, #2
 80052ec:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	699a      	ldr	r2, [r3, #24]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80052fe:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	6999      	ldr	r1, [r3, #24]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	685a      	ldr	r2, [r3, #4]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005314:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	430a      	orrs	r2, r1
 8005322:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	6899      	ldr	r1, [r3, #8]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	4b4a      	ldr	r3, [pc, #296]	@ (8005458 <HAL_LTDC_Init+0x19c>)
 8005330:	400b      	ands	r3, r1
 8005332:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	695b      	ldr	r3, [r3, #20]
 8005338:	041b      	lsls	r3, r3, #16
 800533a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	6899      	ldr	r1, [r3, #8]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	699a      	ldr	r2, [r3, #24]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	431a      	orrs	r2, r3
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	430a      	orrs	r2, r1
 8005350:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	68d9      	ldr	r1, [r3, #12]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	4b3e      	ldr	r3, [pc, #248]	@ (8005458 <HAL_LTDC_Init+0x19c>)
 800535e:	400b      	ands	r3, r1
 8005360:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	69db      	ldr	r3, [r3, #28]
 8005366:	041b      	lsls	r3, r3, #16
 8005368:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	68d9      	ldr	r1, [r3, #12]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6a1a      	ldr	r2, [r3, #32]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	431a      	orrs	r2, r3
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	430a      	orrs	r2, r1
 800537e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	6919      	ldr	r1, [r3, #16]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	4b33      	ldr	r3, [pc, #204]	@ (8005458 <HAL_LTDC_Init+0x19c>)
 800538c:	400b      	ands	r3, r1
 800538e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005394:	041b      	lsls	r3, r3, #16
 8005396:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	6919      	ldr	r1, [r3, #16]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	431a      	orrs	r2, r3
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	430a      	orrs	r2, r1
 80053ac:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	6959      	ldr	r1, [r3, #20]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	4b27      	ldr	r3, [pc, #156]	@ (8005458 <HAL_LTDC_Init+0x19c>)
 80053ba:	400b      	ands	r3, r1
 80053bc:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053c2:	041b      	lsls	r3, r3, #16
 80053c4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	6959      	ldr	r1, [r3, #20]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	431a      	orrs	r2, r3
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	430a      	orrs	r2, r1
 80053da:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80053e2:	021b      	lsls	r3, r3, #8
 80053e4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80053ec:	041b      	lsls	r3, r3, #16
 80053ee:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 80053fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005406:	68ba      	ldr	r2, [r7, #8]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	4313      	orrs	r3, r2
 800540c:	687a      	ldr	r2, [r7, #4]
 800540e:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8005412:	431a      	orrs	r2, r3
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	430a      	orrs	r2, r1
 800541a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f042 0206 	orr.w	r2, r2, #6
 800542a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	699a      	ldr	r2, [r3, #24]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f042 0201 	orr.w	r2, r2, #1
 800543a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2200      	movs	r2, #0
 8005440:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2201      	movs	r2, #1
 8005448:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 800544c:	2300      	movs	r3, #0
}
 800544e:	4618      	mov	r0, r3
 8005450:	3710      	adds	r7, #16
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}
 8005456:	bf00      	nop
 8005458:	f000f800 	.word	0xf000f800

0800545c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800545c:	b5b0      	push	{r4, r5, r7, lr}
 800545e:	b084      	sub	sp, #16
 8005460:	af00      	add	r7, sp, #0
 8005462:	60f8      	str	r0, [r7, #12]
 8005464:	60b9      	str	r1, [r7, #8]
 8005466:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800546e:	2b01      	cmp	r3, #1
 8005470:	d101      	bne.n	8005476 <HAL_LTDC_ConfigLayer+0x1a>
 8005472:	2302      	movs	r3, #2
 8005474:	e02c      	b.n	80054d0 <HAL_LTDC_ConfigLayer+0x74>
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2201      	movs	r2, #1
 800547a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2202      	movs	r2, #2
 8005482:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005486:	68fa      	ldr	r2, [r7, #12]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2134      	movs	r1, #52	@ 0x34
 800548c:	fb01 f303 	mul.w	r3, r1, r3
 8005490:	4413      	add	r3, r2
 8005492:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	4614      	mov	r4, r2
 800549a:	461d      	mov	r5, r3
 800549c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800549e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80054a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80054a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80054a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80054a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80054a8:	682b      	ldr	r3, [r5, #0]
 80054aa:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80054ac:	687a      	ldr	r2, [r7, #4]
 80054ae:	68b9      	ldr	r1, [r7, #8]
 80054b0:	68f8      	ldr	r0, [r7, #12]
 80054b2:	f000 f811 	bl	80054d8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	2201      	movs	r2, #1
 80054bc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2201      	movs	r2, #1
 80054c2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2200      	movs	r2, #0
 80054ca:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80054ce:	2300      	movs	r3, #0
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3710      	adds	r7, #16
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bdb0      	pop	{r4, r5, r7, pc}

080054d8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80054d8:	b480      	push	{r7}
 80054da:	b089      	sub	sp, #36	@ 0x24
 80054dc:	af00      	add	r7, sp, #0
 80054de:	60f8      	str	r0, [r7, #12]
 80054e0:	60b9      	str	r1, [r7, #8]
 80054e2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	685a      	ldr	r2, [r3, #4]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	68db      	ldr	r3, [r3, #12]
 80054ee:	0c1b      	lsrs	r3, r3, #16
 80054f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054f4:	4413      	add	r3, r2
 80054f6:	041b      	lsls	r3, r3, #16
 80054f8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	461a      	mov	r2, r3
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	01db      	lsls	r3, r3, #7
 8005504:	4413      	add	r3, r2
 8005506:	3384      	adds	r3, #132	@ 0x84
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	68fa      	ldr	r2, [r7, #12]
 800550c:	6812      	ldr	r2, [r2, #0]
 800550e:	4611      	mov	r1, r2
 8005510:	687a      	ldr	r2, [r7, #4]
 8005512:	01d2      	lsls	r2, r2, #7
 8005514:	440a      	add	r2, r1
 8005516:	3284      	adds	r2, #132	@ 0x84
 8005518:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800551c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	68db      	ldr	r3, [r3, #12]
 8005528:	0c1b      	lsrs	r3, r3, #16
 800552a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800552e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005530:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4619      	mov	r1, r3
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	01db      	lsls	r3, r3, #7
 800553c:	440b      	add	r3, r1
 800553e:	3384      	adds	r3, #132	@ 0x84
 8005540:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005542:	69fb      	ldr	r3, [r7, #28]
 8005544:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005546:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	68da      	ldr	r2, [r3, #12]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005556:	4413      	add	r3, r2
 8005558:	041b      	lsls	r3, r3, #16
 800555a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	461a      	mov	r2, r3
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	01db      	lsls	r3, r3, #7
 8005566:	4413      	add	r3, r2
 8005568:	3384      	adds	r3, #132	@ 0x84
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	68fa      	ldr	r2, [r7, #12]
 800556e:	6812      	ldr	r2, [r2, #0]
 8005570:	4611      	mov	r1, r2
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	01d2      	lsls	r2, r2, #7
 8005576:	440a      	add	r2, r1
 8005578:	3284      	adds	r2, #132	@ 0x84
 800557a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800557e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	689a      	ldr	r2, [r3, #8]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800558e:	4413      	add	r3, r2
 8005590:	1c5a      	adds	r2, r3, #1
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4619      	mov	r1, r3
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	01db      	lsls	r3, r3, #7
 800559c:	440b      	add	r3, r1
 800559e:	3384      	adds	r3, #132	@ 0x84
 80055a0:	4619      	mov	r1, r3
 80055a2:	69fb      	ldr	r3, [r7, #28]
 80055a4:	4313      	orrs	r3, r2
 80055a6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	461a      	mov	r2, r3
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	01db      	lsls	r3, r3, #7
 80055b2:	4413      	add	r3, r2
 80055b4:	3384      	adds	r3, #132	@ 0x84
 80055b6:	691b      	ldr	r3, [r3, #16]
 80055b8:	68fa      	ldr	r2, [r7, #12]
 80055ba:	6812      	ldr	r2, [r2, #0]
 80055bc:	4611      	mov	r1, r2
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	01d2      	lsls	r2, r2, #7
 80055c2:	440a      	add	r2, r1
 80055c4:	3284      	adds	r2, #132	@ 0x84
 80055c6:	f023 0307 	bic.w	r3, r3, #7
 80055ca:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	461a      	mov	r2, r3
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	01db      	lsls	r3, r3, #7
 80055d6:	4413      	add	r3, r2
 80055d8:	3384      	adds	r3, #132	@ 0x84
 80055da:	461a      	mov	r2, r3
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	691b      	ldr	r3, [r3, #16]
 80055e0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80055e8:	021b      	lsls	r3, r3, #8
 80055ea:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80055f2:	041b      	lsls	r3, r3, #16
 80055f4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	699b      	ldr	r3, [r3, #24]
 80055fa:	061b      	lsls	r3, r3, #24
 80055fc:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	461a      	mov	r2, r3
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	01db      	lsls	r3, r3, #7
 8005608:	4413      	add	r3, r2
 800560a:	3384      	adds	r3, #132	@ 0x84
 800560c:	699b      	ldr	r3, [r3, #24]
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	461a      	mov	r2, r3
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	01db      	lsls	r3, r3, #7
 8005618:	4413      	add	r3, r2
 800561a:	3384      	adds	r3, #132	@ 0x84
 800561c:	461a      	mov	r2, r3
 800561e:	2300      	movs	r3, #0
 8005620:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005628:	461a      	mov	r2, r3
 800562a:	69fb      	ldr	r3, [r7, #28]
 800562c:	431a      	orrs	r2, r3
 800562e:	69bb      	ldr	r3, [r7, #24]
 8005630:	431a      	orrs	r2, r3
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4619      	mov	r1, r3
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	01db      	lsls	r3, r3, #7
 800563c:	440b      	add	r3, r1
 800563e:	3384      	adds	r3, #132	@ 0x84
 8005640:	4619      	mov	r1, r3
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	4313      	orrs	r3, r2
 8005646:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	461a      	mov	r2, r3
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	01db      	lsls	r3, r3, #7
 8005652:	4413      	add	r3, r2
 8005654:	3384      	adds	r3, #132	@ 0x84
 8005656:	695b      	ldr	r3, [r3, #20]
 8005658:	68fa      	ldr	r2, [r7, #12]
 800565a:	6812      	ldr	r2, [r2, #0]
 800565c:	4611      	mov	r1, r2
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	01d2      	lsls	r2, r2, #7
 8005662:	440a      	add	r2, r1
 8005664:	3284      	adds	r2, #132	@ 0x84
 8005666:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800566a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	461a      	mov	r2, r3
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	01db      	lsls	r3, r3, #7
 8005676:	4413      	add	r3, r2
 8005678:	3384      	adds	r3, #132	@ 0x84
 800567a:	461a      	mov	r2, r3
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	695b      	ldr	r3, [r3, #20]
 8005680:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	461a      	mov	r2, r3
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	01db      	lsls	r3, r3, #7
 800568c:	4413      	add	r3, r2
 800568e:	3384      	adds	r3, #132	@ 0x84
 8005690:	69db      	ldr	r3, [r3, #28]
 8005692:	68fa      	ldr	r2, [r7, #12]
 8005694:	6812      	ldr	r2, [r2, #0]
 8005696:	4611      	mov	r1, r2
 8005698:	687a      	ldr	r2, [r7, #4]
 800569a:	01d2      	lsls	r2, r2, #7
 800569c:	440a      	add	r2, r1
 800569e:	3284      	adds	r2, #132	@ 0x84
 80056a0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80056a4:	f023 0307 	bic.w	r3, r3, #7
 80056a8:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	69da      	ldr	r2, [r3, #28]
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	6a1b      	ldr	r3, [r3, #32]
 80056b2:	68f9      	ldr	r1, [r7, #12]
 80056b4:	6809      	ldr	r1, [r1, #0]
 80056b6:	4608      	mov	r0, r1
 80056b8:	6879      	ldr	r1, [r7, #4]
 80056ba:	01c9      	lsls	r1, r1, #7
 80056bc:	4401      	add	r1, r0
 80056be:	3184      	adds	r1, #132	@ 0x84
 80056c0:	4313      	orrs	r3, r2
 80056c2:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	461a      	mov	r2, r3
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	01db      	lsls	r3, r3, #7
 80056ce:	4413      	add	r3, r2
 80056d0:	3384      	adds	r3, #132	@ 0x84
 80056d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	461a      	mov	r2, r3
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	01db      	lsls	r3, r3, #7
 80056de:	4413      	add	r3, r2
 80056e0:	3384      	adds	r3, #132	@ 0x84
 80056e2:	461a      	mov	r2, r3
 80056e4:	2300      	movs	r3, #0
 80056e6:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	461a      	mov	r2, r3
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	01db      	lsls	r3, r3, #7
 80056f2:	4413      	add	r3, r2
 80056f4:	3384      	adds	r3, #132	@ 0x84
 80056f6:	461a      	mov	r2, r3
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056fc:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	691b      	ldr	r3, [r3, #16]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d102      	bne.n	800570c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8005706:	2304      	movs	r3, #4
 8005708:	61fb      	str	r3, [r7, #28]
 800570a:	e01b      	b.n	8005744 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	691b      	ldr	r3, [r3, #16]
 8005710:	2b01      	cmp	r3, #1
 8005712:	d102      	bne.n	800571a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8005714:	2303      	movs	r3, #3
 8005716:	61fb      	str	r3, [r7, #28]
 8005718:	e014      	b.n	8005744 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	691b      	ldr	r3, [r3, #16]
 800571e:	2b04      	cmp	r3, #4
 8005720:	d00b      	beq.n	800573a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005726:	2b02      	cmp	r3, #2
 8005728:	d007      	beq.n	800573a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800572e:	2b03      	cmp	r3, #3
 8005730:	d003      	beq.n	800573a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005736:	2b07      	cmp	r3, #7
 8005738:	d102      	bne.n	8005740 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800573a:	2302      	movs	r3, #2
 800573c:	61fb      	str	r3, [r7, #28]
 800573e:	e001      	b.n	8005744 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8005740:	2301      	movs	r3, #1
 8005742:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	461a      	mov	r2, r3
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	01db      	lsls	r3, r3, #7
 800574e:	4413      	add	r3, r2
 8005750:	3384      	adds	r3, #132	@ 0x84
 8005752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005754:	68fa      	ldr	r2, [r7, #12]
 8005756:	6812      	ldr	r2, [r2, #0]
 8005758:	4611      	mov	r1, r2
 800575a:	687a      	ldr	r2, [r7, #4]
 800575c:	01d2      	lsls	r2, r2, #7
 800575e:	440a      	add	r2, r1
 8005760:	3284      	adds	r2, #132	@ 0x84
 8005762:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8005766:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800576c:	69fa      	ldr	r2, [r7, #28]
 800576e:	fb02 f303 	mul.w	r3, r2, r3
 8005772:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	6859      	ldr	r1, [r3, #4]
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	1acb      	subs	r3, r1, r3
 800577e:	69f9      	ldr	r1, [r7, #28]
 8005780:	fb01 f303 	mul.w	r3, r1, r3
 8005784:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005786:	68f9      	ldr	r1, [r7, #12]
 8005788:	6809      	ldr	r1, [r1, #0]
 800578a:	4608      	mov	r0, r1
 800578c:	6879      	ldr	r1, [r7, #4]
 800578e:	01c9      	lsls	r1, r1, #7
 8005790:	4401      	add	r1, r0
 8005792:	3184      	adds	r1, #132	@ 0x84
 8005794:	4313      	orrs	r3, r2
 8005796:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	461a      	mov	r2, r3
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	01db      	lsls	r3, r3, #7
 80057a2:	4413      	add	r3, r2
 80057a4:	3384      	adds	r3, #132	@ 0x84
 80057a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057a8:	68fa      	ldr	r2, [r7, #12]
 80057aa:	6812      	ldr	r2, [r2, #0]
 80057ac:	4611      	mov	r1, r2
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	01d2      	lsls	r2, r2, #7
 80057b2:	440a      	add	r2, r1
 80057b4:	3284      	adds	r2, #132	@ 0x84
 80057b6:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80057ba:	f023 0307 	bic.w	r3, r3, #7
 80057be:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	461a      	mov	r2, r3
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	01db      	lsls	r3, r3, #7
 80057ca:	4413      	add	r3, r2
 80057cc:	3384      	adds	r3, #132	@ 0x84
 80057ce:	461a      	mov	r2, r3
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057d4:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	461a      	mov	r2, r3
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	01db      	lsls	r3, r3, #7
 80057e0:	4413      	add	r3, r2
 80057e2:	3384      	adds	r3, #132	@ 0x84
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	68fa      	ldr	r2, [r7, #12]
 80057e8:	6812      	ldr	r2, [r2, #0]
 80057ea:	4611      	mov	r1, r2
 80057ec:	687a      	ldr	r2, [r7, #4]
 80057ee:	01d2      	lsls	r2, r2, #7
 80057f0:	440a      	add	r2, r1
 80057f2:	3284      	adds	r2, #132	@ 0x84
 80057f4:	f043 0301 	orr.w	r3, r3, #1
 80057f8:	6013      	str	r3, [r2, #0]
}
 80057fa:	bf00      	nop
 80057fc:	3724      	adds	r7, #36	@ 0x24
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr
	...

08005808 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b086      	sub	sp, #24
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d101      	bne.n	800581a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	e267      	b.n	8005cea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f003 0301 	and.w	r3, r3, #1
 8005822:	2b00      	cmp	r3, #0
 8005824:	d075      	beq.n	8005912 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005826:	4b88      	ldr	r3, [pc, #544]	@ (8005a48 <HAL_RCC_OscConfig+0x240>)
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	f003 030c 	and.w	r3, r3, #12
 800582e:	2b04      	cmp	r3, #4
 8005830:	d00c      	beq.n	800584c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005832:	4b85      	ldr	r3, [pc, #532]	@ (8005a48 <HAL_RCC_OscConfig+0x240>)
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800583a:	2b08      	cmp	r3, #8
 800583c:	d112      	bne.n	8005864 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800583e:	4b82      	ldr	r3, [pc, #520]	@ (8005a48 <HAL_RCC_OscConfig+0x240>)
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005846:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800584a:	d10b      	bne.n	8005864 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800584c:	4b7e      	ldr	r3, [pc, #504]	@ (8005a48 <HAL_RCC_OscConfig+0x240>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005854:	2b00      	cmp	r3, #0
 8005856:	d05b      	beq.n	8005910 <HAL_RCC_OscConfig+0x108>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d157      	bne.n	8005910 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005860:	2301      	movs	r3, #1
 8005862:	e242      	b.n	8005cea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800586c:	d106      	bne.n	800587c <HAL_RCC_OscConfig+0x74>
 800586e:	4b76      	ldr	r3, [pc, #472]	@ (8005a48 <HAL_RCC_OscConfig+0x240>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a75      	ldr	r2, [pc, #468]	@ (8005a48 <HAL_RCC_OscConfig+0x240>)
 8005874:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005878:	6013      	str	r3, [r2, #0]
 800587a:	e01d      	b.n	80058b8 <HAL_RCC_OscConfig+0xb0>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005884:	d10c      	bne.n	80058a0 <HAL_RCC_OscConfig+0x98>
 8005886:	4b70      	ldr	r3, [pc, #448]	@ (8005a48 <HAL_RCC_OscConfig+0x240>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a6f      	ldr	r2, [pc, #444]	@ (8005a48 <HAL_RCC_OscConfig+0x240>)
 800588c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005890:	6013      	str	r3, [r2, #0]
 8005892:	4b6d      	ldr	r3, [pc, #436]	@ (8005a48 <HAL_RCC_OscConfig+0x240>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a6c      	ldr	r2, [pc, #432]	@ (8005a48 <HAL_RCC_OscConfig+0x240>)
 8005898:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800589c:	6013      	str	r3, [r2, #0]
 800589e:	e00b      	b.n	80058b8 <HAL_RCC_OscConfig+0xb0>
 80058a0:	4b69      	ldr	r3, [pc, #420]	@ (8005a48 <HAL_RCC_OscConfig+0x240>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a68      	ldr	r2, [pc, #416]	@ (8005a48 <HAL_RCC_OscConfig+0x240>)
 80058a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80058aa:	6013      	str	r3, [r2, #0]
 80058ac:	4b66      	ldr	r3, [pc, #408]	@ (8005a48 <HAL_RCC_OscConfig+0x240>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a65      	ldr	r2, [pc, #404]	@ (8005a48 <HAL_RCC_OscConfig+0x240>)
 80058b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80058b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d013      	beq.n	80058e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058c0:	f7fd fffe 	bl	80038c0 <HAL_GetTick>
 80058c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058c6:	e008      	b.n	80058da <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058c8:	f7fd fffa 	bl	80038c0 <HAL_GetTick>
 80058cc:	4602      	mov	r2, r0
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	1ad3      	subs	r3, r2, r3
 80058d2:	2b64      	cmp	r3, #100	@ 0x64
 80058d4:	d901      	bls.n	80058da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80058d6:	2303      	movs	r3, #3
 80058d8:	e207      	b.n	8005cea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058da:	4b5b      	ldr	r3, [pc, #364]	@ (8005a48 <HAL_RCC_OscConfig+0x240>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d0f0      	beq.n	80058c8 <HAL_RCC_OscConfig+0xc0>
 80058e6:	e014      	b.n	8005912 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058e8:	f7fd ffea 	bl	80038c0 <HAL_GetTick>
 80058ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058ee:	e008      	b.n	8005902 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058f0:	f7fd ffe6 	bl	80038c0 <HAL_GetTick>
 80058f4:	4602      	mov	r2, r0
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	1ad3      	subs	r3, r2, r3
 80058fa:	2b64      	cmp	r3, #100	@ 0x64
 80058fc:	d901      	bls.n	8005902 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80058fe:	2303      	movs	r3, #3
 8005900:	e1f3      	b.n	8005cea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005902:	4b51      	ldr	r3, [pc, #324]	@ (8005a48 <HAL_RCC_OscConfig+0x240>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800590a:	2b00      	cmp	r3, #0
 800590c:	d1f0      	bne.n	80058f0 <HAL_RCC_OscConfig+0xe8>
 800590e:	e000      	b.n	8005912 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005910:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f003 0302 	and.w	r3, r3, #2
 800591a:	2b00      	cmp	r3, #0
 800591c:	d063      	beq.n	80059e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800591e:	4b4a      	ldr	r3, [pc, #296]	@ (8005a48 <HAL_RCC_OscConfig+0x240>)
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	f003 030c 	and.w	r3, r3, #12
 8005926:	2b00      	cmp	r3, #0
 8005928:	d00b      	beq.n	8005942 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800592a:	4b47      	ldr	r3, [pc, #284]	@ (8005a48 <HAL_RCC_OscConfig+0x240>)
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005932:	2b08      	cmp	r3, #8
 8005934:	d11c      	bne.n	8005970 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005936:	4b44      	ldr	r3, [pc, #272]	@ (8005a48 <HAL_RCC_OscConfig+0x240>)
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800593e:	2b00      	cmp	r3, #0
 8005940:	d116      	bne.n	8005970 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005942:	4b41      	ldr	r3, [pc, #260]	@ (8005a48 <HAL_RCC_OscConfig+0x240>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f003 0302 	and.w	r3, r3, #2
 800594a:	2b00      	cmp	r3, #0
 800594c:	d005      	beq.n	800595a <HAL_RCC_OscConfig+0x152>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	68db      	ldr	r3, [r3, #12]
 8005952:	2b01      	cmp	r3, #1
 8005954:	d001      	beq.n	800595a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	e1c7      	b.n	8005cea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800595a:	4b3b      	ldr	r3, [pc, #236]	@ (8005a48 <HAL_RCC_OscConfig+0x240>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	691b      	ldr	r3, [r3, #16]
 8005966:	00db      	lsls	r3, r3, #3
 8005968:	4937      	ldr	r1, [pc, #220]	@ (8005a48 <HAL_RCC_OscConfig+0x240>)
 800596a:	4313      	orrs	r3, r2
 800596c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800596e:	e03a      	b.n	80059e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	68db      	ldr	r3, [r3, #12]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d020      	beq.n	80059ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005978:	4b34      	ldr	r3, [pc, #208]	@ (8005a4c <HAL_RCC_OscConfig+0x244>)
 800597a:	2201      	movs	r2, #1
 800597c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800597e:	f7fd ff9f 	bl	80038c0 <HAL_GetTick>
 8005982:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005984:	e008      	b.n	8005998 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005986:	f7fd ff9b 	bl	80038c0 <HAL_GetTick>
 800598a:	4602      	mov	r2, r0
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	1ad3      	subs	r3, r2, r3
 8005990:	2b02      	cmp	r3, #2
 8005992:	d901      	bls.n	8005998 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005994:	2303      	movs	r3, #3
 8005996:	e1a8      	b.n	8005cea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005998:	4b2b      	ldr	r3, [pc, #172]	@ (8005a48 <HAL_RCC_OscConfig+0x240>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f003 0302 	and.w	r3, r3, #2
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d0f0      	beq.n	8005986 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059a4:	4b28      	ldr	r3, [pc, #160]	@ (8005a48 <HAL_RCC_OscConfig+0x240>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	691b      	ldr	r3, [r3, #16]
 80059b0:	00db      	lsls	r3, r3, #3
 80059b2:	4925      	ldr	r1, [pc, #148]	@ (8005a48 <HAL_RCC_OscConfig+0x240>)
 80059b4:	4313      	orrs	r3, r2
 80059b6:	600b      	str	r3, [r1, #0]
 80059b8:	e015      	b.n	80059e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80059ba:	4b24      	ldr	r3, [pc, #144]	@ (8005a4c <HAL_RCC_OscConfig+0x244>)
 80059bc:	2200      	movs	r2, #0
 80059be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059c0:	f7fd ff7e 	bl	80038c0 <HAL_GetTick>
 80059c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059c6:	e008      	b.n	80059da <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80059c8:	f7fd ff7a 	bl	80038c0 <HAL_GetTick>
 80059cc:	4602      	mov	r2, r0
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	1ad3      	subs	r3, r2, r3
 80059d2:	2b02      	cmp	r3, #2
 80059d4:	d901      	bls.n	80059da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80059d6:	2303      	movs	r3, #3
 80059d8:	e187      	b.n	8005cea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059da:	4b1b      	ldr	r3, [pc, #108]	@ (8005a48 <HAL_RCC_OscConfig+0x240>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f003 0302 	and.w	r3, r3, #2
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d1f0      	bne.n	80059c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f003 0308 	and.w	r3, r3, #8
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d036      	beq.n	8005a60 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	695b      	ldr	r3, [r3, #20]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d016      	beq.n	8005a28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80059fa:	4b15      	ldr	r3, [pc, #84]	@ (8005a50 <HAL_RCC_OscConfig+0x248>)
 80059fc:	2201      	movs	r2, #1
 80059fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a00:	f7fd ff5e 	bl	80038c0 <HAL_GetTick>
 8005a04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a06:	e008      	b.n	8005a1a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a08:	f7fd ff5a 	bl	80038c0 <HAL_GetTick>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	1ad3      	subs	r3, r2, r3
 8005a12:	2b02      	cmp	r3, #2
 8005a14:	d901      	bls.n	8005a1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005a16:	2303      	movs	r3, #3
 8005a18:	e167      	b.n	8005cea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a1a:	4b0b      	ldr	r3, [pc, #44]	@ (8005a48 <HAL_RCC_OscConfig+0x240>)
 8005a1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a1e:	f003 0302 	and.w	r3, r3, #2
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d0f0      	beq.n	8005a08 <HAL_RCC_OscConfig+0x200>
 8005a26:	e01b      	b.n	8005a60 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a28:	4b09      	ldr	r3, [pc, #36]	@ (8005a50 <HAL_RCC_OscConfig+0x248>)
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a2e:	f7fd ff47 	bl	80038c0 <HAL_GetTick>
 8005a32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a34:	e00e      	b.n	8005a54 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a36:	f7fd ff43 	bl	80038c0 <HAL_GetTick>
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	1ad3      	subs	r3, r2, r3
 8005a40:	2b02      	cmp	r3, #2
 8005a42:	d907      	bls.n	8005a54 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005a44:	2303      	movs	r3, #3
 8005a46:	e150      	b.n	8005cea <HAL_RCC_OscConfig+0x4e2>
 8005a48:	40023800 	.word	0x40023800
 8005a4c:	42470000 	.word	0x42470000
 8005a50:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a54:	4b88      	ldr	r3, [pc, #544]	@ (8005c78 <HAL_RCC_OscConfig+0x470>)
 8005a56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a58:	f003 0302 	and.w	r3, r3, #2
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d1ea      	bne.n	8005a36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f003 0304 	and.w	r3, r3, #4
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	f000 8097 	beq.w	8005b9c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a72:	4b81      	ldr	r3, [pc, #516]	@ (8005c78 <HAL_RCC_OscConfig+0x470>)
 8005a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d10f      	bne.n	8005a9e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a7e:	2300      	movs	r3, #0
 8005a80:	60bb      	str	r3, [r7, #8]
 8005a82:	4b7d      	ldr	r3, [pc, #500]	@ (8005c78 <HAL_RCC_OscConfig+0x470>)
 8005a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a86:	4a7c      	ldr	r2, [pc, #496]	@ (8005c78 <HAL_RCC_OscConfig+0x470>)
 8005a88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8005a8e:	4b7a      	ldr	r3, [pc, #488]	@ (8005c78 <HAL_RCC_OscConfig+0x470>)
 8005a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a96:	60bb      	str	r3, [r7, #8]
 8005a98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a9e:	4b77      	ldr	r3, [pc, #476]	@ (8005c7c <HAL_RCC_OscConfig+0x474>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d118      	bne.n	8005adc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005aaa:	4b74      	ldr	r3, [pc, #464]	@ (8005c7c <HAL_RCC_OscConfig+0x474>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a73      	ldr	r2, [pc, #460]	@ (8005c7c <HAL_RCC_OscConfig+0x474>)
 8005ab0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ab4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ab6:	f7fd ff03 	bl	80038c0 <HAL_GetTick>
 8005aba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005abc:	e008      	b.n	8005ad0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005abe:	f7fd feff 	bl	80038c0 <HAL_GetTick>
 8005ac2:	4602      	mov	r2, r0
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	1ad3      	subs	r3, r2, r3
 8005ac8:	2b02      	cmp	r3, #2
 8005aca:	d901      	bls.n	8005ad0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005acc:	2303      	movs	r3, #3
 8005ace:	e10c      	b.n	8005cea <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ad0:	4b6a      	ldr	r3, [pc, #424]	@ (8005c7c <HAL_RCC_OscConfig+0x474>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d0f0      	beq.n	8005abe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d106      	bne.n	8005af2 <HAL_RCC_OscConfig+0x2ea>
 8005ae4:	4b64      	ldr	r3, [pc, #400]	@ (8005c78 <HAL_RCC_OscConfig+0x470>)
 8005ae6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ae8:	4a63      	ldr	r2, [pc, #396]	@ (8005c78 <HAL_RCC_OscConfig+0x470>)
 8005aea:	f043 0301 	orr.w	r3, r3, #1
 8005aee:	6713      	str	r3, [r2, #112]	@ 0x70
 8005af0:	e01c      	b.n	8005b2c <HAL_RCC_OscConfig+0x324>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	2b05      	cmp	r3, #5
 8005af8:	d10c      	bne.n	8005b14 <HAL_RCC_OscConfig+0x30c>
 8005afa:	4b5f      	ldr	r3, [pc, #380]	@ (8005c78 <HAL_RCC_OscConfig+0x470>)
 8005afc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005afe:	4a5e      	ldr	r2, [pc, #376]	@ (8005c78 <HAL_RCC_OscConfig+0x470>)
 8005b00:	f043 0304 	orr.w	r3, r3, #4
 8005b04:	6713      	str	r3, [r2, #112]	@ 0x70
 8005b06:	4b5c      	ldr	r3, [pc, #368]	@ (8005c78 <HAL_RCC_OscConfig+0x470>)
 8005b08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b0a:	4a5b      	ldr	r2, [pc, #364]	@ (8005c78 <HAL_RCC_OscConfig+0x470>)
 8005b0c:	f043 0301 	orr.w	r3, r3, #1
 8005b10:	6713      	str	r3, [r2, #112]	@ 0x70
 8005b12:	e00b      	b.n	8005b2c <HAL_RCC_OscConfig+0x324>
 8005b14:	4b58      	ldr	r3, [pc, #352]	@ (8005c78 <HAL_RCC_OscConfig+0x470>)
 8005b16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b18:	4a57      	ldr	r2, [pc, #348]	@ (8005c78 <HAL_RCC_OscConfig+0x470>)
 8005b1a:	f023 0301 	bic.w	r3, r3, #1
 8005b1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005b20:	4b55      	ldr	r3, [pc, #340]	@ (8005c78 <HAL_RCC_OscConfig+0x470>)
 8005b22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b24:	4a54      	ldr	r2, [pc, #336]	@ (8005c78 <HAL_RCC_OscConfig+0x470>)
 8005b26:	f023 0304 	bic.w	r3, r3, #4
 8005b2a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d015      	beq.n	8005b60 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b34:	f7fd fec4 	bl	80038c0 <HAL_GetTick>
 8005b38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b3a:	e00a      	b.n	8005b52 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b3c:	f7fd fec0 	bl	80038c0 <HAL_GetTick>
 8005b40:	4602      	mov	r2, r0
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	1ad3      	subs	r3, r2, r3
 8005b46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d901      	bls.n	8005b52 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005b4e:	2303      	movs	r3, #3
 8005b50:	e0cb      	b.n	8005cea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b52:	4b49      	ldr	r3, [pc, #292]	@ (8005c78 <HAL_RCC_OscConfig+0x470>)
 8005b54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b56:	f003 0302 	and.w	r3, r3, #2
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d0ee      	beq.n	8005b3c <HAL_RCC_OscConfig+0x334>
 8005b5e:	e014      	b.n	8005b8a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b60:	f7fd feae 	bl	80038c0 <HAL_GetTick>
 8005b64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b66:	e00a      	b.n	8005b7e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b68:	f7fd feaa 	bl	80038c0 <HAL_GetTick>
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	1ad3      	subs	r3, r2, r3
 8005b72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d901      	bls.n	8005b7e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005b7a:	2303      	movs	r3, #3
 8005b7c:	e0b5      	b.n	8005cea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b7e:	4b3e      	ldr	r3, [pc, #248]	@ (8005c78 <HAL_RCC_OscConfig+0x470>)
 8005b80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b82:	f003 0302 	and.w	r3, r3, #2
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d1ee      	bne.n	8005b68 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005b8a:	7dfb      	ldrb	r3, [r7, #23]
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d105      	bne.n	8005b9c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b90:	4b39      	ldr	r3, [pc, #228]	@ (8005c78 <HAL_RCC_OscConfig+0x470>)
 8005b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b94:	4a38      	ldr	r2, [pc, #224]	@ (8005c78 <HAL_RCC_OscConfig+0x470>)
 8005b96:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005b9a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	699b      	ldr	r3, [r3, #24]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	f000 80a1 	beq.w	8005ce8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005ba6:	4b34      	ldr	r3, [pc, #208]	@ (8005c78 <HAL_RCC_OscConfig+0x470>)
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	f003 030c 	and.w	r3, r3, #12
 8005bae:	2b08      	cmp	r3, #8
 8005bb0:	d05c      	beq.n	8005c6c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	699b      	ldr	r3, [r3, #24]
 8005bb6:	2b02      	cmp	r3, #2
 8005bb8:	d141      	bne.n	8005c3e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bba:	4b31      	ldr	r3, [pc, #196]	@ (8005c80 <HAL_RCC_OscConfig+0x478>)
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bc0:	f7fd fe7e 	bl	80038c0 <HAL_GetTick>
 8005bc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bc6:	e008      	b.n	8005bda <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bc8:	f7fd fe7a 	bl	80038c0 <HAL_GetTick>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	1ad3      	subs	r3, r2, r3
 8005bd2:	2b02      	cmp	r3, #2
 8005bd4:	d901      	bls.n	8005bda <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005bd6:	2303      	movs	r3, #3
 8005bd8:	e087      	b.n	8005cea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bda:	4b27      	ldr	r3, [pc, #156]	@ (8005c78 <HAL_RCC_OscConfig+0x470>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d1f0      	bne.n	8005bc8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	69da      	ldr	r2, [r3, #28]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6a1b      	ldr	r3, [r3, #32]
 8005bee:	431a      	orrs	r2, r3
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bf4:	019b      	lsls	r3, r3, #6
 8005bf6:	431a      	orrs	r2, r3
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bfc:	085b      	lsrs	r3, r3, #1
 8005bfe:	3b01      	subs	r3, #1
 8005c00:	041b      	lsls	r3, r3, #16
 8005c02:	431a      	orrs	r2, r3
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c08:	061b      	lsls	r3, r3, #24
 8005c0a:	491b      	ldr	r1, [pc, #108]	@ (8005c78 <HAL_RCC_OscConfig+0x470>)
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c10:	4b1b      	ldr	r3, [pc, #108]	@ (8005c80 <HAL_RCC_OscConfig+0x478>)
 8005c12:	2201      	movs	r2, #1
 8005c14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c16:	f7fd fe53 	bl	80038c0 <HAL_GetTick>
 8005c1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c1c:	e008      	b.n	8005c30 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c1e:	f7fd fe4f 	bl	80038c0 <HAL_GetTick>
 8005c22:	4602      	mov	r2, r0
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	1ad3      	subs	r3, r2, r3
 8005c28:	2b02      	cmp	r3, #2
 8005c2a:	d901      	bls.n	8005c30 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005c2c:	2303      	movs	r3, #3
 8005c2e:	e05c      	b.n	8005cea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c30:	4b11      	ldr	r3, [pc, #68]	@ (8005c78 <HAL_RCC_OscConfig+0x470>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d0f0      	beq.n	8005c1e <HAL_RCC_OscConfig+0x416>
 8005c3c:	e054      	b.n	8005ce8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c3e:	4b10      	ldr	r3, [pc, #64]	@ (8005c80 <HAL_RCC_OscConfig+0x478>)
 8005c40:	2200      	movs	r2, #0
 8005c42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c44:	f7fd fe3c 	bl	80038c0 <HAL_GetTick>
 8005c48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c4a:	e008      	b.n	8005c5e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c4c:	f7fd fe38 	bl	80038c0 <HAL_GetTick>
 8005c50:	4602      	mov	r2, r0
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	1ad3      	subs	r3, r2, r3
 8005c56:	2b02      	cmp	r3, #2
 8005c58:	d901      	bls.n	8005c5e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005c5a:	2303      	movs	r3, #3
 8005c5c:	e045      	b.n	8005cea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c5e:	4b06      	ldr	r3, [pc, #24]	@ (8005c78 <HAL_RCC_OscConfig+0x470>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d1f0      	bne.n	8005c4c <HAL_RCC_OscConfig+0x444>
 8005c6a:	e03d      	b.n	8005ce8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	699b      	ldr	r3, [r3, #24]
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d107      	bne.n	8005c84 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005c74:	2301      	movs	r3, #1
 8005c76:	e038      	b.n	8005cea <HAL_RCC_OscConfig+0x4e2>
 8005c78:	40023800 	.word	0x40023800
 8005c7c:	40007000 	.word	0x40007000
 8005c80:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005c84:	4b1b      	ldr	r3, [pc, #108]	@ (8005cf4 <HAL_RCC_OscConfig+0x4ec>)
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	699b      	ldr	r3, [r3, #24]
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d028      	beq.n	8005ce4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d121      	bne.n	8005ce4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d11a      	bne.n	8005ce4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005cae:	68fa      	ldr	r2, [r7, #12]
 8005cb0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005cb4:	4013      	ands	r3, r2
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005cba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d111      	bne.n	8005ce4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cca:	085b      	lsrs	r3, r3, #1
 8005ccc:	3b01      	subs	r3, #1
 8005cce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d107      	bne.n	8005ce4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cde:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d001      	beq.n	8005ce8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	e000      	b.n	8005cea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005ce8:	2300      	movs	r3, #0
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3718      	adds	r7, #24
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}
 8005cf2:	bf00      	nop
 8005cf4:	40023800 	.word	0x40023800

08005cf8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b084      	sub	sp, #16
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d101      	bne.n	8005d0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	e0cc      	b.n	8005ea6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005d0c:	4b68      	ldr	r3, [pc, #416]	@ (8005eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f003 030f 	and.w	r3, r3, #15
 8005d14:	683a      	ldr	r2, [r7, #0]
 8005d16:	429a      	cmp	r2, r3
 8005d18:	d90c      	bls.n	8005d34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d1a:	4b65      	ldr	r3, [pc, #404]	@ (8005eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8005d1c:	683a      	ldr	r2, [r7, #0]
 8005d1e:	b2d2      	uxtb	r2, r2
 8005d20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d22:	4b63      	ldr	r3, [pc, #396]	@ (8005eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f003 030f 	and.w	r3, r3, #15
 8005d2a:	683a      	ldr	r2, [r7, #0]
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d001      	beq.n	8005d34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005d30:	2301      	movs	r3, #1
 8005d32:	e0b8      	b.n	8005ea6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f003 0302 	and.w	r3, r3, #2
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d020      	beq.n	8005d82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f003 0304 	and.w	r3, r3, #4
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d005      	beq.n	8005d58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d4c:	4b59      	ldr	r3, [pc, #356]	@ (8005eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	4a58      	ldr	r2, [pc, #352]	@ (8005eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005d52:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005d56:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f003 0308 	and.w	r3, r3, #8
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d005      	beq.n	8005d70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005d64:	4b53      	ldr	r3, [pc, #332]	@ (8005eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	4a52      	ldr	r2, [pc, #328]	@ (8005eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005d6a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005d6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d70:	4b50      	ldr	r3, [pc, #320]	@ (8005eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	494d      	ldr	r1, [pc, #308]	@ (8005eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f003 0301 	and.w	r3, r3, #1
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d044      	beq.n	8005e18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	d107      	bne.n	8005da6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d96:	4b47      	ldr	r3, [pc, #284]	@ (8005eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d119      	bne.n	8005dd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	e07f      	b.n	8005ea6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	2b02      	cmp	r3, #2
 8005dac:	d003      	beq.n	8005db6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005db2:	2b03      	cmp	r3, #3
 8005db4:	d107      	bne.n	8005dc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005db6:	4b3f      	ldr	r3, [pc, #252]	@ (8005eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d109      	bne.n	8005dd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e06f      	b.n	8005ea6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005dc6:	4b3b      	ldr	r3, [pc, #236]	@ (8005eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f003 0302 	and.w	r3, r3, #2
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d101      	bne.n	8005dd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e067      	b.n	8005ea6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005dd6:	4b37      	ldr	r3, [pc, #220]	@ (8005eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	f023 0203 	bic.w	r2, r3, #3
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	4934      	ldr	r1, [pc, #208]	@ (8005eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005de4:	4313      	orrs	r3, r2
 8005de6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005de8:	f7fd fd6a 	bl	80038c0 <HAL_GetTick>
 8005dec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dee:	e00a      	b.n	8005e06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005df0:	f7fd fd66 	bl	80038c0 <HAL_GetTick>
 8005df4:	4602      	mov	r2, r0
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	1ad3      	subs	r3, r2, r3
 8005dfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d901      	bls.n	8005e06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005e02:	2303      	movs	r3, #3
 8005e04:	e04f      	b.n	8005ea6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e06:	4b2b      	ldr	r3, [pc, #172]	@ (8005eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	f003 020c 	and.w	r2, r3, #12
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	009b      	lsls	r3, r3, #2
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d1eb      	bne.n	8005df0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005e18:	4b25      	ldr	r3, [pc, #148]	@ (8005eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f003 030f 	and.w	r3, r3, #15
 8005e20:	683a      	ldr	r2, [r7, #0]
 8005e22:	429a      	cmp	r2, r3
 8005e24:	d20c      	bcs.n	8005e40 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e26:	4b22      	ldr	r3, [pc, #136]	@ (8005eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8005e28:	683a      	ldr	r2, [r7, #0]
 8005e2a:	b2d2      	uxtb	r2, r2
 8005e2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e2e:	4b20      	ldr	r3, [pc, #128]	@ (8005eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f003 030f 	and.w	r3, r3, #15
 8005e36:	683a      	ldr	r2, [r7, #0]
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d001      	beq.n	8005e40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	e032      	b.n	8005ea6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f003 0304 	and.w	r3, r3, #4
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d008      	beq.n	8005e5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e4c:	4b19      	ldr	r3, [pc, #100]	@ (8005eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	4916      	ldr	r1, [pc, #88]	@ (8005eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f003 0308 	and.w	r3, r3, #8
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d009      	beq.n	8005e7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e6a:	4b12      	ldr	r3, [pc, #72]	@ (8005eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	691b      	ldr	r3, [r3, #16]
 8005e76:	00db      	lsls	r3, r3, #3
 8005e78:	490e      	ldr	r1, [pc, #56]	@ (8005eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005e7e:	f000 f821 	bl	8005ec4 <HAL_RCC_GetSysClockFreq>
 8005e82:	4602      	mov	r2, r0
 8005e84:	4b0b      	ldr	r3, [pc, #44]	@ (8005eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	091b      	lsrs	r3, r3, #4
 8005e8a:	f003 030f 	and.w	r3, r3, #15
 8005e8e:	490a      	ldr	r1, [pc, #40]	@ (8005eb8 <HAL_RCC_ClockConfig+0x1c0>)
 8005e90:	5ccb      	ldrb	r3, [r1, r3]
 8005e92:	fa22 f303 	lsr.w	r3, r2, r3
 8005e96:	4a09      	ldr	r2, [pc, #36]	@ (8005ebc <HAL_RCC_ClockConfig+0x1c4>)
 8005e98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005e9a:	4b09      	ldr	r3, [pc, #36]	@ (8005ec0 <HAL_RCC_ClockConfig+0x1c8>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f7fd fcca 	bl	8003838 <HAL_InitTick>

  return HAL_OK;
 8005ea4:	2300      	movs	r3, #0
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3710      	adds	r7, #16
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}
 8005eae:	bf00      	nop
 8005eb0:	40023c00 	.word	0x40023c00
 8005eb4:	40023800 	.word	0x40023800
 8005eb8:	08008ee4 	.word	0x08008ee4
 8005ebc:	2000001c 	.word	0x2000001c
 8005ec0:	20000020 	.word	0x20000020

08005ec4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ec4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ec8:	b094      	sub	sp, #80	@ 0x50
 8005eca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005edc:	4b79      	ldr	r3, [pc, #484]	@ (80060c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	f003 030c 	and.w	r3, r3, #12
 8005ee4:	2b08      	cmp	r3, #8
 8005ee6:	d00d      	beq.n	8005f04 <HAL_RCC_GetSysClockFreq+0x40>
 8005ee8:	2b08      	cmp	r3, #8
 8005eea:	f200 80e1 	bhi.w	80060b0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d002      	beq.n	8005ef8 <HAL_RCC_GetSysClockFreq+0x34>
 8005ef2:	2b04      	cmp	r3, #4
 8005ef4:	d003      	beq.n	8005efe <HAL_RCC_GetSysClockFreq+0x3a>
 8005ef6:	e0db      	b.n	80060b0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005ef8:	4b73      	ldr	r3, [pc, #460]	@ (80060c8 <HAL_RCC_GetSysClockFreq+0x204>)
 8005efa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005efc:	e0db      	b.n	80060b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005efe:	4b73      	ldr	r3, [pc, #460]	@ (80060cc <HAL_RCC_GetSysClockFreq+0x208>)
 8005f00:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005f02:	e0d8      	b.n	80060b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005f04:	4b6f      	ldr	r3, [pc, #444]	@ (80060c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005f0c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005f0e:	4b6d      	ldr	r3, [pc, #436]	@ (80060c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d063      	beq.n	8005fe2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f1a:	4b6a      	ldr	r3, [pc, #424]	@ (80060c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	099b      	lsrs	r3, r3, #6
 8005f20:	2200      	movs	r2, #0
 8005f22:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005f24:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005f26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f2c:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f2e:	2300      	movs	r3, #0
 8005f30:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f32:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005f36:	4622      	mov	r2, r4
 8005f38:	462b      	mov	r3, r5
 8005f3a:	f04f 0000 	mov.w	r0, #0
 8005f3e:	f04f 0100 	mov.w	r1, #0
 8005f42:	0159      	lsls	r1, r3, #5
 8005f44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f48:	0150      	lsls	r0, r2, #5
 8005f4a:	4602      	mov	r2, r0
 8005f4c:	460b      	mov	r3, r1
 8005f4e:	4621      	mov	r1, r4
 8005f50:	1a51      	subs	r1, r2, r1
 8005f52:	6139      	str	r1, [r7, #16]
 8005f54:	4629      	mov	r1, r5
 8005f56:	eb63 0301 	sbc.w	r3, r3, r1
 8005f5a:	617b      	str	r3, [r7, #20]
 8005f5c:	f04f 0200 	mov.w	r2, #0
 8005f60:	f04f 0300 	mov.w	r3, #0
 8005f64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005f68:	4659      	mov	r1, fp
 8005f6a:	018b      	lsls	r3, r1, #6
 8005f6c:	4651      	mov	r1, sl
 8005f6e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005f72:	4651      	mov	r1, sl
 8005f74:	018a      	lsls	r2, r1, #6
 8005f76:	4651      	mov	r1, sl
 8005f78:	ebb2 0801 	subs.w	r8, r2, r1
 8005f7c:	4659      	mov	r1, fp
 8005f7e:	eb63 0901 	sbc.w	r9, r3, r1
 8005f82:	f04f 0200 	mov.w	r2, #0
 8005f86:	f04f 0300 	mov.w	r3, #0
 8005f8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005f8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005f92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005f96:	4690      	mov	r8, r2
 8005f98:	4699      	mov	r9, r3
 8005f9a:	4623      	mov	r3, r4
 8005f9c:	eb18 0303 	adds.w	r3, r8, r3
 8005fa0:	60bb      	str	r3, [r7, #8]
 8005fa2:	462b      	mov	r3, r5
 8005fa4:	eb49 0303 	adc.w	r3, r9, r3
 8005fa8:	60fb      	str	r3, [r7, #12]
 8005faa:	f04f 0200 	mov.w	r2, #0
 8005fae:	f04f 0300 	mov.w	r3, #0
 8005fb2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005fb6:	4629      	mov	r1, r5
 8005fb8:	024b      	lsls	r3, r1, #9
 8005fba:	4621      	mov	r1, r4
 8005fbc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005fc0:	4621      	mov	r1, r4
 8005fc2:	024a      	lsls	r2, r1, #9
 8005fc4:	4610      	mov	r0, r2
 8005fc6:	4619      	mov	r1, r3
 8005fc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005fca:	2200      	movs	r2, #0
 8005fcc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005fce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005fd0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005fd4:	f7fa f90a 	bl	80001ec <__aeabi_uldivmod>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	460b      	mov	r3, r1
 8005fdc:	4613      	mov	r3, r2
 8005fde:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005fe0:	e058      	b.n	8006094 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005fe2:	4b38      	ldr	r3, [pc, #224]	@ (80060c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	099b      	lsrs	r3, r3, #6
 8005fe8:	2200      	movs	r2, #0
 8005fea:	4618      	mov	r0, r3
 8005fec:	4611      	mov	r1, r2
 8005fee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005ff2:	623b      	str	r3, [r7, #32]
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ff8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005ffc:	4642      	mov	r2, r8
 8005ffe:	464b      	mov	r3, r9
 8006000:	f04f 0000 	mov.w	r0, #0
 8006004:	f04f 0100 	mov.w	r1, #0
 8006008:	0159      	lsls	r1, r3, #5
 800600a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800600e:	0150      	lsls	r0, r2, #5
 8006010:	4602      	mov	r2, r0
 8006012:	460b      	mov	r3, r1
 8006014:	4641      	mov	r1, r8
 8006016:	ebb2 0a01 	subs.w	sl, r2, r1
 800601a:	4649      	mov	r1, r9
 800601c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006020:	f04f 0200 	mov.w	r2, #0
 8006024:	f04f 0300 	mov.w	r3, #0
 8006028:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800602c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006030:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006034:	ebb2 040a 	subs.w	r4, r2, sl
 8006038:	eb63 050b 	sbc.w	r5, r3, fp
 800603c:	f04f 0200 	mov.w	r2, #0
 8006040:	f04f 0300 	mov.w	r3, #0
 8006044:	00eb      	lsls	r3, r5, #3
 8006046:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800604a:	00e2      	lsls	r2, r4, #3
 800604c:	4614      	mov	r4, r2
 800604e:	461d      	mov	r5, r3
 8006050:	4643      	mov	r3, r8
 8006052:	18e3      	adds	r3, r4, r3
 8006054:	603b      	str	r3, [r7, #0]
 8006056:	464b      	mov	r3, r9
 8006058:	eb45 0303 	adc.w	r3, r5, r3
 800605c:	607b      	str	r3, [r7, #4]
 800605e:	f04f 0200 	mov.w	r2, #0
 8006062:	f04f 0300 	mov.w	r3, #0
 8006066:	e9d7 4500 	ldrd	r4, r5, [r7]
 800606a:	4629      	mov	r1, r5
 800606c:	028b      	lsls	r3, r1, #10
 800606e:	4621      	mov	r1, r4
 8006070:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006074:	4621      	mov	r1, r4
 8006076:	028a      	lsls	r2, r1, #10
 8006078:	4610      	mov	r0, r2
 800607a:	4619      	mov	r1, r3
 800607c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800607e:	2200      	movs	r2, #0
 8006080:	61bb      	str	r3, [r7, #24]
 8006082:	61fa      	str	r2, [r7, #28]
 8006084:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006088:	f7fa f8b0 	bl	80001ec <__aeabi_uldivmod>
 800608c:	4602      	mov	r2, r0
 800608e:	460b      	mov	r3, r1
 8006090:	4613      	mov	r3, r2
 8006092:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006094:	4b0b      	ldr	r3, [pc, #44]	@ (80060c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	0c1b      	lsrs	r3, r3, #16
 800609a:	f003 0303 	and.w	r3, r3, #3
 800609e:	3301      	adds	r3, #1
 80060a0:	005b      	lsls	r3, r3, #1
 80060a2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80060a4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80060a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80060a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80060ac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80060ae:	e002      	b.n	80060b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80060b0:	4b05      	ldr	r3, [pc, #20]	@ (80060c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80060b2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80060b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80060b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3750      	adds	r7, #80	@ 0x50
 80060bc:	46bd      	mov	sp, r7
 80060be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80060c2:	bf00      	nop
 80060c4:	40023800 	.word	0x40023800
 80060c8:	00f42400 	.word	0x00f42400
 80060cc:	007a1200 	.word	0x007a1200

080060d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80060d0:	b480      	push	{r7}
 80060d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80060d4:	4b03      	ldr	r3, [pc, #12]	@ (80060e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80060d6:	681b      	ldr	r3, [r3, #0]
}
 80060d8:	4618      	mov	r0, r3
 80060da:	46bd      	mov	sp, r7
 80060dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e0:	4770      	bx	lr
 80060e2:	bf00      	nop
 80060e4:	2000001c 	.word	0x2000001c

080060e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80060ec:	f7ff fff0 	bl	80060d0 <HAL_RCC_GetHCLKFreq>
 80060f0:	4602      	mov	r2, r0
 80060f2:	4b05      	ldr	r3, [pc, #20]	@ (8006108 <HAL_RCC_GetPCLK1Freq+0x20>)
 80060f4:	689b      	ldr	r3, [r3, #8]
 80060f6:	0a9b      	lsrs	r3, r3, #10
 80060f8:	f003 0307 	and.w	r3, r3, #7
 80060fc:	4903      	ldr	r1, [pc, #12]	@ (800610c <HAL_RCC_GetPCLK1Freq+0x24>)
 80060fe:	5ccb      	ldrb	r3, [r1, r3]
 8006100:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006104:	4618      	mov	r0, r3
 8006106:	bd80      	pop	{r7, pc}
 8006108:	40023800 	.word	0x40023800
 800610c:	08008ef4 	.word	0x08008ef4

08006110 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b086      	sub	sp, #24
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006118:	2300      	movs	r3, #0
 800611a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800611c:	2300      	movs	r3, #0
 800611e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f003 0301 	and.w	r3, r3, #1
 8006128:	2b00      	cmp	r3, #0
 800612a:	d10b      	bne.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006134:	2b00      	cmp	r3, #0
 8006136:	d105      	bne.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006140:	2b00      	cmp	r3, #0
 8006142:	d075      	beq.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006144:	4b91      	ldr	r3, [pc, #580]	@ (800638c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006146:	2200      	movs	r2, #0
 8006148:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800614a:	f7fd fbb9 	bl	80038c0 <HAL_GetTick>
 800614e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006150:	e008      	b.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006152:	f7fd fbb5 	bl	80038c0 <HAL_GetTick>
 8006156:	4602      	mov	r2, r0
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	1ad3      	subs	r3, r2, r3
 800615c:	2b02      	cmp	r3, #2
 800615e:	d901      	bls.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006160:	2303      	movs	r3, #3
 8006162:	e189      	b.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006164:	4b8a      	ldr	r3, [pc, #552]	@ (8006390 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800616c:	2b00      	cmp	r3, #0
 800616e:	d1f0      	bne.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f003 0301 	and.w	r3, r3, #1
 8006178:	2b00      	cmp	r3, #0
 800617a:	d009      	beq.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	019a      	lsls	r2, r3, #6
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	689b      	ldr	r3, [r3, #8]
 8006186:	071b      	lsls	r3, r3, #28
 8006188:	4981      	ldr	r1, [pc, #516]	@ (8006390 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800618a:	4313      	orrs	r3, r2
 800618c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f003 0302 	and.w	r3, r3, #2
 8006198:	2b00      	cmp	r3, #0
 800619a:	d01f      	beq.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800619c:	4b7c      	ldr	r3, [pc, #496]	@ (8006390 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800619e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80061a2:	0f1b      	lsrs	r3, r3, #28
 80061a4:	f003 0307 	and.w	r3, r3, #7
 80061a8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	019a      	lsls	r2, r3, #6
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	68db      	ldr	r3, [r3, #12]
 80061b4:	061b      	lsls	r3, r3, #24
 80061b6:	431a      	orrs	r2, r3
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	071b      	lsls	r3, r3, #28
 80061bc:	4974      	ldr	r1, [pc, #464]	@ (8006390 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80061be:	4313      	orrs	r3, r2
 80061c0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80061c4:	4b72      	ldr	r3, [pc, #456]	@ (8006390 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80061c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80061ca:	f023 021f 	bic.w	r2, r3, #31
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	69db      	ldr	r3, [r3, #28]
 80061d2:	3b01      	subs	r3, #1
 80061d4:	496e      	ldr	r1, [pc, #440]	@ (8006390 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80061d6:	4313      	orrs	r3, r2
 80061d8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d00d      	beq.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	019a      	lsls	r2, r3, #6
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	68db      	ldr	r3, [r3, #12]
 80061f2:	061b      	lsls	r3, r3, #24
 80061f4:	431a      	orrs	r2, r3
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	689b      	ldr	r3, [r3, #8]
 80061fa:	071b      	lsls	r3, r3, #28
 80061fc:	4964      	ldr	r1, [pc, #400]	@ (8006390 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80061fe:	4313      	orrs	r3, r2
 8006200:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006204:	4b61      	ldr	r3, [pc, #388]	@ (800638c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006206:	2201      	movs	r2, #1
 8006208:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800620a:	f7fd fb59 	bl	80038c0 <HAL_GetTick>
 800620e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006210:	e008      	b.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006212:	f7fd fb55 	bl	80038c0 <HAL_GetTick>
 8006216:	4602      	mov	r2, r0
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	1ad3      	subs	r3, r2, r3
 800621c:	2b02      	cmp	r3, #2
 800621e:	d901      	bls.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006220:	2303      	movs	r3, #3
 8006222:	e129      	b.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006224:	4b5a      	ldr	r3, [pc, #360]	@ (8006390 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800622c:	2b00      	cmp	r3, #0
 800622e:	d0f0      	beq.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f003 0304 	and.w	r3, r3, #4
 8006238:	2b00      	cmp	r3, #0
 800623a:	d105      	bne.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006244:	2b00      	cmp	r3, #0
 8006246:	d079      	beq.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006248:	4b52      	ldr	r3, [pc, #328]	@ (8006394 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800624a:	2200      	movs	r2, #0
 800624c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800624e:	f7fd fb37 	bl	80038c0 <HAL_GetTick>
 8006252:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006254:	e008      	b.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006256:	f7fd fb33 	bl	80038c0 <HAL_GetTick>
 800625a:	4602      	mov	r2, r0
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	1ad3      	subs	r3, r2, r3
 8006260:	2b02      	cmp	r3, #2
 8006262:	d901      	bls.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006264:	2303      	movs	r3, #3
 8006266:	e107      	b.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006268:	4b49      	ldr	r3, [pc, #292]	@ (8006390 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006270:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006274:	d0ef      	beq.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f003 0304 	and.w	r3, r3, #4
 800627e:	2b00      	cmp	r3, #0
 8006280:	d020      	beq.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006282:	4b43      	ldr	r3, [pc, #268]	@ (8006390 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006284:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006288:	0f1b      	lsrs	r3, r3, #28
 800628a:	f003 0307 	and.w	r3, r3, #7
 800628e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	691b      	ldr	r3, [r3, #16]
 8006294:	019a      	lsls	r2, r3, #6
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	695b      	ldr	r3, [r3, #20]
 800629a:	061b      	lsls	r3, r3, #24
 800629c:	431a      	orrs	r2, r3
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	071b      	lsls	r3, r3, #28
 80062a2:	493b      	ldr	r1, [pc, #236]	@ (8006390 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80062a4:	4313      	orrs	r3, r2
 80062a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80062aa:	4b39      	ldr	r3, [pc, #228]	@ (8006390 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80062ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80062b0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6a1b      	ldr	r3, [r3, #32]
 80062b8:	3b01      	subs	r3, #1
 80062ba:	021b      	lsls	r3, r3, #8
 80062bc:	4934      	ldr	r1, [pc, #208]	@ (8006390 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80062be:	4313      	orrs	r3, r2
 80062c0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f003 0308 	and.w	r3, r3, #8
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d01e      	beq.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80062d0:	4b2f      	ldr	r3, [pc, #188]	@ (8006390 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80062d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062d6:	0e1b      	lsrs	r3, r3, #24
 80062d8:	f003 030f 	and.w	r3, r3, #15
 80062dc:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	691b      	ldr	r3, [r3, #16]
 80062e2:	019a      	lsls	r2, r3, #6
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	061b      	lsls	r3, r3, #24
 80062e8:	431a      	orrs	r2, r3
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	699b      	ldr	r3, [r3, #24]
 80062ee:	071b      	lsls	r3, r3, #28
 80062f0:	4927      	ldr	r1, [pc, #156]	@ (8006390 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80062f2:	4313      	orrs	r3, r2
 80062f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80062f8:	4b25      	ldr	r3, [pc, #148]	@ (8006390 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80062fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80062fe:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006306:	4922      	ldr	r1, [pc, #136]	@ (8006390 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006308:	4313      	orrs	r3, r2
 800630a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800630e:	4b21      	ldr	r3, [pc, #132]	@ (8006394 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006310:	2201      	movs	r2, #1
 8006312:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006314:	f7fd fad4 	bl	80038c0 <HAL_GetTick>
 8006318:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800631a:	e008      	b.n	800632e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800631c:	f7fd fad0 	bl	80038c0 <HAL_GetTick>
 8006320:	4602      	mov	r2, r0
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	1ad3      	subs	r3, r2, r3
 8006326:	2b02      	cmp	r3, #2
 8006328:	d901      	bls.n	800632e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800632a:	2303      	movs	r3, #3
 800632c:	e0a4      	b.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800632e:	4b18      	ldr	r3, [pc, #96]	@ (8006390 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006336:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800633a:	d1ef      	bne.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f003 0320 	and.w	r3, r3, #32
 8006344:	2b00      	cmp	r3, #0
 8006346:	f000 808b 	beq.w	8006460 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800634a:	2300      	movs	r3, #0
 800634c:	60fb      	str	r3, [r7, #12]
 800634e:	4b10      	ldr	r3, [pc, #64]	@ (8006390 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006352:	4a0f      	ldr	r2, [pc, #60]	@ (8006390 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006354:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006358:	6413      	str	r3, [r2, #64]	@ 0x40
 800635a:	4b0d      	ldr	r3, [pc, #52]	@ (8006390 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800635c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800635e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006362:	60fb      	str	r3, [r7, #12]
 8006364:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006366:	4b0c      	ldr	r3, [pc, #48]	@ (8006398 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a0b      	ldr	r2, [pc, #44]	@ (8006398 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800636c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006370:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006372:	f7fd faa5 	bl	80038c0 <HAL_GetTick>
 8006376:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006378:	e010      	b.n	800639c <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800637a:	f7fd faa1 	bl	80038c0 <HAL_GetTick>
 800637e:	4602      	mov	r2, r0
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	1ad3      	subs	r3, r2, r3
 8006384:	2b02      	cmp	r3, #2
 8006386:	d909      	bls.n	800639c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8006388:	2303      	movs	r3, #3
 800638a:	e075      	b.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x368>
 800638c:	42470068 	.word	0x42470068
 8006390:	40023800 	.word	0x40023800
 8006394:	42470070 	.word	0x42470070
 8006398:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800639c:	4b38      	ldr	r3, [pc, #224]	@ (8006480 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d0e8      	beq.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80063a8:	4b36      	ldr	r3, [pc, #216]	@ (8006484 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80063aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80063b0:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d02f      	beq.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80063c0:	693a      	ldr	r2, [r7, #16]
 80063c2:	429a      	cmp	r2, r3
 80063c4:	d028      	beq.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80063c6:	4b2f      	ldr	r3, [pc, #188]	@ (8006484 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80063c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063ce:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80063d0:	4b2d      	ldr	r3, [pc, #180]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80063d2:	2201      	movs	r2, #1
 80063d4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80063d6:	4b2c      	ldr	r3, [pc, #176]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80063d8:	2200      	movs	r2, #0
 80063da:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80063dc:	4a29      	ldr	r2, [pc, #164]	@ (8006484 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80063e2:	4b28      	ldr	r3, [pc, #160]	@ (8006484 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80063e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063e6:	f003 0301 	and.w	r3, r3, #1
 80063ea:	2b01      	cmp	r3, #1
 80063ec:	d114      	bne.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80063ee:	f7fd fa67 	bl	80038c0 <HAL_GetTick>
 80063f2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063f4:	e00a      	b.n	800640c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063f6:	f7fd fa63 	bl	80038c0 <HAL_GetTick>
 80063fa:	4602      	mov	r2, r0
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	1ad3      	subs	r3, r2, r3
 8006400:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006404:	4293      	cmp	r3, r2
 8006406:	d901      	bls.n	800640c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8006408:	2303      	movs	r3, #3
 800640a:	e035      	b.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800640c:	4b1d      	ldr	r3, [pc, #116]	@ (8006484 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800640e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006410:	f003 0302 	and.w	r3, r3, #2
 8006414:	2b00      	cmp	r3, #0
 8006416:	d0ee      	beq.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800641c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006420:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006424:	d10d      	bne.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8006426:	4b17      	ldr	r3, [pc, #92]	@ (8006484 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006432:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006436:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800643a:	4912      	ldr	r1, [pc, #72]	@ (8006484 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800643c:	4313      	orrs	r3, r2
 800643e:	608b      	str	r3, [r1, #8]
 8006440:	e005      	b.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8006442:	4b10      	ldr	r3, [pc, #64]	@ (8006484 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	4a0f      	ldr	r2, [pc, #60]	@ (8006484 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006448:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800644c:	6093      	str	r3, [r2, #8]
 800644e:	4b0d      	ldr	r3, [pc, #52]	@ (8006484 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006450:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006456:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800645a:	490a      	ldr	r1, [pc, #40]	@ (8006484 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800645c:	4313      	orrs	r3, r2
 800645e:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f003 0310 	and.w	r3, r3, #16
 8006468:	2b00      	cmp	r3, #0
 800646a:	d004      	beq.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8006472:	4b06      	ldr	r3, [pc, #24]	@ (800648c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8006474:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8006476:	2300      	movs	r3, #0
}
 8006478:	4618      	mov	r0, r3
 800647a:	3718      	adds	r7, #24
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}
 8006480:	40007000 	.word	0x40007000
 8006484:	40023800 	.word	0x40023800
 8006488:	42470e40 	.word	0x42470e40
 800648c:	424711e0 	.word	0x424711e0

08006490 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b082      	sub	sp, #8
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d101      	bne.n	80064a2 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	e01c      	b.n	80064dc <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	795b      	ldrb	r3, [r3, #5]
 80064a6:	b2db      	uxtb	r3, r3
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d105      	bne.n	80064b8 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2200      	movs	r2, #0
 80064b0:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f7fc fd38 	bl	8002f28 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2202      	movs	r2, #2
 80064bc:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	681a      	ldr	r2, [r3, #0]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f042 0204 	orr.w	r2, r2, #4
 80064cc:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2201      	movs	r2, #1
 80064d2:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2200      	movs	r2, #0
 80064d8:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80064da:	2300      	movs	r3, #0
}
 80064dc:	4618      	mov	r0, r3
 80064de:	3708      	adds	r7, #8
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}

080064e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b082      	sub	sp, #8
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d101      	bne.n	80064f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80064f2:	2301      	movs	r3, #1
 80064f4:	e07b      	b.n	80065ee <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d108      	bne.n	8006510 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006506:	d009      	beq.n	800651c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2200      	movs	r2, #0
 800650c:	61da      	str	r2, [r3, #28]
 800650e:	e005      	b.n	800651c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2200      	movs	r2, #0
 8006514:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2200      	movs	r2, #0
 800651a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2200      	movs	r2, #0
 8006520:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006528:	b2db      	uxtb	r3, r3
 800652a:	2b00      	cmp	r3, #0
 800652c:	d106      	bne.n	800653c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2200      	movs	r2, #0
 8006532:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f7fc fd18 	bl	8002f6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2202      	movs	r2, #2
 8006540:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	681a      	ldr	r2, [r3, #0]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006552:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	689b      	ldr	r3, [r3, #8]
 8006560:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006564:	431a      	orrs	r2, r3
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	68db      	ldr	r3, [r3, #12]
 800656a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800656e:	431a      	orrs	r2, r3
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	691b      	ldr	r3, [r3, #16]
 8006574:	f003 0302 	and.w	r3, r3, #2
 8006578:	431a      	orrs	r2, r3
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	695b      	ldr	r3, [r3, #20]
 800657e:	f003 0301 	and.w	r3, r3, #1
 8006582:	431a      	orrs	r2, r3
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	699b      	ldr	r3, [r3, #24]
 8006588:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800658c:	431a      	orrs	r2, r3
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	69db      	ldr	r3, [r3, #28]
 8006592:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006596:	431a      	orrs	r2, r3
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6a1b      	ldr	r3, [r3, #32]
 800659c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065a0:	ea42 0103 	orr.w	r1, r2, r3
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065a8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	430a      	orrs	r2, r1
 80065b2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	699b      	ldr	r3, [r3, #24]
 80065b8:	0c1b      	lsrs	r3, r3, #16
 80065ba:	f003 0104 	and.w	r1, r3, #4
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065c2:	f003 0210 	and.w	r2, r3, #16
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	430a      	orrs	r2, r1
 80065cc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	69da      	ldr	r2, [r3, #28]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80065dc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2200      	movs	r2, #0
 80065e2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2201      	movs	r2, #1
 80065e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80065ec:	2300      	movs	r3, #0
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3708      	adds	r7, #8
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}

080065f6 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80065f6:	b580      	push	{r7, lr}
 80065f8:	b082      	sub	sp, #8
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d101      	bne.n	8006608 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006604:	2301      	movs	r3, #1
 8006606:	e01a      	b.n	800663e <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2202      	movs	r2, #2
 800660c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	681a      	ldr	r2, [r3, #0]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800661e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f7fc fceb 	bl	8002ffc <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2200      	movs	r2, #0
 800662a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2200      	movs	r2, #0
 8006630:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2200      	movs	r2, #0
 8006638:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800663c:	2300      	movs	r3, #0
}
 800663e:	4618      	mov	r0, r3
 8006640:	3708      	adds	r7, #8
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}

08006646 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006646:	b580      	push	{r7, lr}
 8006648:	b088      	sub	sp, #32
 800664a:	af00      	add	r7, sp, #0
 800664c:	60f8      	str	r0, [r7, #12]
 800664e:	60b9      	str	r1, [r7, #8]
 8006650:	603b      	str	r3, [r7, #0]
 8006652:	4613      	mov	r3, r2
 8006654:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006656:	f7fd f933 	bl	80038c0 <HAL_GetTick>
 800665a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800665c:	88fb      	ldrh	r3, [r7, #6]
 800665e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006666:	b2db      	uxtb	r3, r3
 8006668:	2b01      	cmp	r3, #1
 800666a:	d001      	beq.n	8006670 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800666c:	2302      	movs	r3, #2
 800666e:	e12a      	b.n	80068c6 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d002      	beq.n	800667c <HAL_SPI_Transmit+0x36>
 8006676:	88fb      	ldrh	r3, [r7, #6]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d101      	bne.n	8006680 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800667c:	2301      	movs	r3, #1
 800667e:	e122      	b.n	80068c6 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006686:	2b01      	cmp	r3, #1
 8006688:	d101      	bne.n	800668e <HAL_SPI_Transmit+0x48>
 800668a:	2302      	movs	r3, #2
 800668c:	e11b      	b.n	80068c6 <HAL_SPI_Transmit+0x280>
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2201      	movs	r2, #1
 8006692:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2203      	movs	r2, #3
 800669a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2200      	movs	r2, #0
 80066a2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	68ba      	ldr	r2, [r7, #8]
 80066a8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	88fa      	ldrh	r2, [r7, #6]
 80066ae:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	88fa      	ldrh	r2, [r7, #6]
 80066b4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2200      	movs	r2, #0
 80066ba:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2200      	movs	r2, #0
 80066c0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	2200      	movs	r2, #0
 80066c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	2200      	movs	r2, #0
 80066cc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2200      	movs	r2, #0
 80066d2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80066dc:	d10f      	bne.n	80066fe <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	681a      	ldr	r2, [r3, #0]
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80066ec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80066fc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006708:	2b40      	cmp	r3, #64	@ 0x40
 800670a:	d007      	beq.n	800671c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	681a      	ldr	r2, [r3, #0]
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800671a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	68db      	ldr	r3, [r3, #12]
 8006720:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006724:	d152      	bne.n	80067cc <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d002      	beq.n	8006734 <HAL_SPI_Transmit+0xee>
 800672e:	8b7b      	ldrh	r3, [r7, #26]
 8006730:	2b01      	cmp	r3, #1
 8006732:	d145      	bne.n	80067c0 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006738:	881a      	ldrh	r2, [r3, #0]
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006744:	1c9a      	adds	r2, r3, #2
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800674e:	b29b      	uxth	r3, r3
 8006750:	3b01      	subs	r3, #1
 8006752:	b29a      	uxth	r2, r3
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006758:	e032      	b.n	80067c0 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	689b      	ldr	r3, [r3, #8]
 8006760:	f003 0302 	and.w	r3, r3, #2
 8006764:	2b02      	cmp	r3, #2
 8006766:	d112      	bne.n	800678e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800676c:	881a      	ldrh	r2, [r3, #0]
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006778:	1c9a      	adds	r2, r3, #2
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006782:	b29b      	uxth	r3, r3
 8006784:	3b01      	subs	r3, #1
 8006786:	b29a      	uxth	r2, r3
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800678c:	e018      	b.n	80067c0 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800678e:	f7fd f897 	bl	80038c0 <HAL_GetTick>
 8006792:	4602      	mov	r2, r0
 8006794:	69fb      	ldr	r3, [r7, #28]
 8006796:	1ad3      	subs	r3, r2, r3
 8006798:	683a      	ldr	r2, [r7, #0]
 800679a:	429a      	cmp	r2, r3
 800679c:	d803      	bhi.n	80067a6 <HAL_SPI_Transmit+0x160>
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067a4:	d102      	bne.n	80067ac <HAL_SPI_Transmit+0x166>
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d109      	bne.n	80067c0 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2201      	movs	r2, #1
 80067b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2200      	movs	r2, #0
 80067b8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80067bc:	2303      	movs	r3, #3
 80067be:	e082      	b.n	80068c6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80067c4:	b29b      	uxth	r3, r3
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d1c7      	bne.n	800675a <HAL_SPI_Transmit+0x114>
 80067ca:	e053      	b.n	8006874 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d002      	beq.n	80067da <HAL_SPI_Transmit+0x194>
 80067d4:	8b7b      	ldrh	r3, [r7, #26]
 80067d6:	2b01      	cmp	r3, #1
 80067d8:	d147      	bne.n	800686a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	330c      	adds	r3, #12
 80067e4:	7812      	ldrb	r2, [r2, #0]
 80067e6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067ec:	1c5a      	adds	r2, r3, #1
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80067f6:	b29b      	uxth	r3, r3
 80067f8:	3b01      	subs	r3, #1
 80067fa:	b29a      	uxth	r2, r3
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006800:	e033      	b.n	800686a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	689b      	ldr	r3, [r3, #8]
 8006808:	f003 0302 	and.w	r3, r3, #2
 800680c:	2b02      	cmp	r3, #2
 800680e:	d113      	bne.n	8006838 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	330c      	adds	r3, #12
 800681a:	7812      	ldrb	r2, [r2, #0]
 800681c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006822:	1c5a      	adds	r2, r3, #1
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800682c:	b29b      	uxth	r3, r3
 800682e:	3b01      	subs	r3, #1
 8006830:	b29a      	uxth	r2, r3
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006836:	e018      	b.n	800686a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006838:	f7fd f842 	bl	80038c0 <HAL_GetTick>
 800683c:	4602      	mov	r2, r0
 800683e:	69fb      	ldr	r3, [r7, #28]
 8006840:	1ad3      	subs	r3, r2, r3
 8006842:	683a      	ldr	r2, [r7, #0]
 8006844:	429a      	cmp	r2, r3
 8006846:	d803      	bhi.n	8006850 <HAL_SPI_Transmit+0x20a>
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800684e:	d102      	bne.n	8006856 <HAL_SPI_Transmit+0x210>
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d109      	bne.n	800686a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2201      	movs	r2, #1
 800685a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2200      	movs	r2, #0
 8006862:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006866:	2303      	movs	r3, #3
 8006868:	e02d      	b.n	80068c6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800686e:	b29b      	uxth	r3, r3
 8006870:	2b00      	cmp	r3, #0
 8006872:	d1c6      	bne.n	8006802 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006874:	69fa      	ldr	r2, [r7, #28]
 8006876:	6839      	ldr	r1, [r7, #0]
 8006878:	68f8      	ldr	r0, [r7, #12]
 800687a:	f000 fa67 	bl	8006d4c <SPI_EndRxTxTransaction>
 800687e:	4603      	mov	r3, r0
 8006880:	2b00      	cmp	r3, #0
 8006882:	d002      	beq.n	800688a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2220      	movs	r2, #32
 8006888:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	689b      	ldr	r3, [r3, #8]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d10a      	bne.n	80068a8 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006892:	2300      	movs	r3, #0
 8006894:	617b      	str	r3, [r7, #20]
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	68db      	ldr	r3, [r3, #12]
 800689c:	617b      	str	r3, [r7, #20]
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	689b      	ldr	r3, [r3, #8]
 80068a4:	617b      	str	r3, [r7, #20]
 80068a6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2201      	movs	r2, #1
 80068ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2200      	movs	r2, #0
 80068b4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d001      	beq.n	80068c4 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80068c0:	2301      	movs	r3, #1
 80068c2:	e000      	b.n	80068c6 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80068c4:	2300      	movs	r3, #0
  }
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3720      	adds	r7, #32
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}

080068ce <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80068ce:	b580      	push	{r7, lr}
 80068d0:	b08a      	sub	sp, #40	@ 0x28
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	60f8      	str	r0, [r7, #12]
 80068d6:	60b9      	str	r1, [r7, #8]
 80068d8:	607a      	str	r2, [r7, #4]
 80068da:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80068dc:	2301      	movs	r3, #1
 80068de:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80068e0:	f7fc ffee 	bl	80038c0 <HAL_GetTick>
 80068e4:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80068ec:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80068f4:	887b      	ldrh	r3, [r7, #2]
 80068f6:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80068f8:	7ffb      	ldrb	r3, [r7, #31]
 80068fa:	2b01      	cmp	r3, #1
 80068fc:	d00c      	beq.n	8006918 <HAL_SPI_TransmitReceive+0x4a>
 80068fe:	69bb      	ldr	r3, [r7, #24]
 8006900:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006904:	d106      	bne.n	8006914 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d102      	bne.n	8006914 <HAL_SPI_TransmitReceive+0x46>
 800690e:	7ffb      	ldrb	r3, [r7, #31]
 8006910:	2b04      	cmp	r3, #4
 8006912:	d001      	beq.n	8006918 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8006914:	2302      	movs	r3, #2
 8006916:	e17f      	b.n	8006c18 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d005      	beq.n	800692a <HAL_SPI_TransmitReceive+0x5c>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d002      	beq.n	800692a <HAL_SPI_TransmitReceive+0x5c>
 8006924:	887b      	ldrh	r3, [r7, #2]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d101      	bne.n	800692e <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800692a:	2301      	movs	r3, #1
 800692c:	e174      	b.n	8006c18 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006934:	2b01      	cmp	r3, #1
 8006936:	d101      	bne.n	800693c <HAL_SPI_TransmitReceive+0x6e>
 8006938:	2302      	movs	r3, #2
 800693a:	e16d      	b.n	8006c18 <HAL_SPI_TransmitReceive+0x34a>
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2201      	movs	r2, #1
 8006940:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800694a:	b2db      	uxtb	r3, r3
 800694c:	2b04      	cmp	r3, #4
 800694e:	d003      	beq.n	8006958 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2205      	movs	r2, #5
 8006954:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2200      	movs	r2, #0
 800695c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	687a      	ldr	r2, [r7, #4]
 8006962:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	887a      	ldrh	r2, [r7, #2]
 8006968:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	887a      	ldrh	r2, [r7, #2]
 800696e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	68ba      	ldr	r2, [r7, #8]
 8006974:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	887a      	ldrh	r2, [r7, #2]
 800697a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	887a      	ldrh	r2, [r7, #2]
 8006980:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	2200      	movs	r2, #0
 8006986:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	2200      	movs	r2, #0
 800698c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006998:	2b40      	cmp	r3, #64	@ 0x40
 800699a:	d007      	beq.n	80069ac <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80069aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	68db      	ldr	r3, [r3, #12]
 80069b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80069b4:	d17e      	bne.n	8006ab4 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d002      	beq.n	80069c4 <HAL_SPI_TransmitReceive+0xf6>
 80069be:	8afb      	ldrh	r3, [r7, #22]
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	d16c      	bne.n	8006a9e <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069c8:	881a      	ldrh	r2, [r3, #0]
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069d4:	1c9a      	adds	r2, r3, #2
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80069de:	b29b      	uxth	r3, r3
 80069e0:	3b01      	subs	r3, #1
 80069e2:	b29a      	uxth	r2, r3
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80069e8:	e059      	b.n	8006a9e <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	689b      	ldr	r3, [r3, #8]
 80069f0:	f003 0302 	and.w	r3, r3, #2
 80069f4:	2b02      	cmp	r3, #2
 80069f6:	d11b      	bne.n	8006a30 <HAL_SPI_TransmitReceive+0x162>
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d016      	beq.n	8006a30 <HAL_SPI_TransmitReceive+0x162>
 8006a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	d113      	bne.n	8006a30 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a0c:	881a      	ldrh	r2, [r3, #0]
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a18:	1c9a      	adds	r2, r3, #2
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006a22:	b29b      	uxth	r3, r3
 8006a24:	3b01      	subs	r3, #1
 8006a26:	b29a      	uxth	r2, r3
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	689b      	ldr	r3, [r3, #8]
 8006a36:	f003 0301 	and.w	r3, r3, #1
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d119      	bne.n	8006a72 <HAL_SPI_TransmitReceive+0x1a4>
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d014      	beq.n	8006a72 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	68da      	ldr	r2, [r3, #12]
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a52:	b292      	uxth	r2, r2
 8006a54:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a5a:	1c9a      	adds	r2, r3, #2
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a64:	b29b      	uxth	r3, r3
 8006a66:	3b01      	subs	r3, #1
 8006a68:	b29a      	uxth	r2, r3
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006a72:	f7fc ff25 	bl	80038c0 <HAL_GetTick>
 8006a76:	4602      	mov	r2, r0
 8006a78:	6a3b      	ldr	r3, [r7, #32]
 8006a7a:	1ad3      	subs	r3, r2, r3
 8006a7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a7e:	429a      	cmp	r2, r3
 8006a80:	d80d      	bhi.n	8006a9e <HAL_SPI_TransmitReceive+0x1d0>
 8006a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a88:	d009      	beq.n	8006a9e <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2200      	movs	r2, #0
 8006a96:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006a9a:	2303      	movs	r3, #3
 8006a9c:	e0bc      	b.n	8006c18 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d1a0      	bne.n	80069ea <HAL_SPI_TransmitReceive+0x11c>
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d19b      	bne.n	80069ea <HAL_SPI_TransmitReceive+0x11c>
 8006ab2:	e082      	b.n	8006bba <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d002      	beq.n	8006ac2 <HAL_SPI_TransmitReceive+0x1f4>
 8006abc:	8afb      	ldrh	r3, [r7, #22]
 8006abe:	2b01      	cmp	r3, #1
 8006ac0:	d171      	bne.n	8006ba6 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	330c      	adds	r3, #12
 8006acc:	7812      	ldrb	r2, [r2, #0]
 8006ace:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ad4:	1c5a      	adds	r2, r3, #1
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	3b01      	subs	r3, #1
 8006ae2:	b29a      	uxth	r2, r3
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ae8:	e05d      	b.n	8006ba6 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	689b      	ldr	r3, [r3, #8]
 8006af0:	f003 0302 	and.w	r3, r3, #2
 8006af4:	2b02      	cmp	r3, #2
 8006af6:	d11c      	bne.n	8006b32 <HAL_SPI_TransmitReceive+0x264>
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006afc:	b29b      	uxth	r3, r3
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d017      	beq.n	8006b32 <HAL_SPI_TransmitReceive+0x264>
 8006b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b04:	2b01      	cmp	r3, #1
 8006b06:	d114      	bne.n	8006b32 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	330c      	adds	r3, #12
 8006b12:	7812      	ldrb	r2, [r2, #0]
 8006b14:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b1a:	1c5a      	adds	r2, r3, #1
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	3b01      	subs	r3, #1
 8006b28:	b29a      	uxth	r2, r3
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	689b      	ldr	r3, [r3, #8]
 8006b38:	f003 0301 	and.w	r3, r3, #1
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d119      	bne.n	8006b74 <HAL_SPI_TransmitReceive+0x2a6>
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b44:	b29b      	uxth	r3, r3
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d014      	beq.n	8006b74 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	68da      	ldr	r2, [r3, #12]
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b54:	b2d2      	uxtb	r2, r2
 8006b56:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b5c:	1c5a      	adds	r2, r3, #1
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b66:	b29b      	uxth	r3, r3
 8006b68:	3b01      	subs	r3, #1
 8006b6a:	b29a      	uxth	r2, r3
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006b70:	2301      	movs	r3, #1
 8006b72:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006b74:	f7fc fea4 	bl	80038c0 <HAL_GetTick>
 8006b78:	4602      	mov	r2, r0
 8006b7a:	6a3b      	ldr	r3, [r7, #32]
 8006b7c:	1ad3      	subs	r3, r2, r3
 8006b7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b80:	429a      	cmp	r2, r3
 8006b82:	d803      	bhi.n	8006b8c <HAL_SPI_TransmitReceive+0x2be>
 8006b84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b8a:	d102      	bne.n	8006b92 <HAL_SPI_TransmitReceive+0x2c4>
 8006b8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d109      	bne.n	8006ba6 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2201      	movs	r2, #1
 8006b96:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006ba2:	2303      	movs	r3, #3
 8006ba4:	e038      	b.n	8006c18 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006baa:	b29b      	uxth	r3, r3
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d19c      	bne.n	8006aea <HAL_SPI_TransmitReceive+0x21c>
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006bb4:	b29b      	uxth	r3, r3
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d197      	bne.n	8006aea <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006bba:	6a3a      	ldr	r2, [r7, #32]
 8006bbc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006bbe:	68f8      	ldr	r0, [r7, #12]
 8006bc0:	f000 f8c4 	bl	8006d4c <SPI_EndRxTxTransaction>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d008      	beq.n	8006bdc <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2220      	movs	r2, #32
 8006bce:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8006bd8:	2301      	movs	r3, #1
 8006bda:	e01d      	b.n	8006c18 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	689b      	ldr	r3, [r3, #8]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d10a      	bne.n	8006bfa <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006be4:	2300      	movs	r3, #0
 8006be6:	613b      	str	r3, [r7, #16]
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	68db      	ldr	r3, [r3, #12]
 8006bee:	613b      	str	r3, [r7, #16]
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	689b      	ldr	r3, [r3, #8]
 8006bf6:	613b      	str	r3, [r7, #16]
 8006bf8:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2201      	movs	r2, #1
 8006bfe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2200      	movs	r2, #0
 8006c06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d001      	beq.n	8006c16 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8006c12:	2301      	movs	r3, #1
 8006c14:	e000      	b.n	8006c18 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8006c16:	2300      	movs	r3, #0
  }
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	3728      	adds	r7, #40	@ 0x28
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}

08006c20 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b083      	sub	sp, #12
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006c2e:	b2db      	uxtb	r3, r3
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	370c      	adds	r7, #12
 8006c34:	46bd      	mov	sp, r7
 8006c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3a:	4770      	bx	lr

08006c3c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b088      	sub	sp, #32
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	60f8      	str	r0, [r7, #12]
 8006c44:	60b9      	str	r1, [r7, #8]
 8006c46:	603b      	str	r3, [r7, #0]
 8006c48:	4613      	mov	r3, r2
 8006c4a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006c4c:	f7fc fe38 	bl	80038c0 <HAL_GetTick>
 8006c50:	4602      	mov	r2, r0
 8006c52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c54:	1a9b      	subs	r3, r3, r2
 8006c56:	683a      	ldr	r2, [r7, #0]
 8006c58:	4413      	add	r3, r2
 8006c5a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006c5c:	f7fc fe30 	bl	80038c0 <HAL_GetTick>
 8006c60:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006c62:	4b39      	ldr	r3, [pc, #228]	@ (8006d48 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	015b      	lsls	r3, r3, #5
 8006c68:	0d1b      	lsrs	r3, r3, #20
 8006c6a:	69fa      	ldr	r2, [r7, #28]
 8006c6c:	fb02 f303 	mul.w	r3, r2, r3
 8006c70:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006c72:	e054      	b.n	8006d1e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c7a:	d050      	beq.n	8006d1e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006c7c:	f7fc fe20 	bl	80038c0 <HAL_GetTick>
 8006c80:	4602      	mov	r2, r0
 8006c82:	69bb      	ldr	r3, [r7, #24]
 8006c84:	1ad3      	subs	r3, r2, r3
 8006c86:	69fa      	ldr	r2, [r7, #28]
 8006c88:	429a      	cmp	r2, r3
 8006c8a:	d902      	bls.n	8006c92 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006c8c:	69fb      	ldr	r3, [r7, #28]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d13d      	bne.n	8006d0e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	685a      	ldr	r2, [r3, #4]
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006ca0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	685b      	ldr	r3, [r3, #4]
 8006ca6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006caa:	d111      	bne.n	8006cd0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006cb4:	d004      	beq.n	8006cc0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	689b      	ldr	r3, [r3, #8]
 8006cba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006cbe:	d107      	bne.n	8006cd0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	681a      	ldr	r2, [r3, #0]
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006cce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cd4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006cd8:	d10f      	bne.n	8006cfa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	681a      	ldr	r2, [r3, #0]
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006ce8:	601a      	str	r2, [r3, #0]
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	681a      	ldr	r2, [r3, #0]
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006cf8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2201      	movs	r2, #1
 8006cfe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2200      	movs	r2, #0
 8006d06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006d0a:	2303      	movs	r3, #3
 8006d0c:	e017      	b.n	8006d3e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d101      	bne.n	8006d18 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006d14:	2300      	movs	r3, #0
 8006d16:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	3b01      	subs	r3, #1
 8006d1c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	689a      	ldr	r2, [r3, #8]
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	4013      	ands	r3, r2
 8006d28:	68ba      	ldr	r2, [r7, #8]
 8006d2a:	429a      	cmp	r2, r3
 8006d2c:	bf0c      	ite	eq
 8006d2e:	2301      	moveq	r3, #1
 8006d30:	2300      	movne	r3, #0
 8006d32:	b2db      	uxtb	r3, r3
 8006d34:	461a      	mov	r2, r3
 8006d36:	79fb      	ldrb	r3, [r7, #7]
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	d19b      	bne.n	8006c74 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006d3c:	2300      	movs	r3, #0
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3720      	adds	r7, #32
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}
 8006d46:	bf00      	nop
 8006d48:	2000001c 	.word	0x2000001c

08006d4c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b088      	sub	sp, #32
 8006d50:	af02      	add	r7, sp, #8
 8006d52:	60f8      	str	r0, [r7, #12]
 8006d54:	60b9      	str	r1, [r7, #8]
 8006d56:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	9300      	str	r3, [sp, #0]
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	2201      	movs	r2, #1
 8006d60:	2102      	movs	r1, #2
 8006d62:	68f8      	ldr	r0, [r7, #12]
 8006d64:	f7ff ff6a 	bl	8006c3c <SPI_WaitFlagStateUntilTimeout>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d007      	beq.n	8006d7e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d72:	f043 0220 	orr.w	r2, r3, #32
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006d7a:	2303      	movs	r3, #3
 8006d7c:	e032      	b.n	8006de4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006d7e:	4b1b      	ldr	r3, [pc, #108]	@ (8006dec <SPI_EndRxTxTransaction+0xa0>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a1b      	ldr	r2, [pc, #108]	@ (8006df0 <SPI_EndRxTxTransaction+0xa4>)
 8006d84:	fba2 2303 	umull	r2, r3, r2, r3
 8006d88:	0d5b      	lsrs	r3, r3, #21
 8006d8a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006d8e:	fb02 f303 	mul.w	r3, r2, r3
 8006d92:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006d9c:	d112      	bne.n	8006dc4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	9300      	str	r3, [sp, #0]
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	2200      	movs	r2, #0
 8006da6:	2180      	movs	r1, #128	@ 0x80
 8006da8:	68f8      	ldr	r0, [r7, #12]
 8006daa:	f7ff ff47 	bl	8006c3c <SPI_WaitFlagStateUntilTimeout>
 8006dae:	4603      	mov	r3, r0
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d016      	beq.n	8006de2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006db8:	f043 0220 	orr.w	r2, r3, #32
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006dc0:	2303      	movs	r3, #3
 8006dc2:	e00f      	b.n	8006de4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d00a      	beq.n	8006de0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	3b01      	subs	r3, #1
 8006dce:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	689b      	ldr	r3, [r3, #8]
 8006dd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006dda:	2b80      	cmp	r3, #128	@ 0x80
 8006ddc:	d0f2      	beq.n	8006dc4 <SPI_EndRxTxTransaction+0x78>
 8006dde:	e000      	b.n	8006de2 <SPI_EndRxTxTransaction+0x96>
        break;
 8006de0:	bf00      	nop
  }

  return HAL_OK;
 8006de2:	2300      	movs	r3, #0
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	3718      	adds	r7, #24
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}
 8006dec:	2000001c 	.word	0x2000001c
 8006df0:	165e9f81 	.word	0x165e9f81

08006df4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b082      	sub	sp, #8
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d101      	bne.n	8006e06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006e02:	2301      	movs	r3, #1
 8006e04:	e041      	b.n	8006e8a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e0c:	b2db      	uxtb	r3, r3
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d106      	bne.n	8006e20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2200      	movs	r2, #0
 8006e16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f7fc f90c 	bl	8003038 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2202      	movs	r2, #2
 8006e24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681a      	ldr	r2, [r3, #0]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	3304      	adds	r3, #4
 8006e30:	4619      	mov	r1, r3
 8006e32:	4610      	mov	r0, r2
 8006e34:	f000 f8f4 	bl	8007020 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2201      	movs	r2, #1
 8006e44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2201      	movs	r2, #1
 8006e4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2201      	movs	r2, #1
 8006e54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2201      	movs	r2, #1
 8006e64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2201      	movs	r2, #1
 8006e74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2201      	movs	r2, #1
 8006e84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006e88:	2300      	movs	r3, #0
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	3708      	adds	r7, #8
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}

08006e92 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006e92:	b580      	push	{r7, lr}
 8006e94:	b084      	sub	sp, #16
 8006e96:	af00      	add	r7, sp, #0
 8006e98:	6078      	str	r0, [r7, #4]
 8006e9a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ea6:	2b01      	cmp	r3, #1
 8006ea8:	d101      	bne.n	8006eae <HAL_TIM_ConfigClockSource+0x1c>
 8006eaa:	2302      	movs	r3, #2
 8006eac:	e0b4      	b.n	8007018 <HAL_TIM_ConfigClockSource+0x186>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2201      	movs	r2, #1
 8006eb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2202      	movs	r2, #2
 8006eba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	689b      	ldr	r3, [r3, #8]
 8006ec4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006ecc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006ed4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	68ba      	ldr	r2, [r7, #8]
 8006edc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ee6:	d03e      	beq.n	8006f66 <HAL_TIM_ConfigClockSource+0xd4>
 8006ee8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006eec:	f200 8087 	bhi.w	8006ffe <HAL_TIM_ConfigClockSource+0x16c>
 8006ef0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ef4:	f000 8086 	beq.w	8007004 <HAL_TIM_ConfigClockSource+0x172>
 8006ef8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006efc:	d87f      	bhi.n	8006ffe <HAL_TIM_ConfigClockSource+0x16c>
 8006efe:	2b70      	cmp	r3, #112	@ 0x70
 8006f00:	d01a      	beq.n	8006f38 <HAL_TIM_ConfigClockSource+0xa6>
 8006f02:	2b70      	cmp	r3, #112	@ 0x70
 8006f04:	d87b      	bhi.n	8006ffe <HAL_TIM_ConfigClockSource+0x16c>
 8006f06:	2b60      	cmp	r3, #96	@ 0x60
 8006f08:	d050      	beq.n	8006fac <HAL_TIM_ConfigClockSource+0x11a>
 8006f0a:	2b60      	cmp	r3, #96	@ 0x60
 8006f0c:	d877      	bhi.n	8006ffe <HAL_TIM_ConfigClockSource+0x16c>
 8006f0e:	2b50      	cmp	r3, #80	@ 0x50
 8006f10:	d03c      	beq.n	8006f8c <HAL_TIM_ConfigClockSource+0xfa>
 8006f12:	2b50      	cmp	r3, #80	@ 0x50
 8006f14:	d873      	bhi.n	8006ffe <HAL_TIM_ConfigClockSource+0x16c>
 8006f16:	2b40      	cmp	r3, #64	@ 0x40
 8006f18:	d058      	beq.n	8006fcc <HAL_TIM_ConfigClockSource+0x13a>
 8006f1a:	2b40      	cmp	r3, #64	@ 0x40
 8006f1c:	d86f      	bhi.n	8006ffe <HAL_TIM_ConfigClockSource+0x16c>
 8006f1e:	2b30      	cmp	r3, #48	@ 0x30
 8006f20:	d064      	beq.n	8006fec <HAL_TIM_ConfigClockSource+0x15a>
 8006f22:	2b30      	cmp	r3, #48	@ 0x30
 8006f24:	d86b      	bhi.n	8006ffe <HAL_TIM_ConfigClockSource+0x16c>
 8006f26:	2b20      	cmp	r3, #32
 8006f28:	d060      	beq.n	8006fec <HAL_TIM_ConfigClockSource+0x15a>
 8006f2a:	2b20      	cmp	r3, #32
 8006f2c:	d867      	bhi.n	8006ffe <HAL_TIM_ConfigClockSource+0x16c>
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d05c      	beq.n	8006fec <HAL_TIM_ConfigClockSource+0x15a>
 8006f32:	2b10      	cmp	r3, #16
 8006f34:	d05a      	beq.n	8006fec <HAL_TIM_ConfigClockSource+0x15a>
 8006f36:	e062      	b.n	8006ffe <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006f48:	f000 f990 	bl	800726c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	689b      	ldr	r3, [r3, #8]
 8006f52:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006f5a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	68ba      	ldr	r2, [r7, #8]
 8006f62:	609a      	str	r2, [r3, #8]
      break;
 8006f64:	e04f      	b.n	8007006 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006f76:	f000 f979 	bl	800726c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	689a      	ldr	r2, [r3, #8]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006f88:	609a      	str	r2, [r3, #8]
      break;
 8006f8a:	e03c      	b.n	8007006 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f98:	461a      	mov	r2, r3
 8006f9a:	f000 f8ed 	bl	8007178 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	2150      	movs	r1, #80	@ 0x50
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f000 f946 	bl	8007236 <TIM_ITRx_SetConfig>
      break;
 8006faa:	e02c      	b.n	8007006 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006fb8:	461a      	mov	r2, r3
 8006fba:	f000 f90c 	bl	80071d6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	2160      	movs	r1, #96	@ 0x60
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	f000 f936 	bl	8007236 <TIM_ITRx_SetConfig>
      break;
 8006fca:	e01c      	b.n	8007006 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fd8:	461a      	mov	r2, r3
 8006fda:	f000 f8cd 	bl	8007178 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	2140      	movs	r1, #64	@ 0x40
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	f000 f926 	bl	8007236 <TIM_ITRx_SetConfig>
      break;
 8006fea:	e00c      	b.n	8007006 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681a      	ldr	r2, [r3, #0]
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4619      	mov	r1, r3
 8006ff6:	4610      	mov	r0, r2
 8006ff8:	f000 f91d 	bl	8007236 <TIM_ITRx_SetConfig>
      break;
 8006ffc:	e003      	b.n	8007006 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006ffe:	2301      	movs	r3, #1
 8007000:	73fb      	strb	r3, [r7, #15]
      break;
 8007002:	e000      	b.n	8007006 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007004:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2201      	movs	r2, #1
 800700a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2200      	movs	r2, #0
 8007012:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007016:	7bfb      	ldrb	r3, [r7, #15]
}
 8007018:	4618      	mov	r0, r3
 800701a:	3710      	adds	r7, #16
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}

08007020 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007020:	b480      	push	{r7}
 8007022:	b085      	sub	sp, #20
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
 8007028:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	4a46      	ldr	r2, [pc, #280]	@ (800714c <TIM_Base_SetConfig+0x12c>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d013      	beq.n	8007060 <TIM_Base_SetConfig+0x40>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800703e:	d00f      	beq.n	8007060 <TIM_Base_SetConfig+0x40>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	4a43      	ldr	r2, [pc, #268]	@ (8007150 <TIM_Base_SetConfig+0x130>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d00b      	beq.n	8007060 <TIM_Base_SetConfig+0x40>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	4a42      	ldr	r2, [pc, #264]	@ (8007154 <TIM_Base_SetConfig+0x134>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d007      	beq.n	8007060 <TIM_Base_SetConfig+0x40>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	4a41      	ldr	r2, [pc, #260]	@ (8007158 <TIM_Base_SetConfig+0x138>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d003      	beq.n	8007060 <TIM_Base_SetConfig+0x40>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	4a40      	ldr	r2, [pc, #256]	@ (800715c <TIM_Base_SetConfig+0x13c>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d108      	bne.n	8007072 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007066:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	68fa      	ldr	r2, [r7, #12]
 800706e:	4313      	orrs	r3, r2
 8007070:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	4a35      	ldr	r2, [pc, #212]	@ (800714c <TIM_Base_SetConfig+0x12c>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d02b      	beq.n	80070d2 <TIM_Base_SetConfig+0xb2>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007080:	d027      	beq.n	80070d2 <TIM_Base_SetConfig+0xb2>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	4a32      	ldr	r2, [pc, #200]	@ (8007150 <TIM_Base_SetConfig+0x130>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d023      	beq.n	80070d2 <TIM_Base_SetConfig+0xb2>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	4a31      	ldr	r2, [pc, #196]	@ (8007154 <TIM_Base_SetConfig+0x134>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d01f      	beq.n	80070d2 <TIM_Base_SetConfig+0xb2>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	4a30      	ldr	r2, [pc, #192]	@ (8007158 <TIM_Base_SetConfig+0x138>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d01b      	beq.n	80070d2 <TIM_Base_SetConfig+0xb2>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	4a2f      	ldr	r2, [pc, #188]	@ (800715c <TIM_Base_SetConfig+0x13c>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d017      	beq.n	80070d2 <TIM_Base_SetConfig+0xb2>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	4a2e      	ldr	r2, [pc, #184]	@ (8007160 <TIM_Base_SetConfig+0x140>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d013      	beq.n	80070d2 <TIM_Base_SetConfig+0xb2>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	4a2d      	ldr	r2, [pc, #180]	@ (8007164 <TIM_Base_SetConfig+0x144>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d00f      	beq.n	80070d2 <TIM_Base_SetConfig+0xb2>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	4a2c      	ldr	r2, [pc, #176]	@ (8007168 <TIM_Base_SetConfig+0x148>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d00b      	beq.n	80070d2 <TIM_Base_SetConfig+0xb2>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	4a2b      	ldr	r2, [pc, #172]	@ (800716c <TIM_Base_SetConfig+0x14c>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d007      	beq.n	80070d2 <TIM_Base_SetConfig+0xb2>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	4a2a      	ldr	r2, [pc, #168]	@ (8007170 <TIM_Base_SetConfig+0x150>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d003      	beq.n	80070d2 <TIM_Base_SetConfig+0xb2>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	4a29      	ldr	r2, [pc, #164]	@ (8007174 <TIM_Base_SetConfig+0x154>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d108      	bne.n	80070e4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80070d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	68db      	ldr	r3, [r3, #12]
 80070de:	68fa      	ldr	r2, [r7, #12]
 80070e0:	4313      	orrs	r3, r2
 80070e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	695b      	ldr	r3, [r3, #20]
 80070ee:	4313      	orrs	r3, r2
 80070f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	68fa      	ldr	r2, [r7, #12]
 80070f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	689a      	ldr	r2, [r3, #8]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	681a      	ldr	r2, [r3, #0]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	4a10      	ldr	r2, [pc, #64]	@ (800714c <TIM_Base_SetConfig+0x12c>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d003      	beq.n	8007118 <TIM_Base_SetConfig+0xf8>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	4a12      	ldr	r2, [pc, #72]	@ (800715c <TIM_Base_SetConfig+0x13c>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d103      	bne.n	8007120 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	691a      	ldr	r2, [r3, #16]
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2201      	movs	r2, #1
 8007124:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	691b      	ldr	r3, [r3, #16]
 800712a:	f003 0301 	and.w	r3, r3, #1
 800712e:	2b01      	cmp	r3, #1
 8007130:	d105      	bne.n	800713e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	691b      	ldr	r3, [r3, #16]
 8007136:	f023 0201 	bic.w	r2, r3, #1
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	611a      	str	r2, [r3, #16]
  }
}
 800713e:	bf00      	nop
 8007140:	3714      	adds	r7, #20
 8007142:	46bd      	mov	sp, r7
 8007144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007148:	4770      	bx	lr
 800714a:	bf00      	nop
 800714c:	40010000 	.word	0x40010000
 8007150:	40000400 	.word	0x40000400
 8007154:	40000800 	.word	0x40000800
 8007158:	40000c00 	.word	0x40000c00
 800715c:	40010400 	.word	0x40010400
 8007160:	40014000 	.word	0x40014000
 8007164:	40014400 	.word	0x40014400
 8007168:	40014800 	.word	0x40014800
 800716c:	40001800 	.word	0x40001800
 8007170:	40001c00 	.word	0x40001c00
 8007174:	40002000 	.word	0x40002000

08007178 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007178:	b480      	push	{r7}
 800717a:	b087      	sub	sp, #28
 800717c:	af00      	add	r7, sp, #0
 800717e:	60f8      	str	r0, [r7, #12]
 8007180:	60b9      	str	r1, [r7, #8]
 8007182:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	6a1b      	ldr	r3, [r3, #32]
 8007188:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	6a1b      	ldr	r3, [r3, #32]
 800718e:	f023 0201 	bic.w	r2, r3, #1
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	699b      	ldr	r3, [r3, #24]
 800719a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80071a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	011b      	lsls	r3, r3, #4
 80071a8:	693a      	ldr	r2, [r7, #16]
 80071aa:	4313      	orrs	r3, r2
 80071ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	f023 030a 	bic.w	r3, r3, #10
 80071b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80071b6:	697a      	ldr	r2, [r7, #20]
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	4313      	orrs	r3, r2
 80071bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	693a      	ldr	r2, [r7, #16]
 80071c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	697a      	ldr	r2, [r7, #20]
 80071c8:	621a      	str	r2, [r3, #32]
}
 80071ca:	bf00      	nop
 80071cc:	371c      	adds	r7, #28
 80071ce:	46bd      	mov	sp, r7
 80071d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d4:	4770      	bx	lr

080071d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071d6:	b480      	push	{r7}
 80071d8:	b087      	sub	sp, #28
 80071da:	af00      	add	r7, sp, #0
 80071dc:	60f8      	str	r0, [r7, #12]
 80071de:	60b9      	str	r1, [r7, #8]
 80071e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	6a1b      	ldr	r3, [r3, #32]
 80071e6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	6a1b      	ldr	r3, [r3, #32]
 80071ec:	f023 0210 	bic.w	r2, r3, #16
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	699b      	ldr	r3, [r3, #24]
 80071f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007200:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	031b      	lsls	r3, r3, #12
 8007206:	693a      	ldr	r2, [r7, #16]
 8007208:	4313      	orrs	r3, r2
 800720a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007212:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	011b      	lsls	r3, r3, #4
 8007218:	697a      	ldr	r2, [r7, #20]
 800721a:	4313      	orrs	r3, r2
 800721c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	693a      	ldr	r2, [r7, #16]
 8007222:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	697a      	ldr	r2, [r7, #20]
 8007228:	621a      	str	r2, [r3, #32]
}
 800722a:	bf00      	nop
 800722c:	371c      	adds	r7, #28
 800722e:	46bd      	mov	sp, r7
 8007230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007234:	4770      	bx	lr

08007236 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007236:	b480      	push	{r7}
 8007238:	b085      	sub	sp, #20
 800723a:	af00      	add	r7, sp, #0
 800723c:	6078      	str	r0, [r7, #4]
 800723e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	689b      	ldr	r3, [r3, #8]
 8007244:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800724c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800724e:	683a      	ldr	r2, [r7, #0]
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	4313      	orrs	r3, r2
 8007254:	f043 0307 	orr.w	r3, r3, #7
 8007258:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	68fa      	ldr	r2, [r7, #12]
 800725e:	609a      	str	r2, [r3, #8]
}
 8007260:	bf00      	nop
 8007262:	3714      	adds	r7, #20
 8007264:	46bd      	mov	sp, r7
 8007266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726a:	4770      	bx	lr

0800726c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800726c:	b480      	push	{r7}
 800726e:	b087      	sub	sp, #28
 8007270:	af00      	add	r7, sp, #0
 8007272:	60f8      	str	r0, [r7, #12]
 8007274:	60b9      	str	r1, [r7, #8]
 8007276:	607a      	str	r2, [r7, #4]
 8007278:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	689b      	ldr	r3, [r3, #8]
 800727e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007286:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	021a      	lsls	r2, r3, #8
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	431a      	orrs	r2, r3
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	4313      	orrs	r3, r2
 8007294:	697a      	ldr	r2, [r7, #20]
 8007296:	4313      	orrs	r3, r2
 8007298:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	697a      	ldr	r2, [r7, #20]
 800729e:	609a      	str	r2, [r3, #8]
}
 80072a0:	bf00      	nop
 80072a2:	371c      	adds	r7, #28
 80072a4:	46bd      	mov	sp, r7
 80072a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072aa:	4770      	bx	lr

080072ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80072ac:	b480      	push	{r7}
 80072ae:	b085      	sub	sp, #20
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
 80072b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80072bc:	2b01      	cmp	r3, #1
 80072be:	d101      	bne.n	80072c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80072c0:	2302      	movs	r3, #2
 80072c2:	e05a      	b.n	800737a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2201      	movs	r2, #1
 80072c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2202      	movs	r2, #2
 80072d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	689b      	ldr	r3, [r3, #8]
 80072e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	68fa      	ldr	r2, [r7, #12]
 80072f2:	4313      	orrs	r3, r2
 80072f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	68fa      	ldr	r2, [r7, #12]
 80072fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4a21      	ldr	r2, [pc, #132]	@ (8007388 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d022      	beq.n	800734e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007310:	d01d      	beq.n	800734e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a1d      	ldr	r2, [pc, #116]	@ (800738c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d018      	beq.n	800734e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a1b      	ldr	r2, [pc, #108]	@ (8007390 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d013      	beq.n	800734e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a1a      	ldr	r2, [pc, #104]	@ (8007394 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d00e      	beq.n	800734e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a18      	ldr	r2, [pc, #96]	@ (8007398 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d009      	beq.n	800734e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a17      	ldr	r2, [pc, #92]	@ (800739c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d004      	beq.n	800734e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a15      	ldr	r2, [pc, #84]	@ (80073a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d10c      	bne.n	8007368 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007354:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	685b      	ldr	r3, [r3, #4]
 800735a:	68ba      	ldr	r2, [r7, #8]
 800735c:	4313      	orrs	r3, r2
 800735e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	68ba      	ldr	r2, [r7, #8]
 8007366:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2201      	movs	r2, #1
 800736c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2200      	movs	r2, #0
 8007374:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007378:	2300      	movs	r3, #0
}
 800737a:	4618      	mov	r0, r3
 800737c:	3714      	adds	r7, #20
 800737e:	46bd      	mov	sp, r7
 8007380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007384:	4770      	bx	lr
 8007386:	bf00      	nop
 8007388:	40010000 	.word	0x40010000
 800738c:	40000400 	.word	0x40000400
 8007390:	40000800 	.word	0x40000800
 8007394:	40000c00 	.word	0x40000c00
 8007398:	40010400 	.word	0x40010400
 800739c:	40014000 	.word	0x40014000
 80073a0:	40001800 	.word	0x40001800

080073a4 <memset>:
 80073a4:	4402      	add	r2, r0
 80073a6:	4603      	mov	r3, r0
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d100      	bne.n	80073ae <memset+0xa>
 80073ac:	4770      	bx	lr
 80073ae:	f803 1b01 	strb.w	r1, [r3], #1
 80073b2:	e7f9      	b.n	80073a8 <memset+0x4>

080073b4 <__libc_init_array>:
 80073b4:	b570      	push	{r4, r5, r6, lr}
 80073b6:	4d0d      	ldr	r5, [pc, #52]	@ (80073ec <__libc_init_array+0x38>)
 80073b8:	4c0d      	ldr	r4, [pc, #52]	@ (80073f0 <__libc_init_array+0x3c>)
 80073ba:	1b64      	subs	r4, r4, r5
 80073bc:	10a4      	asrs	r4, r4, #2
 80073be:	2600      	movs	r6, #0
 80073c0:	42a6      	cmp	r6, r4
 80073c2:	d109      	bne.n	80073d8 <__libc_init_array+0x24>
 80073c4:	4d0b      	ldr	r5, [pc, #44]	@ (80073f4 <__libc_init_array+0x40>)
 80073c6:	4c0c      	ldr	r4, [pc, #48]	@ (80073f8 <__libc_init_array+0x44>)
 80073c8:	f000 f818 	bl	80073fc <_init>
 80073cc:	1b64      	subs	r4, r4, r5
 80073ce:	10a4      	asrs	r4, r4, #2
 80073d0:	2600      	movs	r6, #0
 80073d2:	42a6      	cmp	r6, r4
 80073d4:	d105      	bne.n	80073e2 <__libc_init_array+0x2e>
 80073d6:	bd70      	pop	{r4, r5, r6, pc}
 80073d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80073dc:	4798      	blx	r3
 80073de:	3601      	adds	r6, #1
 80073e0:	e7ee      	b.n	80073c0 <__libc_init_array+0xc>
 80073e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80073e6:	4798      	blx	r3
 80073e8:	3601      	adds	r6, #1
 80073ea:	e7f2      	b.n	80073d2 <__libc_init_array+0x1e>
 80073ec:	08008f04 	.word	0x08008f04
 80073f0:	08008f04 	.word	0x08008f04
 80073f4:	08008f04 	.word	0x08008f04
 80073f8:	08008f08 	.word	0x08008f08

080073fc <_init>:
 80073fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073fe:	bf00      	nop
 8007400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007402:	bc08      	pop	{r3}
 8007404:	469e      	mov	lr, r3
 8007406:	4770      	bx	lr

08007408 <_fini>:
 8007408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800740a:	bf00      	nop
 800740c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800740e:	bc08      	pop	{r3}
 8007410:	469e      	mov	lr, r3
 8007412:	4770      	bx	lr
