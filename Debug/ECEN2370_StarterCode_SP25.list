
ECEN2370_StarterCode_SP25.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005938  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ae8  08005ae4  08005ae4  00006ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080075cc  080075cc  00009028  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080075cc  080075cc  000085cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080075d4  080075d4  00009028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080075d4  080075d4  000085d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080075d8  080075d8  000085d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000028  20000000  080075dc  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00009028  2**0
                  CONTENTS
 10 .bss          000259f0  20000028  20000028  00009028  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20025a18  20025a18  00009028  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00009028  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ebed  00000000  00000000  00009058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000291c  00000000  00000000  00017c45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000de0  00000000  00000000  0001a568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a89  00000000  00000000  0001b348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026611  00000000  00000000  0001bdd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000117e5  00000000  00000000  000423e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1a2c  00000000  00000000  00053bc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001355f3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003844  00000000  00000000  00135638  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  00138e7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000028 	.word	0x20000028
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08005acc 	.word	0x08005acc

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000002c 	.word	0x2000002c
 80001e8:	08005acc 	.word	0x08005acc

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b988 	b.w	8000514 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	468e      	mov	lr, r1
 8000224:	4604      	mov	r4, r0
 8000226:	4688      	mov	r8, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d962      	bls.n	80002f8 <__udivmoddi4+0xdc>
 8000232:	fab2 f682 	clz	r6, r2
 8000236:	b14e      	cbz	r6, 800024c <__udivmoddi4+0x30>
 8000238:	f1c6 0320 	rsb	r3, r6, #32
 800023c:	fa01 f806 	lsl.w	r8, r1, r6
 8000240:	fa20 f303 	lsr.w	r3, r0, r3
 8000244:	40b7      	lsls	r7, r6
 8000246:	ea43 0808 	orr.w	r8, r3, r8
 800024a:	40b4      	lsls	r4, r6
 800024c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000250:	fa1f fc87 	uxth.w	ip, r7
 8000254:	fbb8 f1fe 	udiv	r1, r8, lr
 8000258:	0c23      	lsrs	r3, r4, #16
 800025a:	fb0e 8811 	mls	r8, lr, r1, r8
 800025e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000262:	fb01 f20c 	mul.w	r2, r1, ip
 8000266:	429a      	cmp	r2, r3
 8000268:	d909      	bls.n	800027e <__udivmoddi4+0x62>
 800026a:	18fb      	adds	r3, r7, r3
 800026c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000270:	f080 80ea 	bcs.w	8000448 <__udivmoddi4+0x22c>
 8000274:	429a      	cmp	r2, r3
 8000276:	f240 80e7 	bls.w	8000448 <__udivmoddi4+0x22c>
 800027a:	3902      	subs	r1, #2
 800027c:	443b      	add	r3, r7
 800027e:	1a9a      	subs	r2, r3, r2
 8000280:	b2a3      	uxth	r3, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800028e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000292:	459c      	cmp	ip, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x8e>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f100 32ff 	add.w	r2, r0, #4294967295
 800029c:	f080 80d6 	bcs.w	800044c <__udivmoddi4+0x230>
 80002a0:	459c      	cmp	ip, r3
 80002a2:	f240 80d3 	bls.w	800044c <__udivmoddi4+0x230>
 80002a6:	443b      	add	r3, r7
 80002a8:	3802      	subs	r0, #2
 80002aa:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002ae:	eba3 030c 	sub.w	r3, r3, ip
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11d      	cbz	r5, 80002be <__udivmoddi4+0xa2>
 80002b6:	40f3      	lsrs	r3, r6
 80002b8:	2200      	movs	r2, #0
 80002ba:	e9c5 3200 	strd	r3, r2, [r5]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d905      	bls.n	80002d2 <__udivmoddi4+0xb6>
 80002c6:	b10d      	cbz	r5, 80002cc <__udivmoddi4+0xb0>
 80002c8:	e9c5 0100 	strd	r0, r1, [r5]
 80002cc:	2100      	movs	r1, #0
 80002ce:	4608      	mov	r0, r1
 80002d0:	e7f5      	b.n	80002be <__udivmoddi4+0xa2>
 80002d2:	fab3 f183 	clz	r1, r3
 80002d6:	2900      	cmp	r1, #0
 80002d8:	d146      	bne.n	8000368 <__udivmoddi4+0x14c>
 80002da:	4573      	cmp	r3, lr
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xc8>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 8105 	bhi.w	80004ee <__udivmoddi4+0x2d2>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	4690      	mov	r8, r2
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e5      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f2:	e9c5 4800 	strd	r4, r8, [r5]
 80002f6:	e7e2      	b.n	80002be <__udivmoddi4+0xa2>
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f000 8090 	beq.w	800041e <__udivmoddi4+0x202>
 80002fe:	fab2 f682 	clz	r6, r2
 8000302:	2e00      	cmp	r6, #0
 8000304:	f040 80a4 	bne.w	8000450 <__udivmoddi4+0x234>
 8000308:	1a8a      	subs	r2, r1, r2
 800030a:	0c03      	lsrs	r3, r0, #16
 800030c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000310:	b280      	uxth	r0, r0
 8000312:	b2bc      	uxth	r4, r7
 8000314:	2101      	movs	r1, #1
 8000316:	fbb2 fcfe 	udiv	ip, r2, lr
 800031a:	fb0e 221c 	mls	r2, lr, ip, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb04 f20c 	mul.w	r2, r4, ip
 8000326:	429a      	cmp	r2, r3
 8000328:	d907      	bls.n	800033a <__udivmoddi4+0x11e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000330:	d202      	bcs.n	8000338 <__udivmoddi4+0x11c>
 8000332:	429a      	cmp	r2, r3
 8000334:	f200 80e0 	bhi.w	80004f8 <__udivmoddi4+0x2dc>
 8000338:	46c4      	mov	ip, r8
 800033a:	1a9b      	subs	r3, r3, r2
 800033c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000340:	fb0e 3312 	mls	r3, lr, r2, r3
 8000344:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000348:	fb02 f404 	mul.w	r4, r2, r4
 800034c:	429c      	cmp	r4, r3
 800034e:	d907      	bls.n	8000360 <__udivmoddi4+0x144>
 8000350:	18fb      	adds	r3, r7, r3
 8000352:	f102 30ff 	add.w	r0, r2, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x142>
 8000358:	429c      	cmp	r4, r3
 800035a:	f200 80ca 	bhi.w	80004f2 <__udivmoddi4+0x2d6>
 800035e:	4602      	mov	r2, r0
 8000360:	1b1b      	subs	r3, r3, r4
 8000362:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000366:	e7a5      	b.n	80002b4 <__udivmoddi4+0x98>
 8000368:	f1c1 0620 	rsb	r6, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 f706 	lsr.w	r7, r2, r6
 8000372:	431f      	orrs	r7, r3
 8000374:	fa0e f401 	lsl.w	r4, lr, r1
 8000378:	fa20 f306 	lsr.w	r3, r0, r6
 800037c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000380:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	fa1f fc87 	uxth.w	ip, r7
 800038e:	fbbe f0f9 	udiv	r0, lr, r9
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	fb09 ee10 	mls	lr, r9, r0, lr
 8000398:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800039c:	fb00 fe0c 	mul.w	lr, r0, ip
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	fa02 f201 	lsl.w	r2, r2, r1
 80003a6:	d909      	bls.n	80003bc <__udivmoddi4+0x1a0>
 80003a8:	193c      	adds	r4, r7, r4
 80003aa:	f100 3aff 	add.w	sl, r0, #4294967295
 80003ae:	f080 809c 	bcs.w	80004ea <__udivmoddi4+0x2ce>
 80003b2:	45a6      	cmp	lr, r4
 80003b4:	f240 8099 	bls.w	80004ea <__udivmoddi4+0x2ce>
 80003b8:	3802      	subs	r0, #2
 80003ba:	443c      	add	r4, r7
 80003bc:	eba4 040e 	sub.w	r4, r4, lr
 80003c0:	fa1f fe83 	uxth.w	lr, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003d0:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d4:	45a4      	cmp	ip, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1ce>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f103 3eff 	add.w	lr, r3, #4294967295
 80003de:	f080 8082 	bcs.w	80004e6 <__udivmoddi4+0x2ca>
 80003e2:	45a4      	cmp	ip, r4
 80003e4:	d97f      	bls.n	80004e6 <__udivmoddi4+0x2ca>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	443c      	add	r4, r7
 80003ea:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ee:	eba4 040c 	sub.w	r4, r4, ip
 80003f2:	fba0 ec02 	umull	lr, ip, r0, r2
 80003f6:	4564      	cmp	r4, ip
 80003f8:	4673      	mov	r3, lr
 80003fa:	46e1      	mov	r9, ip
 80003fc:	d362      	bcc.n	80004c4 <__udivmoddi4+0x2a8>
 80003fe:	d05f      	beq.n	80004c0 <__udivmoddi4+0x2a4>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x1fe>
 8000402:	ebb8 0203 	subs.w	r2, r8, r3
 8000406:	eb64 0409 	sbc.w	r4, r4, r9
 800040a:	fa04 f606 	lsl.w	r6, r4, r6
 800040e:	fa22 f301 	lsr.w	r3, r2, r1
 8000412:	431e      	orrs	r6, r3
 8000414:	40cc      	lsrs	r4, r1
 8000416:	e9c5 6400 	strd	r6, r4, [r5]
 800041a:	2100      	movs	r1, #0
 800041c:	e74f      	b.n	80002be <__udivmoddi4+0xa2>
 800041e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000422:	0c01      	lsrs	r1, r0, #16
 8000424:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000428:	b280      	uxth	r0, r0
 800042a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800042e:	463b      	mov	r3, r7
 8000430:	4638      	mov	r0, r7
 8000432:	463c      	mov	r4, r7
 8000434:	46b8      	mov	r8, r7
 8000436:	46be      	mov	lr, r7
 8000438:	2620      	movs	r6, #32
 800043a:	fbb1 f1f7 	udiv	r1, r1, r7
 800043e:	eba2 0208 	sub.w	r2, r2, r8
 8000442:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000446:	e766      	b.n	8000316 <__udivmoddi4+0xfa>
 8000448:	4601      	mov	r1, r0
 800044a:	e718      	b.n	800027e <__udivmoddi4+0x62>
 800044c:	4610      	mov	r0, r2
 800044e:	e72c      	b.n	80002aa <__udivmoddi4+0x8e>
 8000450:	f1c6 0220 	rsb	r2, r6, #32
 8000454:	fa2e f302 	lsr.w	r3, lr, r2
 8000458:	40b7      	lsls	r7, r6
 800045a:	40b1      	lsls	r1, r6
 800045c:	fa20 f202 	lsr.w	r2, r0, r2
 8000460:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000464:	430a      	orrs	r2, r1
 8000466:	fbb3 f8fe 	udiv	r8, r3, lr
 800046a:	b2bc      	uxth	r4, r7
 800046c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000470:	0c11      	lsrs	r1, r2, #16
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb08 f904 	mul.w	r9, r8, r4
 800047a:	40b0      	lsls	r0, r6
 800047c:	4589      	cmp	r9, r1
 800047e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000482:	b280      	uxth	r0, r0
 8000484:	d93e      	bls.n	8000504 <__udivmoddi4+0x2e8>
 8000486:	1879      	adds	r1, r7, r1
 8000488:	f108 3cff 	add.w	ip, r8, #4294967295
 800048c:	d201      	bcs.n	8000492 <__udivmoddi4+0x276>
 800048e:	4589      	cmp	r9, r1
 8000490:	d81f      	bhi.n	80004d2 <__udivmoddi4+0x2b6>
 8000492:	eba1 0109 	sub.w	r1, r1, r9
 8000496:	fbb1 f9fe 	udiv	r9, r1, lr
 800049a:	fb09 f804 	mul.w	r8, r9, r4
 800049e:	fb0e 1119 	mls	r1, lr, r9, r1
 80004a2:	b292      	uxth	r2, r2
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	4542      	cmp	r2, r8
 80004aa:	d229      	bcs.n	8000500 <__udivmoddi4+0x2e4>
 80004ac:	18ba      	adds	r2, r7, r2
 80004ae:	f109 31ff 	add.w	r1, r9, #4294967295
 80004b2:	d2c4      	bcs.n	800043e <__udivmoddi4+0x222>
 80004b4:	4542      	cmp	r2, r8
 80004b6:	d2c2      	bcs.n	800043e <__udivmoddi4+0x222>
 80004b8:	f1a9 0102 	sub.w	r1, r9, #2
 80004bc:	443a      	add	r2, r7
 80004be:	e7be      	b.n	800043e <__udivmoddi4+0x222>
 80004c0:	45f0      	cmp	r8, lr
 80004c2:	d29d      	bcs.n	8000400 <__udivmoddi4+0x1e4>
 80004c4:	ebbe 0302 	subs.w	r3, lr, r2
 80004c8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004cc:	3801      	subs	r0, #1
 80004ce:	46e1      	mov	r9, ip
 80004d0:	e796      	b.n	8000400 <__udivmoddi4+0x1e4>
 80004d2:	eba7 0909 	sub.w	r9, r7, r9
 80004d6:	4449      	add	r1, r9
 80004d8:	f1a8 0c02 	sub.w	ip, r8, #2
 80004dc:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e0:	fb09 f804 	mul.w	r8, r9, r4
 80004e4:	e7db      	b.n	800049e <__udivmoddi4+0x282>
 80004e6:	4673      	mov	r3, lr
 80004e8:	e77f      	b.n	80003ea <__udivmoddi4+0x1ce>
 80004ea:	4650      	mov	r0, sl
 80004ec:	e766      	b.n	80003bc <__udivmoddi4+0x1a0>
 80004ee:	4608      	mov	r0, r1
 80004f0:	e6fd      	b.n	80002ee <__udivmoddi4+0xd2>
 80004f2:	443b      	add	r3, r7
 80004f4:	3a02      	subs	r2, #2
 80004f6:	e733      	b.n	8000360 <__udivmoddi4+0x144>
 80004f8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004fc:	443b      	add	r3, r7
 80004fe:	e71c      	b.n	800033a <__udivmoddi4+0x11e>
 8000500:	4649      	mov	r1, r9
 8000502:	e79c      	b.n	800043e <__udivmoddi4+0x222>
 8000504:	eba1 0109 	sub.w	r1, r1, r9
 8000508:	46c4      	mov	ip, r8
 800050a:	fbb1 f9fe 	udiv	r9, r1, lr
 800050e:	fb09 f804 	mul.w	r8, r9, r4
 8000512:	e7c4      	b.n	800049e <__udivmoddi4+0x282>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <ApplicationInit>:
#define FIRST_NAME_LENGTH 6

extern void initialise_monitor_handles(void); 

void ApplicationInit(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 800051c:	f002 f9cc 	bl	80028b8 <initialise_monitor_handles>
    LTCD__Init();
 8000520:	f000 ff28 	bl	8001374 <LTCD__Init>
    LTCD_Layer_Init(0);
 8000524:	2000      	movs	r0, #0
 8000526:	f000 fee5 	bl	80012f4 <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_WHITE);
 800052a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800052e:	2000      	movs	r0, #0
 8000530:	f000 fff0 	bl	8001514 <LCD_Clear>
	InitializeLCDTouch();
 8000534:	f001 f8c6 	bl	80016c4 <InitializeLCDTouch>
	Button_Init_Interrupt();
 8000538:	f000 fdea 	bl	8001110 <Button_Init_Interrupt>
	startGame();
 800053c:	f000 f802 	bl	8000544 <startGame>
}
 8000540:	bf00      	nop
 8000542:	bd80      	pop	{r7, pc}

08000544 <startGame>:

void startGame(void){
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
	Screen1_Display();
 8000548:	f000 fa2e 	bl	80009a8 <Screen1_Display>
	checkPlayerMode();
 800054c:	f000 f856 	bl	80005fc <checkPlayerMode>
	startTimer();
 8000550:	f000 fa08 	bl	8000964 <startTimer>
	winner = 0;
 8000554:	4b04      	ldr	r3, [pc, #16]	@ (8000568 <startGame+0x24>)
 8000556:	2200      	movs	r2, #0
 8000558:	701a      	strb	r2, [r3, #0]
	newGame();
 800055a:	f000 f86b 	bl	8000634 <newGame>
	playGame();
 800055e:	f000 f805 	bl	800056c <playGame>
}
 8000562:	bf00      	nop
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	20000044 	.word	0x20000044

0800056c <playGame>:

void playGame(void){
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
	while (winner == 0){
 8000570:	e01e      	b.n	80005b0 <playGame+0x44>
		Screen2_Display();
 8000572:	f000 fad3 	bl	8000b1c <Screen2_Display>
		if(TwoPlayerMode == false && player1turn == false){
 8000576:	4b1c      	ldr	r3, [pc, #112]	@ (80005e8 <playGame+0x7c>)
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	f083 0301 	eor.w	r3, r3, #1
 800057e:	b2db      	uxtb	r3, r3
 8000580:	2b00      	cmp	r3, #0
 8000582:	d00b      	beq.n	800059c <playGame+0x30>
 8000584:	4b19      	ldr	r3, [pc, #100]	@ (80005ec <playGame+0x80>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	f083 0301 	eor.w	r3, r3, #1
 800058c:	b2db      	uxtb	r3, r3
 800058e:	2b00      	cmp	r3, #0
 8000590:	d004      	beq.n	800059c <playGame+0x30>
			moveAI();
 8000592:	f000 f91f 	bl	80007d4 <moveAI>
			drop();
 8000596:	f000 f88d 	bl	80006b4 <drop>
 800059a:	e001      	b.n	80005a0 <playGame+0x34>
		}
		else{
			move();
 800059c:	f000 f8e2 	bl	8000764 <move>
		}
		Screen2_Display();
 80005a0:	f000 fabc 	bl	8000b1c <Screen2_Display>
		winner = checkState();
 80005a4:	f000 f91e 	bl	80007e4 <checkState>
 80005a8:	4603      	mov	r3, r0
 80005aa:	461a      	mov	r2, r3
 80005ac:	4b10      	ldr	r3, [pc, #64]	@ (80005f0 <playGame+0x84>)
 80005ae:	701a      	strb	r2, [r3, #0]
	while (winner == 0){
 80005b0:	4b0f      	ldr	r3, [pc, #60]	@ (80005f0 <playGame+0x84>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d0dc      	beq.n	8000572 <playGame+0x6>
	}
	if(winner == 1){
 80005b8:	4b0d      	ldr	r3, [pc, #52]	@ (80005f0 <playGame+0x84>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2b01      	cmp	r3, #1
 80005be:	d106      	bne.n	80005ce <playGame+0x62>
		player1_Score++;
 80005c0:	4b0c      	ldr	r3, [pc, #48]	@ (80005f4 <playGame+0x88>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	3301      	adds	r3, #1
 80005c6:	b2da      	uxtb	r2, r3
 80005c8:	4b0a      	ldr	r3, [pc, #40]	@ (80005f4 <playGame+0x88>)
 80005ca:	701a      	strb	r2, [r3, #0]
 80005cc:	e005      	b.n	80005da <playGame+0x6e>
	}
	else{
		player2_Score++;
 80005ce:	4b0a      	ldr	r3, [pc, #40]	@ (80005f8 <playGame+0x8c>)
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	3301      	adds	r3, #1
 80005d4:	b2da      	uxtb	r2, r3
 80005d6:	4b08      	ldr	r3, [pc, #32]	@ (80005f8 <playGame+0x8c>)
 80005d8:	701a      	strb	r2, [r3, #0]
	}
	endTimer();
 80005da:	f000 f9cf 	bl	800097c <endTimer>
	Screen3_Display();
 80005de:	f000 fb8b 	bl	8000cf8 <Screen3_Display>
}
 80005e2:	bf00      	nop
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	20000054 	.word	0x20000054
 80005ec:	20000001 	.word	0x20000001
 80005f0:	20000044 	.word	0x20000044
 80005f4:	20000045 	.word	0x20000045
 80005f8:	20000046 	.word	0x20000046

080005fc <checkPlayerMode>:



void checkPlayerMode(void){
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
	STMPE811_TouchData touch;
	touch.pressed = STMPE811_State_Released;
 8000602:	2301      	movs	r3, #1
 8000604:	713b      	strb	r3, [r7, #4]
	while(touch.pressed == STMPE811_State_Released){
 8000606:	e003      	b.n	8000610 <checkPlayerMode+0x14>
		returnTouchStateAndLocation(&touch);
 8000608:	463b      	mov	r3, r7
 800060a:	4618      	mov	r0, r3
 800060c:	f001 f865 	bl	80016da <returnTouchStateAndLocation>
	while(touch.pressed == STMPE811_State_Released){
 8000610:	793b      	ldrb	r3, [r7, #4]
 8000612:	2b01      	cmp	r3, #1
 8000614:	d0f8      	beq.n	8000608 <checkPlayerMode+0xc>
	}
	if (touch.x < LCD_PIXEL_WIDTH/2){
 8000616:	883b      	ldrh	r3, [r7, #0]
 8000618:	2b77      	cmp	r3, #119	@ 0x77
 800061a:	d802      	bhi.n	8000622 <checkPlayerMode+0x26>
		TwoPlayerMode = LEFT_TOUCH;
 800061c:	4b04      	ldr	r3, [pc, #16]	@ (8000630 <checkPlayerMode+0x34>)
 800061e:	2200      	movs	r2, #0
 8000620:	701a      	strb	r2, [r3, #0]
	}
	TwoPlayerMode = RIGHT_TOUCH;
 8000622:	4b03      	ldr	r3, [pc, #12]	@ (8000630 <checkPlayerMode+0x34>)
 8000624:	2201      	movs	r2, #1
 8000626:	701a      	strb	r2, [r3, #0]
}
 8000628:	bf00      	nop
 800062a:	3708      	adds	r7, #8
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	20000054 	.word	0x20000054

08000634 <newGame>:

void newGame(void){
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
	startTimer();
 800063a:	f000 f993 	bl	8000964 <startTimer>
	LCD_Clear(0, LCD_COLOR_GREY);
 800063e:	f24f 71de 	movw	r1, #63454	@ 0xf7de
 8000642:	2000      	movs	r0, #0
 8000644:	f000 ff66 	bl	8001514 <LCD_Clear>
	if (startPlayer1 == true){
 8000648:	4b17      	ldr	r3, [pc, #92]	@ (80006a8 <newGame+0x74>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d003      	beq.n	8000658 <newGame+0x24>
		startPlayer1 = false;
 8000650:	4b15      	ldr	r3, [pc, #84]	@ (80006a8 <newGame+0x74>)
 8000652:	2200      	movs	r2, #0
 8000654:	701a      	strb	r2, [r3, #0]
 8000656:	e002      	b.n	800065e <newGame+0x2a>
	}
	else{
		startPlayer1 = true;
 8000658:	4b13      	ldr	r3, [pc, #76]	@ (80006a8 <newGame+0x74>)
 800065a:	2201      	movs	r2, #1
 800065c:	701a      	strb	r2, [r3, #0]
	}
	winner = 0;
 800065e:	4b13      	ldr	r3, [pc, #76]	@ (80006ac <newGame+0x78>)
 8000660:	2200      	movs	r2, #0
 8000662:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i<boardColumns; i++){
 8000664:	2300      	movs	r3, #0
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	e016      	b.n	8000698 <newGame+0x64>
		for (int j = 0; j<boardRows; j++){
 800066a:	2300      	movs	r3, #0
 800066c:	603b      	str	r3, [r7, #0]
 800066e:	e00d      	b.n	800068c <newGame+0x58>
	        gameBoard[i][j] = 0;
 8000670:	490f      	ldr	r1, [pc, #60]	@ (80006b0 <newGame+0x7c>)
 8000672:	687a      	ldr	r2, [r7, #4]
 8000674:	4613      	mov	r3, r2
 8000676:	005b      	lsls	r3, r3, #1
 8000678:	4413      	add	r3, r2
 800067a:	005b      	lsls	r3, r3, #1
 800067c:	18ca      	adds	r2, r1, r3
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	4413      	add	r3, r2
 8000682:	2200      	movs	r2, #0
 8000684:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j<boardRows; j++){
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	3301      	adds	r3, #1
 800068a:	603b      	str	r3, [r7, #0]
 800068c:	683b      	ldr	r3, [r7, #0]
 800068e:	2b05      	cmp	r3, #5
 8000690:	ddee      	ble.n	8000670 <newGame+0x3c>
	for (int i = 0; i<boardColumns; i++){
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	3301      	adds	r3, #1
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	2b06      	cmp	r3, #6
 800069c:	dde5      	ble.n	800066a <newGame+0x36>
		}
	}
}
 800069e:	bf00      	nop
 80006a0:	bf00      	nop
 80006a2:	3708      	adds	r7, #8
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	20000002 	.word	0x20000002
 80006ac:	20000044 	.word	0x20000044
 80006b0:	20000058 	.word	0x20000058

080006b4 <drop>:


void drop(void){
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
    int j = 0;
 80006ba:	2300      	movs	r3, #0
 80006bc:	607b      	str	r3, [r7, #4]
    while (gameBoard[chipLoc][j] == 0 && j<6){
 80006be:	e002      	b.n	80006c6 <drop+0x12>
        j++;
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	3301      	adds	r3, #1
 80006c4:	607b      	str	r3, [r7, #4]
    while (gameBoard[chipLoc][j] == 0 && j<6){
 80006c6:	4b23      	ldr	r3, [pc, #140]	@ (8000754 <drop+0xa0>)
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	4619      	mov	r1, r3
 80006cc:	4a22      	ldr	r2, [pc, #136]	@ (8000758 <drop+0xa4>)
 80006ce:	460b      	mov	r3, r1
 80006d0:	005b      	lsls	r3, r3, #1
 80006d2:	440b      	add	r3, r1
 80006d4:	005b      	lsls	r3, r3, #1
 80006d6:	441a      	add	r2, r3
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	4413      	add	r3, r2
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d102      	bne.n	80006e8 <drop+0x34>
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	2b05      	cmp	r3, #5
 80006e6:	ddeb      	ble.n	80006c0 <drop+0xc>
    }
    if(j>0){
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	dd2c      	ble.n	8000748 <drop+0x94>
		if (player1turn){
 80006ee:	4b1b      	ldr	r3, [pc, #108]	@ (800075c <drop+0xa8>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d011      	beq.n	800071a <drop+0x66>
			gameBoard[chipLoc][j-1] = 1;
 80006f6:	4b17      	ldr	r3, [pc, #92]	@ (8000754 <drop+0xa0>)
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	4618      	mov	r0, r3
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	1e5a      	subs	r2, r3, #1
 8000700:	4915      	ldr	r1, [pc, #84]	@ (8000758 <drop+0xa4>)
 8000702:	4603      	mov	r3, r0
 8000704:	005b      	lsls	r3, r3, #1
 8000706:	4403      	add	r3, r0
 8000708:	005b      	lsls	r3, r3, #1
 800070a:	440b      	add	r3, r1
 800070c:	4413      	add	r3, r2
 800070e:	2201      	movs	r2, #1
 8000710:	701a      	strb	r2, [r3, #0]
			player1turn = false;
 8000712:	4b12      	ldr	r3, [pc, #72]	@ (800075c <drop+0xa8>)
 8000714:	2200      	movs	r2, #0
 8000716:	701a      	strb	r2, [r3, #0]
 8000718:	e010      	b.n	800073c <drop+0x88>
		}
		else{
			gameBoard[chipLoc][j-1] = 2;
 800071a:	4b0e      	ldr	r3, [pc, #56]	@ (8000754 <drop+0xa0>)
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	4618      	mov	r0, r3
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	1e5a      	subs	r2, r3, #1
 8000724:	490c      	ldr	r1, [pc, #48]	@ (8000758 <drop+0xa4>)
 8000726:	4603      	mov	r3, r0
 8000728:	005b      	lsls	r3, r3, #1
 800072a:	4403      	add	r3, r0
 800072c:	005b      	lsls	r3, r3, #1
 800072e:	440b      	add	r3, r1
 8000730:	4413      	add	r3, r2
 8000732:	2202      	movs	r2, #2
 8000734:	701a      	strb	r2, [r3, #0]
			player1turn = true;
 8000736:	4b09      	ldr	r3, [pc, #36]	@ (800075c <drop+0xa8>)
 8000738:	2201      	movs	r2, #1
 800073a:	701a      	strb	r2, [r3, #0]
		}
		chipLoc = 3;
 800073c:	4b05      	ldr	r3, [pc, #20]	@ (8000754 <drop+0xa0>)
 800073e:	2203      	movs	r2, #3
 8000740:	701a      	strb	r2, [r3, #0]
		dropped = true;
 8000742:	4b07      	ldr	r3, [pc, #28]	@ (8000760 <drop+0xac>)
 8000744:	2201      	movs	r2, #1
 8000746:	701a      	strb	r2, [r3, #0]
    }
}
 8000748:	bf00      	nop
 800074a:	370c      	adds	r7, #12
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr
 8000754:	20000000 	.word	0x20000000
 8000758:	20000058 	.word	0x20000058
 800075c:	20000001 	.word	0x20000001
 8000760:	20000055 	.word	0x20000055

08000764 <move>:

void move(void){
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
    STMPE811_TouchData touch;
    touch.pressed = STMPE811_State_Released;
 800076a:	2301      	movs	r3, #1
 800076c:	713b      	strb	r3, [r7, #4]
    while(touch.pressed == STMPE811_State_Released && dropped == false){
 800076e:	e003      	b.n	8000778 <move+0x14>
        returnTouchStateAndLocation(&touch);
 8000770:	463b      	mov	r3, r7
 8000772:	4618      	mov	r0, r3
 8000774:	f000 ffb1 	bl	80016da <returnTouchStateAndLocation>
    while(touch.pressed == STMPE811_State_Released && dropped == false){
 8000778:	793b      	ldrb	r3, [r7, #4]
 800077a:	2b01      	cmp	r3, #1
 800077c:	d106      	bne.n	800078c <move+0x28>
 800077e:	4b13      	ldr	r3, [pc, #76]	@ (80007cc <move+0x68>)
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	f083 0301 	eor.w	r3, r3, #1
 8000786:	b2db      	uxtb	r3, r3
 8000788:	2b00      	cmp	r3, #0
 800078a:	d1f1      	bne.n	8000770 <move+0xc>
    }
    if(touch.pressed == STMPE811_State_Pressed){
 800078c:	793b      	ldrb	r3, [r7, #4]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d117      	bne.n	80007c2 <move+0x5e>
        if (touch.x < LCD_PIXEL_WIDTH/2 && chipLoc<6){
 8000792:	883b      	ldrh	r3, [r7, #0]
 8000794:	2b77      	cmp	r3, #119	@ 0x77
 8000796:	d80a      	bhi.n	80007ae <move+0x4a>
 8000798:	4b0d      	ldr	r3, [pc, #52]	@ (80007d0 <move+0x6c>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	2b05      	cmp	r3, #5
 800079e:	d806      	bhi.n	80007ae <move+0x4a>
            chipLoc++;
 80007a0:	4b0b      	ldr	r3, [pc, #44]	@ (80007d0 <move+0x6c>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	3301      	adds	r3, #1
 80007a6:	b2da      	uxtb	r2, r3
 80007a8:	4b09      	ldr	r3, [pc, #36]	@ (80007d0 <move+0x6c>)
 80007aa:	701a      	strb	r2, [r3, #0]
        }
        else if(chipLoc > 0){
            chipLoc--;
        }
    }
}
 80007ac:	e009      	b.n	80007c2 <move+0x5e>
        else if(chipLoc > 0){
 80007ae:	4b08      	ldr	r3, [pc, #32]	@ (80007d0 <move+0x6c>)
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d005      	beq.n	80007c2 <move+0x5e>
            chipLoc--;
 80007b6:	4b06      	ldr	r3, [pc, #24]	@ (80007d0 <move+0x6c>)
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	3b01      	subs	r3, #1
 80007bc:	b2da      	uxtb	r2, r3
 80007be:	4b04      	ldr	r3, [pc, #16]	@ (80007d0 <move+0x6c>)
 80007c0:	701a      	strb	r2, [r3, #0]
}
 80007c2:	bf00      	nop
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	20000055 	.word	0x20000055
 80007d0:	20000000 	.word	0x20000000

080007d4 <moveAI>:

void moveAI(void){
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0

}
 80007d8:	bf00      	nop
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr
	...

080007e4 <checkState>:

uint8_t checkState(void){
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af00      	add	r7, sp, #0
    int playerChecking = 0;
 80007ea:	2300      	movs	r3, #0
 80007ec:	607b      	str	r3, [r7, #4]
    dropped = false;
 80007ee:	4b2c      	ldr	r3, [pc, #176]	@ (80008a0 <checkState+0xbc>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i< boardColumns; i++){
 80007f4:	2300      	movs	r3, #0
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	e049      	b.n	800088e <checkState+0xaa>
        for (int j = 0; j < boardRows; j++){
 80007fa:	2300      	movs	r3, #0
 80007fc:	60bb      	str	r3, [r7, #8]
 80007fe:	e040      	b.n	8000882 <checkState+0x9e>
            playerChecking = gameBoard[i][j];
 8000800:	4928      	ldr	r1, [pc, #160]	@ (80008a4 <checkState+0xc0>)
 8000802:	68fa      	ldr	r2, [r7, #12]
 8000804:	4613      	mov	r3, r2
 8000806:	005b      	lsls	r3, r3, #1
 8000808:	4413      	add	r3, r2
 800080a:	005b      	lsls	r3, r3, #1
 800080c:	18ca      	adds	r2, r1, r3
 800080e:	68bb      	ldr	r3, [r7, #8]
 8000810:	4413      	add	r3, r2
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	607b      	str	r3, [r7, #4]
            if (playerChecking != 0){
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d02f      	beq.n	800087c <checkState+0x98>
                if (checkDirection(i, j, 1, 0)|| //checking horizontal
 800081c:	2300      	movs	r3, #0
 800081e:	2201      	movs	r2, #1
 8000820:	68b9      	ldr	r1, [r7, #8]
 8000822:	68f8      	ldr	r0, [r7, #12]
 8000824:	f000 f840 	bl	80008a8 <checkDirection>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d11b      	bne.n	8000866 <checkState+0x82>
                    checkDirection(i, j, 0, 1)|| //checking vertical 
 800082e:	2301      	movs	r3, #1
 8000830:	2200      	movs	r2, #0
 8000832:	68b9      	ldr	r1, [r7, #8]
 8000834:	68f8      	ldr	r0, [r7, #12]
 8000836:	f000 f837 	bl	80008a8 <checkDirection>
 800083a:	4603      	mov	r3, r0
                if (checkDirection(i, j, 1, 0)|| //checking horizontal
 800083c:	2b00      	cmp	r3, #0
 800083e:	d112      	bne.n	8000866 <checkState+0x82>
                    checkDirection(i, j, 1, 1)|| //checking / diagonal
 8000840:	2301      	movs	r3, #1
 8000842:	2201      	movs	r2, #1
 8000844:	68b9      	ldr	r1, [r7, #8]
 8000846:	68f8      	ldr	r0, [r7, #12]
 8000848:	f000 f82e 	bl	80008a8 <checkDirection>
 800084c:	4603      	mov	r3, r0
                    checkDirection(i, j, 0, 1)|| //checking vertical 
 800084e:	2b00      	cmp	r3, #0
 8000850:	d109      	bne.n	8000866 <checkState+0x82>
                    checkDirection(i, j, 1, -1)){ //checking \ diagonal
 8000852:	f04f 33ff 	mov.w	r3, #4294967295
 8000856:	2201      	movs	r2, #1
 8000858:	68b9      	ldr	r1, [r7, #8]
 800085a:	68f8      	ldr	r0, [r7, #12]
 800085c:	f000 f824 	bl	80008a8 <checkDirection>
 8000860:	4603      	mov	r3, r0
                    checkDirection(i, j, 1, 1)|| //checking / diagonal
 8000862:	2b00      	cmp	r3, #0
 8000864:	d00a      	beq.n	800087c <checkState+0x98>
                        return gameBoard[i][j];
 8000866:	490f      	ldr	r1, [pc, #60]	@ (80008a4 <checkState+0xc0>)
 8000868:	68fa      	ldr	r2, [r7, #12]
 800086a:	4613      	mov	r3, r2
 800086c:	005b      	lsls	r3, r3, #1
 800086e:	4413      	add	r3, r2
 8000870:	005b      	lsls	r3, r3, #1
 8000872:	18ca      	adds	r2, r1, r3
 8000874:	68bb      	ldr	r3, [r7, #8]
 8000876:	4413      	add	r3, r2
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	e00c      	b.n	8000896 <checkState+0xb2>
        for (int j = 0; j < boardRows; j++){
 800087c:	68bb      	ldr	r3, [r7, #8]
 800087e:	3301      	adds	r3, #1
 8000880:	60bb      	str	r3, [r7, #8]
 8000882:	68bb      	ldr	r3, [r7, #8]
 8000884:	2b05      	cmp	r3, #5
 8000886:	ddbb      	ble.n	8000800 <checkState+0x1c>
    for (int i = 0; i< boardColumns; i++){
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	3301      	adds	r3, #1
 800088c:	60fb      	str	r3, [r7, #12]
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	2b06      	cmp	r3, #6
 8000892:	ddb2      	ble.n	80007fa <checkState+0x16>
                }
            }
        }
    }
	return 0;
 8000894:	2300      	movs	r3, #0
}
 8000896:	4618      	mov	r0, r3
 8000898:	3710      	adds	r7, #16
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	20000055 	.word	0x20000055
 80008a4:	20000058 	.word	0x20000058

080008a8 <checkDirection>:
bool checkDirection(int i, int j, int dir_i, int dir_j){
 80008a8:	b490      	push	{r4, r7}
 80008aa:	b086      	sub	sp, #24
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	60f8      	str	r0, [r7, #12]
 80008b0:	60b9      	str	r1, [r7, #8]
 80008b2:	607a      	str	r2, [r7, #4]
 80008b4:	603b      	str	r3, [r7, #0]
    for (int k = 1; k < 4; k++){
 80008b6:	2301      	movs	r3, #1
 80008b8:	617b      	str	r3, [r7, #20]
 80008ba:	e048      	b.n	800094e <checkDirection+0xa6>
        if ((i+dir_i*k)>boardColumns || (i+dir_i*k)<0){
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	697a      	ldr	r2, [r7, #20]
 80008c0:	fb03 f202 	mul.w	r2, r3, r2
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	4413      	add	r3, r2
 80008c8:	2b07      	cmp	r3, #7
 80008ca:	dc07      	bgt.n	80008dc <checkDirection+0x34>
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	697a      	ldr	r2, [r7, #20]
 80008d0:	fb03 f202 	mul.w	r2, r3, r2
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	4413      	add	r3, r2
 80008d8:	2b00      	cmp	r3, #0
 80008da:	da01      	bge.n	80008e0 <checkDirection+0x38>
            return false;
 80008dc:	2300      	movs	r3, #0
 80008de:	e03a      	b.n	8000956 <checkDirection+0xae>
        } 
        if ((j+dir_j*k)>boardColumns || (j+dir_j*k)<0){
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	697a      	ldr	r2, [r7, #20]
 80008e4:	fb03 f202 	mul.w	r2, r3, r2
 80008e8:	68bb      	ldr	r3, [r7, #8]
 80008ea:	4413      	add	r3, r2
 80008ec:	2b07      	cmp	r3, #7
 80008ee:	dc07      	bgt.n	8000900 <checkDirection+0x58>
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	697a      	ldr	r2, [r7, #20]
 80008f4:	fb03 f202 	mul.w	r2, r3, r2
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	4413      	add	r3, r2
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	da01      	bge.n	8000904 <checkDirection+0x5c>
            return false;
 8000900:	2300      	movs	r3, #0
 8000902:	e028      	b.n	8000956 <checkDirection+0xae>
        } 
        if (gameBoard[i][j] != gameBoard[i+dir_i*k][j+dir_j*k]){
 8000904:	4916      	ldr	r1, [pc, #88]	@ (8000960 <checkDirection+0xb8>)
 8000906:	68fa      	ldr	r2, [r7, #12]
 8000908:	4613      	mov	r3, r2
 800090a:	005b      	lsls	r3, r3, #1
 800090c:	4413      	add	r3, r2
 800090e:	005b      	lsls	r3, r3, #1
 8000910:	18ca      	adds	r2, r1, r3
 8000912:	68bb      	ldr	r3, [r7, #8]
 8000914:	4413      	add	r3, r2
 8000916:	7819      	ldrb	r1, [r3, #0]
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	697a      	ldr	r2, [r7, #20]
 800091c:	fb03 f202 	mul.w	r2, r3, r2
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	441a      	add	r2, r3
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	6978      	ldr	r0, [r7, #20]
 8000928:	fb03 f000 	mul.w	r0, r3, r0
 800092c:	68bb      	ldr	r3, [r7, #8]
 800092e:	4418      	add	r0, r3
 8000930:	4c0b      	ldr	r4, [pc, #44]	@ (8000960 <checkDirection+0xb8>)
 8000932:	4613      	mov	r3, r2
 8000934:	005b      	lsls	r3, r3, #1
 8000936:	4413      	add	r3, r2
 8000938:	005b      	lsls	r3, r3, #1
 800093a:	4423      	add	r3, r4
 800093c:	4403      	add	r3, r0
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	4299      	cmp	r1, r3
 8000942:	d001      	beq.n	8000948 <checkDirection+0xa0>
            return false;
 8000944:	2300      	movs	r3, #0
 8000946:	e006      	b.n	8000956 <checkDirection+0xae>
    for (int k = 1; k < 4; k++){
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	3301      	adds	r3, #1
 800094c:	617b      	str	r3, [r7, #20]
 800094e:	697b      	ldr	r3, [r7, #20]
 8000950:	2b03      	cmp	r3, #3
 8000952:	ddb3      	ble.n	80008bc <checkDirection+0x14>
        }

    }
    return true;
 8000954:	2301      	movs	r3, #1

}
 8000956:	4618      	mov	r0, r3
 8000958:	3718      	adds	r7, #24
 800095a:	46bd      	mov	sp, r7
 800095c:	bc90      	pop	{r4, r7}
 800095e:	4770      	bx	lr
 8000960:	20000058 	.word	0x20000058

08000964 <startTimer>:

void startTimer(void){
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
	startTime = HAL_GetTick();
 8000968:	f002 f850 	bl	8002a0c <HAL_GetTick>
 800096c:	4603      	mov	r3, r0
 800096e:	4a02      	ldr	r2, [pc, #8]	@ (8000978 <startTimer+0x14>)
 8000970:	6013      	str	r3, [r2, #0]
}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	20000048 	.word	0x20000048

0800097c <endTimer>:

void endTimer(){
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
    endTime = HAL_GetTick();
 8000980:	f002 f844 	bl	8002a0c <HAL_GetTick>
 8000984:	4603      	mov	r3, r0
 8000986:	4a05      	ldr	r2, [pc, #20]	@ (800099c <endTimer+0x20>)
 8000988:	6013      	str	r3, [r2, #0]
	timePlayed = endTime-startTime;
 800098a:	4b04      	ldr	r3, [pc, #16]	@ (800099c <endTimer+0x20>)
 800098c:	681a      	ldr	r2, [r3, #0]
 800098e:	4b04      	ldr	r3, [pc, #16]	@ (80009a0 <endTimer+0x24>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	1ad3      	subs	r3, r2, r3
 8000994:	4a03      	ldr	r2, [pc, #12]	@ (80009a4 <endTimer+0x28>)
 8000996:	6013      	str	r3, [r2, #0]
}
 8000998:	bf00      	nop
 800099a:	bd80      	pop	{r7, pc}
 800099c:	2000004c 	.word	0x2000004c
 80009a0:	20000048 	.word	0x20000048
 80009a4:	20000050 	.word	0x20000050

080009a8 <Screen1_Display>:


void Screen1_Display(void){
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
    LCD_Clear(0, LCD_COLOR_GREY);
 80009ac:	f24f 71de 	movw	r1, #63454	@ 0xf7de
 80009b0:	2000      	movs	r0, #0
 80009b2:	f000 fdaf 	bl	8001514 <LCD_Clear>
    
    LCD_SetFont(&Font16x24);
 80009b6:	4857      	ldr	r0, [pc, #348]	@ (8000b14 <Screen1_Display+0x16c>)
 80009b8:	f000 fdde 	bl	8001578 <LCD_SetFont>
    LCD_SetTextColor(LCD_COLOR_BLACK);
 80009bc:	2000      	movs	r0, #0
 80009be:	f000 fdcb 	bl	8001558 <LCD_SetTextColor>
    LCD_DisplayChar(20, 20, 'C');
 80009c2:	2243      	movs	r2, #67	@ 0x43
 80009c4:	2114      	movs	r1, #20
 80009c6:	2014      	movs	r0, #20
 80009c8:	f000 fe54 	bl	8001674 <LCD_DisplayChar>
    LCD_DisplayChar(40, 20, 'O');
 80009cc:	224f      	movs	r2, #79	@ 0x4f
 80009ce:	2114      	movs	r1, #20
 80009d0:	2028      	movs	r0, #40	@ 0x28
 80009d2:	f000 fe4f 	bl	8001674 <LCD_DisplayChar>
    LCD_DisplayChar(60, 20, 'N');
 80009d6:	224e      	movs	r2, #78	@ 0x4e
 80009d8:	2114      	movs	r1, #20
 80009da:	203c      	movs	r0, #60	@ 0x3c
 80009dc:	f000 fe4a 	bl	8001674 <LCD_DisplayChar>
    LCD_DisplayChar(80, 20, 'N');
 80009e0:	224e      	movs	r2, #78	@ 0x4e
 80009e2:	2114      	movs	r1, #20
 80009e4:	2050      	movs	r0, #80	@ 0x50
 80009e6:	f000 fe45 	bl	8001674 <LCD_DisplayChar>
    LCD_DisplayChar(100, 20, 'E');
 80009ea:	2245      	movs	r2, #69	@ 0x45
 80009ec:	2114      	movs	r1, #20
 80009ee:	2064      	movs	r0, #100	@ 0x64
 80009f0:	f000 fe40 	bl	8001674 <LCD_DisplayChar>
    LCD_DisplayChar(120, 20, 'C');
 80009f4:	2243      	movs	r2, #67	@ 0x43
 80009f6:	2114      	movs	r1, #20
 80009f8:	2078      	movs	r0, #120	@ 0x78
 80009fa:	f000 fe3b 	bl	8001674 <LCD_DisplayChar>
    LCD_DisplayChar(140, 20, 'T');
 80009fe:	2254      	movs	r2, #84	@ 0x54
 8000a00:	2114      	movs	r1, #20
 8000a02:	208c      	movs	r0, #140	@ 0x8c
 8000a04:	f000 fe36 	bl	8001674 <LCD_DisplayChar>
    LCD_DisplayChar(180, 20, '4');
 8000a08:	2234      	movs	r2, #52	@ 0x34
 8000a0a:	2114      	movs	r1, #20
 8000a0c:	20b4      	movs	r0, #180	@ 0xb4
 8000a0e:	f000 fe31 	bl	8001674 <LCD_DisplayChar>

    LCD_SetFont(&Font12x12);
 8000a12:	4841      	ldr	r0, [pc, #260]	@ (8000b18 <Screen1_Display+0x170>)
 8000a14:	f000 fdb0 	bl	8001578 <LCD_SetFont>
    LCD_DisplayChar(20, 110, '1');
 8000a18:	2231      	movs	r2, #49	@ 0x31
 8000a1a:	216e      	movs	r1, #110	@ 0x6e
 8000a1c:	2014      	movs	r0, #20
 8000a1e:	f000 fe29 	bl	8001674 <LCD_DisplayChar>
    LCD_DisplayChar(35, 110, 'P');
 8000a22:	2250      	movs	r2, #80	@ 0x50
 8000a24:	216e      	movs	r1, #110	@ 0x6e
 8000a26:	2023      	movs	r0, #35	@ 0x23
 8000a28:	f000 fe24 	bl	8001674 <LCD_DisplayChar>
    LCD_DisplayChar(45, 110, 'L');
 8000a2c:	224c      	movs	r2, #76	@ 0x4c
 8000a2e:	216e      	movs	r1, #110	@ 0x6e
 8000a30:	202d      	movs	r0, #45	@ 0x2d
 8000a32:	f000 fe1f 	bl	8001674 <LCD_DisplayChar>
    LCD_DisplayChar(55, 110, 'A');
 8000a36:	2241      	movs	r2, #65	@ 0x41
 8000a38:	216e      	movs	r1, #110	@ 0x6e
 8000a3a:	2037      	movs	r0, #55	@ 0x37
 8000a3c:	f000 fe1a 	bl	8001674 <LCD_DisplayChar>
    LCD_DisplayChar(65, 110, 'Y');
 8000a40:	2259      	movs	r2, #89	@ 0x59
 8000a42:	216e      	movs	r1, #110	@ 0x6e
 8000a44:	2041      	movs	r0, #65	@ 0x41
 8000a46:	f000 fe15 	bl	8001674 <LCD_DisplayChar>
    LCD_DisplayChar(75, 110, 'E');
 8000a4a:	2245      	movs	r2, #69	@ 0x45
 8000a4c:	216e      	movs	r1, #110	@ 0x6e
 8000a4e:	204b      	movs	r0, #75	@ 0x4b
 8000a50:	f000 fe10 	bl	8001674 <LCD_DisplayChar>
    LCD_DisplayChar(85, 110, 'R');
 8000a54:	2252      	movs	r2, #82	@ 0x52
 8000a56:	216e      	movs	r1, #110	@ 0x6e
 8000a58:	2055      	movs	r0, #85	@ 0x55
 8000a5a:	f000 fe0b 	bl	8001674 <LCD_DisplayChar>
    LCD_DisplayChar(40, 125, 'M');
 8000a5e:	224d      	movs	r2, #77	@ 0x4d
 8000a60:	217d      	movs	r1, #125	@ 0x7d
 8000a62:	2028      	movs	r0, #40	@ 0x28
 8000a64:	f000 fe06 	bl	8001674 <LCD_DisplayChar>
    LCD_DisplayChar(50, 125, 'O');
 8000a68:	224f      	movs	r2, #79	@ 0x4f
 8000a6a:	217d      	movs	r1, #125	@ 0x7d
 8000a6c:	2032      	movs	r0, #50	@ 0x32
 8000a6e:	f000 fe01 	bl	8001674 <LCD_DisplayChar>
    LCD_DisplayChar(60, 125, 'D');
 8000a72:	2244      	movs	r2, #68	@ 0x44
 8000a74:	217d      	movs	r1, #125	@ 0x7d
 8000a76:	203c      	movs	r0, #60	@ 0x3c
 8000a78:	f000 fdfc 	bl	8001674 <LCD_DisplayChar>
    LCD_DisplayChar(70, 125, 'E');
 8000a7c:	2245      	movs	r2, #69	@ 0x45
 8000a7e:	217d      	movs	r1, #125	@ 0x7d
 8000a80:	2046      	movs	r0, #70	@ 0x46
 8000a82:	f000 fdf7 	bl	8001674 <LCD_DisplayChar>

    LCD_DisplayChar(140, 110, '2');
 8000a86:	2232      	movs	r2, #50	@ 0x32
 8000a88:	216e      	movs	r1, #110	@ 0x6e
 8000a8a:	208c      	movs	r0, #140	@ 0x8c
 8000a8c:	f000 fdf2 	bl	8001674 <LCD_DisplayChar>
    LCD_DisplayChar(155, 110, 'P');
 8000a90:	2250      	movs	r2, #80	@ 0x50
 8000a92:	216e      	movs	r1, #110	@ 0x6e
 8000a94:	209b      	movs	r0, #155	@ 0x9b
 8000a96:	f000 fded 	bl	8001674 <LCD_DisplayChar>
    LCD_DisplayChar(165, 110, 'L');
 8000a9a:	224c      	movs	r2, #76	@ 0x4c
 8000a9c:	216e      	movs	r1, #110	@ 0x6e
 8000a9e:	20a5      	movs	r0, #165	@ 0xa5
 8000aa0:	f000 fde8 	bl	8001674 <LCD_DisplayChar>
    LCD_DisplayChar(175, 110, 'A');
 8000aa4:	2241      	movs	r2, #65	@ 0x41
 8000aa6:	216e      	movs	r1, #110	@ 0x6e
 8000aa8:	20af      	movs	r0, #175	@ 0xaf
 8000aaa:	f000 fde3 	bl	8001674 <LCD_DisplayChar>
    LCD_DisplayChar(185, 110, 'Y');
 8000aae:	2259      	movs	r2, #89	@ 0x59
 8000ab0:	216e      	movs	r1, #110	@ 0x6e
 8000ab2:	20b9      	movs	r0, #185	@ 0xb9
 8000ab4:	f000 fdde 	bl	8001674 <LCD_DisplayChar>
    LCD_DisplayChar(195, 110, 'E');
 8000ab8:	2245      	movs	r2, #69	@ 0x45
 8000aba:	216e      	movs	r1, #110	@ 0x6e
 8000abc:	20c3      	movs	r0, #195	@ 0xc3
 8000abe:	f000 fdd9 	bl	8001674 <LCD_DisplayChar>
    LCD_DisplayChar(205, 110, 'R');
 8000ac2:	2252      	movs	r2, #82	@ 0x52
 8000ac4:	216e      	movs	r1, #110	@ 0x6e
 8000ac6:	20cd      	movs	r0, #205	@ 0xcd
 8000ac8:	f000 fdd4 	bl	8001674 <LCD_DisplayChar>
    LCD_DisplayChar(160, 125, 'M');
 8000acc:	224d      	movs	r2, #77	@ 0x4d
 8000ace:	217d      	movs	r1, #125	@ 0x7d
 8000ad0:	20a0      	movs	r0, #160	@ 0xa0
 8000ad2:	f000 fdcf 	bl	8001674 <LCD_DisplayChar>
    LCD_DisplayChar(170, 125, 'O');
 8000ad6:	224f      	movs	r2, #79	@ 0x4f
 8000ad8:	217d      	movs	r1, #125	@ 0x7d
 8000ada:	20aa      	movs	r0, #170	@ 0xaa
 8000adc:	f000 fdca 	bl	8001674 <LCD_DisplayChar>
    LCD_DisplayChar(180, 125, 'D');
 8000ae0:	2244      	movs	r2, #68	@ 0x44
 8000ae2:	217d      	movs	r1, #125	@ 0x7d
 8000ae4:	20b4      	movs	r0, #180	@ 0xb4
 8000ae6:	f000 fdc5 	bl	8001674 <LCD_DisplayChar>
    LCD_DisplayChar(190, 125, 'E');
 8000aea:	2245      	movs	r2, #69	@ 0x45
 8000aec:	217d      	movs	r1, #125	@ 0x7d
 8000aee:	20be      	movs	r0, #190	@ 0xbe
 8000af0:	f000 fdc0 	bl	8001674 <LCD_DisplayChar>


    LCD_Draw_Circle_Fill(60, (LCD_PIXEL_HEIGHT/2)+20, 40, LCD_COLOR_RED);
 8000af4:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000af8:	2228      	movs	r2, #40	@ 0x28
 8000afa:	21b4      	movs	r1, #180	@ 0xb4
 8000afc:	203c      	movs	r0, #60	@ 0x3c
 8000afe:	f000 fcb5 	bl	800146c <LCD_Draw_Circle_Fill>
    LCD_Draw_Circle_Fill(LCD_PIXEL_WIDTH-60, (LCD_PIXEL_HEIGHT/2)+20, 40, LCD_COLOR_BLUE);
 8000b02:	231f      	movs	r3, #31
 8000b04:	2228      	movs	r2, #40	@ 0x28
 8000b06:	21b4      	movs	r1, #180	@ 0xb4
 8000b08:	20b4      	movs	r0, #180	@ 0xb4
 8000b0a:	f000 fcaf 	bl	800146c <LCD_Draw_Circle_Fill>
}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	20000008 	.word	0x20000008
 8000b18:	20000010 	.word	0x20000010

08000b1c <Screen2_Display>:

void Screen2_Display(void){
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
    LCD_Clear(0, LCD_COLOR_GREY);
 8000b22:	f24f 71de 	movw	r1, #63454	@ 0xf7de
 8000b26:	2000      	movs	r0, #0
 8000b28:	f000 fcf4 	bl	8001514 <LCD_Clear>
    
    LCD_SetFont(&Font16x24);
 8000b2c:	486e      	ldr	r0, [pc, #440]	@ (8000ce8 <Screen2_Display+0x1cc>)
 8000b2e:	f000 fd23 	bl	8001578 <LCD_SetFont>
    LCD_SetTextColor(LCD_COLOR_BLACK);
 8000b32:	2000      	movs	r0, #0
 8000b34:	f000 fd10 	bl	8001558 <LCD_SetTextColor>
    LCD_DisplayChar(20, 20, 'C');
 8000b38:	2243      	movs	r2, #67	@ 0x43
 8000b3a:	2114      	movs	r1, #20
 8000b3c:	2014      	movs	r0, #20
 8000b3e:	f000 fd99 	bl	8001674 <LCD_DisplayChar>
    LCD_DisplayChar(40, 20, 'O');
 8000b42:	224f      	movs	r2, #79	@ 0x4f
 8000b44:	2114      	movs	r1, #20
 8000b46:	2028      	movs	r0, #40	@ 0x28
 8000b48:	f000 fd94 	bl	8001674 <LCD_DisplayChar>
    LCD_DisplayChar(60, 20, 'N');
 8000b4c:	224e      	movs	r2, #78	@ 0x4e
 8000b4e:	2114      	movs	r1, #20
 8000b50:	203c      	movs	r0, #60	@ 0x3c
 8000b52:	f000 fd8f 	bl	8001674 <LCD_DisplayChar>
    LCD_DisplayChar(80, 20, 'N');
 8000b56:	224e      	movs	r2, #78	@ 0x4e
 8000b58:	2114      	movs	r1, #20
 8000b5a:	2050      	movs	r0, #80	@ 0x50
 8000b5c:	f000 fd8a 	bl	8001674 <LCD_DisplayChar>
    LCD_DisplayChar(100, 20, 'E');
 8000b60:	2245      	movs	r2, #69	@ 0x45
 8000b62:	2114      	movs	r1, #20
 8000b64:	2064      	movs	r0, #100	@ 0x64
 8000b66:	f000 fd85 	bl	8001674 <LCD_DisplayChar>
    LCD_DisplayChar(120, 20, 'C');
 8000b6a:	2243      	movs	r2, #67	@ 0x43
 8000b6c:	2114      	movs	r1, #20
 8000b6e:	2078      	movs	r0, #120	@ 0x78
 8000b70:	f000 fd80 	bl	8001674 <LCD_DisplayChar>
    LCD_DisplayChar(140, 20, 'T');
 8000b74:	2254      	movs	r2, #84	@ 0x54
 8000b76:	2114      	movs	r1, #20
 8000b78:	208c      	movs	r0, #140	@ 0x8c
 8000b7a:	f000 fd7b 	bl	8001674 <LCD_DisplayChar>
    LCD_DisplayChar(180, 20, '4');
 8000b7e:	2234      	movs	r2, #52	@ 0x34
 8000b80:	2114      	movs	r1, #20
 8000b82:	20b4      	movs	r0, #180	@ 0xb4
 8000b84:	f000 fd76 	bl	8001674 <LCD_DisplayChar>
    
    for (int i = 0; i<boardColumns; i++){
 8000b88:	2300      	movs	r3, #0
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	e037      	b.n	8000bfe <Screen2_Display+0xe2>
        if (i == chipLoc){
 8000b8e:	4b57      	ldr	r3, [pc, #348]	@ (8000cec <Screen2_Display+0x1d0>)
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	461a      	mov	r2, r3
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d120      	bne.n	8000bdc <Screen2_Display+0xc0>
            if (player1turn){
 8000b9a:	4b55      	ldr	r3, [pc, #340]	@ (8000cf0 <Screen2_Display+0x1d4>)
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d00d      	beq.n	8000bbe <Screen2_Display+0xa2>
                LCD_Draw_Circle_Fill((i*30)+30, 80, 12, LCD_COLOR_BLUE);
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	b29b      	uxth	r3, r3
 8000ba8:	461a      	mov	r2, r3
 8000baa:	0112      	lsls	r2, r2, #4
 8000bac:	1ad3      	subs	r3, r2, r3
 8000bae:	005b      	lsls	r3, r3, #1
 8000bb0:	b298      	uxth	r0, r3
 8000bb2:	231f      	movs	r3, #31
 8000bb4:	220c      	movs	r2, #12
 8000bb6:	2150      	movs	r1, #80	@ 0x50
 8000bb8:	f000 fc58 	bl	800146c <LCD_Draw_Circle_Fill>
 8000bbc:	e01c      	b.n	8000bf8 <Screen2_Display+0xdc>
            }
            else{
                LCD_Draw_Circle_Fill((i*30)+30, 80, 12, LCD_COLOR_RED);
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	b29b      	uxth	r3, r3
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	0112      	lsls	r2, r2, #4
 8000bc8:	1ad3      	subs	r3, r2, r3
 8000bca:	005b      	lsls	r3, r3, #1
 8000bcc:	b298      	uxth	r0, r3
 8000bce:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000bd2:	220c      	movs	r2, #12
 8000bd4:	2150      	movs	r1, #80	@ 0x50
 8000bd6:	f000 fc49 	bl	800146c <LCD_Draw_Circle_Fill>
 8000bda:	e00d      	b.n	8000bf8 <Screen2_Display+0xdc>
            }
        }
        else{
            LCD_Draw_Circle_Fill((i*30)+30, 80, 12, LCD_COLOR_GREY);
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	3301      	adds	r3, #1
 8000be0:	b29b      	uxth	r3, r3
 8000be2:	461a      	mov	r2, r3
 8000be4:	0112      	lsls	r2, r2, #4
 8000be6:	1ad3      	subs	r3, r2, r3
 8000be8:	005b      	lsls	r3, r3, #1
 8000bea:	b298      	uxth	r0, r3
 8000bec:	f24f 73de 	movw	r3, #63454	@ 0xf7de
 8000bf0:	220c      	movs	r2, #12
 8000bf2:	2150      	movs	r1, #80	@ 0x50
 8000bf4:	f000 fc3a 	bl	800146c <LCD_Draw_Circle_Fill>
    for (int i = 0; i<boardColumns; i++){
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	60fb      	str	r3, [r7, #12]
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	2b06      	cmp	r3, #6
 8000c02:	ddc4      	ble.n	8000b8e <Screen2_Display+0x72>
        }
    }

    for (int i = 0; i<boardColumns; i++){
 8000c04:	2300      	movs	r3, #0
 8000c06:	60bb      	str	r3, [r7, #8]
 8000c08:	e065      	b.n	8000cd6 <Screen2_Display+0x1ba>
        for (int j = 0; j<boardRows; j++){
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	607b      	str	r3, [r7, #4]
 8000c0e:	e05c      	b.n	8000cca <Screen2_Display+0x1ae>
            if (gameBoard[i][j] == 1){
 8000c10:	4938      	ldr	r1, [pc, #224]	@ (8000cf4 <Screen2_Display+0x1d8>)
 8000c12:	68ba      	ldr	r2, [r7, #8]
 8000c14:	4613      	mov	r3, r2
 8000c16:	005b      	lsls	r3, r3, #1
 8000c18:	4413      	add	r3, r2
 8000c1a:	005b      	lsls	r3, r3, #1
 8000c1c:	18ca      	adds	r2, r1, r3
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4413      	add	r3, r2
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	2b01      	cmp	r3, #1
 8000c26:	d115      	bne.n	8000c54 <Screen2_Display+0x138>
                LCD_Draw_Circle_Fill((i*30)+30, (j*30)+115, 12, LCD_COLOR_BLUE);
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	b29b      	uxth	r3, r3
 8000c2e:	461a      	mov	r2, r3
 8000c30:	0112      	lsls	r2, r2, #4
 8000c32:	1ad3      	subs	r3, r2, r3
 8000c34:	005b      	lsls	r3, r3, #1
 8000c36:	b298      	uxth	r0, r3
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	b29b      	uxth	r3, r3
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	0112      	lsls	r2, r2, #4
 8000c40:	1ad3      	subs	r3, r2, r3
 8000c42:	005b      	lsls	r3, r3, #1
 8000c44:	b29b      	uxth	r3, r3
 8000c46:	3373      	adds	r3, #115	@ 0x73
 8000c48:	b299      	uxth	r1, r3
 8000c4a:	231f      	movs	r3, #31
 8000c4c:	220c      	movs	r2, #12
 8000c4e:	f000 fc0d 	bl	800146c <LCD_Draw_Circle_Fill>
 8000c52:	e037      	b.n	8000cc4 <Screen2_Display+0x1a8>
            }
            else if (gameBoard[i][j] == 2){
 8000c54:	4927      	ldr	r1, [pc, #156]	@ (8000cf4 <Screen2_Display+0x1d8>)
 8000c56:	68ba      	ldr	r2, [r7, #8]
 8000c58:	4613      	mov	r3, r2
 8000c5a:	005b      	lsls	r3, r3, #1
 8000c5c:	4413      	add	r3, r2
 8000c5e:	005b      	lsls	r3, r3, #1
 8000c60:	18ca      	adds	r2, r1, r3
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4413      	add	r3, r2
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	2b02      	cmp	r3, #2
 8000c6a:	d116      	bne.n	8000c9a <Screen2_Display+0x17e>
                LCD_Draw_Circle_Fill((i*30)+30, (j*30)+115, 12, LCD_COLOR_RED);
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	3301      	adds	r3, #1
 8000c70:	b29b      	uxth	r3, r3
 8000c72:	461a      	mov	r2, r3
 8000c74:	0112      	lsls	r2, r2, #4
 8000c76:	1ad3      	subs	r3, r2, r3
 8000c78:	005b      	lsls	r3, r3, #1
 8000c7a:	b298      	uxth	r0, r3
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	b29b      	uxth	r3, r3
 8000c80:	461a      	mov	r2, r3
 8000c82:	0112      	lsls	r2, r2, #4
 8000c84:	1ad3      	subs	r3, r2, r3
 8000c86:	005b      	lsls	r3, r3, #1
 8000c88:	b29b      	uxth	r3, r3
 8000c8a:	3373      	adds	r3, #115	@ 0x73
 8000c8c:	b299      	uxth	r1, r3
 8000c8e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000c92:	220c      	movs	r2, #12
 8000c94:	f000 fbea 	bl	800146c <LCD_Draw_Circle_Fill>
 8000c98:	e014      	b.n	8000cc4 <Screen2_Display+0x1a8>
            }
            else{
                LCD_Draw_Circle_Fill((i*30)+30, (j*30)+115, 12, LCD_COLOR_BLACK);
 8000c9a:	68bb      	ldr	r3, [r7, #8]
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	b29b      	uxth	r3, r3
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	0112      	lsls	r2, r2, #4
 8000ca4:	1ad3      	subs	r3, r2, r3
 8000ca6:	005b      	lsls	r3, r3, #1
 8000ca8:	b298      	uxth	r0, r3
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	b29b      	uxth	r3, r3
 8000cae:	461a      	mov	r2, r3
 8000cb0:	0112      	lsls	r2, r2, #4
 8000cb2:	1ad3      	subs	r3, r2, r3
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	b29b      	uxth	r3, r3
 8000cb8:	3373      	adds	r3, #115	@ 0x73
 8000cba:	b299      	uxth	r1, r3
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	220c      	movs	r2, #12
 8000cc0:	f000 fbd4 	bl	800146c <LCD_Draw_Circle_Fill>
        for (int j = 0; j<boardRows; j++){
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	607b      	str	r3, [r7, #4]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2b05      	cmp	r3, #5
 8000cce:	dd9f      	ble.n	8000c10 <Screen2_Display+0xf4>
    for (int i = 0; i<boardColumns; i++){
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	60bb      	str	r3, [r7, #8]
 8000cd6:	68bb      	ldr	r3, [r7, #8]
 8000cd8:	2b06      	cmp	r3, #6
 8000cda:	dd96      	ble.n	8000c0a <Screen2_Display+0xee>
            }
        }
    }
}
 8000cdc:	bf00      	nop
 8000cde:	bf00      	nop
 8000ce0:	3710      	adds	r7, #16
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20000008 	.word	0x20000008
 8000cec:	20000000 	.word	0x20000000
 8000cf0:	20000001 	.word	0x20000001
 8000cf4:	20000058 	.word	0x20000058

08000cf8 <Screen3_Display>:

void Screen3_Display(void){
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b086      	sub	sp, #24
 8000cfc:	af00      	add	r7, sp, #0
    LCD_Clear(0, LCD_COLOR_GREY);
 8000cfe:	f24f 71de 	movw	r1, #63454	@ 0xf7de
 8000d02:	2000      	movs	r0, #0
 8000d04:	f000 fc06 	bl	8001514 <LCD_Clear>
    
    LCD_SetFont(&Font16x24);
 8000d08:	48d4      	ldr	r0, [pc, #848]	@ (800105c <Screen3_Display+0x364>)
 8000d0a:	f000 fc35 	bl	8001578 <LCD_SetFont>
    LCD_SetTextColor(LCD_COLOR_BLACK);
 8000d0e:	2000      	movs	r0, #0
 8000d10:	f000 fc22 	bl	8001558 <LCD_SetTextColor>
    LCD_DisplayChar(20, 20, 'C');
 8000d14:	2243      	movs	r2, #67	@ 0x43
 8000d16:	2114      	movs	r1, #20
 8000d18:	2014      	movs	r0, #20
 8000d1a:	f000 fcab 	bl	8001674 <LCD_DisplayChar>
    LCD_DisplayChar(40, 20, 'O');
 8000d1e:	224f      	movs	r2, #79	@ 0x4f
 8000d20:	2114      	movs	r1, #20
 8000d22:	2028      	movs	r0, #40	@ 0x28
 8000d24:	f000 fca6 	bl	8001674 <LCD_DisplayChar>
    LCD_DisplayChar(60, 20, 'N');
 8000d28:	224e      	movs	r2, #78	@ 0x4e
 8000d2a:	2114      	movs	r1, #20
 8000d2c:	203c      	movs	r0, #60	@ 0x3c
 8000d2e:	f000 fca1 	bl	8001674 <LCD_DisplayChar>
    LCD_DisplayChar(80, 20, 'N');
 8000d32:	224e      	movs	r2, #78	@ 0x4e
 8000d34:	2114      	movs	r1, #20
 8000d36:	2050      	movs	r0, #80	@ 0x50
 8000d38:	f000 fc9c 	bl	8001674 <LCD_DisplayChar>
    LCD_DisplayChar(100, 20, 'E');
 8000d3c:	2245      	movs	r2, #69	@ 0x45
 8000d3e:	2114      	movs	r1, #20
 8000d40:	2064      	movs	r0, #100	@ 0x64
 8000d42:	f000 fc97 	bl	8001674 <LCD_DisplayChar>
    LCD_DisplayChar(120, 20, 'C');
 8000d46:	2243      	movs	r2, #67	@ 0x43
 8000d48:	2114      	movs	r1, #20
 8000d4a:	2078      	movs	r0, #120	@ 0x78
 8000d4c:	f000 fc92 	bl	8001674 <LCD_DisplayChar>
    LCD_DisplayChar(140, 20, 'T');
 8000d50:	2254      	movs	r2, #84	@ 0x54
 8000d52:	2114      	movs	r1, #20
 8000d54:	208c      	movs	r0, #140	@ 0x8c
 8000d56:	f000 fc8d 	bl	8001674 <LCD_DisplayChar>
    LCD_DisplayChar(180, 20, '4');
 8000d5a:	2234      	movs	r2, #52	@ 0x34
 8000d5c:	2114      	movs	r1, #20
 8000d5e:	20b4      	movs	r0, #180	@ 0xb4
 8000d60:	f000 fc88 	bl	8001674 <LCD_DisplayChar>

    char score1 = (char)(player1_Score+48);
 8000d64:	4bbe      	ldr	r3, [pc, #760]	@ (8001060 <Screen3_Display+0x368>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	3330      	adds	r3, #48	@ 0x30
 8000d6a:	73fb      	strb	r3, [r7, #15]
	char score2 = (char)(player2_Score+48);
 8000d6c:	4bbd      	ldr	r3, [pc, #756]	@ (8001064 <Screen3_Display+0x36c>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	3330      	adds	r3, #48	@ 0x30
 8000d72:	73bb      	strb	r3, [r7, #14]

    LCD_SetFont(&Font12x12);
 8000d74:	48bc      	ldr	r0, [pc, #752]	@ (8001068 <Screen3_Display+0x370>)
 8000d76:	f000 fbff 	bl	8001578 <LCD_SetFont>
	LCD_DisplayChar(20, 45, 'P');
 8000d7a:	2250      	movs	r2, #80	@ 0x50
 8000d7c:	212d      	movs	r1, #45	@ 0x2d
 8000d7e:	2014      	movs	r0, #20
 8000d80:	f000 fc78 	bl	8001674 <LCD_DisplayChar>
    LCD_DisplayChar(30, 45, 'L');
 8000d84:	224c      	movs	r2, #76	@ 0x4c
 8000d86:	212d      	movs	r1, #45	@ 0x2d
 8000d88:	201e      	movs	r0, #30
 8000d8a:	f000 fc73 	bl	8001674 <LCD_DisplayChar>
    LCD_DisplayChar(40, 45, 'A');
 8000d8e:	2241      	movs	r2, #65	@ 0x41
 8000d90:	212d      	movs	r1, #45	@ 0x2d
 8000d92:	2028      	movs	r0, #40	@ 0x28
 8000d94:	f000 fc6e 	bl	8001674 <LCD_DisplayChar>
    LCD_DisplayChar(50, 45, 'Y');
 8000d98:	2259      	movs	r2, #89	@ 0x59
 8000d9a:	212d      	movs	r1, #45	@ 0x2d
 8000d9c:	2032      	movs	r0, #50	@ 0x32
 8000d9e:	f000 fc69 	bl	8001674 <LCD_DisplayChar>
    LCD_DisplayChar(60, 45, 'E');
 8000da2:	2245      	movs	r2, #69	@ 0x45
 8000da4:	212d      	movs	r1, #45	@ 0x2d
 8000da6:	203c      	movs	r0, #60	@ 0x3c
 8000da8:	f000 fc64 	bl	8001674 <LCD_DisplayChar>
    LCD_DisplayChar(70, 45, 'R');
 8000dac:	2252      	movs	r2, #82	@ 0x52
 8000dae:	212d      	movs	r1, #45	@ 0x2d
 8000db0:	2046      	movs	r0, #70	@ 0x46
 8000db2:	f000 fc5f 	bl	8001674 <LCD_DisplayChar>
    LCD_DisplayChar(85, 45, '1');
 8000db6:	2231      	movs	r2, #49	@ 0x31
 8000db8:	212d      	movs	r1, #45	@ 0x2d
 8000dba:	2055      	movs	r0, #85	@ 0x55
 8000dbc:	f000 fc5a 	bl	8001674 <LCD_DisplayChar>
    LCD_DisplayChar(25, 60, 'S');
 8000dc0:	2253      	movs	r2, #83	@ 0x53
 8000dc2:	213c      	movs	r1, #60	@ 0x3c
 8000dc4:	2019      	movs	r0, #25
 8000dc6:	f000 fc55 	bl	8001674 <LCD_DisplayChar>
    LCD_DisplayChar(35, 60, 'C');
 8000dca:	2243      	movs	r2, #67	@ 0x43
 8000dcc:	213c      	movs	r1, #60	@ 0x3c
 8000dce:	2023      	movs	r0, #35	@ 0x23
 8000dd0:	f000 fc50 	bl	8001674 <LCD_DisplayChar>
    LCD_DisplayChar(45, 60, 'O');
 8000dd4:	224f      	movs	r2, #79	@ 0x4f
 8000dd6:	213c      	movs	r1, #60	@ 0x3c
 8000dd8:	202d      	movs	r0, #45	@ 0x2d
 8000dda:	f000 fc4b 	bl	8001674 <LCD_DisplayChar>
    LCD_DisplayChar(55, 60, 'R');
 8000dde:	2252      	movs	r2, #82	@ 0x52
 8000de0:	213c      	movs	r1, #60	@ 0x3c
 8000de2:	2037      	movs	r0, #55	@ 0x37
 8000de4:	f000 fc46 	bl	8001674 <LCD_DisplayChar>
	LCD_DisplayChar(65, 60, 'E');
 8000de8:	2245      	movs	r2, #69	@ 0x45
 8000dea:	213c      	movs	r1, #60	@ 0x3c
 8000dec:	2041      	movs	r0, #65	@ 0x41
 8000dee:	f000 fc41 	bl	8001674 <LCD_DisplayChar>
	LCD_DisplayChar(75, 60, ':');
 8000df2:	223a      	movs	r2, #58	@ 0x3a
 8000df4:	213c      	movs	r1, #60	@ 0x3c
 8000df6:	204b      	movs	r0, #75	@ 0x4b
 8000df8:	f000 fc3c 	bl	8001674 <LCD_DisplayChar>
	LCD_DisplayChar(85, 60, score1);
 8000dfc:	7bfb      	ldrb	r3, [r7, #15]
 8000dfe:	461a      	mov	r2, r3
 8000e00:	213c      	movs	r1, #60	@ 0x3c
 8000e02:	2055      	movs	r0, #85	@ 0x55
 8000e04:	f000 fc36 	bl	8001674 <LCD_DisplayChar>

    LCD_DisplayChar(140, 45, 'P');
 8000e08:	2250      	movs	r2, #80	@ 0x50
 8000e0a:	212d      	movs	r1, #45	@ 0x2d
 8000e0c:	208c      	movs	r0, #140	@ 0x8c
 8000e0e:	f000 fc31 	bl	8001674 <LCD_DisplayChar>
    LCD_DisplayChar(150, 45, 'L');
 8000e12:	224c      	movs	r2, #76	@ 0x4c
 8000e14:	212d      	movs	r1, #45	@ 0x2d
 8000e16:	2096      	movs	r0, #150	@ 0x96
 8000e18:	f000 fc2c 	bl	8001674 <LCD_DisplayChar>
    LCD_DisplayChar(160, 45, 'A');
 8000e1c:	2241      	movs	r2, #65	@ 0x41
 8000e1e:	212d      	movs	r1, #45	@ 0x2d
 8000e20:	20a0      	movs	r0, #160	@ 0xa0
 8000e22:	f000 fc27 	bl	8001674 <LCD_DisplayChar>
    LCD_DisplayChar(170, 45, 'Y');
 8000e26:	2259      	movs	r2, #89	@ 0x59
 8000e28:	212d      	movs	r1, #45	@ 0x2d
 8000e2a:	20aa      	movs	r0, #170	@ 0xaa
 8000e2c:	f000 fc22 	bl	8001674 <LCD_DisplayChar>
    LCD_DisplayChar(180, 45, 'E');
 8000e30:	2245      	movs	r2, #69	@ 0x45
 8000e32:	212d      	movs	r1, #45	@ 0x2d
 8000e34:	20b4      	movs	r0, #180	@ 0xb4
 8000e36:	f000 fc1d 	bl	8001674 <LCD_DisplayChar>
    LCD_DisplayChar(190, 45, 'R');
 8000e3a:	2252      	movs	r2, #82	@ 0x52
 8000e3c:	212d      	movs	r1, #45	@ 0x2d
 8000e3e:	20be      	movs	r0, #190	@ 0xbe
 8000e40:	f000 fc18 	bl	8001674 <LCD_DisplayChar>
    LCD_DisplayChar(205, 45, '2');
 8000e44:	2232      	movs	r2, #50	@ 0x32
 8000e46:	212d      	movs	r1, #45	@ 0x2d
 8000e48:	20cd      	movs	r0, #205	@ 0xcd
 8000e4a:	f000 fc13 	bl	8001674 <LCD_DisplayChar>
    LCD_DisplayChar(145, 60, 'S');
 8000e4e:	2253      	movs	r2, #83	@ 0x53
 8000e50:	213c      	movs	r1, #60	@ 0x3c
 8000e52:	2091      	movs	r0, #145	@ 0x91
 8000e54:	f000 fc0e 	bl	8001674 <LCD_DisplayChar>
    LCD_DisplayChar(155, 60, 'C');
 8000e58:	2243      	movs	r2, #67	@ 0x43
 8000e5a:	213c      	movs	r1, #60	@ 0x3c
 8000e5c:	209b      	movs	r0, #155	@ 0x9b
 8000e5e:	f000 fc09 	bl	8001674 <LCD_DisplayChar>
    LCD_DisplayChar(165, 60, 'O');
 8000e62:	224f      	movs	r2, #79	@ 0x4f
 8000e64:	213c      	movs	r1, #60	@ 0x3c
 8000e66:	20a5      	movs	r0, #165	@ 0xa5
 8000e68:	f000 fc04 	bl	8001674 <LCD_DisplayChar>
    LCD_DisplayChar(175, 60, 'R');
 8000e6c:	2252      	movs	r2, #82	@ 0x52
 8000e6e:	213c      	movs	r1, #60	@ 0x3c
 8000e70:	20af      	movs	r0, #175	@ 0xaf
 8000e72:	f000 fbff 	bl	8001674 <LCD_DisplayChar>
	LCD_DisplayChar(185, 60, 'E');
 8000e76:	2245      	movs	r2, #69	@ 0x45
 8000e78:	213c      	movs	r1, #60	@ 0x3c
 8000e7a:	20b9      	movs	r0, #185	@ 0xb9
 8000e7c:	f000 fbfa 	bl	8001674 <LCD_DisplayChar>
	LCD_DisplayChar(195, 60, ':');
 8000e80:	223a      	movs	r2, #58	@ 0x3a
 8000e82:	213c      	movs	r1, #60	@ 0x3c
 8000e84:	20c3      	movs	r0, #195	@ 0xc3
 8000e86:	f000 fbf5 	bl	8001674 <LCD_DisplayChar>
	LCD_DisplayChar(205, 60, score2);
 8000e8a:	7bbb      	ldrb	r3, [r7, #14]
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	213c      	movs	r1, #60	@ 0x3c
 8000e90:	20cd      	movs	r0, #205	@ 0xcd
 8000e92:	f000 fbef 	bl	8001674 <LCD_DisplayChar>

	LCD_DisplayChar(40, 80, 'T');
 8000e96:	2254      	movs	r2, #84	@ 0x54
 8000e98:	2150      	movs	r1, #80	@ 0x50
 8000e9a:	2028      	movs	r0, #40	@ 0x28
 8000e9c:	f000 fbea 	bl	8001674 <LCD_DisplayChar>
	LCD_DisplayChar(50, 80, 'I');
 8000ea0:	2249      	movs	r2, #73	@ 0x49
 8000ea2:	2150      	movs	r1, #80	@ 0x50
 8000ea4:	2032      	movs	r0, #50	@ 0x32
 8000ea6:	f000 fbe5 	bl	8001674 <LCD_DisplayChar>
	LCD_DisplayChar(55, 80, 'M');
 8000eaa:	224d      	movs	r2, #77	@ 0x4d
 8000eac:	2150      	movs	r1, #80	@ 0x50
 8000eae:	2037      	movs	r0, #55	@ 0x37
 8000eb0:	f000 fbe0 	bl	8001674 <LCD_DisplayChar>
	LCD_DisplayChar(65, 80, 'E');
 8000eb4:	2245      	movs	r2, #69	@ 0x45
 8000eb6:	2150      	movs	r1, #80	@ 0x50
 8000eb8:	2041      	movs	r0, #65	@ 0x41
 8000eba:	f000 fbdb 	bl	8001674 <LCD_DisplayChar>
	LCD_DisplayChar(80, 80, 'P');
 8000ebe:	2250      	movs	r2, #80	@ 0x50
 8000ec0:	2150      	movs	r1, #80	@ 0x50
 8000ec2:	2050      	movs	r0, #80	@ 0x50
 8000ec4:	f000 fbd6 	bl	8001674 <LCD_DisplayChar>
	LCD_DisplayChar(90, 80, 'L');
 8000ec8:	224c      	movs	r2, #76	@ 0x4c
 8000eca:	2150      	movs	r1, #80	@ 0x50
 8000ecc:	205a      	movs	r0, #90	@ 0x5a
 8000ece:	f000 fbd1 	bl	8001674 <LCD_DisplayChar>
	LCD_DisplayChar(100, 80, 'A');
 8000ed2:	2241      	movs	r2, #65	@ 0x41
 8000ed4:	2150      	movs	r1, #80	@ 0x50
 8000ed6:	2064      	movs	r0, #100	@ 0x64
 8000ed8:	f000 fbcc 	bl	8001674 <LCD_DisplayChar>
	LCD_DisplayChar(110, 80, 'Y');
 8000edc:	2259      	movs	r2, #89	@ 0x59
 8000ede:	2150      	movs	r1, #80	@ 0x50
 8000ee0:	206e      	movs	r0, #110	@ 0x6e
 8000ee2:	f000 fbc7 	bl	8001674 <LCD_DisplayChar>
	LCD_DisplayChar(120, 80, 'E');
 8000ee6:	2245      	movs	r2, #69	@ 0x45
 8000ee8:	2150      	movs	r1, #80	@ 0x50
 8000eea:	2078      	movs	r0, #120	@ 0x78
 8000eec:	f000 fbc2 	bl	8001674 <LCD_DisplayChar>
	LCD_DisplayChar(130, 80, 'D');
 8000ef0:	2244      	movs	r2, #68	@ 0x44
 8000ef2:	2150      	movs	r1, #80	@ 0x50
 8000ef4:	2082      	movs	r0, #130	@ 0x82
 8000ef6:	f000 fbbd 	bl	8001674 <LCD_DisplayChar>
	uint32_t seconds = timePlayed/1000;
 8000efa:	4b5c      	ldr	r3, [pc, #368]	@ (800106c <Screen3_Display+0x374>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a5c      	ldr	r2, [pc, #368]	@ (8001070 <Screen3_Display+0x378>)
 8000f00:	fba2 2303 	umull	r2, r3, r2, r3
 8000f04:	099b      	lsrs	r3, r3, #6
 8000f06:	60bb      	str	r3, [r7, #8]
	uint32_t minutes = seconds/60;
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	4a5a      	ldr	r2, [pc, #360]	@ (8001074 <Screen3_Display+0x37c>)
 8000f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8000f10:	095b      	lsrs	r3, r3, #5
 8000f12:	607b      	str	r3, [r7, #4]
	seconds = seconds-(minutes*60);
 8000f14:	687a      	ldr	r2, [r7, #4]
 8000f16:	4613      	mov	r3, r2
 8000f18:	011b      	lsls	r3, r3, #4
 8000f1a:	1a9b      	subs	r3, r3, r2
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	461a      	mov	r2, r3
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	1a9b      	subs	r3, r3, r2
 8000f24:	60bb      	str	r3, [r7, #8]
	char msb_min = (char)((minutes/10)+48);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4a53      	ldr	r2, [pc, #332]	@ (8001078 <Screen3_Display+0x380>)
 8000f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f2e:	08db      	lsrs	r3, r3, #3
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	3330      	adds	r3, #48	@ 0x30
 8000f34:	70fb      	strb	r3, [r7, #3]
	char lsb_min = (char)((minutes-((minutes/10)*10))+48);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	b2da      	uxtb	r2, r3
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	494e      	ldr	r1, [pc, #312]	@ (8001078 <Screen3_Display+0x380>)
 8000f3e:	fba1 1303 	umull	r1, r3, r1, r3
 8000f42:	08db      	lsrs	r3, r3, #3
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	4619      	mov	r1, r3
 8000f48:	0089      	lsls	r1, r1, #2
 8000f4a:	440b      	add	r3, r1
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	1ad3      	subs	r3, r2, r3
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	3330      	adds	r3, #48	@ 0x30
 8000f56:	70bb      	strb	r3, [r7, #2]
	char msb_sec = (char)((seconds/10)+48);
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	4a47      	ldr	r2, [pc, #284]	@ (8001078 <Screen3_Display+0x380>)
 8000f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8000f60:	08db      	lsrs	r3, r3, #3
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	3330      	adds	r3, #48	@ 0x30
 8000f66:	707b      	strb	r3, [r7, #1]
	char lsb_sec = (char)((seconds-((seconds/10)*10))+48);
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	b2da      	uxtb	r2, r3
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	4942      	ldr	r1, [pc, #264]	@ (8001078 <Screen3_Display+0x380>)
 8000f70:	fba1 1303 	umull	r1, r3, r1, r3
 8000f74:	08db      	lsrs	r3, r3, #3
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	4619      	mov	r1, r3
 8000f7a:	0089      	lsls	r1, r1, #2
 8000f7c:	440b      	add	r3, r1
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	1ad3      	subs	r3, r2, r3
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	3330      	adds	r3, #48	@ 0x30
 8000f88:	703b      	strb	r3, [r7, #0]
	LCD_DisplayChar(150, 80, msb_min);
 8000f8a:	78fb      	ldrb	r3, [r7, #3]
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	2150      	movs	r1, #80	@ 0x50
 8000f90:	2096      	movs	r0, #150	@ 0x96
 8000f92:	f000 fb6f 	bl	8001674 <LCD_DisplayChar>
	LCD_DisplayChar(160, 80, lsb_min);
 8000f96:	78bb      	ldrb	r3, [r7, #2]
 8000f98:	461a      	mov	r2, r3
 8000f9a:	2150      	movs	r1, #80	@ 0x50
 8000f9c:	20a0      	movs	r0, #160	@ 0xa0
 8000f9e:	f000 fb69 	bl	8001674 <LCD_DisplayChar>
	LCD_DisplayChar(165, 80, ':');
 8000fa2:	223a      	movs	r2, #58	@ 0x3a
 8000fa4:	2150      	movs	r1, #80	@ 0x50
 8000fa6:	20a5      	movs	r0, #165	@ 0xa5
 8000fa8:	f000 fb64 	bl	8001674 <LCD_DisplayChar>
	LCD_DisplayChar(170, 80, msb_sec);
 8000fac:	787b      	ldrb	r3, [r7, #1]
 8000fae:	461a      	mov	r2, r3
 8000fb0:	2150      	movs	r1, #80	@ 0x50
 8000fb2:	20aa      	movs	r0, #170	@ 0xaa
 8000fb4:	f000 fb5e 	bl	8001674 <LCD_DisplayChar>
	LCD_DisplayChar(180, 80, lsb_sec);
 8000fb8:	783b      	ldrb	r3, [r7, #0]
 8000fba:	461a      	mov	r2, r3
 8000fbc:	2150      	movs	r1, #80	@ 0x50
 8000fbe:	20b4      	movs	r0, #180	@ 0xb4
 8000fc0:	f000 fb58 	bl	8001674 <LCD_DisplayChar>

    for (int i = 0; i<boardColumns; i++){
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	617b      	str	r3, [r7, #20]
 8000fc8:	e078      	b.n	80010bc <Screen3_Display+0x3c4>
        for (int j = 0; j<boardRows; j++){
 8000fca:	2300      	movs	r3, #0
 8000fcc:	613b      	str	r3, [r7, #16]
 8000fce:	e06f      	b.n	80010b0 <Screen3_Display+0x3b8>
            if (gameBoard[i][j] == 1){
 8000fd0:	492a      	ldr	r1, [pc, #168]	@ (800107c <Screen3_Display+0x384>)
 8000fd2:	697a      	ldr	r2, [r7, #20]
 8000fd4:	4613      	mov	r3, r2
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	4413      	add	r3, r2
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	18ca      	adds	r2, r1, r3
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d115      	bne.n	8001014 <Screen3_Display+0x31c>
                LCD_Draw_Circle_Fill((i*30)+30, (j*30)+115, 12, LCD_COLOR_BLUE);
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	3301      	adds	r3, #1
 8000fec:	b29b      	uxth	r3, r3
 8000fee:	461a      	mov	r2, r3
 8000ff0:	0112      	lsls	r2, r2, #4
 8000ff2:	1ad3      	subs	r3, r2, r3
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	b298      	uxth	r0, r3
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	b29b      	uxth	r3, r3
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	0112      	lsls	r2, r2, #4
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	b29b      	uxth	r3, r3
 8001006:	3373      	adds	r3, #115	@ 0x73
 8001008:	b299      	uxth	r1, r3
 800100a:	231f      	movs	r3, #31
 800100c:	220c      	movs	r2, #12
 800100e:	f000 fa2d 	bl	800146c <LCD_Draw_Circle_Fill>
 8001012:	e04a      	b.n	80010aa <Screen3_Display+0x3b2>
            }
            else if (gameBoard[i][j] == 2){
 8001014:	4919      	ldr	r1, [pc, #100]	@ (800107c <Screen3_Display+0x384>)
 8001016:	697a      	ldr	r2, [r7, #20]
 8001018:	4613      	mov	r3, r2
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	4413      	add	r3, r2
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	18ca      	adds	r2, r1, r3
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	4413      	add	r3, r2
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	2b02      	cmp	r3, #2
 800102a:	d129      	bne.n	8001080 <Screen3_Display+0x388>
                LCD_Draw_Circle_Fill((i*30)+30, (j*30)+115, 12, LCD_COLOR_RED);
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	3301      	adds	r3, #1
 8001030:	b29b      	uxth	r3, r3
 8001032:	461a      	mov	r2, r3
 8001034:	0112      	lsls	r2, r2, #4
 8001036:	1ad3      	subs	r3, r2, r3
 8001038:	005b      	lsls	r3, r3, #1
 800103a:	b298      	uxth	r0, r3
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	b29b      	uxth	r3, r3
 8001040:	461a      	mov	r2, r3
 8001042:	0112      	lsls	r2, r2, #4
 8001044:	1ad3      	subs	r3, r2, r3
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	b29b      	uxth	r3, r3
 800104a:	3373      	adds	r3, #115	@ 0x73
 800104c:	b299      	uxth	r1, r3
 800104e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001052:	220c      	movs	r2, #12
 8001054:	f000 fa0a 	bl	800146c <LCD_Draw_Circle_Fill>
 8001058:	e027      	b.n	80010aa <Screen3_Display+0x3b2>
 800105a:	bf00      	nop
 800105c:	20000008 	.word	0x20000008
 8001060:	20000045 	.word	0x20000045
 8001064:	20000046 	.word	0x20000046
 8001068:	20000010 	.word	0x20000010
 800106c:	20000050 	.word	0x20000050
 8001070:	10624dd3 	.word	0x10624dd3
 8001074:	88888889 	.word	0x88888889
 8001078:	cccccccd 	.word	0xcccccccd
 800107c:	20000058 	.word	0x20000058
            }
            else{
                LCD_Draw_Circle_Fill((i*30)+30, (j*30)+115, 12, LCD_COLOR_BLACK);
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	3301      	adds	r3, #1
 8001084:	b29b      	uxth	r3, r3
 8001086:	461a      	mov	r2, r3
 8001088:	0112      	lsls	r2, r2, #4
 800108a:	1ad3      	subs	r3, r2, r3
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	b298      	uxth	r0, r3
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	b29b      	uxth	r3, r3
 8001094:	461a      	mov	r2, r3
 8001096:	0112      	lsls	r2, r2, #4
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	b29b      	uxth	r3, r3
 800109e:	3373      	adds	r3, #115	@ 0x73
 80010a0:	b299      	uxth	r1, r3
 80010a2:	2300      	movs	r3, #0
 80010a4:	220c      	movs	r2, #12
 80010a6:	f000 f9e1 	bl	800146c <LCD_Draw_Circle_Fill>
        for (int j = 0; j<boardRows; j++){
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	3301      	adds	r3, #1
 80010ae:	613b      	str	r3, [r7, #16]
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	2b05      	cmp	r3, #5
 80010b4:	dd8c      	ble.n	8000fd0 <Screen3_Display+0x2d8>
    for (int i = 0; i<boardColumns; i++){
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	3301      	adds	r3, #1
 80010ba:	617b      	str	r3, [r7, #20]
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	2b06      	cmp	r3, #6
 80010c0:	dd83      	ble.n	8000fca <Screen3_Display+0x2d2>
            }
        }
    }
    while (winner != 0);
 80010c2:	bf00      	nop
 80010c4:	4b04      	ldr	r3, [pc, #16]	@ (80010d8 <Screen3_Display+0x3e0>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d1fb      	bne.n	80010c4 <Screen3_Display+0x3cc>
    playGame();
 80010cc:	f7ff fa4e 	bl	800056c <playGame>
}
 80010d0:	bf00      	nop
 80010d2:	3718      	adds	r7, #24
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	20000044 	.word	0x20000044

080010dc <EXTI0_IRQHandler>:
		}
	}
}

	
void EXTI0_IRQHandler(){
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 80010e0:	2006      	movs	r0, #6
 80010e2:	f001 fdec 	bl	8002cbe <HAL_NVIC_DisableIRQ>
	if(winner == 0){
 80010e6:	4b08      	ldr	r3, [pc, #32]	@ (8001108 <EXTI0_IRQHandler+0x2c>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d102      	bne.n	80010f4 <EXTI0_IRQHandler+0x18>
		drop();
 80010ee:	f7ff fae1 	bl	80006b4 <drop>
 80010f2:	e001      	b.n	80010f8 <EXTI0_IRQHandler+0x1c>
	}
	else{
		newGame();
 80010f4:	f7ff fa9e 	bl	8000634 <newGame>
	}
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);
 80010f8:	4b04      	ldr	r3, [pc, #16]	@ (800110c <EXTI0_IRQHandler+0x30>)
 80010fa:	2201      	movs	r2, #1
 80010fc:	615a      	str	r2, [r3, #20]
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80010fe:	2006      	movs	r0, #6
 8001100:	f001 fdcf 	bl	8002ca2 <HAL_NVIC_EnableIRQ>
}
 8001104:	bf00      	nop
 8001106:	bd80      	pop	{r7, pc}
 8001108:	20000044 	.word	0x20000044
 800110c:	40013c00 	.word	0x40013c00

08001110 <Button_Init_Interrupt>:
#include "Button_Driver.h"



void Button_Init_Interrupt(){
 8001110:	b580      	push	{r7, lr}
 8001112:	b086      	sub	sp, #24
 8001114:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef PinConfig;
	PinConfig.Mode = GPIO_MODE_IT_RISING;
 8001116:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800111a:	60bb      	str	r3, [r7, #8]
	PinConfig.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800111c:	2301      	movs	r3, #1
 800111e:	613b      	str	r3, [r7, #16]
	PinConfig.Pull = GPIO_NOPULL;
 8001120:	2300      	movs	r3, #0
 8001122:	60fb      	str	r3, [r7, #12]
	PinConfig.Pin = GPIO_PIN_0;
 8001124:	2301      	movs	r3, #1
 8001126:	607b      	str	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001128:	2300      	movs	r3, #0
 800112a:	603b      	str	r3, [r7, #0]
 800112c:	4b0b      	ldr	r3, [pc, #44]	@ (800115c <Button_Init_Interrupt+0x4c>)
 800112e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001130:	4a0a      	ldr	r2, [pc, #40]	@ (800115c <Button_Init_Interrupt+0x4c>)
 8001132:	f043 0301 	orr.w	r3, r3, #1
 8001136:	6313      	str	r3, [r2, #48]	@ 0x30
 8001138:	4b08      	ldr	r3, [pc, #32]	@ (800115c <Button_Init_Interrupt+0x4c>)
 800113a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113c:	f003 0301 	and.w	r3, r3, #1
 8001140:	603b      	str	r3, [r7, #0]
 8001142:	683b      	ldr	r3, [r7, #0]
	HAL_GPIO_Init(GPIOA, &PinConfig);
 8001144:	1d3b      	adds	r3, r7, #4
 8001146:	4619      	mov	r1, r3
 8001148:	4805      	ldr	r0, [pc, #20]	@ (8001160 <Button_Init_Interrupt+0x50>)
 800114a:	f001 fdd3 	bl	8002cf4 <HAL_GPIO_Init>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800114e:	2006      	movs	r0, #6
 8001150:	f001 fda7 	bl	8002ca2 <HAL_NVIC_EnableIRQ>
}
 8001154:	bf00      	nop
 8001156:	3718      	adds	r7, #24
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	40023800 	.word	0x40023800
 8001160:	40020000 	.word	0x40020000

08001164 <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b08c      	sub	sp, #48	@ 0x30
 8001168:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	61bb      	str	r3, [r7, #24]
 800116e:	4b5a      	ldr	r3, [pc, #360]	@ (80012d8 <LCD_GPIO_Init+0x174>)
 8001170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001172:	4a59      	ldr	r2, [pc, #356]	@ (80012d8 <LCD_GPIO_Init+0x174>)
 8001174:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001178:	6453      	str	r3, [r2, #68]	@ 0x44
 800117a:	4b57      	ldr	r3, [pc, #348]	@ (80012d8 <LCD_GPIO_Init+0x174>)
 800117c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800117e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001182:	61bb      	str	r3, [r7, #24]
 8001184:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001186:	2300      	movs	r3, #0
 8001188:	617b      	str	r3, [r7, #20]
 800118a:	4b53      	ldr	r3, [pc, #332]	@ (80012d8 <LCD_GPIO_Init+0x174>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118e:	4a52      	ldr	r2, [pc, #328]	@ (80012d8 <LCD_GPIO_Init+0x174>)
 8001190:	f043 0301 	orr.w	r3, r3, #1
 8001194:	6313      	str	r3, [r2, #48]	@ 0x30
 8001196:	4b50      	ldr	r3, [pc, #320]	@ (80012d8 <LCD_GPIO_Init+0x174>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119a:	f003 0301 	and.w	r3, r3, #1
 800119e:	617b      	str	r3, [r7, #20]
 80011a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	613b      	str	r3, [r7, #16]
 80011a6:	4b4c      	ldr	r3, [pc, #304]	@ (80012d8 <LCD_GPIO_Init+0x174>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011aa:	4a4b      	ldr	r2, [pc, #300]	@ (80012d8 <LCD_GPIO_Init+0x174>)
 80011ac:	f043 0302 	orr.w	r3, r3, #2
 80011b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011b2:	4b49      	ldr	r3, [pc, #292]	@ (80012d8 <LCD_GPIO_Init+0x174>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b6:	f003 0302 	and.w	r3, r3, #2
 80011ba:	613b      	str	r3, [r7, #16]
 80011bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	60fb      	str	r3, [r7, #12]
 80011c2:	4b45      	ldr	r3, [pc, #276]	@ (80012d8 <LCD_GPIO_Init+0x174>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c6:	4a44      	ldr	r2, [pc, #272]	@ (80012d8 <LCD_GPIO_Init+0x174>)
 80011c8:	f043 0304 	orr.w	r3, r3, #4
 80011cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ce:	4b42      	ldr	r3, [pc, #264]	@ (80012d8 <LCD_GPIO_Init+0x174>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d2:	f003 0304 	and.w	r3, r3, #4
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	60bb      	str	r3, [r7, #8]
 80011de:	4b3e      	ldr	r3, [pc, #248]	@ (80012d8 <LCD_GPIO_Init+0x174>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e2:	4a3d      	ldr	r2, [pc, #244]	@ (80012d8 <LCD_GPIO_Init+0x174>)
 80011e4:	f043 0308 	orr.w	r3, r3, #8
 80011e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ea:	4b3b      	ldr	r3, [pc, #236]	@ (80012d8 <LCD_GPIO_Init+0x174>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ee:	f003 0308 	and.w	r3, r3, #8
 80011f2:	60bb      	str	r3, [r7, #8]
 80011f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	607b      	str	r3, [r7, #4]
 80011fa:	4b37      	ldr	r3, [pc, #220]	@ (80012d8 <LCD_GPIO_Init+0x174>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fe:	4a36      	ldr	r2, [pc, #216]	@ (80012d8 <LCD_GPIO_Init+0x174>)
 8001200:	f043 0320 	orr.w	r3, r3, #32
 8001204:	6313      	str	r3, [r2, #48]	@ 0x30
 8001206:	4b34      	ldr	r3, [pc, #208]	@ (80012d8 <LCD_GPIO_Init+0x174>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120a:	f003 0320 	and.w	r3, r3, #32
 800120e:	607b      	str	r3, [r7, #4]
 8001210:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	603b      	str	r3, [r7, #0]
 8001216:	4b30      	ldr	r3, [pc, #192]	@ (80012d8 <LCD_GPIO_Init+0x174>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121a:	4a2f      	ldr	r2, [pc, #188]	@ (80012d8 <LCD_GPIO_Init+0x174>)
 800121c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001220:	6313      	str	r3, [r2, #48]	@ 0x30
 8001222:	4b2d      	ldr	r3, [pc, #180]	@ (80012d8 <LCD_GPIO_Init+0x174>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001226:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800122a:	603b      	str	r3, [r7, #0]
 800122c:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 800122e:	f641 0358 	movw	r3, #6232	@ 0x1858
 8001232:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8001234:	2302      	movs	r3, #2
 8001236:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001238:	2300      	movs	r3, #0
 800123a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800123c:	2302      	movs	r3, #2
 800123e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8001240:	230e      	movs	r3, #14
 8001242:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001244:	f107 031c 	add.w	r3, r7, #28
 8001248:	4619      	mov	r1, r3
 800124a:	4824      	ldr	r0, [pc, #144]	@ (80012dc <LCD_GPIO_Init+0x178>)
 800124c:	f001 fd52 	bl	8002cf4 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8001250:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001254:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001256:	f107 031c 	add.w	r3, r7, #28
 800125a:	4619      	mov	r1, r3
 800125c:	4820      	ldr	r0, [pc, #128]	@ (80012e0 <LCD_GPIO_Init+0x17c>)
 800125e:	f001 fd49 	bl	8002cf4 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8001262:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8001266:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001268:	f107 031c 	add.w	r3, r7, #28
 800126c:	4619      	mov	r1, r3
 800126e:	481d      	ldr	r0, [pc, #116]	@ (80012e4 <LCD_GPIO_Init+0x180>)
 8001270:	f001 fd40 	bl	8002cf4 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8001274:	2348      	movs	r3, #72	@ 0x48
 8001276:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001278:	f107 031c 	add.w	r3, r7, #28
 800127c:	4619      	mov	r1, r3
 800127e:	481a      	ldr	r0, [pc, #104]	@ (80012e8 <LCD_GPIO_Init+0x184>)
 8001280:	f001 fd38 	bl	8002cf4 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8001284:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001288:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 800128a:	f107 031c 	add.w	r3, r7, #28
 800128e:	4619      	mov	r1, r3
 8001290:	4816      	ldr	r0, [pc, #88]	@ (80012ec <LCD_GPIO_Init+0x188>)
 8001292:	f001 fd2f 	bl	8002cf4 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8001296:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 800129a:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800129c:	f107 031c 	add.w	r3, r7, #28
 80012a0:	4619      	mov	r1, r3
 80012a2:	4813      	ldr	r0, [pc, #76]	@ (80012f0 <LCD_GPIO_Init+0x18c>)
 80012a4:	f001 fd26 	bl	8002cf4 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80012a8:	2303      	movs	r3, #3
 80012aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 80012ac:	2309      	movs	r3, #9
 80012ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80012b0:	f107 031c 	add.w	r3, r7, #28
 80012b4:	4619      	mov	r1, r3
 80012b6:	480a      	ldr	r0, [pc, #40]	@ (80012e0 <LCD_GPIO_Init+0x17c>)
 80012b8:	f001 fd1c 	bl	8002cf4 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 80012bc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80012c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80012c2:	f107 031c 	add.w	r3, r7, #28
 80012c6:	4619      	mov	r1, r3
 80012c8:	4809      	ldr	r0, [pc, #36]	@ (80012f0 <LCD_GPIO_Init+0x18c>)
 80012ca:	f001 fd13 	bl	8002cf4 <HAL_GPIO_Init>
}
 80012ce:	bf00      	nop
 80012d0:	3730      	adds	r7, #48	@ 0x30
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40023800 	.word	0x40023800
 80012dc:	40020000 	.word	0x40020000
 80012e0:	40020400 	.word	0x40020400
 80012e4:	40020800 	.word	0x40020800
 80012e8:	40020c00 	.word	0x40020c00
 80012ec:	40021400 	.word	0x40021400
 80012f0:	40021800 	.word	0x40021800

080012f4 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b090      	sub	sp, #64	@ 0x40
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4603      	mov	r3, r0
 80012fc:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 80012fe:	2300      	movs	r3, #0
 8001300:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 8001302:	23f0      	movs	r3, #240	@ 0xf0
 8001304:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 8001306:	2300      	movs	r3, #0
 8001308:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 800130a:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800130e:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 8001310:	2302      	movs	r3, #2
 8001312:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8001314:	23ff      	movs	r3, #255	@ 0xff
 8001316:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8001318:	2300      	movs	r3, #0
 800131a:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800131c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001320:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001322:	2305      	movs	r3, #5
 8001324:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 8001326:	79fb      	ldrb	r3, [r7, #7]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d101      	bne.n	8001330 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 800132c:	4b0f      	ldr	r3, [pc, #60]	@ (800136c <LTCD_Layer_Init+0x78>)
 800132e:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 8001330:	23f0      	movs	r3, #240	@ 0xf0
 8001332:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8001334:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001338:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 800133a:	2300      	movs	r3, #0
 800133c:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8001340:	2300      	movs	r3, #0
 8001342:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 8001346:	2300      	movs	r3, #0
 8001348:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 800134c:	79fa      	ldrb	r2, [r7, #7]
 800134e:	f107 030c 	add.w	r3, r7, #12
 8001352:	4619      	mov	r1, r3
 8001354:	4806      	ldr	r0, [pc, #24]	@ (8001370 <LTCD_Layer_Init+0x7c>)
 8001356:	f003 f893 	bl	8004480 <HAL_LTDC_ConfigLayer>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 8001360:	f000 f9aa 	bl	80016b8 <LCD_Error_Handler>
	}
}
 8001364:	bf00      	nop
 8001366:	3740      	adds	r7, #64	@ 0x40
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	20000160 	.word	0x20000160
 8001370:	20000084 	.word	0x20000084

08001374 <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 8001378:	4b2a      	ldr	r3, [pc, #168]	@ (8001424 <LTCD__Init+0xb0>)
 800137a:	4a2b      	ldr	r2, [pc, #172]	@ (8001428 <LTCD__Init+0xb4>)
 800137c:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 800137e:	4b29      	ldr	r3, [pc, #164]	@ (8001424 <LTCD__Init+0xb0>)
 8001380:	2209      	movs	r2, #9
 8001382:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 8001384:	4b27      	ldr	r3, [pc, #156]	@ (8001424 <LTCD__Init+0xb0>)
 8001386:	2201      	movs	r2, #1
 8001388:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 800138a:	4b26      	ldr	r3, [pc, #152]	@ (8001424 <LTCD__Init+0xb0>)
 800138c:	221d      	movs	r2, #29
 800138e:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8001390:	4b24      	ldr	r3, [pc, #144]	@ (8001424 <LTCD__Init+0xb0>)
 8001392:	2203      	movs	r2, #3
 8001394:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 8001396:	4b23      	ldr	r3, [pc, #140]	@ (8001424 <LTCD__Init+0xb0>)
 8001398:	f240 120d 	movw	r2, #269	@ 0x10d
 800139c:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 800139e:	4b21      	ldr	r3, [pc, #132]	@ (8001424 <LTCD__Init+0xb0>)
 80013a0:	f240 1243 	movw	r2, #323	@ 0x143
 80013a4:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 80013a6:	4b1f      	ldr	r3, [pc, #124]	@ (8001424 <LTCD__Init+0xb0>)
 80013a8:	f240 1217 	movw	r2, #279	@ 0x117
 80013ac:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 80013ae:	4b1d      	ldr	r3, [pc, #116]	@ (8001424 <LTCD__Init+0xb0>)
 80013b0:	f240 1247 	movw	r2, #327	@ 0x147
 80013b4:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 80013b6:	4b1b      	ldr	r3, [pc, #108]	@ (8001424 <LTCD__Init+0xb0>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 80013be:	4b19      	ldr	r3, [pc, #100]	@ (8001424 <LTCD__Init+0xb0>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 80013c6:	4b17      	ldr	r3, [pc, #92]	@ (8001424 <LTCD__Init+0xb0>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80013ce:	4b17      	ldr	r3, [pc, #92]	@ (800142c <LTCD__Init+0xb8>)
 80013d0:	2208      	movs	r2, #8
 80013d2:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80013d4:	4b15      	ldr	r3, [pc, #84]	@ (800142c <LTCD__Init+0xb8>)
 80013d6:	22c0      	movs	r2, #192	@ 0xc0
 80013d8:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80013da:	4b14      	ldr	r3, [pc, #80]	@ (800142c <LTCD__Init+0xb8>)
 80013dc:	2204      	movs	r2, #4
 80013de:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80013e0:	4b12      	ldr	r3, [pc, #72]	@ (800142c <LTCD__Init+0xb8>)
 80013e2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80013e6:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80013e8:	4810      	ldr	r0, [pc, #64]	@ (800142c <LTCD__Init+0xb8>)
 80013ea:	f003 fea3 	bl	8005134 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80013ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001424 <LTCD__Init+0xb0>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80013f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001424 <LTCD__Init+0xb0>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80013fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001424 <LTCD__Init+0xb0>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001400:	4b08      	ldr	r3, [pc, #32]	@ (8001424 <LTCD__Init+0xb0>)
 8001402:	2200      	movs	r2, #0
 8001404:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 8001406:	f7ff fead 	bl	8001164 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800140a:	4806      	ldr	r0, [pc, #24]	@ (8001424 <LTCD__Init+0xb0>)
 800140c:	f002 ff68 	bl	80042e0 <HAL_LTDC_Init>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 8001416:	f000 f94f 	bl	80016b8 <LCD_Error_Handler>
	 }

	ili9341_Init();
 800141a:	f000 f96a 	bl	80016f2 <ili9341_Init>
}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	20000084 	.word	0x20000084
 8001428:	40016800 	.word	0x40016800
 800142c:	2000012c 	.word	0x2000012c

08001430 <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	80fb      	strh	r3, [r7, #6]
 800143a:	460b      	mov	r3, r1
 800143c:	80bb      	strh	r3, [r7, #4]
 800143e:	4613      	mov	r3, r2
 8001440:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 8001442:	88ba      	ldrh	r2, [r7, #4]
 8001444:	4613      	mov	r3, r2
 8001446:	011b      	lsls	r3, r3, #4
 8001448:	1a9b      	subs	r3, r3, r2
 800144a:	011b      	lsls	r3, r3, #4
 800144c:	461a      	mov	r2, r3
 800144e:	88fb      	ldrh	r3, [r7, #6]
 8001450:	4413      	add	r3, r2
 8001452:	4905      	ldr	r1, [pc, #20]	@ (8001468 <LCD_Draw_Pixel+0x38>)
 8001454:	887a      	ldrh	r2, [r7, #2]
 8001456:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 800145a:	bf00      	nop
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	20000160 	.word	0x20000160

0800146c <LCD_Draw_Circle_Fill>:
 * These functions are simple examples. Most computer graphics like OpenGl and stm's graphics library use a state machine. Where you first call some function like SetColor(color), SetPosition(x,y), then DrawSqure(size)
 * Instead all of these are explicit where color, size, and position are passed in.
 * There is tons of ways to handle drawing. I dont think it matters too much.
 */
void LCD_Draw_Circle_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t radius, uint16_t color)
{
 800146c:	b590      	push	{r4, r7, lr}
 800146e:	b085      	sub	sp, #20
 8001470:	af00      	add	r7, sp, #0
 8001472:	4604      	mov	r4, r0
 8001474:	4608      	mov	r0, r1
 8001476:	4611      	mov	r1, r2
 8001478:	461a      	mov	r2, r3
 800147a:	4623      	mov	r3, r4
 800147c:	80fb      	strh	r3, [r7, #6]
 800147e:	4603      	mov	r3, r0
 8001480:	80bb      	strh	r3, [r7, #4]
 8001482:	460b      	mov	r3, r1
 8001484:	807b      	strh	r3, [r7, #2]
 8001486:	4613      	mov	r3, r2
 8001488:	803b      	strh	r3, [r7, #0]
    for(int16_t y=-radius; y<=radius; y++)
 800148a:	887b      	ldrh	r3, [r7, #2]
 800148c:	425b      	negs	r3, r3
 800148e:	b29b      	uxth	r3, r3
 8001490:	81fb      	strh	r3, [r7, #14]
 8001492:	e034      	b.n	80014fe <LCD_Draw_Circle_Fill+0x92>
    {
        for(int16_t x=-radius; x<=radius; x++)
 8001494:	887b      	ldrh	r3, [r7, #2]
 8001496:	425b      	negs	r3, r3
 8001498:	b29b      	uxth	r3, r3
 800149a:	81bb      	strh	r3, [r7, #12]
 800149c:	e024      	b.n	80014e8 <LCD_Draw_Circle_Fill+0x7c>
        {
            if(x*x+y*y <= radius*radius)
 800149e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80014a2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80014a6:	fb03 f202 	mul.w	r2, r3, r2
 80014aa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014ae:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 80014b2:	fb01 f303 	mul.w	r3, r1, r3
 80014b6:	441a      	add	r2, r3
 80014b8:	887b      	ldrh	r3, [r7, #2]
 80014ba:	8879      	ldrh	r1, [r7, #2]
 80014bc:	fb01 f303 	mul.w	r3, r1, r3
 80014c0:	429a      	cmp	r2, r3
 80014c2:	dc0b      	bgt.n	80014dc <LCD_Draw_Circle_Fill+0x70>
            {
            	LCD_Draw_Pixel(x+Xpos, y+Ypos, color);
 80014c4:	89ba      	ldrh	r2, [r7, #12]
 80014c6:	88fb      	ldrh	r3, [r7, #6]
 80014c8:	4413      	add	r3, r2
 80014ca:	b298      	uxth	r0, r3
 80014cc:	89fa      	ldrh	r2, [r7, #14]
 80014ce:	88bb      	ldrh	r3, [r7, #4]
 80014d0:	4413      	add	r3, r2
 80014d2:	b29b      	uxth	r3, r3
 80014d4:	883a      	ldrh	r2, [r7, #0]
 80014d6:	4619      	mov	r1, r3
 80014d8:	f7ff ffaa 	bl	8001430 <LCD_Draw_Pixel>
        for(int16_t x=-radius; x<=radius; x++)
 80014dc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80014e0:	b29b      	uxth	r3, r3
 80014e2:	3301      	adds	r3, #1
 80014e4:	b29b      	uxth	r3, r3
 80014e6:	81bb      	strh	r3, [r7, #12]
 80014e8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80014ec:	887b      	ldrh	r3, [r7, #2]
 80014ee:	429a      	cmp	r2, r3
 80014f0:	ddd5      	ble.n	800149e <LCD_Draw_Circle_Fill+0x32>
    for(int16_t y=-radius; y<=radius; y++)
 80014f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014f6:	b29b      	uxth	r3, r3
 80014f8:	3301      	adds	r3, #1
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	81fb      	strh	r3, [r7, #14]
 80014fe:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001502:	887b      	ldrh	r3, [r7, #2]
 8001504:	429a      	cmp	r2, r3
 8001506:	ddc5      	ble.n	8001494 <LCD_Draw_Circle_Fill+0x28>
            }
        }
    }
}
 8001508:	bf00      	nop
 800150a:	bf00      	nop
 800150c:	3714      	adds	r7, #20
 800150e:	46bd      	mov	sp, r7
 8001510:	bd90      	pop	{r4, r7, pc}
	...

08001514 <LCD_Clear>:
	  LCD_Draw_Pixel(x, i+y, color);
  }
}

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8001514:	b480      	push	{r7}
 8001516:	b085      	sub	sp, #20
 8001518:	af00      	add	r7, sp, #0
 800151a:	4603      	mov	r3, r0
 800151c:	460a      	mov	r2, r1
 800151e:	71fb      	strb	r3, [r7, #7]
 8001520:	4613      	mov	r3, r2
 8001522:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 8001524:	79fb      	ldrb	r3, [r7, #7]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d10e      	bne.n	8001548 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 800152a:	2300      	movs	r3, #0
 800152c:	60fb      	str	r3, [r7, #12]
 800152e:	e007      	b.n	8001540 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 8001530:	4908      	ldr	r1, [pc, #32]	@ (8001554 <LCD_Clear+0x40>)
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	88ba      	ldrh	r2, [r7, #4]
 8001536:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	3301      	adds	r3, #1
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8001546:	d3f3      	bcc.n	8001530 <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 8001548:	bf00      	nop
 800154a:	3714      	adds	r7, #20
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr
 8001554:	20000160 	.word	0x20000160

08001558 <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	4603      	mov	r3, r0
 8001560:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 8001562:	4a04      	ldr	r2, [pc, #16]	@ (8001574 <LCD_SetTextColor+0x1c>)
 8001564:	88fb      	ldrh	r3, [r7, #6]
 8001566:	8013      	strh	r3, [r2, #0]
}
 8001568:	bf00      	nop
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr
 8001574:	20000004 	.word	0x20000004

08001578 <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8001580:	4a04      	ldr	r2, [pc, #16]	@ (8001594 <LCD_SetFont+0x1c>)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6013      	str	r3, [r2, #0]
}
 8001586:	bf00      	nop
 8001588:	370c      	adds	r7, #12
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	2000015c 	.word	0x2000015c

08001598 <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	4603      	mov	r3, r0
 80015a0:	603a      	str	r2, [r7, #0]
 80015a2:	80fb      	strh	r3, [r7, #6]
 80015a4:	460b      	mov	r3, r1
 80015a6:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 80015a8:	2300      	movs	r3, #0
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	2300      	movs	r3, #0
 80015ae:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 80015b0:	2300      	movs	r3, #0
 80015b2:	60fb      	str	r3, [r7, #12]
 80015b4:	e04c      	b.n	8001650 <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 80015b6:	2300      	movs	r3, #0
 80015b8:	60bb      	str	r3, [r7, #8]
 80015ba:	e03f      	b.n	800163c <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	683a      	ldr	r2, [r7, #0]
 80015c2:	4413      	add	r3, r2
 80015c4:	881b      	ldrh	r3, [r3, #0]
 80015c6:	4619      	mov	r1, r3
 80015c8:	4b27      	ldr	r3, [pc, #156]	@ (8001668 <LCD_Draw_Char+0xd0>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	889b      	ldrh	r3, [r3, #4]
 80015ce:	4a27      	ldr	r2, [pc, #156]	@ (800166c <LCD_Draw_Char+0xd4>)
 80015d0:	fba2 2303 	umull	r2, r3, r2, r3
 80015d4:	08db      	lsrs	r3, r3, #3
 80015d6:	b29b      	uxth	r3, r3
 80015d8:	00db      	lsls	r3, r3, #3
 80015da:	2280      	movs	r2, #128	@ 0x80
 80015dc:	409a      	lsls	r2, r3
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	fa42 f303 	asr.w	r3, r2, r3
 80015e4:	400b      	ands	r3, r1
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d104      	bne.n	80015f4 <LCD_Draw_Char+0x5c>
 80015ea:	4b1f      	ldr	r3, [pc, #124]	@ (8001668 <LCD_Draw_Char+0xd0>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	889b      	ldrh	r3, [r3, #4]
 80015f0:	2b0c      	cmp	r3, #12
 80015f2:	d920      	bls.n	8001636 <LCD_Draw_Char+0x9e>
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	683a      	ldr	r2, [r7, #0]
 80015fa:	4413      	add	r3, r2
 80015fc:	881b      	ldrh	r3, [r3, #0]
 80015fe:	461a      	mov	r2, r3
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	fa42 f303 	asr.w	r3, r2, r3
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	2b00      	cmp	r3, #0
 800160c:	d104      	bne.n	8001618 <LCD_Draw_Char+0x80>
 800160e:	4b16      	ldr	r3, [pc, #88]	@ (8001668 <LCD_Draw_Char+0xd0>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	889b      	ldrh	r3, [r3, #4]
 8001614:	2b0c      	cmp	r3, #12
 8001616:	d80e      	bhi.n	8001636 <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	b29a      	uxth	r2, r3
 800161c:	88fb      	ldrh	r3, [r7, #6]
 800161e:	4413      	add	r3, r2
 8001620:	b298      	uxth	r0, r3
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	b29a      	uxth	r2, r3
 8001626:	88bb      	ldrh	r3, [r7, #4]
 8001628:	4413      	add	r3, r2
 800162a:	b29b      	uxth	r3, r3
 800162c:	4a10      	ldr	r2, [pc, #64]	@ (8001670 <LCD_Draw_Char+0xd8>)
 800162e:	8812      	ldrh	r2, [r2, #0]
 8001630:	4619      	mov	r1, r3
 8001632:	f7ff fefd 	bl	8001430 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	3301      	adds	r3, #1
 800163a:	60bb      	str	r3, [r7, #8]
 800163c:	4b0a      	ldr	r3, [pc, #40]	@ (8001668 <LCD_Draw_Char+0xd0>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	889b      	ldrh	r3, [r3, #4]
 8001642:	461a      	mov	r2, r3
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	4293      	cmp	r3, r2
 8001648:	d3b8      	bcc.n	80015bc <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	3301      	adds	r3, #1
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	4b05      	ldr	r3, [pc, #20]	@ (8001668 <LCD_Draw_Char+0xd0>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	88db      	ldrh	r3, [r3, #6]
 8001656:	461a      	mov	r2, r3
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	4293      	cmp	r3, r2
 800165c:	d3ab      	bcc.n	80015b6 <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 800165e:	bf00      	nop
 8001660:	bf00      	nop
 8001662:	3710      	adds	r7, #16
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	2000015c 	.word	0x2000015c
 800166c:	aaaaaaab 	.word	0xaaaaaaab
 8001670:	20000004 	.word	0x20000004

08001674 <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	4603      	mov	r3, r0
 800167c:	80fb      	strh	r3, [r7, #6]
 800167e:	460b      	mov	r3, r1
 8001680:	80bb      	strh	r3, [r7, #4]
 8001682:	4613      	mov	r3, r2
 8001684:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8001686:	78fb      	ldrb	r3, [r7, #3]
 8001688:	3b20      	subs	r3, #32
 800168a:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 800168c:	4b09      	ldr	r3, [pc, #36]	@ (80016b4 <LCD_DisplayChar+0x40>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	78fb      	ldrb	r3, [r7, #3]
 8001694:	4907      	ldr	r1, [pc, #28]	@ (80016b4 <LCD_DisplayChar+0x40>)
 8001696:	6809      	ldr	r1, [r1, #0]
 8001698:	88c9      	ldrh	r1, [r1, #6]
 800169a:	fb01 f303 	mul.w	r3, r1, r3
 800169e:	005b      	lsls	r3, r3, #1
 80016a0:	441a      	add	r2, r3
 80016a2:	88b9      	ldrh	r1, [r7, #4]
 80016a4:	88fb      	ldrh	r3, [r7, #6]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff ff76 	bl	8001598 <LCD_Draw_Char>
}
 80016ac:	bf00      	nop
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	2000015c 	.word	0x2000015c

080016b8 <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016bc:	b672      	cpsid	i
}
 80016be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016c0:	bf00      	nop
 80016c2:	e7fd      	b.n	80016c0 <LCD_Error_Handler+0x8>

080016c4 <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 80016c8:	f000 fdab 	bl	8002222 <STMPE811_Init>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d001      	beq.n	80016d6 <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialzation
 80016d2:	bf00      	nop
 80016d4:	e7fd      	b.n	80016d2 <InitializeLCDTouch+0xe>
  }
}
 80016d6:	bf00      	nop
 80016d8:	bd80      	pop	{r7, pc}

080016da <returnTouchStateAndLocation>:

STMPE811_State_t returnTouchStateAndLocation(STMPE811_TouchData * touchStruct)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b082      	sub	sp, #8
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
	return STMPE811_ReadTouch(touchStruct);
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f000 fe55 	bl	8002392 <STMPE811_ReadTouch>
 80016e8:	4603      	mov	r3, r0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}

080016f2 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 80016f2:	b580      	push	{r7, lr}
 80016f4:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80016f6:	f000 f9ff 	bl	8001af8 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 80016fa:	20ca      	movs	r0, #202	@ 0xca
 80016fc:	f000 f943 	bl	8001986 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 8001700:	20c3      	movs	r0, #195	@ 0xc3
 8001702:	f000 f94d 	bl	80019a0 <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 8001706:	2008      	movs	r0, #8
 8001708:	f000 f94a 	bl	80019a0 <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 800170c:	2050      	movs	r0, #80	@ 0x50
 800170e:	f000 f947 	bl	80019a0 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 8001712:	20cf      	movs	r0, #207	@ 0xcf
 8001714:	f000 f937 	bl	8001986 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 8001718:	2000      	movs	r0, #0
 800171a:	f000 f941 	bl	80019a0 <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 800171e:	20c1      	movs	r0, #193	@ 0xc1
 8001720:	f000 f93e 	bl	80019a0 <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 8001724:	2030      	movs	r0, #48	@ 0x30
 8001726:	f000 f93b 	bl	80019a0 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 800172a:	20ed      	movs	r0, #237	@ 0xed
 800172c:	f000 f92b 	bl	8001986 <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 8001730:	2064      	movs	r0, #100	@ 0x64
 8001732:	f000 f935 	bl	80019a0 <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 8001736:	2003      	movs	r0, #3
 8001738:	f000 f932 	bl	80019a0 <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 800173c:	2012      	movs	r0, #18
 800173e:	f000 f92f 	bl	80019a0 <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8001742:	2081      	movs	r0, #129	@ 0x81
 8001744:	f000 f92c 	bl	80019a0 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 8001748:	20e8      	movs	r0, #232	@ 0xe8
 800174a:	f000 f91c 	bl	8001986 <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 800174e:	2085      	movs	r0, #133	@ 0x85
 8001750:	f000 f926 	bl	80019a0 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001754:	2000      	movs	r0, #0
 8001756:	f000 f923 	bl	80019a0 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 800175a:	2078      	movs	r0, #120	@ 0x78
 800175c:	f000 f920 	bl	80019a0 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8001760:	20cb      	movs	r0, #203	@ 0xcb
 8001762:	f000 f910 	bl	8001986 <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 8001766:	2039      	movs	r0, #57	@ 0x39
 8001768:	f000 f91a 	bl	80019a0 <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 800176c:	202c      	movs	r0, #44	@ 0x2c
 800176e:	f000 f917 	bl	80019a0 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001772:	2000      	movs	r0, #0
 8001774:	f000 f914 	bl	80019a0 <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 8001778:	2034      	movs	r0, #52	@ 0x34
 800177a:	f000 f911 	bl	80019a0 <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 800177e:	2002      	movs	r0, #2
 8001780:	f000 f90e 	bl	80019a0 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 8001784:	20f7      	movs	r0, #247	@ 0xf7
 8001786:	f000 f8fe 	bl	8001986 <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 800178a:	2020      	movs	r0, #32
 800178c:	f000 f908 	bl	80019a0 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8001790:	20ea      	movs	r0, #234	@ 0xea
 8001792:	f000 f8f8 	bl	8001986 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001796:	2000      	movs	r0, #0
 8001798:	f000 f902 	bl	80019a0 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800179c:	2000      	movs	r0, #0
 800179e:	f000 f8ff 	bl	80019a0 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 80017a2:	20b1      	movs	r0, #177	@ 0xb1
 80017a4:	f000 f8ef 	bl	8001986 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80017a8:	2000      	movs	r0, #0
 80017aa:	f000 f8f9 	bl	80019a0 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 80017ae:	201b      	movs	r0, #27
 80017b0:	f000 f8f6 	bl	80019a0 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 80017b4:	20b6      	movs	r0, #182	@ 0xb6
 80017b6:	f000 f8e6 	bl	8001986 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 80017ba:	200a      	movs	r0, #10
 80017bc:	f000 f8f0 	bl	80019a0 <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 80017c0:	20a2      	movs	r0, #162	@ 0xa2
 80017c2:	f000 f8ed 	bl	80019a0 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 80017c6:	20c0      	movs	r0, #192	@ 0xc0
 80017c8:	f000 f8dd 	bl	8001986 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 80017cc:	2010      	movs	r0, #16
 80017ce:	f000 f8e7 	bl	80019a0 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 80017d2:	20c1      	movs	r0, #193	@ 0xc1
 80017d4:	f000 f8d7 	bl	8001986 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 80017d8:	2010      	movs	r0, #16
 80017da:	f000 f8e1 	bl	80019a0 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 80017de:	20c5      	movs	r0, #197	@ 0xc5
 80017e0:	f000 f8d1 	bl	8001986 <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 80017e4:	2045      	movs	r0, #69	@ 0x45
 80017e6:	f000 f8db 	bl	80019a0 <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 80017ea:	2015      	movs	r0, #21
 80017ec:	f000 f8d8 	bl	80019a0 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 80017f0:	20c7      	movs	r0, #199	@ 0xc7
 80017f2:	f000 f8c8 	bl	8001986 <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 80017f6:	2090      	movs	r0, #144	@ 0x90
 80017f8:	f000 f8d2 	bl	80019a0 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 80017fc:	2036      	movs	r0, #54	@ 0x36
 80017fe:	f000 f8c2 	bl	8001986 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 8001802:	20c8      	movs	r0, #200	@ 0xc8
 8001804:	f000 f8cc 	bl	80019a0 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 8001808:	20f2      	movs	r0, #242	@ 0xf2
 800180a:	f000 f8bc 	bl	8001986 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800180e:	2000      	movs	r0, #0
 8001810:	f000 f8c6 	bl	80019a0 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 8001814:	20b0      	movs	r0, #176	@ 0xb0
 8001816:	f000 f8b6 	bl	8001986 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 800181a:	20c2      	movs	r0, #194	@ 0xc2
 800181c:	f000 f8c0 	bl	80019a0 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8001820:	20b6      	movs	r0, #182	@ 0xb6
 8001822:	f000 f8b0 	bl	8001986 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8001826:	200a      	movs	r0, #10
 8001828:	f000 f8ba 	bl	80019a0 <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 800182c:	20a7      	movs	r0, #167	@ 0xa7
 800182e:	f000 f8b7 	bl	80019a0 <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 8001832:	2027      	movs	r0, #39	@ 0x27
 8001834:	f000 f8b4 	bl	80019a0 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8001838:	2004      	movs	r0, #4
 800183a:	f000 f8b1 	bl	80019a0 <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 800183e:	202a      	movs	r0, #42	@ 0x2a
 8001840:	f000 f8a1 	bl	8001986 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001844:	2000      	movs	r0, #0
 8001846:	f000 f8ab 	bl	80019a0 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800184a:	2000      	movs	r0, #0
 800184c:	f000 f8a8 	bl	80019a0 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001850:	2000      	movs	r0, #0
 8001852:	f000 f8a5 	bl	80019a0 <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 8001856:	20ef      	movs	r0, #239	@ 0xef
 8001858:	f000 f8a2 	bl	80019a0 <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 800185c:	202b      	movs	r0, #43	@ 0x2b
 800185e:	f000 f892 	bl	8001986 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001862:	2000      	movs	r0, #0
 8001864:	f000 f89c 	bl	80019a0 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001868:	2000      	movs	r0, #0
 800186a:	f000 f899 	bl	80019a0 <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 800186e:	2001      	movs	r0, #1
 8001870:	f000 f896 	bl	80019a0 <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 8001874:	203f      	movs	r0, #63	@ 0x3f
 8001876:	f000 f893 	bl	80019a0 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 800187a:	20f6      	movs	r0, #246	@ 0xf6
 800187c:	f000 f883 	bl	8001986 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8001880:	2001      	movs	r0, #1
 8001882:	f000 f88d 	bl	80019a0 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001886:	2000      	movs	r0, #0
 8001888:	f000 f88a 	bl	80019a0 <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 800188c:	2006      	movs	r0, #6
 800188e:	f000 f887 	bl	80019a0 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 8001892:	202c      	movs	r0, #44	@ 0x2c
 8001894:	f000 f877 	bl	8001986 <ili9341_Write_Reg>
  LCD_Delay(200);
 8001898:	20c8      	movs	r0, #200	@ 0xc8
 800189a:	f000 f9e9 	bl	8001c70 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 800189e:	2026      	movs	r0, #38	@ 0x26
 80018a0:	f000 f871 	bl	8001986 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 80018a4:	2001      	movs	r0, #1
 80018a6:	f000 f87b 	bl	80019a0 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 80018aa:	20e0      	movs	r0, #224	@ 0xe0
 80018ac:	f000 f86b 	bl	8001986 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 80018b0:	200f      	movs	r0, #15
 80018b2:	f000 f875 	bl	80019a0 <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 80018b6:	2029      	movs	r0, #41	@ 0x29
 80018b8:	f000 f872 	bl	80019a0 <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 80018bc:	2024      	movs	r0, #36	@ 0x24
 80018be:	f000 f86f 	bl	80019a0 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 80018c2:	200c      	movs	r0, #12
 80018c4:	f000 f86c 	bl	80019a0 <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 80018c8:	200e      	movs	r0, #14
 80018ca:	f000 f869 	bl	80019a0 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 80018ce:	2009      	movs	r0, #9
 80018d0:	f000 f866 	bl	80019a0 <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 80018d4:	204e      	movs	r0, #78	@ 0x4e
 80018d6:	f000 f863 	bl	80019a0 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 80018da:	2078      	movs	r0, #120	@ 0x78
 80018dc:	f000 f860 	bl	80019a0 <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 80018e0:	203c      	movs	r0, #60	@ 0x3c
 80018e2:	f000 f85d 	bl	80019a0 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 80018e6:	2009      	movs	r0, #9
 80018e8:	f000 f85a 	bl	80019a0 <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 80018ec:	2013      	movs	r0, #19
 80018ee:	f000 f857 	bl	80019a0 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 80018f2:	2005      	movs	r0, #5
 80018f4:	f000 f854 	bl	80019a0 <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 80018f8:	2017      	movs	r0, #23
 80018fa:	f000 f851 	bl	80019a0 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 80018fe:	2011      	movs	r0, #17
 8001900:	f000 f84e 	bl	80019a0 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001904:	2000      	movs	r0, #0
 8001906:	f000 f84b 	bl	80019a0 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 800190a:	20e1      	movs	r0, #225	@ 0xe1
 800190c:	f000 f83b 	bl	8001986 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001910:	2000      	movs	r0, #0
 8001912:	f000 f845 	bl	80019a0 <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 8001916:	2016      	movs	r0, #22
 8001918:	f000 f842 	bl	80019a0 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 800191c:	201b      	movs	r0, #27
 800191e:	f000 f83f 	bl	80019a0 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8001922:	2004      	movs	r0, #4
 8001924:	f000 f83c 	bl	80019a0 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8001928:	2011      	movs	r0, #17
 800192a:	f000 f839 	bl	80019a0 <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 800192e:	2007      	movs	r0, #7
 8001930:	f000 f836 	bl	80019a0 <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 8001934:	2031      	movs	r0, #49	@ 0x31
 8001936:	f000 f833 	bl	80019a0 <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 800193a:	2033      	movs	r0, #51	@ 0x33
 800193c:	f000 f830 	bl	80019a0 <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 8001940:	2042      	movs	r0, #66	@ 0x42
 8001942:	f000 f82d 	bl	80019a0 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8001946:	2005      	movs	r0, #5
 8001948:	f000 f82a 	bl	80019a0 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 800194c:	200c      	movs	r0, #12
 800194e:	f000 f827 	bl	80019a0 <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8001952:	200a      	movs	r0, #10
 8001954:	f000 f824 	bl	80019a0 <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 8001958:	2028      	movs	r0, #40	@ 0x28
 800195a:	f000 f821 	bl	80019a0 <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 800195e:	202f      	movs	r0, #47	@ 0x2f
 8001960:	f000 f81e 	bl	80019a0 <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 8001964:	200f      	movs	r0, #15
 8001966:	f000 f81b 	bl	80019a0 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 800196a:	2011      	movs	r0, #17
 800196c:	f000 f80b 	bl	8001986 <ili9341_Write_Reg>
  LCD_Delay(200);
 8001970:	20c8      	movs	r0, #200	@ 0xc8
 8001972:	f000 f97d 	bl	8001c70 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 8001976:	2029      	movs	r0, #41	@ 0x29
 8001978:	f000 f805 	bl	8001986 <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 800197c:	202c      	movs	r0, #44	@ 0x2c
 800197e:	f000 f802 	bl	8001986 <ili9341_Write_Reg>
}
 8001982:	bf00      	nop
 8001984:	bd80      	pop	{r7, pc}

08001986 <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 8001986:	b580      	push	{r7, lr}
 8001988:	b082      	sub	sp, #8
 800198a:	af00      	add	r7, sp, #0
 800198c:	4603      	mov	r3, r0
 800198e:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001990:	79fb      	ldrb	r3, [r7, #7]
 8001992:	4618      	mov	r0, r3
 8001994:	f000 f94a 	bl	8001c2c <LCD_IO_WriteReg>
}
 8001998:	bf00      	nop
 800199a:	3708      	adds	r7, #8
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}

080019a0 <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	4603      	mov	r3, r0
 80019a8:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 80019aa:	88fb      	ldrh	r3, [r7, #6]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f000 f91b 	bl	8001be8 <LCD_IO_WriteData>
}
 80019b2:	bf00      	nop
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
	...

080019bc <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80019c0:	4819      	ldr	r0, [pc, #100]	@ (8001a28 <SPI_Init+0x6c>)
 80019c2:	f003 ff6c 	bl	800589e <HAL_SPI_GetState>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d12b      	bne.n	8001a24 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 80019cc:	4b16      	ldr	r3, [pc, #88]	@ (8001a28 <SPI_Init+0x6c>)
 80019ce:	4a17      	ldr	r2, [pc, #92]	@ (8001a2c <SPI_Init+0x70>)
 80019d0:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80019d2:	4b15      	ldr	r3, [pc, #84]	@ (8001a28 <SPI_Init+0x6c>)
 80019d4:	2218      	movs	r2, #24
 80019d6:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80019d8:	4b13      	ldr	r3, [pc, #76]	@ (8001a28 <SPI_Init+0x6c>)
 80019da:	2200      	movs	r2, #0
 80019dc:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80019de:	4b12      	ldr	r3, [pc, #72]	@ (8001a28 <SPI_Init+0x6c>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80019e4:	4b10      	ldr	r3, [pc, #64]	@ (8001a28 <SPI_Init+0x6c>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80019ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001a28 <SPI_Init+0x6c>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 80019f0:	4b0d      	ldr	r3, [pc, #52]	@ (8001a28 <SPI_Init+0x6c>)
 80019f2:	2207      	movs	r2, #7
 80019f4:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 80019f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001a28 <SPI_Init+0x6c>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 80019fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001a28 <SPI_Init+0x6c>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8001a02:	4b09      	ldr	r3, [pc, #36]	@ (8001a28 <SPI_Init+0x6c>)
 8001a04:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a08:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8001a0a:	4b07      	ldr	r3, [pc, #28]	@ (8001a28 <SPI_Init+0x6c>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001a10:	4b05      	ldr	r3, [pc, #20]	@ (8001a28 <SPI_Init+0x6c>)
 8001a12:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001a16:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 8001a18:	4803      	ldr	r0, [pc, #12]	@ (8001a28 <SPI_Init+0x6c>)
 8001a1a:	f000 f833 	bl	8001a84 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001a1e:	4802      	ldr	r0, [pc, #8]	@ (8001a28 <SPI_Init+0x6c>)
 8001a20:	f003 fd48 	bl	80054b4 <HAL_SPI_Init>
  }
}
 8001a24:	bf00      	nop
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	20025960 	.word	0x20025960
 8001a2c:	40015000 	.word	0x40015000

08001a30 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	4603      	mov	r3, r0
 8001a38:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 8001a3e:	4b09      	ldr	r3, [pc, #36]	@ (8001a64 <SPI_Write+0x34>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	1db9      	adds	r1, r7, #6
 8001a44:	2201      	movs	r2, #1
 8001a46:	4808      	ldr	r0, [pc, #32]	@ (8001a68 <SPI_Write+0x38>)
 8001a48:	f003 fde5 	bl	8005616 <HAL_SPI_Transmit>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8001a50:	7bfb      	ldrb	r3, [r7, #15]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 8001a56:	f000 f809 	bl	8001a6c <SPI_Error>
  }
}
 8001a5a:	bf00      	nop
 8001a5c:	3710      	adds	r7, #16
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	20000018 	.word	0x20000018
 8001a68:	20025960 	.word	0x20025960

08001a6c <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8001a70:	4803      	ldr	r0, [pc, #12]	@ (8001a80 <SPI_Error+0x14>)
 8001a72:	f003 fda8 	bl	80055c6 <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 8001a76:	f7ff ffa1 	bl	80019bc <SPI_Init>
}
 8001a7a:	bf00      	nop
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	20025960 	.word	0x20025960

08001a84 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b08a      	sub	sp, #40	@ 0x28
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	613b      	str	r3, [r7, #16]
 8001a90:	4b17      	ldr	r3, [pc, #92]	@ (8001af0 <SPI_MspInit+0x6c>)
 8001a92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a94:	4a16      	ldr	r2, [pc, #88]	@ (8001af0 <SPI_MspInit+0x6c>)
 8001a96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001a9a:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a9c:	4b14      	ldr	r3, [pc, #80]	@ (8001af0 <SPI_MspInit+0x6c>)
 8001a9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aa0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001aa4:	613b      	str	r3, [r7, #16]
 8001aa6:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	60fb      	str	r3, [r7, #12]
 8001aac:	4b10      	ldr	r3, [pc, #64]	@ (8001af0 <SPI_MspInit+0x6c>)
 8001aae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab0:	4a0f      	ldr	r2, [pc, #60]	@ (8001af0 <SPI_MspInit+0x6c>)
 8001ab2:	f043 0320 	orr.w	r3, r3, #32
 8001ab6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ab8:	4b0d      	ldr	r3, [pc, #52]	@ (8001af0 <SPI_MspInit+0x6c>)
 8001aba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001abc:	f003 0320 	and.w	r3, r3, #32
 8001ac0:	60fb      	str	r3, [r7, #12]
 8001ac2:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 8001ac4:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001ac8:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8001aca:	2302      	movs	r3, #2
 8001acc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8001ace:	2302      	movs	r3, #2
 8001ad0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 8001ad6:	2305      	movs	r3, #5
 8001ad8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 8001ada:	f107 0314 	add.w	r3, r7, #20
 8001ade:	4619      	mov	r1, r3
 8001ae0:	4804      	ldr	r0, [pc, #16]	@ (8001af4 <SPI_MspInit+0x70>)
 8001ae2:	f001 f907 	bl	8002cf4 <HAL_GPIO_Init>
}
 8001ae6:	bf00      	nop
 8001ae8:	3728      	adds	r7, #40	@ 0x28
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	40023800 	.word	0x40023800
 8001af4:	40021400 	.word	0x40021400

08001af8 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b088      	sub	sp, #32
 8001afc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 8001afe:	4b36      	ldr	r3, [pc, #216]	@ (8001bd8 <LCD_IO_Init+0xe0>)
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d164      	bne.n	8001bd0 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8001b06:	4b34      	ldr	r3, [pc, #208]	@ (8001bd8 <LCD_IO_Init+0xe0>)
 8001b08:	2201      	movs	r2, #1
 8001b0a:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	60bb      	str	r3, [r7, #8]
 8001b10:	4b32      	ldr	r3, [pc, #200]	@ (8001bdc <LCD_IO_Init+0xe4>)
 8001b12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b14:	4a31      	ldr	r2, [pc, #196]	@ (8001bdc <LCD_IO_Init+0xe4>)
 8001b16:	f043 0308 	orr.w	r3, r3, #8
 8001b1a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b1c:	4b2f      	ldr	r3, [pc, #188]	@ (8001bdc <LCD_IO_Init+0xe4>)
 8001b1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b20:	f003 0308 	and.w	r3, r3, #8
 8001b24:	60bb      	str	r3, [r7, #8]
 8001b26:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8001b28:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b2c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001b32:	2300      	movs	r3, #0
 8001b34:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001b36:	2302      	movs	r3, #2
 8001b38:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8001b3a:	f107 030c 	add.w	r3, r7, #12
 8001b3e:	4619      	mov	r1, r3
 8001b40:	4827      	ldr	r0, [pc, #156]	@ (8001be0 <LCD_IO_Init+0xe8>)
 8001b42:	f001 f8d7 	bl	8002cf4 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 8001b46:	2300      	movs	r3, #0
 8001b48:	607b      	str	r3, [r7, #4]
 8001b4a:	4b24      	ldr	r3, [pc, #144]	@ (8001bdc <LCD_IO_Init+0xe4>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b4e:	4a23      	ldr	r2, [pc, #140]	@ (8001bdc <LCD_IO_Init+0xe4>)
 8001b50:	f043 0308 	orr.w	r3, r3, #8
 8001b54:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b56:	4b21      	ldr	r3, [pc, #132]	@ (8001bdc <LCD_IO_Init+0xe4>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b5a:	f003 0308 	and.w	r3, r3, #8
 8001b5e:	607b      	str	r3, [r7, #4]
 8001b60:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8001b62:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b66:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001b70:	2302      	movs	r3, #2
 8001b72:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8001b74:	f107 030c 	add.w	r3, r7, #12
 8001b78:	4619      	mov	r1, r3
 8001b7a:	4819      	ldr	r0, [pc, #100]	@ (8001be0 <LCD_IO_Init+0xe8>)
 8001b7c:	f001 f8ba 	bl	8002cf4 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8001b80:	2300      	movs	r3, #0
 8001b82:	603b      	str	r3, [r7, #0]
 8001b84:	4b15      	ldr	r3, [pc, #84]	@ (8001bdc <LCD_IO_Init+0xe4>)
 8001b86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b88:	4a14      	ldr	r2, [pc, #80]	@ (8001bdc <LCD_IO_Init+0xe4>)
 8001b8a:	f043 0304 	orr.w	r3, r3, #4
 8001b8e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b90:	4b12      	ldr	r3, [pc, #72]	@ (8001bdc <LCD_IO_Init+0xe4>)
 8001b92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b94:	f003 0304 	and.w	r3, r3, #4
 8001b98:	603b      	str	r3, [r7, #0]
 8001b9a:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8001b9c:	2304      	movs	r3, #4
 8001b9e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001ba8:	2302      	movs	r3, #2
 8001baa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8001bac:	f107 030c 	add.w	r3, r7, #12
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	480c      	ldr	r0, [pc, #48]	@ (8001be4 <LCD_IO_Init+0xec>)
 8001bb4:	f001 f89e 	bl	8002cf4 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8001bb8:	2200      	movs	r2, #0
 8001bba:	2104      	movs	r1, #4
 8001bbc:	4809      	ldr	r0, [pc, #36]	@ (8001be4 <LCD_IO_Init+0xec>)
 8001bbe:	f001 fb51 	bl	8003264 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	2104      	movs	r1, #4
 8001bc6:	4807      	ldr	r0, [pc, #28]	@ (8001be4 <LCD_IO_Init+0xec>)
 8001bc8:	f001 fb4c 	bl	8003264 <HAL_GPIO_WritePin>

    SPI_Init();
 8001bcc:	f7ff fef6 	bl	80019bc <SPI_Init>
  }
}
 8001bd0:	bf00      	nop
 8001bd2:	3720      	adds	r7, #32
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	200259b8 	.word	0x200259b8
 8001bdc:	40023800 	.word	0x40023800
 8001be0:	40020c00 	.word	0x40020c00
 8001be4:	40020800 	.word	0x40020800

08001be8 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	4603      	mov	r3, r0
 8001bf0:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001bf8:	480a      	ldr	r0, [pc, #40]	@ (8001c24 <LCD_IO_WriteData+0x3c>)
 8001bfa:	f001 fb33 	bl	8003264 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 8001bfe:	2200      	movs	r2, #0
 8001c00:	2104      	movs	r1, #4
 8001c02:	4809      	ldr	r0, [pc, #36]	@ (8001c28 <LCD_IO_WriteData+0x40>)
 8001c04:	f001 fb2e 	bl	8003264 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 8001c08:	88fb      	ldrh	r3, [r7, #6]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7ff ff10 	bl	8001a30 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001c10:	2201      	movs	r2, #1
 8001c12:	2104      	movs	r1, #4
 8001c14:	4804      	ldr	r0, [pc, #16]	@ (8001c28 <LCD_IO_WriteData+0x40>)
 8001c16:	f001 fb25 	bl	8003264 <HAL_GPIO_WritePin>
}
 8001c1a:	bf00      	nop
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	40020c00 	.word	0x40020c00
 8001c28:	40020800 	.word	0x40020800

08001c2c <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	4603      	mov	r3, r0
 8001c34:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001c36:	2200      	movs	r2, #0
 8001c38:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001c3c:	480a      	ldr	r0, [pc, #40]	@ (8001c68 <LCD_IO_WriteReg+0x3c>)
 8001c3e:	f001 fb11 	bl	8003264 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8001c42:	2200      	movs	r2, #0
 8001c44:	2104      	movs	r1, #4
 8001c46:	4809      	ldr	r0, [pc, #36]	@ (8001c6c <LCD_IO_WriteReg+0x40>)
 8001c48:	f001 fb0c 	bl	8003264 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 8001c4c:	79fb      	ldrb	r3, [r7, #7]
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff feed 	bl	8001a30 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001c56:	2201      	movs	r2, #1
 8001c58:	2104      	movs	r1, #4
 8001c5a:	4804      	ldr	r0, [pc, #16]	@ (8001c6c <LCD_IO_WriteReg+0x40>)
 8001c5c:	f001 fb02 	bl	8003264 <HAL_GPIO_WritePin>
}
 8001c60:	bf00      	nop
 8001c62:	3708      	adds	r7, #8
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	40020c00 	.word	0x40020c00
 8001c6c:	40020800 	.word	0x40020800

08001c70 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f000 fed3 	bl	8002a24 <HAL_Delay>
}
 8001c7e:	bf00      	nop
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c86:	b580      	push	{r7, lr}
 8001c88:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c8a:	f000 fe59 	bl	8002940 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c8e:	f000 f809 	bl	8001ca4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* USER CODE BEGIN 2 */
  ApplicationInit(); // Initializes the LCD functionality
 8001c92:	f7fe fc41 	bl	8000518 <ApplicationInit>
  HAL_Delay(5000);
 8001c96:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001c9a:	f000 fec3 	bl	8002a24 <HAL_Delay>
  /* USER CODE END 2 */
  
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001c9e:	bf00      	nop
 8001ca0:	e7fd      	b.n	8001c9e <main+0x18>
	...

08001ca4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b094      	sub	sp, #80	@ 0x50
 8001ca8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001caa:	f107 0320 	add.w	r3, r7, #32
 8001cae:	2230      	movs	r2, #48	@ 0x30
 8001cb0:	2100      	movs	r1, #0
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f003 fede 	bl	8005a74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cb8:	f107 030c 	add.w	r3, r7, #12
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	601a      	str	r2, [r3, #0]
 8001cc0:	605a      	str	r2, [r3, #4]
 8001cc2:	609a      	str	r2, [r3, #8]
 8001cc4:	60da      	str	r2, [r3, #12]
 8001cc6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cc8:	2300      	movs	r3, #0
 8001cca:	60bb      	str	r3, [r7, #8]
 8001ccc:	4b28      	ldr	r3, [pc, #160]	@ (8001d70 <SystemClock_Config+0xcc>)
 8001cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd0:	4a27      	ldr	r2, [pc, #156]	@ (8001d70 <SystemClock_Config+0xcc>)
 8001cd2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cd6:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cd8:	4b25      	ldr	r3, [pc, #148]	@ (8001d70 <SystemClock_Config+0xcc>)
 8001cda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cdc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ce0:	60bb      	str	r3, [r7, #8]
 8001ce2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	607b      	str	r3, [r7, #4]
 8001ce8:	4b22      	ldr	r3, [pc, #136]	@ (8001d74 <SystemClock_Config+0xd0>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a21      	ldr	r2, [pc, #132]	@ (8001d74 <SystemClock_Config+0xd0>)
 8001cee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001cf2:	6013      	str	r3, [r2, #0]
 8001cf4:	4b1f      	ldr	r3, [pc, #124]	@ (8001d74 <SystemClock_Config+0xd0>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001cfc:	607b      	str	r3, [r7, #4]
 8001cfe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d00:	2301      	movs	r3, #1
 8001d02:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d04:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001d08:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d0e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001d12:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001d14:	2308      	movs	r3, #8
 8001d16:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001d18:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001d1c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d1e:	2302      	movs	r3, #2
 8001d20:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001d22:	2307      	movs	r3, #7
 8001d24:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d26:	f107 0320 	add.w	r3, r7, #32
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f002 fd7e 	bl	800482c <HAL_RCC_OscConfig>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001d36:	f000 f81f 	bl	8001d78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d3a:	230f      	movs	r3, #15
 8001d3c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d3e:	2302      	movs	r3, #2
 8001d40:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d42:	2300      	movs	r3, #0
 8001d44:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001d46:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001d4a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001d4c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d50:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001d52:	f107 030c 	add.w	r3, r7, #12
 8001d56:	2105      	movs	r1, #5
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f002 ffdf 	bl	8004d1c <HAL_RCC_ClockConfig>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001d64:	f000 f808 	bl	8001d78 <Error_Handler>
  }
}
 8001d68:	bf00      	nop
 8001d6a:	3750      	adds	r7, #80	@ 0x50
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	40023800 	.word	0x40023800
 8001d74:	40007000 	.word	0x40007000

08001d78 <Error_Handler>:


void Error_Handler(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001d7c:	b672      	cpsid	i
}
 8001d7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d80:	bf00      	nop
 8001d82:	e7fd      	b.n	8001d80 <Error_Handler+0x8>

08001d84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	607b      	str	r3, [r7, #4]
 8001d8e:	4b10      	ldr	r3, [pc, #64]	@ (8001dd0 <HAL_MspInit+0x4c>)
 8001d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d92:	4a0f      	ldr	r2, [pc, #60]	@ (8001dd0 <HAL_MspInit+0x4c>)
 8001d94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d98:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8001dd0 <HAL_MspInit+0x4c>)
 8001d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001da2:	607b      	str	r3, [r7, #4]
 8001da4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001da6:	2300      	movs	r3, #0
 8001da8:	603b      	str	r3, [r7, #0]
 8001daa:	4b09      	ldr	r3, [pc, #36]	@ (8001dd0 <HAL_MspInit+0x4c>)
 8001dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dae:	4a08      	ldr	r2, [pc, #32]	@ (8001dd0 <HAL_MspInit+0x4c>)
 8001db0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001db4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001db6:	4b06      	ldr	r3, [pc, #24]	@ (8001dd0 <HAL_MspInit+0x4c>)
 8001db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dbe:	603b      	str	r3, [r7, #0]
 8001dc0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001dc2:	2007      	movs	r0, #7
 8001dc4:	f000 ff46 	bl	8002c54 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dc8:	bf00      	nop
 8001dca:	3708      	adds	r7, #8
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	40023800 	.word	0x40023800

08001dd4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b08a      	sub	sp, #40	@ 0x28
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ddc:	f107 0314 	add.w	r3, r7, #20
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	605a      	str	r2, [r3, #4]
 8001de6:	609a      	str	r2, [r3, #8]
 8001de8:	60da      	str	r2, [r3, #12]
 8001dea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a29      	ldr	r2, [pc, #164]	@ (8001e98 <HAL_I2C_MspInit+0xc4>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d14b      	bne.n	8001e8e <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001df6:	2300      	movs	r3, #0
 8001df8:	613b      	str	r3, [r7, #16]
 8001dfa:	4b28      	ldr	r3, [pc, #160]	@ (8001e9c <HAL_I2C_MspInit+0xc8>)
 8001dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dfe:	4a27      	ldr	r2, [pc, #156]	@ (8001e9c <HAL_I2C_MspInit+0xc8>)
 8001e00:	f043 0304 	orr.w	r3, r3, #4
 8001e04:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e06:	4b25      	ldr	r3, [pc, #148]	@ (8001e9c <HAL_I2C_MspInit+0xc8>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e0a:	f003 0304 	and.w	r3, r3, #4
 8001e0e:	613b      	str	r3, [r7, #16]
 8001e10:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e12:	2300      	movs	r3, #0
 8001e14:	60fb      	str	r3, [r7, #12]
 8001e16:	4b21      	ldr	r3, [pc, #132]	@ (8001e9c <HAL_I2C_MspInit+0xc8>)
 8001e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e1a:	4a20      	ldr	r2, [pc, #128]	@ (8001e9c <HAL_I2C_MspInit+0xc8>)
 8001e1c:	f043 0301 	orr.w	r3, r3, #1
 8001e20:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e22:	4b1e      	ldr	r3, [pc, #120]	@ (8001e9c <HAL_I2C_MspInit+0xc8>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	60fb      	str	r3, [r7, #12]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8001e2e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001e32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e34:	2312      	movs	r3, #18
 8001e36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001e40:	2304      	movs	r3, #4
 8001e42:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8001e44:	f107 0314 	add.w	r3, r7, #20
 8001e48:	4619      	mov	r1, r3
 8001e4a:	4815      	ldr	r0, [pc, #84]	@ (8001ea0 <HAL_I2C_MspInit+0xcc>)
 8001e4c:	f000 ff52 	bl	8002cf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001e50:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e56:	2312      	movs	r3, #18
 8001e58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001e62:	2304      	movs	r3, #4
 8001e64:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8001e66:	f107 0314 	add.w	r3, r7, #20
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	480d      	ldr	r0, [pc, #52]	@ (8001ea4 <HAL_I2C_MspInit+0xd0>)
 8001e6e:	f000 ff41 	bl	8002cf4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001e72:	2300      	movs	r3, #0
 8001e74:	60bb      	str	r3, [r7, #8]
 8001e76:	4b09      	ldr	r3, [pc, #36]	@ (8001e9c <HAL_I2C_MspInit+0xc8>)
 8001e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e7a:	4a08      	ldr	r2, [pc, #32]	@ (8001e9c <HAL_I2C_MspInit+0xc8>)
 8001e7c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001e80:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e82:	4b06      	ldr	r3, [pc, #24]	@ (8001e9c <HAL_I2C_MspInit+0xc8>)
 8001e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e86:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001e8a:	60bb      	str	r3, [r7, #8]
 8001e8c:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8001e8e:	bf00      	nop
 8001e90:	3728      	adds	r7, #40	@ 0x28
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	40005c00 	.word	0x40005c00
 8001e9c:	40023800 	.word	0x40023800
 8001ea0:	40020800 	.word	0x40020800
 8001ea4:	40020000 	.word	0x40020000

08001ea8 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b09a      	sub	sp, #104	@ 0x68
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	605a      	str	r2, [r3, #4]
 8001eba:	609a      	str	r2, [r3, #8]
 8001ebc:	60da      	str	r2, [r3, #12]
 8001ebe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ec0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ec4:	2230      	movs	r2, #48	@ 0x30
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f003 fdd3 	bl	8005a74 <memset>
  if(hltdc->Instance==LTDC)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a81      	ldr	r2, [pc, #516]	@ (80020d8 <HAL_LTDC_MspInit+0x230>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	f040 80fb 	bne.w	80020d0 <HAL_LTDC_MspInit+0x228>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001eda:	2308      	movs	r3, #8
 8001edc:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 200;
 8001ede:	23c8      	movs	r3, #200	@ 0xc8
 8001ee0:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_16;
 8001ee6:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8001eea:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001eec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f003 f91f 	bl	8005134 <HAL_RCCEx_PeriphCLKConfig>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 8001efc:	f7ff ff3c 	bl	8001d78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001f00:	2300      	movs	r3, #0
 8001f02:	623b      	str	r3, [r7, #32]
 8001f04:	4b75      	ldr	r3, [pc, #468]	@ (80020dc <HAL_LTDC_MspInit+0x234>)
 8001f06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f08:	4a74      	ldr	r2, [pc, #464]	@ (80020dc <HAL_LTDC_MspInit+0x234>)
 8001f0a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001f0e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f10:	4b72      	ldr	r3, [pc, #456]	@ (80020dc <HAL_LTDC_MspInit+0x234>)
 8001f12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f14:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001f18:	623b      	str	r3, [r7, #32]
 8001f1a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	61fb      	str	r3, [r7, #28]
 8001f20:	4b6e      	ldr	r3, [pc, #440]	@ (80020dc <HAL_LTDC_MspInit+0x234>)
 8001f22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f24:	4a6d      	ldr	r2, [pc, #436]	@ (80020dc <HAL_LTDC_MspInit+0x234>)
 8001f26:	f043 0320 	orr.w	r3, r3, #32
 8001f2a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f2c:	4b6b      	ldr	r3, [pc, #428]	@ (80020dc <HAL_LTDC_MspInit+0x234>)
 8001f2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f30:	f003 0320 	and.w	r3, r3, #32
 8001f34:	61fb      	str	r3, [r7, #28]
 8001f36:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f38:	2300      	movs	r3, #0
 8001f3a:	61bb      	str	r3, [r7, #24]
 8001f3c:	4b67      	ldr	r3, [pc, #412]	@ (80020dc <HAL_LTDC_MspInit+0x234>)
 8001f3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f40:	4a66      	ldr	r2, [pc, #408]	@ (80020dc <HAL_LTDC_MspInit+0x234>)
 8001f42:	f043 0301 	orr.w	r3, r3, #1
 8001f46:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f48:	4b64      	ldr	r3, [pc, #400]	@ (80020dc <HAL_LTDC_MspInit+0x234>)
 8001f4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f4c:	f003 0301 	and.w	r3, r3, #1
 8001f50:	61bb      	str	r3, [r7, #24]
 8001f52:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f54:	2300      	movs	r3, #0
 8001f56:	617b      	str	r3, [r7, #20]
 8001f58:	4b60      	ldr	r3, [pc, #384]	@ (80020dc <HAL_LTDC_MspInit+0x234>)
 8001f5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f5c:	4a5f      	ldr	r2, [pc, #380]	@ (80020dc <HAL_LTDC_MspInit+0x234>)
 8001f5e:	f043 0302 	orr.w	r3, r3, #2
 8001f62:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f64:	4b5d      	ldr	r3, [pc, #372]	@ (80020dc <HAL_LTDC_MspInit+0x234>)
 8001f66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f68:	f003 0302 	and.w	r3, r3, #2
 8001f6c:	617b      	str	r3, [r7, #20]
 8001f6e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f70:	2300      	movs	r3, #0
 8001f72:	613b      	str	r3, [r7, #16]
 8001f74:	4b59      	ldr	r3, [pc, #356]	@ (80020dc <HAL_LTDC_MspInit+0x234>)
 8001f76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f78:	4a58      	ldr	r2, [pc, #352]	@ (80020dc <HAL_LTDC_MspInit+0x234>)
 8001f7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001f7e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f80:	4b56      	ldr	r3, [pc, #344]	@ (80020dc <HAL_LTDC_MspInit+0x234>)
 8001f82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f88:	613b      	str	r3, [r7, #16]
 8001f8a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	60fb      	str	r3, [r7, #12]
 8001f90:	4b52      	ldr	r3, [pc, #328]	@ (80020dc <HAL_LTDC_MspInit+0x234>)
 8001f92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f94:	4a51      	ldr	r2, [pc, #324]	@ (80020dc <HAL_LTDC_MspInit+0x234>)
 8001f96:	f043 0304 	orr.w	r3, r3, #4
 8001f9a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f9c:	4b4f      	ldr	r3, [pc, #316]	@ (80020dc <HAL_LTDC_MspInit+0x234>)
 8001f9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa0:	f003 0304 	and.w	r3, r3, #4
 8001fa4:	60fb      	str	r3, [r7, #12]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fa8:	2300      	movs	r3, #0
 8001faa:	60bb      	str	r3, [r7, #8]
 8001fac:	4b4b      	ldr	r3, [pc, #300]	@ (80020dc <HAL_LTDC_MspInit+0x234>)
 8001fae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb0:	4a4a      	ldr	r2, [pc, #296]	@ (80020dc <HAL_LTDC_MspInit+0x234>)
 8001fb2:	f043 0308 	orr.w	r3, r3, #8
 8001fb6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fb8:	4b48      	ldr	r3, [pc, #288]	@ (80020dc <HAL_LTDC_MspInit+0x234>)
 8001fba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fbc:	f003 0308 	and.w	r3, r3, #8
 8001fc0:	60bb      	str	r3, [r7, #8]
 8001fc2:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8001fc4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001fc8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fca:	2302      	movs	r3, #2
 8001fcc:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001fd6:	230e      	movs	r3, #14
 8001fd8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001fda:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001fde:	4619      	mov	r1, r3
 8001fe0:	483f      	ldr	r0, [pc, #252]	@ (80020e0 <HAL_LTDC_MspInit+0x238>)
 8001fe2:	f000 fe87 	bl	8002cf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001fe6:	f641 0358 	movw	r3, #6232	@ 0x1858
 8001fea:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fec:	2302      	movs	r3, #2
 8001fee:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001ff8:	230e      	movs	r3, #14
 8001ffa:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ffc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002000:	4619      	mov	r1, r3
 8002002:	4838      	ldr	r0, [pc, #224]	@ (80020e4 <HAL_LTDC_MspInit+0x23c>)
 8002004:	f000 fe76 	bl	8002cf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8002008:	2303      	movs	r3, #3
 800200a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800200c:	2302      	movs	r3, #2
 800200e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002010:	2300      	movs	r3, #0
 8002012:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002014:	2300      	movs	r3, #0
 8002016:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002018:	2309      	movs	r3, #9
 800201a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800201c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002020:	4619      	mov	r1, r3
 8002022:	4831      	ldr	r0, [pc, #196]	@ (80020e8 <HAL_LTDC_MspInit+0x240>)
 8002024:	f000 fe66 	bl	8002cf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8002028:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 800202c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800202e:	2302      	movs	r3, #2
 8002030:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002032:	2300      	movs	r3, #0
 8002034:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002036:	2300      	movs	r3, #0
 8002038:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800203a:	230e      	movs	r3, #14
 800203c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800203e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002042:	4619      	mov	r1, r3
 8002044:	4828      	ldr	r0, [pc, #160]	@ (80020e8 <HAL_LTDC_MspInit+0x240>)
 8002046:	f000 fe55 	bl	8002cf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 800204a:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 800204e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002050:	2302      	movs	r3, #2
 8002052:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002054:	2300      	movs	r3, #0
 8002056:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002058:	2300      	movs	r3, #0
 800205a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800205c:	230e      	movs	r3, #14
 800205e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002060:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002064:	4619      	mov	r1, r3
 8002066:	4821      	ldr	r0, [pc, #132]	@ (80020ec <HAL_LTDC_MspInit+0x244>)
 8002068:	f000 fe44 	bl	8002cf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 800206c:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8002070:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002072:	2302      	movs	r3, #2
 8002074:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002076:	2300      	movs	r3, #0
 8002078:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800207a:	2300      	movs	r3, #0
 800207c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800207e:	230e      	movs	r3, #14
 8002080:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002082:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002086:	4619      	mov	r1, r3
 8002088:	4819      	ldr	r0, [pc, #100]	@ (80020f0 <HAL_LTDC_MspInit+0x248>)
 800208a:	f000 fe33 	bl	8002cf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 800208e:	2348      	movs	r3, #72	@ 0x48
 8002090:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002092:	2302      	movs	r3, #2
 8002094:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002096:	2300      	movs	r3, #0
 8002098:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800209a:	2300      	movs	r3, #0
 800209c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800209e:	230e      	movs	r3, #14
 80020a0:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020a2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80020a6:	4619      	mov	r1, r3
 80020a8:	4812      	ldr	r0, [pc, #72]	@ (80020f4 <HAL_LTDC_MspInit+0x24c>)
 80020aa:	f000 fe23 	bl	8002cf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80020ae:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80020b2:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b4:	2302      	movs	r3, #2
 80020b6:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b8:	2300      	movs	r3, #0
 80020ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020bc:	2300      	movs	r3, #0
 80020be:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80020c0:	2309      	movs	r3, #9
 80020c2:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80020c4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80020c8:	4619      	mov	r1, r3
 80020ca:	4808      	ldr	r0, [pc, #32]	@ (80020ec <HAL_LTDC_MspInit+0x244>)
 80020cc:	f000 fe12 	bl	8002cf4 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 80020d0:	bf00      	nop
 80020d2:	3768      	adds	r7, #104	@ 0x68
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	40016800 	.word	0x40016800
 80020dc:	40023800 	.word	0x40023800
 80020e0:	40021400 	.word	0x40021400
 80020e4:	40020000 	.word	0x40020000
 80020e8:	40020400 	.word	0x40020400
 80020ec:	40021800 	.word	0x40021800
 80020f0:	40020800 	.word	0x40020800
 80020f4:	40020c00 	.word	0x40020c00

080020f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b08a      	sub	sp, #40	@ 0x28
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002100:	f107 0314 	add.w	r3, r7, #20
 8002104:	2200      	movs	r2, #0
 8002106:	601a      	str	r2, [r3, #0]
 8002108:	605a      	str	r2, [r3, #4]
 800210a:	609a      	str	r2, [r3, #8]
 800210c:	60da      	str	r2, [r3, #12]
 800210e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a19      	ldr	r2, [pc, #100]	@ (800217c <HAL_SPI_MspInit+0x84>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d12c      	bne.n	8002174 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800211a:	2300      	movs	r3, #0
 800211c:	613b      	str	r3, [r7, #16]
 800211e:	4b18      	ldr	r3, [pc, #96]	@ (8002180 <HAL_SPI_MspInit+0x88>)
 8002120:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002122:	4a17      	ldr	r2, [pc, #92]	@ (8002180 <HAL_SPI_MspInit+0x88>)
 8002124:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002128:	6453      	str	r3, [r2, #68]	@ 0x44
 800212a:	4b15      	ldr	r3, [pc, #84]	@ (8002180 <HAL_SPI_MspInit+0x88>)
 800212c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800212e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002132:	613b      	str	r3, [r7, #16]
 8002134:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002136:	2300      	movs	r3, #0
 8002138:	60fb      	str	r3, [r7, #12]
 800213a:	4b11      	ldr	r3, [pc, #68]	@ (8002180 <HAL_SPI_MspInit+0x88>)
 800213c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800213e:	4a10      	ldr	r2, [pc, #64]	@ (8002180 <HAL_SPI_MspInit+0x88>)
 8002140:	f043 0320 	orr.w	r3, r3, #32
 8002144:	6313      	str	r3, [r2, #48]	@ 0x30
 8002146:	4b0e      	ldr	r3, [pc, #56]	@ (8002180 <HAL_SPI_MspInit+0x88>)
 8002148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800214a:	f003 0320 	and.w	r3, r3, #32
 800214e:	60fb      	str	r3, [r7, #12]
 8002150:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8002152:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8002156:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002158:	2302      	movs	r3, #2
 800215a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215c:	2300      	movs	r3, #0
 800215e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002160:	2300      	movs	r3, #0
 8002162:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002164:	2305      	movs	r3, #5
 8002166:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002168:	f107 0314 	add.w	r3, r7, #20
 800216c:	4619      	mov	r1, r3
 800216e:	4805      	ldr	r0, [pc, #20]	@ (8002184 <HAL_SPI_MspInit+0x8c>)
 8002170:	f000 fdc0 	bl	8002cf4 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8002174:	bf00      	nop
 8002176:	3728      	adds	r7, #40	@ 0x28
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	40015000 	.word	0x40015000
 8002180:	40023800 	.word	0x40023800
 8002184:	40021400 	.word	0x40021400

08002188 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a08      	ldr	r2, [pc, #32]	@ (80021b8 <HAL_SPI_MspDeInit+0x30>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d10a      	bne.n	80021b0 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 800219a:	4b08      	ldr	r3, [pc, #32]	@ (80021bc <HAL_SPI_MspDeInit+0x34>)
 800219c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800219e:	4a07      	ldr	r2, [pc, #28]	@ (80021bc <HAL_SPI_MspDeInit+0x34>)
 80021a0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80021a4:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 80021a6:	f44f 7160 	mov.w	r1, #896	@ 0x380
 80021aa:	4805      	ldr	r0, [pc, #20]	@ (80021c0 <HAL_SPI_MspDeInit+0x38>)
 80021ac:	f000 ff4e 	bl	800304c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 80021b0:	bf00      	nop
 80021b2:	3708      	adds	r7, #8
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	40015000 	.word	0x40015000
 80021bc:	40023800 	.word	0x40023800
 80021c0:	40021400 	.word	0x40021400

080021c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80021c8:	bf00      	nop
 80021ca:	e7fd      	b.n	80021c8 <NMI_Handler+0x4>

080021cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021d0:	bf00      	nop
 80021d2:	e7fd      	b.n	80021d0 <HardFault_Handler+0x4>

080021d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021d8:	bf00      	nop
 80021da:	e7fd      	b.n	80021d8 <MemManage_Handler+0x4>

080021dc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021e0:	bf00      	nop
 80021e2:	e7fd      	b.n	80021e0 <BusFault_Handler+0x4>

080021e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021e8:	bf00      	nop
 80021ea:	e7fd      	b.n	80021e8 <UsageFault_Handler+0x4>

080021ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021f0:	bf00      	nop
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr

080021fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021fa:	b480      	push	{r7}
 80021fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021fe:	bf00      	nop
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800220c:	bf00      	nop
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr

08002216 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002216:	b580      	push	{r7, lr}
 8002218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800221a:	f000 fbe3 	bl	80029e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800221e:	bf00      	nop
 8002220:	bd80      	pop	{r7, pc}

08002222 <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 8002222:	b580      	push	{r7, lr}
 8002224:	b082      	sub	sp, #8
 8002226:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports 
    I2C3_MspInit();
 8002228:	f000 f9ce 	bl	80025c8 <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 800222c:	f000 f98e 	bl	800254c <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8002230:	2202      	movs	r2, #2
 8002232:	2103      	movs	r1, #3
 8002234:	2082      	movs	r0, #130	@ 0x82
 8002236:	f000 fa1b 	bl	8002670 <I2C3_Write>
    HAL_Delay(5);
 800223a:	2005      	movs	r0, #5
 800223c:	f000 fbf2 	bl	8002a24 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8002240:	2200      	movs	r2, #0
 8002242:	2103      	movs	r1, #3
 8002244:	2082      	movs	r0, #130	@ 0x82
 8002246:	f000 fa13 	bl	8002670 <I2C3_Write>
    HAL_Delay(2);
 800224a:	2002      	movs	r0, #2
 800224c:	f000 fbea 	bl	8002a24 <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 8002250:	1cba      	adds	r2, r7, #2
 8002252:	2302      	movs	r3, #2
 8002254:	2100      	movs	r1, #0
 8002256:	2082      	movs	r0, #130	@ 0x82
 8002258:	f000 fa5a 	bl	8002710 <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 800225c:	887b      	ldrh	r3, [r7, #2]
 800225e:	021b      	lsls	r3, r3, #8
 8002260:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 8002262:	887b      	ldrh	r3, [r7, #2]
 8002264:	0a1b      	lsrs	r3, r3, #8
 8002266:	b29a      	uxth	r2, r3
 8002268:	88fb      	ldrh	r3, [r7, #6]
 800226a:	4313      	orrs	r3, r2
 800226c:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 800226e:	88fb      	ldrh	r3, [r7, #6]
 8002270:	f640 0211 	movw	r2, #2065	@ 0x811
 8002274:	4293      	cmp	r3, r2
 8002276:	d001      	beq.n	800227c <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 8002278:	2303      	movs	r3, #3
 800227a:	e075      	b.n	8002368 <STMPE811_Init+0x146>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 800227c:	2202      	movs	r2, #2
 800227e:	2103      	movs	r1, #3
 8002280:	2082      	movs	r0, #130	@ 0x82
 8002282:	f000 f9f5 	bl	8002670 <I2C3_Write>
    HAL_Delay(5);
 8002286:	2005      	movs	r0, #5
 8002288:	f000 fbcc 	bl	8002a24 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 800228c:	2200      	movs	r2, #0
 800228e:	2103      	movs	r1, #3
 8002290:	2082      	movs	r0, #130	@ 0x82
 8002292:	f000 f9ed 	bl	8002670 <I2C3_Write>
    HAL_Delay(2);
 8002296:	2002      	movs	r0, #2
 8002298:	f000 fbc4 	bl	8002a24 <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 800229c:	2004      	movs	r0, #4
 800229e:	f000 f867 	bl	8002370 <STMPE811_Read>
 80022a2:	4603      	mov	r3, r0
 80022a4:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 80022a6:	797b      	ldrb	r3, [r7, #5]
 80022a8:	f023 0301 	bic.w	r3, r3, #1
 80022ac:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 80022ae:	797b      	ldrb	r3, [r7, #5]
 80022b0:	461a      	mov	r2, r3
 80022b2:	2104      	movs	r1, #4
 80022b4:	2082      	movs	r0, #130	@ 0x82
 80022b6:	f000 f9db 	bl	8002670 <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 80022ba:	2004      	movs	r0, #4
 80022bc:	f000 f858 	bl	8002370 <STMPE811_Read>
 80022c0:	4603      	mov	r3, r0
 80022c2:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 80022c4:	797b      	ldrb	r3, [r7, #5]
 80022c6:	f023 0302 	bic.w	r3, r3, #2
 80022ca:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 80022cc:	797b      	ldrb	r3, [r7, #5]
 80022ce:	461a      	mov	r2, r3
 80022d0:	2104      	movs	r1, #4
 80022d2:	2082      	movs	r0, #130	@ 0x82
 80022d4:	f000 f9cc 	bl	8002670 <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 80022d8:	2249      	movs	r2, #73	@ 0x49
 80022da:	2120      	movs	r1, #32
 80022dc:	2082      	movs	r0, #130	@ 0x82
 80022de:	f000 f9c7 	bl	8002670 <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 80022e2:	2002      	movs	r0, #2
 80022e4:	f000 fb9e 	bl	8002a24 <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 80022e8:	2201      	movs	r2, #1
 80022ea:	2121      	movs	r1, #33	@ 0x21
 80022ec:	2082      	movs	r0, #130	@ 0x82
 80022ee:	f000 f9bf 	bl	8002670 <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 80022f2:	2017      	movs	r0, #23
 80022f4:	f000 f83c 	bl	8002370 <STMPE811_Read>
 80022f8:	4603      	mov	r3, r0
 80022fa:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 80022fc:	797b      	ldrb	r3, [r7, #5]
 80022fe:	f043 031e 	orr.w	r3, r3, #30
 8002302:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 8002304:	797b      	ldrb	r3, [r7, #5]
 8002306:	461a      	mov	r2, r3
 8002308:	2117      	movs	r1, #23
 800230a:	2082      	movs	r0, #130	@ 0x82
 800230c:	f000 f9b0 	bl	8002670 <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 8002310:	229a      	movs	r2, #154	@ 0x9a
 8002312:	2141      	movs	r1, #65	@ 0x41
 8002314:	2082      	movs	r0, #130	@ 0x82
 8002316:	f000 f9ab 	bl	8002670 <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 800231a:	2201      	movs	r2, #1
 800231c:	214a      	movs	r1, #74	@ 0x4a
 800231e:	2082      	movs	r0, #130	@ 0x82
 8002320:	f000 f9a6 	bl	8002670 <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002324:	2201      	movs	r2, #1
 8002326:	214b      	movs	r1, #75	@ 0x4b
 8002328:	2082      	movs	r0, #130	@ 0x82
 800232a:	f000 f9a1 	bl	8002670 <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 800232e:	2200      	movs	r2, #0
 8002330:	214b      	movs	r1, #75	@ 0x4b
 8002332:	2082      	movs	r0, #130	@ 0x82
 8002334:	f000 f99c 	bl	8002670 <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 8002338:	2201      	movs	r2, #1
 800233a:	2156      	movs	r1, #86	@ 0x56
 800233c:	2082      	movs	r0, #130	@ 0x82
 800233e:	f000 f997 	bl	8002670 <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 8002342:	2201      	movs	r2, #1
 8002344:	2158      	movs	r1, #88	@ 0x58
 8002346:	2082      	movs	r0, #130	@ 0x82
 8002348:	f000 f992 	bl	8002670 <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 800234c:	2203      	movs	r2, #3
 800234e:	2140      	movs	r1, #64	@ 0x40
 8002350:	2082      	movs	r0, #130	@ 0x82
 8002352:	f000 f98d 	bl	8002670 <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 8002356:	22ff      	movs	r2, #255	@ 0xff
 8002358:	210b      	movs	r1, #11
 800235a:	2082      	movs	r0, #130	@ 0x82
 800235c:	f000 f988 	bl	8002670 <I2C3_Write>
    
    /* Wait for 2 ms delay */
    HAL_Delay(200);
 8002360:	20c8      	movs	r0, #200	@ 0xc8
 8002362:	f000 fb5f 	bl	8002a24 <HAL_Delay>

    return STMPE811_State_Ok;
 8002366:	2302      	movs	r3, #2

}
 8002368:	4618      	mov	r0, r3
 800236a:	3708      	adds	r7, #8
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}

08002370 <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	4603      	mov	r3, r0
 8002378:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 800237a:	f107 020f 	add.w	r2, r7, #15
 800237e:	79fb      	ldrb	r3, [r7, #7]
 8002380:	4619      	mov	r1, r3
 8002382:	2082      	movs	r0, #130	@ 0x82
 8002384:	f000 f99e 	bl	80026c4 <I2C3_Read>

    return readData;
 8002388:	7bfb      	ldrb	r3, [r7, #15]
}
 800238a:	4618      	mov	r0, r3
 800238c:	3710      	adds	r7, #16
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}

08002392 <STMPE811_ReadTouch>:
}

/* The below function was created by Tilen MAJERLE but modified by Xavion */

STMPE811_State_t STMPE811_ReadTouch(STMPE811_TouchData *structdata)  //TM Function
{
 8002392:	b580      	push	{r7, lr}
 8002394:	b084      	sub	sp, #16
 8002396:	af00      	add	r7, sp, #0
 8002398:	6078      	str	r0, [r7, #4]
    uint8_t val;

    /* Save state */
    structdata->last_pressed = structdata->pressed;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	791a      	ldrb	r2, [r3, #4]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	715a      	strb	r2, [r3, #5]

    /* Read */
    val = STMPE811_Read(STMPE811_TSC_CTRL);
 80023a2:	2040      	movs	r0, #64	@ 0x40
 80023a4:	f7ff ffe4 	bl	8002370 <STMPE811_Read>
 80023a8:	4603      	mov	r3, r0
 80023aa:	73fb      	strb	r3, [r7, #15]
    if ((val & 0x80) == 0) {
 80023ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	db0e      	blt.n	80023d2 <STMPE811_ReadTouch+0x40>
        //Not pressed
        structdata->pressed = STMPE811_State_Released;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2201      	movs	r2, #1
 80023b8:	711a      	strb	r2, [r3, #4]

        //Reset Fifo
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 80023ba:	2201      	movs	r2, #1
 80023bc:	214b      	movs	r1, #75	@ 0x4b
 80023be:	2082      	movs	r0, #130	@ 0x82
 80023c0:	f000 f956 	bl	8002670 <I2C3_Write>
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 80023c4:	2200      	movs	r2, #0
 80023c6:	214b      	movs	r1, #75	@ 0x4b
 80023c8:	2082      	movs	r0, #130	@ 0x82
 80023ca:	f000 f951 	bl	8002670 <I2C3_Write>

        return STMPE811_State_Released;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e0a7      	b.n	8002522 <STMPE811_ReadTouch+0x190>

    /* Clear all the status pending bits if any */
    //TM_I2C_Write(STMPE811_I2C, STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);

    //Pressed
    if (structdata->orientation == STMPE811_Orientation_Portrait_1) {
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	799b      	ldrb	r3, [r3, #6]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d117      	bne.n	800240a <STMPE811_ReadTouch+0x78>
        structdata->x = 239 - TM_STMPE811_ReadX(structdata->x);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	881b      	ldrh	r3, [r3, #0]
 80023de:	4618      	mov	r0, r3
 80023e0:	f000 f9b8 	bl	8002754 <TM_STMPE811_ReadX>
 80023e4:	4603      	mov	r3, r0
 80023e6:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 80023ea:	b29a      	uxth	r2, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	801a      	strh	r2, [r3, #0]
        structdata->y = 319 - TM_STMPE811_ReadY(structdata->y);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	885b      	ldrh	r3, [r3, #2]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f000 fa0d 	bl	8002814 <TM_STMPE811_ReadY>
 80023fa:	4603      	mov	r3, r0
 80023fc:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8002400:	3301      	adds	r3, #1
 8002402:	b29a      	uxth	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	805a      	strh	r2, [r3, #2]
 8002408:	e048      	b.n	800249c <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Portrait_2) {
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	799b      	ldrb	r3, [r3, #6]
 800240e:	2b01      	cmp	r3, #1
 8002410:	d112      	bne.n	8002438 <STMPE811_ReadTouch+0xa6>
        structdata->x = TM_STMPE811_ReadX(structdata->x);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	881b      	ldrh	r3, [r3, #0]
 8002416:	4618      	mov	r0, r3
 8002418:	f000 f99c 	bl	8002754 <TM_STMPE811_ReadX>
 800241c:	4603      	mov	r3, r0
 800241e:	461a      	mov	r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	801a      	strh	r2, [r3, #0]
        structdata->y = TM_STMPE811_ReadY(structdata->y);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	885b      	ldrh	r3, [r3, #2]
 8002428:	4618      	mov	r0, r3
 800242a:	f000 f9f3 	bl	8002814 <TM_STMPE811_ReadY>
 800242e:	4603      	mov	r3, r0
 8002430:	461a      	mov	r2, r3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	805a      	strh	r2, [r3, #2]
 8002436:	e031      	b.n	800249c <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_1) {
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	799b      	ldrb	r3, [r3, #6]
 800243c:	2b02      	cmp	r3, #2
 800243e:	d115      	bne.n	800246c <STMPE811_ReadTouch+0xda>
        structdata->y = TM_STMPE811_ReadX(structdata->y);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	885b      	ldrh	r3, [r3, #2]
 8002444:	4618      	mov	r0, r3
 8002446:	f000 f985 	bl	8002754 <TM_STMPE811_ReadX>
 800244a:	4603      	mov	r3, r0
 800244c:	461a      	mov	r2, r3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	805a      	strh	r2, [r3, #2]
        structdata->x = 319 - TM_STMPE811_ReadY(structdata->x);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	881b      	ldrh	r3, [r3, #0]
 8002456:	4618      	mov	r0, r3
 8002458:	f000 f9dc 	bl	8002814 <TM_STMPE811_ReadY>
 800245c:	4603      	mov	r3, r0
 800245e:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8002462:	3301      	adds	r3, #1
 8002464:	b29a      	uxth	r2, r3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	801a      	strh	r2, [r3, #0]
 800246a:	e017      	b.n	800249c <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_2) {
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	799b      	ldrb	r3, [r3, #6]
 8002470:	2b03      	cmp	r3, #3
 8002472:	d113      	bne.n	800249c <STMPE811_ReadTouch+0x10a>
        structdata->y = 239 - TM_STMPE811_ReadX(structdata->x);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	881b      	ldrh	r3, [r3, #0]
 8002478:	4618      	mov	r0, r3
 800247a:	f000 f96b 	bl	8002754 <TM_STMPE811_ReadX>
 800247e:	4603      	mov	r3, r0
 8002480:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8002484:	b29a      	uxth	r2, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	805a      	strh	r2, [r3, #2]
        structdata->x = TM_STMPE811_ReadY(structdata->x);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	881b      	ldrh	r3, [r3, #0]
 800248e:	4618      	mov	r0, r3
 8002490:	f000 f9c0 	bl	8002814 <TM_STMPE811_ReadY>
 8002494:	4603      	mov	r3, r0
 8002496:	461a      	mov	r2, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 800249c:	2201      	movs	r2, #1
 800249e:	214b      	movs	r1, #75	@ 0x4b
 80024a0:	2082      	movs	r0, #130	@ 0x82
 80024a2:	f000 f8e5 	bl	8002670 <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 80024a6:	2200      	movs	r2, #0
 80024a8:	214b      	movs	r1, #75	@ 0x4b
 80024aa:	2082      	movs	r0, #130	@ 0x82
 80024ac:	f000 f8e0 	bl	8002670 <I2C3_Write>

    //Check for valid data
    if (structdata->orientation == STMPE811_Orientation_Portrait_1 || structdata->orientation == STMPE811_Orientation_Portrait_2) {
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	799b      	ldrb	r3, [r3, #6]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d003      	beq.n	80024c0 <STMPE811_ReadTouch+0x12e>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	799b      	ldrb	r3, [r3, #6]
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d115      	bne.n	80024ec <STMPE811_ReadTouch+0x15a>
        //Portrait
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	881b      	ldrh	r3, [r3, #0]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d027      	beq.n	8002518 <STMPE811_ReadTouch+0x186>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	881b      	ldrh	r3, [r3, #0]
 80024cc:	2bee      	cmp	r3, #238	@ 0xee
 80024ce:	d823      	bhi.n	8002518 <STMPE811_ReadTouch+0x186>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	885b      	ldrh	r3, [r3, #2]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d01f      	beq.n	8002518 <STMPE811_ReadTouch+0x186>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	885b      	ldrh	r3, [r3, #2]
 80024dc:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 80024e0:	d81a      	bhi.n	8002518 <STMPE811_ReadTouch+0x186>
            structdata->pressed = STMPE811_State_Pressed;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 80024e8:	2300      	movs	r3, #0
 80024ea:	e01a      	b.n	8002522 <STMPE811_ReadTouch+0x190>
        }
    } else {
        //Landscape
        if (structdata->x > 0 && structdata->x < 319 && structdata->y > 0 && structdata->y < 239) {
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	881b      	ldrh	r3, [r3, #0]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d012      	beq.n	800251a <STMPE811_ReadTouch+0x188>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	881b      	ldrh	r3, [r3, #0]
 80024f8:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 80024fc:	d80d      	bhi.n	800251a <STMPE811_ReadTouch+0x188>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	885b      	ldrh	r3, [r3, #2]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d009      	beq.n	800251a <STMPE811_ReadTouch+0x188>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	885b      	ldrh	r3, [r3, #2]
 800250a:	2bee      	cmp	r3, #238	@ 0xee
 800250c:	d805      	bhi.n	800251a <STMPE811_ReadTouch+0x188>
            structdata->pressed = STMPE811_State_Pressed;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 8002514:	2300      	movs	r3, #0
 8002516:	e004      	b.n	8002522 <STMPE811_ReadTouch+0x190>
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 8002518:	bf00      	nop
        }
    }

    structdata->pressed = STMPE811_State_Released;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2201      	movs	r2, #1
 800251e:	711a      	strb	r2, [r3, #4]

    return STMPE811_State_Released;
 8002520:	2301      	movs	r3, #1
}
 8002522:	4618      	mov	r0, r3
 8002524:	3710      	adds	r7, #16
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
	...

0800252c <verifyHAL_I2C_IS_OKAY>:
    }
    return true;
}

//  ******************************** I2C Functions ********************************//
void verifyHAL_I2C_IS_OKAY(){
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
    if (HAL_status != HAL_OK)
 8002530:	4b05      	ldr	r3, [pc, #20]	@ (8002548 <verifyHAL_I2C_IS_OKAY+0x1c>)
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d001      	beq.n	800253c <verifyHAL_I2C_IS_OKAY+0x10>
    {
        while(1);
 8002538:	bf00      	nop
 800253a:	e7fd      	b.n	8002538 <verifyHAL_I2C_IS_OKAY+0xc>
    }
}
 800253c:	bf00      	nop
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	20025a10 	.word	0x20025a10

0800254c <I2C3_Init>:

static void I2C3_Init()
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 8002552:	2300      	movs	r3, #0
 8002554:	603b      	str	r3, [r7, #0]
 8002556:	4b18      	ldr	r3, [pc, #96]	@ (80025b8 <I2C3_Init+0x6c>)
 8002558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800255a:	4a17      	ldr	r2, [pc, #92]	@ (80025b8 <I2C3_Init+0x6c>)
 800255c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002560:	6413      	str	r3, [r2, #64]	@ 0x40
 8002562:	4b15      	ldr	r3, [pc, #84]	@ (80025b8 <I2C3_Init+0x6c>)
 8002564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002566:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800256a:	603b      	str	r3, [r7, #0]
 800256c:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 800256e:	4b13      	ldr	r3, [pc, #76]	@ (80025bc <I2C3_Init+0x70>)
 8002570:	4a13      	ldr	r2, [pc, #76]	@ (80025c0 <I2C3_Init+0x74>)
 8002572:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 8002574:	4b11      	ldr	r3, [pc, #68]	@ (80025bc <I2C3_Init+0x70>)
 8002576:	4a13      	ldr	r2, [pc, #76]	@ (80025c4 <I2C3_Init+0x78>)
 8002578:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800257a:	4b10      	ldr	r3, [pc, #64]	@ (80025bc <I2C3_Init+0x70>)
 800257c:	2200      	movs	r2, #0
 800257e:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 8002580:	4b0e      	ldr	r3, [pc, #56]	@ (80025bc <I2C3_Init+0x70>)
 8002582:	2200      	movs	r2, #0
 8002584:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002586:	4b0d      	ldr	r3, [pc, #52]	@ (80025bc <I2C3_Init+0x70>)
 8002588:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800258c:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 800258e:	4b0b      	ldr	r3, [pc, #44]	@ (80025bc <I2C3_Init+0x70>)
 8002590:	2200      	movs	r2, #0
 8002592:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002594:	4b09      	ldr	r3, [pc, #36]	@ (80025bc <I2C3_Init+0x70>)
 8002596:	2200      	movs	r2, #0
 8002598:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode? 

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 800259a:	4808      	ldr	r0, [pc, #32]	@ (80025bc <I2C3_Init+0x70>)
 800259c:	f000 fe7c 	bl	8003298 <HAL_I2C_Init>
 80025a0:	4603      	mov	r3, r0
 80025a2:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 80025a4:	79fb      	ldrb	r3, [r7, #7]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d001      	beq.n	80025ae <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 80025aa:	bf00      	nop
 80025ac:	e7fd      	b.n	80025aa <I2C3_Init+0x5e>
    }
    return;
 80025ae:	bf00      	nop
}
 80025b0:	3708      	adds	r7, #8
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	40023800 	.word	0x40023800
 80025bc:	200259bc 	.word	0x200259bc
 80025c0:	40005c00 	.word	0x40005c00
 80025c4:	000186a0 	.word	0x000186a0

080025c8 <I2C3_MspInit>:

// GPIO Initializations 
static void I2C3_MspInit(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b088      	sub	sp, #32
 80025cc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025ce:	f107 030c 	add.w	r3, r7, #12
 80025d2:	2200      	movs	r2, #0
 80025d4:	601a      	str	r2, [r3, #0]
 80025d6:	605a      	str	r2, [r3, #4]
 80025d8:	609a      	str	r2, [r3, #8]
 80025da:	60da      	str	r2, [r3, #12]
 80025dc:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025de:	2300      	movs	r3, #0
 80025e0:	60bb      	str	r3, [r7, #8]
 80025e2:	4b20      	ldr	r3, [pc, #128]	@ (8002664 <I2C3_MspInit+0x9c>)
 80025e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025e6:	4a1f      	ldr	r2, [pc, #124]	@ (8002664 <I2C3_MspInit+0x9c>)
 80025e8:	f043 0304 	orr.w	r3, r3, #4
 80025ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80025ee:	4b1d      	ldr	r3, [pc, #116]	@ (8002664 <I2C3_MspInit+0x9c>)
 80025f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f2:	f003 0304 	and.w	r3, r3, #4
 80025f6:	60bb      	str	r3, [r7, #8]
 80025f8:	68bb      	ldr	r3, [r7, #8]

    // GPIOA 
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025fa:	2300      	movs	r3, #0
 80025fc:	607b      	str	r3, [r7, #4]
 80025fe:	4b19      	ldr	r3, [pc, #100]	@ (8002664 <I2C3_MspInit+0x9c>)
 8002600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002602:	4a18      	ldr	r2, [pc, #96]	@ (8002664 <I2C3_MspInit+0x9c>)
 8002604:	f043 0301 	orr.w	r3, r3, #1
 8002608:	6313      	str	r3, [r2, #48]	@ 0x30
 800260a:	4b16      	ldr	r3, [pc, #88]	@ (8002664 <I2C3_MspInit+0x9c>)
 800260c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	607b      	str	r3, [r7, #4]
 8002614:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8002616:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800261a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800261c:	2312      	movs	r3, #18
 800261e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002620:	2300      	movs	r3, #0
 8002622:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002624:	2300      	movs	r3, #0
 8002626:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002628:	2304      	movs	r3, #4
 800262a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 800262c:	f107 030c 	add.w	r3, r7, #12
 8002630:	4619      	mov	r1, r3
 8002632:	480d      	ldr	r0, [pc, #52]	@ (8002668 <I2C3_MspInit+0xa0>)
 8002634:	f000 fb5e 	bl	8002cf4 <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8002638:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800263c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800263e:	2312      	movs	r3, #18
 8002640:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002642:	2300      	movs	r3, #0
 8002644:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002646:	2300      	movs	r3, #0
 8002648:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800264a:	2304      	movs	r3, #4
 800264c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800264e:	f107 030c 	add.w	r3, r7, #12
 8002652:	4619      	mov	r1, r3
 8002654:	4805      	ldr	r0, [pc, #20]	@ (800266c <I2C3_MspInit+0xa4>)
 8002656:	f000 fb4d 	bl	8002cf4 <HAL_GPIO_Init>
    
}
 800265a:	bf00      	nop
 800265c:	3720      	adds	r7, #32
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	40023800 	.word	0x40023800
 8002668:	40020800 	.word	0x40020800
 800266c:	40020000 	.word	0x40020000

08002670 <I2C3_Write>:

// This function should only be used for single BYTE transfers 
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b088      	sub	sp, #32
 8002674:	af04      	add	r7, sp, #16
 8002676:	4603      	mov	r3, r0
 8002678:	80fb      	strh	r3, [r7, #6]
 800267a:	460b      	mov	r3, r1
 800267c:	717b      	strb	r3, [r7, #5]
 800267e:	4613      	mov	r3, r2
 8002680:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 8002682:	793b      	ldrb	r3, [r7, #4]
 8002684:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call? 
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8002686:	797b      	ldrb	r3, [r7, #5]
 8002688:	b29a      	uxth	r2, r3
 800268a:	88f9      	ldrh	r1, [r7, #6]
 800268c:	4b0a      	ldr	r3, [pc, #40]	@ (80026b8 <I2C3_Write+0x48>)
 800268e:	9302      	str	r3, [sp, #8]
 8002690:	2301      	movs	r3, #1
 8002692:	9301      	str	r3, [sp, #4]
 8002694:	f107 030f 	add.w	r3, r7, #15
 8002698:	9300      	str	r3, [sp, #0]
 800269a:	2301      	movs	r3, #1
 800269c:	4807      	ldr	r0, [pc, #28]	@ (80026bc <I2C3_Write+0x4c>)
 800269e:	f000 ff3f 	bl	8003520 <HAL_I2C_Mem_Write>
 80026a2:	4603      	mov	r3, r0
 80026a4:	461a      	mov	r2, r3
 80026a6:	4b06      	ldr	r3, [pc, #24]	@ (80026c0 <I2C3_Write+0x50>)
 80026a8:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 80026aa:	f7ff ff3f 	bl	800252c <verifyHAL_I2C_IS_OKAY>
}
 80026ae:	bf00      	nop
 80026b0:	3710      	adds	r7, #16
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	0003d090 	.word	0x0003d090
 80026bc:	200259bc 	.word	0x200259bc
 80026c0:	20025a10 	.word	0x20025a10

080026c4 <I2C3_Read>:

// This function should only be used for single BYTE transfers 
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b086      	sub	sp, #24
 80026c8:	af04      	add	r7, sp, #16
 80026ca:	4603      	mov	r3, r0
 80026cc:	603a      	str	r2, [r7, #0]
 80026ce:	71fb      	strb	r3, [r7, #7]
 80026d0:	460b      	mov	r3, r1
 80026d2:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 80026d4:	79fb      	ldrb	r3, [r7, #7]
 80026d6:	b299      	uxth	r1, r3
 80026d8:	79bb      	ldrb	r3, [r7, #6]
 80026da:	b29a      	uxth	r2, r3
 80026dc:	4b09      	ldr	r3, [pc, #36]	@ (8002704 <I2C3_Read+0x40>)
 80026de:	9302      	str	r3, [sp, #8]
 80026e0:	2301      	movs	r3, #1
 80026e2:	9301      	str	r3, [sp, #4]
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	9300      	str	r3, [sp, #0]
 80026e8:	2301      	movs	r3, #1
 80026ea:	4807      	ldr	r0, [pc, #28]	@ (8002708 <I2C3_Read+0x44>)
 80026ec:	f001 f812 	bl	8003714 <HAL_I2C_Mem_Read>
 80026f0:	4603      	mov	r3, r0
 80026f2:	461a      	mov	r2, r3
 80026f4:	4b05      	ldr	r3, [pc, #20]	@ (800270c <I2C3_Read+0x48>)
 80026f6:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 80026f8:	f7ff ff18 	bl	800252c <verifyHAL_I2C_IS_OKAY>
}
 80026fc:	bf00      	nop
 80026fe:	3708      	adds	r7, #8
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	0003d090 	.word	0x0003d090
 8002708:	200259bc 	.word	0x200259bc
 800270c:	20025a10 	.word	0x20025a10

08002710 <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b086      	sub	sp, #24
 8002714:	af04      	add	r7, sp, #16
 8002716:	603a      	str	r2, [r7, #0]
 8002718:	461a      	mov	r2, r3
 800271a:	4603      	mov	r3, r0
 800271c:	71fb      	strb	r3, [r7, #7]
 800271e:	460b      	mov	r3, r1
 8002720:	71bb      	strb	r3, [r7, #6]
 8002722:	4613      	mov	r3, r2
 8002724:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 8002726:	79fb      	ldrb	r3, [r7, #7]
 8002728:	b299      	uxth	r1, r3
 800272a:	79bb      	ldrb	r3, [r7, #6]
 800272c:	b29a      	uxth	r2, r3
 800272e:	4b07      	ldr	r3, [pc, #28]	@ (800274c <I2C3_MulitByteRead+0x3c>)
 8002730:	9302      	str	r3, [sp, #8]
 8002732:	88bb      	ldrh	r3, [r7, #4]
 8002734:	9301      	str	r3, [sp, #4]
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	9300      	str	r3, [sp, #0]
 800273a:	2301      	movs	r3, #1
 800273c:	4804      	ldr	r0, [pc, #16]	@ (8002750 <I2C3_MulitByteRead+0x40>)
 800273e:	f000 ffe9 	bl	8003714 <HAL_I2C_Mem_Read>
}
 8002742:	bf00      	nop
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	0003d090 	.word	0x0003d090
 8002750:	200259bc 	.word	0x200259bc

08002754 <TM_STMPE811_ReadX>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x) { // TM FUNCTION 
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	4603      	mov	r3, r0
 800275c:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 800275e:	204d      	movs	r0, #77	@ 0x4d
 8002760:	f7ff fe06 	bl	8002370 <STMPE811_Read>
 8002764:	4603      	mov	r3, r0
 8002766:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 8002768:	204e      	movs	r0, #78	@ 0x4e
 800276a:	f7ff fe01 	bl	8002370 <STMPE811_Read>
 800276e:	4603      	mov	r3, r0
 8002770:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8002772:	7a7b      	ldrb	r3, [r7, #9]
 8002774:	b21b      	sxth	r3, r3
 8002776:	021b      	lsls	r3, r3, #8
 8002778:	b21a      	sxth	r2, r3
 800277a:	7a3b      	ldrb	r3, [r7, #8]
 800277c:	b21b      	sxth	r3, r3
 800277e:	4313      	orrs	r3, r2
 8002780:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000) {
 8002782:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002786:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800278a:	4293      	cmp	r3, r2
 800278c:	dc06      	bgt.n	800279c <TM_STMPE811_ReadX+0x48>
        val = 3900 - val;
 800278e:	89fb      	ldrh	r3, [r7, #14]
 8002790:	f5c3 6373 	rsb	r3, r3, #3888	@ 0xf30
 8002794:	330c      	adds	r3, #12
 8002796:	b29b      	uxth	r3, r3
 8002798:	81fb      	strh	r3, [r7, #14]
 800279a:	e005      	b.n	80027a8 <TM_STMPE811_ReadX+0x54>
    } else {
        val = 3800 - val;
 800279c:	89fb      	ldrh	r3, [r7, #14]
 800279e:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 80027a2:	3308      	adds	r3, #8
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 80027a8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80027ac:	4a18      	ldr	r2, [pc, #96]	@ (8002810 <TM_STMPE811_ReadX+0xbc>)
 80027ae:	fb82 1203 	smull	r1, r2, r2, r3
 80027b2:	441a      	add	r2, r3
 80027b4:	10d2      	asrs	r2, r2, #3
 80027b6:	17db      	asrs	r3, r3, #31
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	81fb      	strh	r3, [r7, #14]

    if (val > 239) {
 80027bc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80027c0:	2bef      	cmp	r3, #239	@ 0xef
 80027c2:	dd02      	ble.n	80027ca <TM_STMPE811_ReadX+0x76>
        val = 239;
 80027c4:	23ef      	movs	r3, #239	@ 0xef
 80027c6:	81fb      	strh	r3, [r7, #14]
 80027c8:	e005      	b.n	80027d6 <TM_STMPE811_ReadX+0x82>
    } else if (val < 0) {
 80027ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	da01      	bge.n	80027d6 <TM_STMPE811_ReadX+0x82>
        val = 0;
 80027d2:	2300      	movs	r3, #0
 80027d4:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 80027d6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80027da:	88fb      	ldrh	r3, [r7, #6]
 80027dc:	429a      	cmp	r2, r3
 80027de:	dd05      	ble.n	80027ec <TM_STMPE811_ReadX+0x98>
 80027e0:	89fa      	ldrh	r2, [r7, #14]
 80027e2:	88fb      	ldrh	r3, [r7, #6]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	b21b      	sxth	r3, r3
 80027ea:	e004      	b.n	80027f6 <TM_STMPE811_ReadX+0xa2>
 80027ec:	89fb      	ldrh	r3, [r7, #14]
 80027ee:	88fa      	ldrh	r2, [r7, #6]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	b21b      	sxth	r3, r3
 80027f6:	81bb      	strh	r3, [r7, #12]
    if (dx > 4) {
 80027f8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80027fc:	2b04      	cmp	r3, #4
 80027fe:	dd01      	ble.n	8002804 <TM_STMPE811_ReadX+0xb0>
        return val;
 8002800:	89fb      	ldrh	r3, [r7, #14]
 8002802:	e000      	b.n	8002806 <TM_STMPE811_ReadX+0xb2>
    }
    return x;
 8002804:	88fb      	ldrh	r3, [r7, #6]
}
 8002806:	4618      	mov	r0, r3
 8002808:	3710      	adds	r7, #16
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	88888889 	.word	0x88888889

08002814 <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y) { // TM FUNCTION 
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	4603      	mov	r3, r0
 800281c:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 800281e:	204f      	movs	r0, #79	@ 0x4f
 8002820:	f7ff fda6 	bl	8002370 <STMPE811_Read>
 8002824:	4603      	mov	r3, r0
 8002826:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 8002828:	2050      	movs	r0, #80	@ 0x50
 800282a:	f7ff fda1 	bl	8002370 <STMPE811_Read>
 800282e:	4603      	mov	r3, r0
 8002830:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8002832:	7a7b      	ldrb	r3, [r7, #9]
 8002834:	b21b      	sxth	r3, r3
 8002836:	021b      	lsls	r3, r3, #8
 8002838:	b21a      	sxth	r2, r3
 800283a:	7a3b      	ldrb	r3, [r7, #8]
 800283c:	b21b      	sxth	r3, r3
 800283e:	4313      	orrs	r3, r2
 8002840:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 8002842:	89fb      	ldrh	r3, [r7, #14]
 8002844:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002848:	b29b      	uxth	r3, r3
 800284a:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 800284c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002850:	4a18      	ldr	r2, [pc, #96]	@ (80028b4 <TM_STMPE811_ReadY+0xa0>)
 8002852:	fb82 1203 	smull	r1, r2, r2, r3
 8002856:	1052      	asrs	r2, r2, #1
 8002858:	17db      	asrs	r3, r3, #31
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	81fb      	strh	r3, [r7, #14]

    if (val <= 0) {
 800285e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002862:	2b00      	cmp	r3, #0
 8002864:	dc02      	bgt.n	800286c <TM_STMPE811_ReadY+0x58>
        val = 0;
 8002866:	2300      	movs	r3, #0
 8002868:	81fb      	strh	r3, [r7, #14]
 800286a:	e007      	b.n	800287c <TM_STMPE811_ReadY+0x68>
    } else if (val >= 320) {
 800286c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002870:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002874:	db02      	blt.n	800287c <TM_STMPE811_ReadY+0x68>
        val = 319;
 8002876:	f240 133f 	movw	r3, #319	@ 0x13f
 800287a:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 800287c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002880:	88fb      	ldrh	r3, [r7, #6]
 8002882:	429a      	cmp	r2, r3
 8002884:	dd05      	ble.n	8002892 <TM_STMPE811_ReadY+0x7e>
 8002886:	89fa      	ldrh	r2, [r7, #14]
 8002888:	88fb      	ldrh	r3, [r7, #6]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	b29b      	uxth	r3, r3
 800288e:	b21b      	sxth	r3, r3
 8002890:	e004      	b.n	800289c <TM_STMPE811_ReadY+0x88>
 8002892:	89fb      	ldrh	r3, [r7, #14]
 8002894:	88fa      	ldrh	r2, [r7, #6]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	b29b      	uxth	r3, r3
 800289a:	b21b      	sxth	r3, r3
 800289c:	81bb      	strh	r3, [r7, #12]
    if (dy > 4) {
 800289e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80028a2:	2b04      	cmp	r3, #4
 80028a4:	dd01      	ble.n	80028aa <TM_STMPE811_ReadY+0x96>
        return val;
 80028a6:	89fb      	ldrh	r3, [r7, #14]
 80028a8:	e000      	b.n	80028ac <TM_STMPE811_ReadY+0x98>
    }
    return y;
 80028aa:	88fb      	ldrh	r3, [r7, #6]
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3710      	adds	r7, #16
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	2e8ba2e9 	.word	0x2e8ba2e9

080028b8 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0
}
 80028bc:	bf00      	nop
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
	...

080028c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028cc:	4b06      	ldr	r3, [pc, #24]	@ (80028e8 <SystemInit+0x20>)
 80028ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028d2:	4a05      	ldr	r2, [pc, #20]	@ (80028e8 <SystemInit+0x20>)
 80028d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80028d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028dc:	bf00      	nop
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	e000ed00 	.word	0xe000ed00

080028ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80028ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002924 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80028f0:	f7ff ffea 	bl	80028c8 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80028f4:	480c      	ldr	r0, [pc, #48]	@ (8002928 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80028f6:	490d      	ldr	r1, [pc, #52]	@ (800292c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80028f8:	4a0d      	ldr	r2, [pc, #52]	@ (8002930 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80028fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028fc:	e002      	b.n	8002904 <LoopCopyDataInit>

080028fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002900:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002902:	3304      	adds	r3, #4

08002904 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002904:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002906:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002908:	d3f9      	bcc.n	80028fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800290a:	4a0a      	ldr	r2, [pc, #40]	@ (8002934 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800290c:	4c0a      	ldr	r4, [pc, #40]	@ (8002938 <LoopFillZerobss+0x22>)
  movs r3, #0
 800290e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002910:	e001      	b.n	8002916 <LoopFillZerobss>

08002912 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002912:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002914:	3204      	adds	r2, #4

08002916 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002916:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002918:	d3fb      	bcc.n	8002912 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800291a:	f003 f8b3 	bl	8005a84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800291e:	f7ff f9b2 	bl	8001c86 <main>
  bx  lr    
 8002922:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002924:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002928:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800292c:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8002930:	080075dc 	.word	0x080075dc
  ldr r2, =_sbss
 8002934:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8002938:	20025a18 	.word	0x20025a18

0800293c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800293c:	e7fe      	b.n	800293c <ADC_IRQHandler>
	...

08002940 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002944:	4b0e      	ldr	r3, [pc, #56]	@ (8002980 <HAL_Init+0x40>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a0d      	ldr	r2, [pc, #52]	@ (8002980 <HAL_Init+0x40>)
 800294a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800294e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002950:	4b0b      	ldr	r3, [pc, #44]	@ (8002980 <HAL_Init+0x40>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a0a      	ldr	r2, [pc, #40]	@ (8002980 <HAL_Init+0x40>)
 8002956:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800295a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800295c:	4b08      	ldr	r3, [pc, #32]	@ (8002980 <HAL_Init+0x40>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a07      	ldr	r2, [pc, #28]	@ (8002980 <HAL_Init+0x40>)
 8002962:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002966:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002968:	2003      	movs	r0, #3
 800296a:	f000 f973 	bl	8002c54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800296e:	2000      	movs	r0, #0
 8002970:	f000 f808 	bl	8002984 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002974:	f7ff fa06 	bl	8001d84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	40023c00 	.word	0x40023c00

08002984 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800298c:	4b12      	ldr	r3, [pc, #72]	@ (80029d8 <HAL_InitTick+0x54>)
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	4b12      	ldr	r3, [pc, #72]	@ (80029dc <HAL_InitTick+0x58>)
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	4619      	mov	r1, r3
 8002996:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800299a:	fbb3 f3f1 	udiv	r3, r3, r1
 800299e:	fbb2 f3f3 	udiv	r3, r2, r3
 80029a2:	4618      	mov	r0, r3
 80029a4:	f000 f999 	bl	8002cda <HAL_SYSTICK_Config>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e00e      	b.n	80029d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2b0f      	cmp	r3, #15
 80029b6:	d80a      	bhi.n	80029ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029b8:	2200      	movs	r2, #0
 80029ba:	6879      	ldr	r1, [r7, #4]
 80029bc:	f04f 30ff 	mov.w	r0, #4294967295
 80029c0:	f000 f953 	bl	8002c6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029c4:	4a06      	ldr	r2, [pc, #24]	@ (80029e0 <HAL_InitTick+0x5c>)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029ca:	2300      	movs	r3, #0
 80029cc:	e000      	b.n	80029d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3708      	adds	r7, #8
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	2000001c 	.word	0x2000001c
 80029dc:	20000024 	.word	0x20000024
 80029e0:	20000020 	.word	0x20000020

080029e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029e8:	4b06      	ldr	r3, [pc, #24]	@ (8002a04 <HAL_IncTick+0x20>)
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	461a      	mov	r2, r3
 80029ee:	4b06      	ldr	r3, [pc, #24]	@ (8002a08 <HAL_IncTick+0x24>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4413      	add	r3, r2
 80029f4:	4a04      	ldr	r2, [pc, #16]	@ (8002a08 <HAL_IncTick+0x24>)
 80029f6:	6013      	str	r3, [r2, #0]
}
 80029f8:	bf00      	nop
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	20000024 	.word	0x20000024
 8002a08:	20025a14 	.word	0x20025a14

08002a0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	af00      	add	r7, sp, #0
  return uwTick;
 8002a10:	4b03      	ldr	r3, [pc, #12]	@ (8002a20 <HAL_GetTick+0x14>)
 8002a12:	681b      	ldr	r3, [r3, #0]
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
 8002a1e:	bf00      	nop
 8002a20:	20025a14 	.word	0x20025a14

08002a24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a2c:	f7ff ffee 	bl	8002a0c <HAL_GetTick>
 8002a30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a3c:	d005      	beq.n	8002a4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a3e:	4b0a      	ldr	r3, [pc, #40]	@ (8002a68 <HAL_Delay+0x44>)
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	461a      	mov	r2, r3
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	4413      	add	r3, r2
 8002a48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a4a:	bf00      	nop
 8002a4c:	f7ff ffde 	bl	8002a0c <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	68fa      	ldr	r2, [r7, #12]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d8f7      	bhi.n	8002a4c <HAL_Delay+0x28>
  {
  }
}
 8002a5c:	bf00      	nop
 8002a5e:	bf00      	nop
 8002a60:	3710      	adds	r7, #16
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	20000024 	.word	0x20000024

08002a6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b085      	sub	sp, #20
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f003 0307 	and.w	r3, r3, #7
 8002a7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a7c:	4b0c      	ldr	r3, [pc, #48]	@ (8002ab0 <__NVIC_SetPriorityGrouping+0x44>)
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a82:	68ba      	ldr	r2, [r7, #8]
 8002a84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a88:	4013      	ands	r3, r2
 8002a8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a94:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a9e:	4a04      	ldr	r2, [pc, #16]	@ (8002ab0 <__NVIC_SetPriorityGrouping+0x44>)
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	60d3      	str	r3, [r2, #12]
}
 8002aa4:	bf00      	nop
 8002aa6:	3714      	adds	r7, #20
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr
 8002ab0:	e000ed00 	.word	0xe000ed00

08002ab4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ab8:	4b04      	ldr	r3, [pc, #16]	@ (8002acc <__NVIC_GetPriorityGrouping+0x18>)
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	0a1b      	lsrs	r3, r3, #8
 8002abe:	f003 0307 	and.w	r3, r3, #7
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr
 8002acc:	e000ed00 	.word	0xe000ed00

08002ad0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	db0b      	blt.n	8002afa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ae2:	79fb      	ldrb	r3, [r7, #7]
 8002ae4:	f003 021f 	and.w	r2, r3, #31
 8002ae8:	4907      	ldr	r1, [pc, #28]	@ (8002b08 <__NVIC_EnableIRQ+0x38>)
 8002aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aee:	095b      	lsrs	r3, r3, #5
 8002af0:	2001      	movs	r0, #1
 8002af2:	fa00 f202 	lsl.w	r2, r0, r2
 8002af6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002afa:	bf00      	nop
 8002afc:	370c      	adds	r7, #12
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop
 8002b08:	e000e100 	.word	0xe000e100

08002b0c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	4603      	mov	r3, r0
 8002b14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	db12      	blt.n	8002b44 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b1e:	79fb      	ldrb	r3, [r7, #7]
 8002b20:	f003 021f 	and.w	r2, r3, #31
 8002b24:	490a      	ldr	r1, [pc, #40]	@ (8002b50 <__NVIC_DisableIRQ+0x44>)
 8002b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b2a:	095b      	lsrs	r3, r3, #5
 8002b2c:	2001      	movs	r0, #1
 8002b2e:	fa00 f202 	lsl.w	r2, r0, r2
 8002b32:	3320      	adds	r3, #32
 8002b34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002b38:	f3bf 8f4f 	dsb	sy
}
 8002b3c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002b3e:	f3bf 8f6f 	isb	sy
}
 8002b42:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002b44:	bf00      	nop
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr
 8002b50:	e000e100 	.word	0xe000e100

08002b54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	6039      	str	r1, [r7, #0]
 8002b5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	db0a      	blt.n	8002b7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	b2da      	uxtb	r2, r3
 8002b6c:	490c      	ldr	r1, [pc, #48]	@ (8002ba0 <__NVIC_SetPriority+0x4c>)
 8002b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b72:	0112      	lsls	r2, r2, #4
 8002b74:	b2d2      	uxtb	r2, r2
 8002b76:	440b      	add	r3, r1
 8002b78:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b7c:	e00a      	b.n	8002b94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	b2da      	uxtb	r2, r3
 8002b82:	4908      	ldr	r1, [pc, #32]	@ (8002ba4 <__NVIC_SetPriority+0x50>)
 8002b84:	79fb      	ldrb	r3, [r7, #7]
 8002b86:	f003 030f 	and.w	r3, r3, #15
 8002b8a:	3b04      	subs	r3, #4
 8002b8c:	0112      	lsls	r2, r2, #4
 8002b8e:	b2d2      	uxtb	r2, r2
 8002b90:	440b      	add	r3, r1
 8002b92:	761a      	strb	r2, [r3, #24]
}
 8002b94:	bf00      	nop
 8002b96:	370c      	adds	r7, #12
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr
 8002ba0:	e000e100 	.word	0xe000e100
 8002ba4:	e000ed00 	.word	0xe000ed00

08002ba8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b089      	sub	sp, #36	@ 0x24
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	60b9      	str	r1, [r7, #8]
 8002bb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f003 0307 	and.w	r3, r3, #7
 8002bba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	f1c3 0307 	rsb	r3, r3, #7
 8002bc2:	2b04      	cmp	r3, #4
 8002bc4:	bf28      	it	cs
 8002bc6:	2304      	movcs	r3, #4
 8002bc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	3304      	adds	r3, #4
 8002bce:	2b06      	cmp	r3, #6
 8002bd0:	d902      	bls.n	8002bd8 <NVIC_EncodePriority+0x30>
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	3b03      	subs	r3, #3
 8002bd6:	e000      	b.n	8002bda <NVIC_EncodePriority+0x32>
 8002bd8:	2300      	movs	r3, #0
 8002bda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bdc:	f04f 32ff 	mov.w	r2, #4294967295
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	fa02 f303 	lsl.w	r3, r2, r3
 8002be6:	43da      	mvns	r2, r3
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	401a      	ands	r2, r3
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bf0:	f04f 31ff 	mov.w	r1, #4294967295
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bfa:	43d9      	mvns	r1, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c00:	4313      	orrs	r3, r2
         );
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3724      	adds	r7, #36	@ 0x24
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr
	...

08002c10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c20:	d301      	bcc.n	8002c26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c22:	2301      	movs	r3, #1
 8002c24:	e00f      	b.n	8002c46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c26:	4a0a      	ldr	r2, [pc, #40]	@ (8002c50 <SysTick_Config+0x40>)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	3b01      	subs	r3, #1
 8002c2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c2e:	210f      	movs	r1, #15
 8002c30:	f04f 30ff 	mov.w	r0, #4294967295
 8002c34:	f7ff ff8e 	bl	8002b54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c38:	4b05      	ldr	r3, [pc, #20]	@ (8002c50 <SysTick_Config+0x40>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c3e:	4b04      	ldr	r3, [pc, #16]	@ (8002c50 <SysTick_Config+0x40>)
 8002c40:	2207      	movs	r2, #7
 8002c42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3708      	adds	r7, #8
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	e000e010 	.word	0xe000e010

08002c54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f7ff ff05 	bl	8002a6c <__NVIC_SetPriorityGrouping>
}
 8002c62:	bf00      	nop
 8002c64:	3708      	adds	r7, #8
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}

08002c6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c6a:	b580      	push	{r7, lr}
 8002c6c:	b086      	sub	sp, #24
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	4603      	mov	r3, r0
 8002c72:	60b9      	str	r1, [r7, #8]
 8002c74:	607a      	str	r2, [r7, #4]
 8002c76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c7c:	f7ff ff1a 	bl	8002ab4 <__NVIC_GetPriorityGrouping>
 8002c80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	68b9      	ldr	r1, [r7, #8]
 8002c86:	6978      	ldr	r0, [r7, #20]
 8002c88:	f7ff ff8e 	bl	8002ba8 <NVIC_EncodePriority>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c92:	4611      	mov	r1, r2
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7ff ff5d 	bl	8002b54 <__NVIC_SetPriority>
}
 8002c9a:	bf00      	nop
 8002c9c:	3718      	adds	r7, #24
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}

08002ca2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ca2:	b580      	push	{r7, lr}
 8002ca4:	b082      	sub	sp, #8
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	4603      	mov	r3, r0
 8002caa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7ff ff0d 	bl	8002ad0 <__NVIC_EnableIRQ>
}
 8002cb6:	bf00      	nop
 8002cb8:	3708      	adds	r7, #8
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}

08002cbe <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002cbe:	b580      	push	{r7, lr}
 8002cc0:	b082      	sub	sp, #8
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002cc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f7ff ff1d 	bl	8002b0c <__NVIC_DisableIRQ>
}
 8002cd2:	bf00      	nop
 8002cd4:	3708      	adds	r7, #8
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}

08002cda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cda:	b580      	push	{r7, lr}
 8002cdc:	b082      	sub	sp, #8
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f7ff ff94 	bl	8002c10 <SysTick_Config>
 8002ce8:	4603      	mov	r3, r0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3708      	adds	r7, #8
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
	...

08002cf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b089      	sub	sp, #36	@ 0x24
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d02:	2300      	movs	r3, #0
 8002d04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d06:	2300      	movs	r3, #0
 8002d08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	61fb      	str	r3, [r7, #28]
 8002d0e:	e177      	b.n	8003000 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d10:	2201      	movs	r2, #1
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	fa02 f303 	lsl.w	r3, r2, r3
 8002d18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	697a      	ldr	r2, [r7, #20]
 8002d20:	4013      	ands	r3, r2
 8002d22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d24:	693a      	ldr	r2, [r7, #16]
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	f040 8166 	bne.w	8002ffa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f003 0303 	and.w	r3, r3, #3
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d005      	beq.n	8002d46 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d130      	bne.n	8002da8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	005b      	lsls	r3, r3, #1
 8002d50:	2203      	movs	r2, #3
 8002d52:	fa02 f303 	lsl.w	r3, r2, r3
 8002d56:	43db      	mvns	r3, r3
 8002d58:	69ba      	ldr	r2, [r7, #24]
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	68da      	ldr	r2, [r3, #12]
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	005b      	lsls	r3, r3, #1
 8002d66:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6a:	69ba      	ldr	r2, [r7, #24]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	69ba      	ldr	r2, [r7, #24]
 8002d74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	fa02 f303 	lsl.w	r3, r2, r3
 8002d84:	43db      	mvns	r3, r3
 8002d86:	69ba      	ldr	r2, [r7, #24]
 8002d88:	4013      	ands	r3, r2
 8002d8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	091b      	lsrs	r3, r3, #4
 8002d92:	f003 0201 	and.w	r2, r3, #1
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9c:	69ba      	ldr	r2, [r7, #24]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	69ba      	ldr	r2, [r7, #24]
 8002da6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f003 0303 	and.w	r3, r3, #3
 8002db0:	2b03      	cmp	r3, #3
 8002db2:	d017      	beq.n	8002de4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	005b      	lsls	r3, r3, #1
 8002dbe:	2203      	movs	r2, #3
 8002dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc4:	43db      	mvns	r3, r3
 8002dc6:	69ba      	ldr	r2, [r7, #24]
 8002dc8:	4013      	ands	r3, r2
 8002dca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	689a      	ldr	r2, [r3, #8]
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	005b      	lsls	r3, r3, #1
 8002dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	69ba      	ldr	r2, [r7, #24]
 8002de2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f003 0303 	and.w	r3, r3, #3
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d123      	bne.n	8002e38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	08da      	lsrs	r2, r3, #3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	3208      	adds	r2, #8
 8002df8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	f003 0307 	and.w	r3, r3, #7
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	220f      	movs	r2, #15
 8002e08:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0c:	43db      	mvns	r3, r3
 8002e0e:	69ba      	ldr	r2, [r7, #24]
 8002e10:	4013      	ands	r3, r2
 8002e12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	691a      	ldr	r2, [r3, #16]
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	f003 0307 	and.w	r3, r3, #7
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	fa02 f303 	lsl.w	r3, r2, r3
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	08da      	lsrs	r2, r3, #3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	3208      	adds	r2, #8
 8002e32:	69b9      	ldr	r1, [r7, #24]
 8002e34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	005b      	lsls	r3, r3, #1
 8002e42:	2203      	movs	r2, #3
 8002e44:	fa02 f303 	lsl.w	r3, r2, r3
 8002e48:	43db      	mvns	r3, r3
 8002e4a:	69ba      	ldr	r2, [r7, #24]
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f003 0203 	and.w	r2, r3, #3
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	005b      	lsls	r3, r3, #1
 8002e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	69ba      	ldr	r2, [r7, #24]
 8002e6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	f000 80c0 	beq.w	8002ffa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	60fb      	str	r3, [r7, #12]
 8002e7e:	4b66      	ldr	r3, [pc, #408]	@ (8003018 <HAL_GPIO_Init+0x324>)
 8002e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e82:	4a65      	ldr	r2, [pc, #404]	@ (8003018 <HAL_GPIO_Init+0x324>)
 8002e84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e88:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e8a:	4b63      	ldr	r3, [pc, #396]	@ (8003018 <HAL_GPIO_Init+0x324>)
 8002e8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e92:	60fb      	str	r3, [r7, #12]
 8002e94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e96:	4a61      	ldr	r2, [pc, #388]	@ (800301c <HAL_GPIO_Init+0x328>)
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	089b      	lsrs	r3, r3, #2
 8002e9c:	3302      	adds	r3, #2
 8002e9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	f003 0303 	and.w	r3, r3, #3
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	220f      	movs	r2, #15
 8002eae:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb2:	43db      	mvns	r3, r3
 8002eb4:	69ba      	ldr	r2, [r7, #24]
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a58      	ldr	r2, [pc, #352]	@ (8003020 <HAL_GPIO_Init+0x32c>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d037      	beq.n	8002f32 <HAL_GPIO_Init+0x23e>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a57      	ldr	r2, [pc, #348]	@ (8003024 <HAL_GPIO_Init+0x330>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d031      	beq.n	8002f2e <HAL_GPIO_Init+0x23a>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a56      	ldr	r2, [pc, #344]	@ (8003028 <HAL_GPIO_Init+0x334>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d02b      	beq.n	8002f2a <HAL_GPIO_Init+0x236>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a55      	ldr	r2, [pc, #340]	@ (800302c <HAL_GPIO_Init+0x338>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d025      	beq.n	8002f26 <HAL_GPIO_Init+0x232>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a54      	ldr	r2, [pc, #336]	@ (8003030 <HAL_GPIO_Init+0x33c>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d01f      	beq.n	8002f22 <HAL_GPIO_Init+0x22e>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a53      	ldr	r2, [pc, #332]	@ (8003034 <HAL_GPIO_Init+0x340>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d019      	beq.n	8002f1e <HAL_GPIO_Init+0x22a>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a52      	ldr	r2, [pc, #328]	@ (8003038 <HAL_GPIO_Init+0x344>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d013      	beq.n	8002f1a <HAL_GPIO_Init+0x226>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a51      	ldr	r2, [pc, #324]	@ (800303c <HAL_GPIO_Init+0x348>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d00d      	beq.n	8002f16 <HAL_GPIO_Init+0x222>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a50      	ldr	r2, [pc, #320]	@ (8003040 <HAL_GPIO_Init+0x34c>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d007      	beq.n	8002f12 <HAL_GPIO_Init+0x21e>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a4f      	ldr	r2, [pc, #316]	@ (8003044 <HAL_GPIO_Init+0x350>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d101      	bne.n	8002f0e <HAL_GPIO_Init+0x21a>
 8002f0a:	2309      	movs	r3, #9
 8002f0c:	e012      	b.n	8002f34 <HAL_GPIO_Init+0x240>
 8002f0e:	230a      	movs	r3, #10
 8002f10:	e010      	b.n	8002f34 <HAL_GPIO_Init+0x240>
 8002f12:	2308      	movs	r3, #8
 8002f14:	e00e      	b.n	8002f34 <HAL_GPIO_Init+0x240>
 8002f16:	2307      	movs	r3, #7
 8002f18:	e00c      	b.n	8002f34 <HAL_GPIO_Init+0x240>
 8002f1a:	2306      	movs	r3, #6
 8002f1c:	e00a      	b.n	8002f34 <HAL_GPIO_Init+0x240>
 8002f1e:	2305      	movs	r3, #5
 8002f20:	e008      	b.n	8002f34 <HAL_GPIO_Init+0x240>
 8002f22:	2304      	movs	r3, #4
 8002f24:	e006      	b.n	8002f34 <HAL_GPIO_Init+0x240>
 8002f26:	2303      	movs	r3, #3
 8002f28:	e004      	b.n	8002f34 <HAL_GPIO_Init+0x240>
 8002f2a:	2302      	movs	r3, #2
 8002f2c:	e002      	b.n	8002f34 <HAL_GPIO_Init+0x240>
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e000      	b.n	8002f34 <HAL_GPIO_Init+0x240>
 8002f32:	2300      	movs	r3, #0
 8002f34:	69fa      	ldr	r2, [r7, #28]
 8002f36:	f002 0203 	and.w	r2, r2, #3
 8002f3a:	0092      	lsls	r2, r2, #2
 8002f3c:	4093      	lsls	r3, r2
 8002f3e:	69ba      	ldr	r2, [r7, #24]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f44:	4935      	ldr	r1, [pc, #212]	@ (800301c <HAL_GPIO_Init+0x328>)
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	089b      	lsrs	r3, r3, #2
 8002f4a:	3302      	adds	r3, #2
 8002f4c:	69ba      	ldr	r2, [r7, #24]
 8002f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f52:	4b3d      	ldr	r3, [pc, #244]	@ (8003048 <HAL_GPIO_Init+0x354>)
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	43db      	mvns	r3, r3
 8002f5c:	69ba      	ldr	r2, [r7, #24]
 8002f5e:	4013      	ands	r3, r2
 8002f60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d003      	beq.n	8002f76 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002f6e:	69ba      	ldr	r2, [r7, #24]
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f76:	4a34      	ldr	r2, [pc, #208]	@ (8003048 <HAL_GPIO_Init+0x354>)
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f7c:	4b32      	ldr	r3, [pc, #200]	@ (8003048 <HAL_GPIO_Init+0x354>)
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	43db      	mvns	r3, r3
 8002f86:	69ba      	ldr	r2, [r7, #24]
 8002f88:	4013      	ands	r3, r2
 8002f8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d003      	beq.n	8002fa0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002f98:	69ba      	ldr	r2, [r7, #24]
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002fa0:	4a29      	ldr	r2, [pc, #164]	@ (8003048 <HAL_GPIO_Init+0x354>)
 8002fa2:	69bb      	ldr	r3, [r7, #24]
 8002fa4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002fa6:	4b28      	ldr	r3, [pc, #160]	@ (8003048 <HAL_GPIO_Init+0x354>)
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	43db      	mvns	r3, r3
 8002fb0:	69ba      	ldr	r2, [r7, #24]
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d003      	beq.n	8002fca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002fc2:	69ba      	ldr	r2, [r7, #24]
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fca:	4a1f      	ldr	r2, [pc, #124]	@ (8003048 <HAL_GPIO_Init+0x354>)
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fd0:	4b1d      	ldr	r3, [pc, #116]	@ (8003048 <HAL_GPIO_Init+0x354>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	43db      	mvns	r3, r3
 8002fda:	69ba      	ldr	r2, [r7, #24]
 8002fdc:	4013      	ands	r3, r2
 8002fde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d003      	beq.n	8002ff4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002fec:	69ba      	ldr	r2, [r7, #24]
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ff4:	4a14      	ldr	r2, [pc, #80]	@ (8003048 <HAL_GPIO_Init+0x354>)
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	3301      	adds	r3, #1
 8002ffe:	61fb      	str	r3, [r7, #28]
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	2b0f      	cmp	r3, #15
 8003004:	f67f ae84 	bls.w	8002d10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003008:	bf00      	nop
 800300a:	bf00      	nop
 800300c:	3724      	adds	r7, #36	@ 0x24
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	40023800 	.word	0x40023800
 800301c:	40013800 	.word	0x40013800
 8003020:	40020000 	.word	0x40020000
 8003024:	40020400 	.word	0x40020400
 8003028:	40020800 	.word	0x40020800
 800302c:	40020c00 	.word	0x40020c00
 8003030:	40021000 	.word	0x40021000
 8003034:	40021400 	.word	0x40021400
 8003038:	40021800 	.word	0x40021800
 800303c:	40021c00 	.word	0x40021c00
 8003040:	40022000 	.word	0x40022000
 8003044:	40022400 	.word	0x40022400
 8003048:	40013c00 	.word	0x40013c00

0800304c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800304c:	b480      	push	{r7}
 800304e:	b087      	sub	sp, #28
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003056:	2300      	movs	r3, #0
 8003058:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800305a:	2300      	movs	r3, #0
 800305c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800305e:	2300      	movs	r3, #0
 8003060:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003062:	2300      	movs	r3, #0
 8003064:	617b      	str	r3, [r7, #20]
 8003066:	e0d9      	b.n	800321c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003068:	2201      	movs	r2, #1
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	fa02 f303 	lsl.w	r3, r2, r3
 8003070:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003072:	683a      	ldr	r2, [r7, #0]
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	4013      	ands	r3, r2
 8003078:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800307a:	68fa      	ldr	r2, [r7, #12]
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	429a      	cmp	r2, r3
 8003080:	f040 80c9 	bne.w	8003216 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003084:	4a6b      	ldr	r2, [pc, #428]	@ (8003234 <HAL_GPIO_DeInit+0x1e8>)
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	089b      	lsrs	r3, r3, #2
 800308a:	3302      	adds	r3, #2
 800308c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003090:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	f003 0303 	and.w	r3, r3, #3
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	220f      	movs	r2, #15
 800309c:	fa02 f303 	lsl.w	r3, r2, r3
 80030a0:	68ba      	ldr	r2, [r7, #8]
 80030a2:	4013      	ands	r3, r2
 80030a4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a63      	ldr	r2, [pc, #396]	@ (8003238 <HAL_GPIO_DeInit+0x1ec>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d037      	beq.n	800311e <HAL_GPIO_DeInit+0xd2>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a62      	ldr	r2, [pc, #392]	@ (800323c <HAL_GPIO_DeInit+0x1f0>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d031      	beq.n	800311a <HAL_GPIO_DeInit+0xce>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a61      	ldr	r2, [pc, #388]	@ (8003240 <HAL_GPIO_DeInit+0x1f4>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d02b      	beq.n	8003116 <HAL_GPIO_DeInit+0xca>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a60      	ldr	r2, [pc, #384]	@ (8003244 <HAL_GPIO_DeInit+0x1f8>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d025      	beq.n	8003112 <HAL_GPIO_DeInit+0xc6>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a5f      	ldr	r2, [pc, #380]	@ (8003248 <HAL_GPIO_DeInit+0x1fc>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d01f      	beq.n	800310e <HAL_GPIO_DeInit+0xc2>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a5e      	ldr	r2, [pc, #376]	@ (800324c <HAL_GPIO_DeInit+0x200>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d019      	beq.n	800310a <HAL_GPIO_DeInit+0xbe>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a5d      	ldr	r2, [pc, #372]	@ (8003250 <HAL_GPIO_DeInit+0x204>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d013      	beq.n	8003106 <HAL_GPIO_DeInit+0xba>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a5c      	ldr	r2, [pc, #368]	@ (8003254 <HAL_GPIO_DeInit+0x208>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d00d      	beq.n	8003102 <HAL_GPIO_DeInit+0xb6>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a5b      	ldr	r2, [pc, #364]	@ (8003258 <HAL_GPIO_DeInit+0x20c>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d007      	beq.n	80030fe <HAL_GPIO_DeInit+0xb2>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a5a      	ldr	r2, [pc, #360]	@ (800325c <HAL_GPIO_DeInit+0x210>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d101      	bne.n	80030fa <HAL_GPIO_DeInit+0xae>
 80030f6:	2309      	movs	r3, #9
 80030f8:	e012      	b.n	8003120 <HAL_GPIO_DeInit+0xd4>
 80030fa:	230a      	movs	r3, #10
 80030fc:	e010      	b.n	8003120 <HAL_GPIO_DeInit+0xd4>
 80030fe:	2308      	movs	r3, #8
 8003100:	e00e      	b.n	8003120 <HAL_GPIO_DeInit+0xd4>
 8003102:	2307      	movs	r3, #7
 8003104:	e00c      	b.n	8003120 <HAL_GPIO_DeInit+0xd4>
 8003106:	2306      	movs	r3, #6
 8003108:	e00a      	b.n	8003120 <HAL_GPIO_DeInit+0xd4>
 800310a:	2305      	movs	r3, #5
 800310c:	e008      	b.n	8003120 <HAL_GPIO_DeInit+0xd4>
 800310e:	2304      	movs	r3, #4
 8003110:	e006      	b.n	8003120 <HAL_GPIO_DeInit+0xd4>
 8003112:	2303      	movs	r3, #3
 8003114:	e004      	b.n	8003120 <HAL_GPIO_DeInit+0xd4>
 8003116:	2302      	movs	r3, #2
 8003118:	e002      	b.n	8003120 <HAL_GPIO_DeInit+0xd4>
 800311a:	2301      	movs	r3, #1
 800311c:	e000      	b.n	8003120 <HAL_GPIO_DeInit+0xd4>
 800311e:	2300      	movs	r3, #0
 8003120:	697a      	ldr	r2, [r7, #20]
 8003122:	f002 0203 	and.w	r2, r2, #3
 8003126:	0092      	lsls	r2, r2, #2
 8003128:	4093      	lsls	r3, r2
 800312a:	68ba      	ldr	r2, [r7, #8]
 800312c:	429a      	cmp	r2, r3
 800312e:	d132      	bne.n	8003196 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003130:	4b4b      	ldr	r3, [pc, #300]	@ (8003260 <HAL_GPIO_DeInit+0x214>)
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	43db      	mvns	r3, r3
 8003138:	4949      	ldr	r1, [pc, #292]	@ (8003260 <HAL_GPIO_DeInit+0x214>)
 800313a:	4013      	ands	r3, r2
 800313c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800313e:	4b48      	ldr	r3, [pc, #288]	@ (8003260 <HAL_GPIO_DeInit+0x214>)
 8003140:	685a      	ldr	r2, [r3, #4]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	43db      	mvns	r3, r3
 8003146:	4946      	ldr	r1, [pc, #280]	@ (8003260 <HAL_GPIO_DeInit+0x214>)
 8003148:	4013      	ands	r3, r2
 800314a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800314c:	4b44      	ldr	r3, [pc, #272]	@ (8003260 <HAL_GPIO_DeInit+0x214>)
 800314e:	68da      	ldr	r2, [r3, #12]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	43db      	mvns	r3, r3
 8003154:	4942      	ldr	r1, [pc, #264]	@ (8003260 <HAL_GPIO_DeInit+0x214>)
 8003156:	4013      	ands	r3, r2
 8003158:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800315a:	4b41      	ldr	r3, [pc, #260]	@ (8003260 <HAL_GPIO_DeInit+0x214>)
 800315c:	689a      	ldr	r2, [r3, #8]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	43db      	mvns	r3, r3
 8003162:	493f      	ldr	r1, [pc, #252]	@ (8003260 <HAL_GPIO_DeInit+0x214>)
 8003164:	4013      	ands	r3, r2
 8003166:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	f003 0303 	and.w	r3, r3, #3
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	220f      	movs	r2, #15
 8003172:	fa02 f303 	lsl.w	r3, r2, r3
 8003176:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003178:	4a2e      	ldr	r2, [pc, #184]	@ (8003234 <HAL_GPIO_DeInit+0x1e8>)
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	089b      	lsrs	r3, r3, #2
 800317e:	3302      	adds	r3, #2
 8003180:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	43da      	mvns	r2, r3
 8003188:	482a      	ldr	r0, [pc, #168]	@ (8003234 <HAL_GPIO_DeInit+0x1e8>)
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	089b      	lsrs	r3, r3, #2
 800318e:	400a      	ands	r2, r1
 8003190:	3302      	adds	r3, #2
 8003192:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	005b      	lsls	r3, r3, #1
 800319e:	2103      	movs	r1, #3
 80031a0:	fa01 f303 	lsl.w	r3, r1, r3
 80031a4:	43db      	mvns	r3, r3
 80031a6:	401a      	ands	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	08da      	lsrs	r2, r3, #3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	3208      	adds	r2, #8
 80031b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	f003 0307 	and.w	r3, r3, #7
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	220f      	movs	r2, #15
 80031c2:	fa02 f303 	lsl.w	r3, r2, r3
 80031c6:	43db      	mvns	r3, r3
 80031c8:	697a      	ldr	r2, [r7, #20]
 80031ca:	08d2      	lsrs	r2, r2, #3
 80031cc:	4019      	ands	r1, r3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	3208      	adds	r2, #8
 80031d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	68da      	ldr	r2, [r3, #12]
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	005b      	lsls	r3, r3, #1
 80031de:	2103      	movs	r1, #3
 80031e0:	fa01 f303 	lsl.w	r3, r1, r3
 80031e4:	43db      	mvns	r3, r3
 80031e6:	401a      	ands	r2, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	685a      	ldr	r2, [r3, #4]
 80031f0:	2101      	movs	r1, #1
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	fa01 f303 	lsl.w	r3, r1, r3
 80031f8:	43db      	mvns	r3, r3
 80031fa:	401a      	ands	r2, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	689a      	ldr	r2, [r3, #8]
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	005b      	lsls	r3, r3, #1
 8003208:	2103      	movs	r1, #3
 800320a:	fa01 f303 	lsl.w	r3, r1, r3
 800320e:	43db      	mvns	r3, r3
 8003210:	401a      	ands	r2, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	3301      	adds	r3, #1
 800321a:	617b      	str	r3, [r7, #20]
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	2b0f      	cmp	r3, #15
 8003220:	f67f af22 	bls.w	8003068 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003224:	bf00      	nop
 8003226:	bf00      	nop
 8003228:	371c      	adds	r7, #28
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr
 8003232:	bf00      	nop
 8003234:	40013800 	.word	0x40013800
 8003238:	40020000 	.word	0x40020000
 800323c:	40020400 	.word	0x40020400
 8003240:	40020800 	.word	0x40020800
 8003244:	40020c00 	.word	0x40020c00
 8003248:	40021000 	.word	0x40021000
 800324c:	40021400 	.word	0x40021400
 8003250:	40021800 	.word	0x40021800
 8003254:	40021c00 	.word	0x40021c00
 8003258:	40022000 	.word	0x40022000
 800325c:	40022400 	.word	0x40022400
 8003260:	40013c00 	.word	0x40013c00

08003264 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003264:	b480      	push	{r7}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	460b      	mov	r3, r1
 800326e:	807b      	strh	r3, [r7, #2]
 8003270:	4613      	mov	r3, r2
 8003272:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003274:	787b      	ldrb	r3, [r7, #1]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d003      	beq.n	8003282 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800327a:	887a      	ldrh	r2, [r7, #2]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003280:	e003      	b.n	800328a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003282:	887b      	ldrh	r3, [r7, #2]
 8003284:	041a      	lsls	r2, r3, #16
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	619a      	str	r2, [r3, #24]
}
 800328a:	bf00      	nop
 800328c:	370c      	adds	r7, #12
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
	...

08003298 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d101      	bne.n	80032aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e12b      	b.n	8003502 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d106      	bne.n	80032c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f7fe fd88 	bl	8001dd4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2224      	movs	r2, #36	@ 0x24
 80032c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f022 0201 	bic.w	r2, r2, #1
 80032da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80032ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80032fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80032fc:	f001 ff06 	bl	800510c <HAL_RCC_GetPCLK1Freq>
 8003300:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	4a81      	ldr	r2, [pc, #516]	@ (800350c <HAL_I2C_Init+0x274>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d807      	bhi.n	800331c <HAL_I2C_Init+0x84>
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	4a80      	ldr	r2, [pc, #512]	@ (8003510 <HAL_I2C_Init+0x278>)
 8003310:	4293      	cmp	r3, r2
 8003312:	bf94      	ite	ls
 8003314:	2301      	movls	r3, #1
 8003316:	2300      	movhi	r3, #0
 8003318:	b2db      	uxtb	r3, r3
 800331a:	e006      	b.n	800332a <HAL_I2C_Init+0x92>
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	4a7d      	ldr	r2, [pc, #500]	@ (8003514 <HAL_I2C_Init+0x27c>)
 8003320:	4293      	cmp	r3, r2
 8003322:	bf94      	ite	ls
 8003324:	2301      	movls	r3, #1
 8003326:	2300      	movhi	r3, #0
 8003328:	b2db      	uxtb	r3, r3
 800332a:	2b00      	cmp	r3, #0
 800332c:	d001      	beq.n	8003332 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e0e7      	b.n	8003502 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	4a78      	ldr	r2, [pc, #480]	@ (8003518 <HAL_I2C_Init+0x280>)
 8003336:	fba2 2303 	umull	r2, r3, r2, r3
 800333a:	0c9b      	lsrs	r3, r3, #18
 800333c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	68ba      	ldr	r2, [r7, #8]
 800334e:	430a      	orrs	r2, r1
 8003350:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	6a1b      	ldr	r3, [r3, #32]
 8003358:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	4a6a      	ldr	r2, [pc, #424]	@ (800350c <HAL_I2C_Init+0x274>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d802      	bhi.n	800336c <HAL_I2C_Init+0xd4>
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	3301      	adds	r3, #1
 800336a:	e009      	b.n	8003380 <HAL_I2C_Init+0xe8>
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003372:	fb02 f303 	mul.w	r3, r2, r3
 8003376:	4a69      	ldr	r2, [pc, #420]	@ (800351c <HAL_I2C_Init+0x284>)
 8003378:	fba2 2303 	umull	r2, r3, r2, r3
 800337c:	099b      	lsrs	r3, r3, #6
 800337e:	3301      	adds	r3, #1
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	6812      	ldr	r2, [r2, #0]
 8003384:	430b      	orrs	r3, r1
 8003386:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	69db      	ldr	r3, [r3, #28]
 800338e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003392:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	495c      	ldr	r1, [pc, #368]	@ (800350c <HAL_I2C_Init+0x274>)
 800339c:	428b      	cmp	r3, r1
 800339e:	d819      	bhi.n	80033d4 <HAL_I2C_Init+0x13c>
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	1e59      	subs	r1, r3, #1
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	005b      	lsls	r3, r3, #1
 80033aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80033ae:	1c59      	adds	r1, r3, #1
 80033b0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80033b4:	400b      	ands	r3, r1
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00a      	beq.n	80033d0 <HAL_I2C_Init+0x138>
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	1e59      	subs	r1, r3, #1
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	005b      	lsls	r3, r3, #1
 80033c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80033c8:	3301      	adds	r3, #1
 80033ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033ce:	e051      	b.n	8003474 <HAL_I2C_Init+0x1dc>
 80033d0:	2304      	movs	r3, #4
 80033d2:	e04f      	b.n	8003474 <HAL_I2C_Init+0x1dc>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d111      	bne.n	8003400 <HAL_I2C_Init+0x168>
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	1e58      	subs	r0, r3, #1
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6859      	ldr	r1, [r3, #4]
 80033e4:	460b      	mov	r3, r1
 80033e6:	005b      	lsls	r3, r3, #1
 80033e8:	440b      	add	r3, r1
 80033ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80033ee:	3301      	adds	r3, #1
 80033f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	bf0c      	ite	eq
 80033f8:	2301      	moveq	r3, #1
 80033fa:	2300      	movne	r3, #0
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	e012      	b.n	8003426 <HAL_I2C_Init+0x18e>
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	1e58      	subs	r0, r3, #1
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6859      	ldr	r1, [r3, #4]
 8003408:	460b      	mov	r3, r1
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	440b      	add	r3, r1
 800340e:	0099      	lsls	r1, r3, #2
 8003410:	440b      	add	r3, r1
 8003412:	fbb0 f3f3 	udiv	r3, r0, r3
 8003416:	3301      	adds	r3, #1
 8003418:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800341c:	2b00      	cmp	r3, #0
 800341e:	bf0c      	ite	eq
 8003420:	2301      	moveq	r3, #1
 8003422:	2300      	movne	r3, #0
 8003424:	b2db      	uxtb	r3, r3
 8003426:	2b00      	cmp	r3, #0
 8003428:	d001      	beq.n	800342e <HAL_I2C_Init+0x196>
 800342a:	2301      	movs	r3, #1
 800342c:	e022      	b.n	8003474 <HAL_I2C_Init+0x1dc>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d10e      	bne.n	8003454 <HAL_I2C_Init+0x1bc>
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	1e58      	subs	r0, r3, #1
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6859      	ldr	r1, [r3, #4]
 800343e:	460b      	mov	r3, r1
 8003440:	005b      	lsls	r3, r3, #1
 8003442:	440b      	add	r3, r1
 8003444:	fbb0 f3f3 	udiv	r3, r0, r3
 8003448:	3301      	adds	r3, #1
 800344a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800344e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003452:	e00f      	b.n	8003474 <HAL_I2C_Init+0x1dc>
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	1e58      	subs	r0, r3, #1
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6859      	ldr	r1, [r3, #4]
 800345c:	460b      	mov	r3, r1
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	440b      	add	r3, r1
 8003462:	0099      	lsls	r1, r3, #2
 8003464:	440b      	add	r3, r1
 8003466:	fbb0 f3f3 	udiv	r3, r0, r3
 800346a:	3301      	adds	r3, #1
 800346c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003470:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003474:	6879      	ldr	r1, [r7, #4]
 8003476:	6809      	ldr	r1, [r1, #0]
 8003478:	4313      	orrs	r3, r2
 800347a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	69da      	ldr	r2, [r3, #28]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a1b      	ldr	r3, [r3, #32]
 800348e:	431a      	orrs	r2, r3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	430a      	orrs	r2, r1
 8003496:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80034a2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	6911      	ldr	r1, [r2, #16]
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	68d2      	ldr	r2, [r2, #12]
 80034ae:	4311      	orrs	r1, r2
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	6812      	ldr	r2, [r2, #0]
 80034b4:	430b      	orrs	r3, r1
 80034b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	695a      	ldr	r2, [r3, #20]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	699b      	ldr	r3, [r3, #24]
 80034ca:	431a      	orrs	r2, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	430a      	orrs	r2, r1
 80034d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f042 0201 	orr.w	r2, r2, #1
 80034e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2220      	movs	r2, #32
 80034ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3710      	adds	r7, #16
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	000186a0 	.word	0x000186a0
 8003510:	001e847f 	.word	0x001e847f
 8003514:	003d08ff 	.word	0x003d08ff
 8003518:	431bde83 	.word	0x431bde83
 800351c:	10624dd3 	.word	0x10624dd3

08003520 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b088      	sub	sp, #32
 8003524:	af02      	add	r7, sp, #8
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	4608      	mov	r0, r1
 800352a:	4611      	mov	r1, r2
 800352c:	461a      	mov	r2, r3
 800352e:	4603      	mov	r3, r0
 8003530:	817b      	strh	r3, [r7, #10]
 8003532:	460b      	mov	r3, r1
 8003534:	813b      	strh	r3, [r7, #8]
 8003536:	4613      	mov	r3, r2
 8003538:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800353a:	f7ff fa67 	bl	8002a0c <HAL_GetTick>
 800353e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003546:	b2db      	uxtb	r3, r3
 8003548:	2b20      	cmp	r3, #32
 800354a:	f040 80d9 	bne.w	8003700 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	9300      	str	r3, [sp, #0]
 8003552:	2319      	movs	r3, #25
 8003554:	2201      	movs	r2, #1
 8003556:	496d      	ldr	r1, [pc, #436]	@ (800370c <HAL_I2C_Mem_Write+0x1ec>)
 8003558:	68f8      	ldr	r0, [r7, #12]
 800355a:	f000 fc8b 	bl	8003e74 <I2C_WaitOnFlagUntilTimeout>
 800355e:	4603      	mov	r3, r0
 8003560:	2b00      	cmp	r3, #0
 8003562:	d001      	beq.n	8003568 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003564:	2302      	movs	r3, #2
 8003566:	e0cc      	b.n	8003702 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800356e:	2b01      	cmp	r3, #1
 8003570:	d101      	bne.n	8003576 <HAL_I2C_Mem_Write+0x56>
 8003572:	2302      	movs	r3, #2
 8003574:	e0c5      	b.n	8003702 <HAL_I2C_Mem_Write+0x1e2>
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2201      	movs	r2, #1
 800357a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0301 	and.w	r3, r3, #1
 8003588:	2b01      	cmp	r3, #1
 800358a:	d007      	beq.n	800359c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f042 0201 	orr.w	r2, r2, #1
 800359a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80035aa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2221      	movs	r2, #33	@ 0x21
 80035b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2240      	movs	r2, #64	@ 0x40
 80035b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2200      	movs	r2, #0
 80035c0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	6a3a      	ldr	r2, [r7, #32]
 80035c6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80035cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035d2:	b29a      	uxth	r2, r3
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	4a4d      	ldr	r2, [pc, #308]	@ (8003710 <HAL_I2C_Mem_Write+0x1f0>)
 80035dc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80035de:	88f8      	ldrh	r0, [r7, #6]
 80035e0:	893a      	ldrh	r2, [r7, #8]
 80035e2:	8979      	ldrh	r1, [r7, #10]
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	9301      	str	r3, [sp, #4]
 80035e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035ea:	9300      	str	r3, [sp, #0]
 80035ec:	4603      	mov	r3, r0
 80035ee:	68f8      	ldr	r0, [r7, #12]
 80035f0:	f000 fac2 	bl	8003b78 <I2C_RequestMemoryWrite>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d052      	beq.n	80036a0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e081      	b.n	8003702 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035fe:	697a      	ldr	r2, [r7, #20]
 8003600:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003602:	68f8      	ldr	r0, [r7, #12]
 8003604:	f000 fd50 	bl	80040a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d00d      	beq.n	800362a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003612:	2b04      	cmp	r3, #4
 8003614:	d107      	bne.n	8003626 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003624:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e06b      	b.n	8003702 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800362e:	781a      	ldrb	r2, [r3, #0]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800363a:	1c5a      	adds	r2, r3, #1
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003644:	3b01      	subs	r3, #1
 8003646:	b29a      	uxth	r2, r3
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003650:	b29b      	uxth	r3, r3
 8003652:	3b01      	subs	r3, #1
 8003654:	b29a      	uxth	r2, r3
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	695b      	ldr	r3, [r3, #20]
 8003660:	f003 0304 	and.w	r3, r3, #4
 8003664:	2b04      	cmp	r3, #4
 8003666:	d11b      	bne.n	80036a0 <HAL_I2C_Mem_Write+0x180>
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800366c:	2b00      	cmp	r3, #0
 800366e:	d017      	beq.n	80036a0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003674:	781a      	ldrb	r2, [r3, #0]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003680:	1c5a      	adds	r2, r3, #1
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800368a:	3b01      	subs	r3, #1
 800368c:	b29a      	uxth	r2, r3
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003696:	b29b      	uxth	r3, r3
 8003698:	3b01      	subs	r3, #1
 800369a:	b29a      	uxth	r2, r3
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d1aa      	bne.n	80035fe <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036a8:	697a      	ldr	r2, [r7, #20]
 80036aa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80036ac:	68f8      	ldr	r0, [r7, #12]
 80036ae:	f000 fd43 	bl	8004138 <I2C_WaitOnBTFFlagUntilTimeout>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d00d      	beq.n	80036d4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036bc:	2b04      	cmp	r3, #4
 80036be:	d107      	bne.n	80036d0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036ce:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e016      	b.n	8003702 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2220      	movs	r2, #32
 80036e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80036fc:	2300      	movs	r3, #0
 80036fe:	e000      	b.n	8003702 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003700:	2302      	movs	r3, #2
  }
}
 8003702:	4618      	mov	r0, r3
 8003704:	3718      	adds	r7, #24
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	00100002 	.word	0x00100002
 8003710:	ffff0000 	.word	0xffff0000

08003714 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b08c      	sub	sp, #48	@ 0x30
 8003718:	af02      	add	r7, sp, #8
 800371a:	60f8      	str	r0, [r7, #12]
 800371c:	4608      	mov	r0, r1
 800371e:	4611      	mov	r1, r2
 8003720:	461a      	mov	r2, r3
 8003722:	4603      	mov	r3, r0
 8003724:	817b      	strh	r3, [r7, #10]
 8003726:	460b      	mov	r3, r1
 8003728:	813b      	strh	r3, [r7, #8]
 800372a:	4613      	mov	r3, r2
 800372c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800372e:	f7ff f96d 	bl	8002a0c <HAL_GetTick>
 8003732:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800373a:	b2db      	uxtb	r3, r3
 800373c:	2b20      	cmp	r3, #32
 800373e:	f040 8214 	bne.w	8003b6a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003744:	9300      	str	r3, [sp, #0]
 8003746:	2319      	movs	r3, #25
 8003748:	2201      	movs	r2, #1
 800374a:	497b      	ldr	r1, [pc, #492]	@ (8003938 <HAL_I2C_Mem_Read+0x224>)
 800374c:	68f8      	ldr	r0, [r7, #12]
 800374e:	f000 fb91 	bl	8003e74 <I2C_WaitOnFlagUntilTimeout>
 8003752:	4603      	mov	r3, r0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d001      	beq.n	800375c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003758:	2302      	movs	r3, #2
 800375a:	e207      	b.n	8003b6c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003762:	2b01      	cmp	r3, #1
 8003764:	d101      	bne.n	800376a <HAL_I2C_Mem_Read+0x56>
 8003766:	2302      	movs	r3, #2
 8003768:	e200      	b.n	8003b6c <HAL_I2C_Mem_Read+0x458>
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2201      	movs	r2, #1
 800376e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0301 	and.w	r3, r3, #1
 800377c:	2b01      	cmp	r3, #1
 800377e:	d007      	beq.n	8003790 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f042 0201 	orr.w	r2, r2, #1
 800378e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800379e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2222      	movs	r2, #34	@ 0x22
 80037a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2240      	movs	r2, #64	@ 0x40
 80037ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2200      	movs	r2, #0
 80037b4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037ba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80037c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037c6:	b29a      	uxth	r2, r3
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	4a5b      	ldr	r2, [pc, #364]	@ (800393c <HAL_I2C_Mem_Read+0x228>)
 80037d0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80037d2:	88f8      	ldrh	r0, [r7, #6]
 80037d4:	893a      	ldrh	r2, [r7, #8]
 80037d6:	8979      	ldrh	r1, [r7, #10]
 80037d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037da:	9301      	str	r3, [sp, #4]
 80037dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037de:	9300      	str	r3, [sp, #0]
 80037e0:	4603      	mov	r3, r0
 80037e2:	68f8      	ldr	r0, [r7, #12]
 80037e4:	f000 fa5e 	bl	8003ca4 <I2C_RequestMemoryRead>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d001      	beq.n	80037f2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e1bc      	b.n	8003b6c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d113      	bne.n	8003822 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037fa:	2300      	movs	r3, #0
 80037fc:	623b      	str	r3, [r7, #32]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	695b      	ldr	r3, [r3, #20]
 8003804:	623b      	str	r3, [r7, #32]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	699b      	ldr	r3, [r3, #24]
 800380c:	623b      	str	r3, [r7, #32]
 800380e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800381e:	601a      	str	r2, [r3, #0]
 8003820:	e190      	b.n	8003b44 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003826:	2b01      	cmp	r3, #1
 8003828:	d11b      	bne.n	8003862 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003838:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800383a:	2300      	movs	r3, #0
 800383c:	61fb      	str	r3, [r7, #28]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	695b      	ldr	r3, [r3, #20]
 8003844:	61fb      	str	r3, [r7, #28]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	699b      	ldr	r3, [r3, #24]
 800384c:	61fb      	str	r3, [r7, #28]
 800384e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800385e:	601a      	str	r2, [r3, #0]
 8003860:	e170      	b.n	8003b44 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003866:	2b02      	cmp	r3, #2
 8003868:	d11b      	bne.n	80038a2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003878:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003888:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800388a:	2300      	movs	r3, #0
 800388c:	61bb      	str	r3, [r7, #24]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	695b      	ldr	r3, [r3, #20]
 8003894:	61bb      	str	r3, [r7, #24]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	699b      	ldr	r3, [r3, #24]
 800389c:	61bb      	str	r3, [r7, #24]
 800389e:	69bb      	ldr	r3, [r7, #24]
 80038a0:	e150      	b.n	8003b44 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038a2:	2300      	movs	r3, #0
 80038a4:	617b      	str	r3, [r7, #20]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	695b      	ldr	r3, [r3, #20]
 80038ac:	617b      	str	r3, [r7, #20]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	699b      	ldr	r3, [r3, #24]
 80038b4:	617b      	str	r3, [r7, #20]
 80038b6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80038b8:	e144      	b.n	8003b44 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038be:	2b03      	cmp	r3, #3
 80038c0:	f200 80f1 	bhi.w	8003aa6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d123      	bne.n	8003914 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038ce:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80038d0:	68f8      	ldr	r0, [r7, #12]
 80038d2:	f000 fc79 	bl	80041c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d001      	beq.n	80038e0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e145      	b.n	8003b6c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	691a      	ldr	r2, [r3, #16]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ea:	b2d2      	uxtb	r2, r2
 80038ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038f2:	1c5a      	adds	r2, r3, #1
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038fc:	3b01      	subs	r3, #1
 80038fe:	b29a      	uxth	r2, r3
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003908:	b29b      	uxth	r3, r3
 800390a:	3b01      	subs	r3, #1
 800390c:	b29a      	uxth	r2, r3
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003912:	e117      	b.n	8003b44 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003918:	2b02      	cmp	r3, #2
 800391a:	d14e      	bne.n	80039ba <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800391c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800391e:	9300      	str	r3, [sp, #0]
 8003920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003922:	2200      	movs	r2, #0
 8003924:	4906      	ldr	r1, [pc, #24]	@ (8003940 <HAL_I2C_Mem_Read+0x22c>)
 8003926:	68f8      	ldr	r0, [r7, #12]
 8003928:	f000 faa4 	bl	8003e74 <I2C_WaitOnFlagUntilTimeout>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d008      	beq.n	8003944 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e11a      	b.n	8003b6c <HAL_I2C_Mem_Read+0x458>
 8003936:	bf00      	nop
 8003938:	00100002 	.word	0x00100002
 800393c:	ffff0000 	.word	0xffff0000
 8003940:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003952:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	691a      	ldr	r2, [r3, #16]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800395e:	b2d2      	uxtb	r2, r2
 8003960:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003966:	1c5a      	adds	r2, r3, #1
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003970:	3b01      	subs	r3, #1
 8003972:	b29a      	uxth	r2, r3
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800397c:	b29b      	uxth	r3, r3
 800397e:	3b01      	subs	r3, #1
 8003980:	b29a      	uxth	r2, r3
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	691a      	ldr	r2, [r3, #16]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003990:	b2d2      	uxtb	r2, r2
 8003992:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003998:	1c5a      	adds	r2, r3, #1
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039a2:	3b01      	subs	r3, #1
 80039a4:	b29a      	uxth	r2, r3
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	3b01      	subs	r3, #1
 80039b2:	b29a      	uxth	r2, r3
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80039b8:	e0c4      	b.n	8003b44 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80039ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039bc:	9300      	str	r3, [sp, #0]
 80039be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039c0:	2200      	movs	r2, #0
 80039c2:	496c      	ldr	r1, [pc, #432]	@ (8003b74 <HAL_I2C_Mem_Read+0x460>)
 80039c4:	68f8      	ldr	r0, [r7, #12]
 80039c6:	f000 fa55 	bl	8003e74 <I2C_WaitOnFlagUntilTimeout>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d001      	beq.n	80039d4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e0cb      	b.n	8003b6c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	691a      	ldr	r2, [r3, #16]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ee:	b2d2      	uxtb	r2, r2
 80039f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f6:	1c5a      	adds	r2, r3, #1
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a00:	3b01      	subs	r3, #1
 8003a02:	b29a      	uxth	r2, r3
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	b29a      	uxth	r2, r3
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a18:	9300      	str	r3, [sp, #0]
 8003a1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	4955      	ldr	r1, [pc, #340]	@ (8003b74 <HAL_I2C_Mem_Read+0x460>)
 8003a20:	68f8      	ldr	r0, [r7, #12]
 8003a22:	f000 fa27 	bl	8003e74 <I2C_WaitOnFlagUntilTimeout>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d001      	beq.n	8003a30 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e09d      	b.n	8003b6c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a3e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	691a      	ldr	r2, [r3, #16]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a4a:	b2d2      	uxtb	r2, r2
 8003a4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a52:	1c5a      	adds	r2, r3, #1
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a5c:	3b01      	subs	r3, #1
 8003a5e:	b29a      	uxth	r2, r3
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a68:	b29b      	uxth	r3, r3
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	b29a      	uxth	r2, r3
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	691a      	ldr	r2, [r3, #16]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a7c:	b2d2      	uxtb	r2, r2
 8003a7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a84:	1c5a      	adds	r2, r3, #1
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a8e:	3b01      	subs	r3, #1
 8003a90:	b29a      	uxth	r2, r3
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	3b01      	subs	r3, #1
 8003a9e:	b29a      	uxth	r2, r3
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003aa4:	e04e      	b.n	8003b44 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003aa6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003aa8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003aaa:	68f8      	ldr	r0, [r7, #12]
 8003aac:	f000 fb8c 	bl	80041c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d001      	beq.n	8003aba <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e058      	b.n	8003b6c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	691a      	ldr	r2, [r3, #16]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ac4:	b2d2      	uxtb	r2, r2
 8003ac6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003acc:	1c5a      	adds	r2, r3, #1
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ad6:	3b01      	subs	r3, #1
 8003ad8:	b29a      	uxth	r2, r3
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	3b01      	subs	r3, #1
 8003ae6:	b29a      	uxth	r2, r3
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	695b      	ldr	r3, [r3, #20]
 8003af2:	f003 0304 	and.w	r3, r3, #4
 8003af6:	2b04      	cmp	r3, #4
 8003af8:	d124      	bne.n	8003b44 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003afe:	2b03      	cmp	r3, #3
 8003b00:	d107      	bne.n	8003b12 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b10:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	691a      	ldr	r2, [r3, #16]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b1c:	b2d2      	uxtb	r2, r2
 8003b1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b24:	1c5a      	adds	r2, r3, #1
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b2e:	3b01      	subs	r3, #1
 8003b30:	b29a      	uxth	r2, r3
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	3b01      	subs	r3, #1
 8003b3e:	b29a      	uxth	r2, r3
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	f47f aeb6 	bne.w	80038ba <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2220      	movs	r2, #32
 8003b52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003b66:	2300      	movs	r3, #0
 8003b68:	e000      	b.n	8003b6c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003b6a:	2302      	movs	r3, #2
  }
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3728      	adds	r7, #40	@ 0x28
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	00010004 	.word	0x00010004

08003b78 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b088      	sub	sp, #32
 8003b7c:	af02      	add	r7, sp, #8
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	4608      	mov	r0, r1
 8003b82:	4611      	mov	r1, r2
 8003b84:	461a      	mov	r2, r3
 8003b86:	4603      	mov	r3, r0
 8003b88:	817b      	strh	r3, [r7, #10]
 8003b8a:	460b      	mov	r3, r1
 8003b8c:	813b      	strh	r3, [r7, #8]
 8003b8e:	4613      	mov	r3, r2
 8003b90:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ba0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ba4:	9300      	str	r3, [sp, #0]
 8003ba6:	6a3b      	ldr	r3, [r7, #32]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003bae:	68f8      	ldr	r0, [r7, #12]
 8003bb0:	f000 f960 	bl	8003e74 <I2C_WaitOnFlagUntilTimeout>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d00d      	beq.n	8003bd6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bc4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bc8:	d103      	bne.n	8003bd2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003bd0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e05f      	b.n	8003c96 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003bd6:	897b      	ldrh	r3, [r7, #10]
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	461a      	mov	r2, r3
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003be4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003be8:	6a3a      	ldr	r2, [r7, #32]
 8003bea:	492d      	ldr	r1, [pc, #180]	@ (8003ca0 <I2C_RequestMemoryWrite+0x128>)
 8003bec:	68f8      	ldr	r0, [r7, #12]
 8003bee:	f000 f9bb 	bl	8003f68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d001      	beq.n	8003bfc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e04c      	b.n	8003c96 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	617b      	str	r3, [r7, #20]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	695b      	ldr	r3, [r3, #20]
 8003c06:	617b      	str	r3, [r7, #20]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	699b      	ldr	r3, [r3, #24]
 8003c0e:	617b      	str	r3, [r7, #20]
 8003c10:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c14:	6a39      	ldr	r1, [r7, #32]
 8003c16:	68f8      	ldr	r0, [r7, #12]
 8003c18:	f000 fa46 	bl	80040a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d00d      	beq.n	8003c3e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c26:	2b04      	cmp	r3, #4
 8003c28:	d107      	bne.n	8003c3a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c38:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e02b      	b.n	8003c96 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c3e:	88fb      	ldrh	r3, [r7, #6]
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d105      	bne.n	8003c50 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c44:	893b      	ldrh	r3, [r7, #8]
 8003c46:	b2da      	uxtb	r2, r3
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	611a      	str	r2, [r3, #16]
 8003c4e:	e021      	b.n	8003c94 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003c50:	893b      	ldrh	r3, [r7, #8]
 8003c52:	0a1b      	lsrs	r3, r3, #8
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	b2da      	uxtb	r2, r3
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c60:	6a39      	ldr	r1, [r7, #32]
 8003c62:	68f8      	ldr	r0, [r7, #12]
 8003c64:	f000 fa20 	bl	80040a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d00d      	beq.n	8003c8a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c72:	2b04      	cmp	r3, #4
 8003c74:	d107      	bne.n	8003c86 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c84:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e005      	b.n	8003c96 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c8a:	893b      	ldrh	r3, [r7, #8]
 8003c8c:	b2da      	uxtb	r2, r3
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3718      	adds	r7, #24
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	00010002 	.word	0x00010002

08003ca4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b088      	sub	sp, #32
 8003ca8:	af02      	add	r7, sp, #8
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	4608      	mov	r0, r1
 8003cae:	4611      	mov	r1, r2
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	817b      	strh	r3, [r7, #10]
 8003cb6:	460b      	mov	r3, r1
 8003cb8:	813b      	strh	r3, [r7, #8]
 8003cba:	4613      	mov	r3, r2
 8003cbc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003ccc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003cdc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ce0:	9300      	str	r3, [sp, #0]
 8003ce2:	6a3b      	ldr	r3, [r7, #32]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003cea:	68f8      	ldr	r0, [r7, #12]
 8003cec:	f000 f8c2 	bl	8003e74 <I2C_WaitOnFlagUntilTimeout>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d00d      	beq.n	8003d12 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d04:	d103      	bne.n	8003d0e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d0c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e0aa      	b.n	8003e68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d12:	897b      	ldrh	r3, [r7, #10]
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	461a      	mov	r2, r3
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003d20:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d24:	6a3a      	ldr	r2, [r7, #32]
 8003d26:	4952      	ldr	r1, [pc, #328]	@ (8003e70 <I2C_RequestMemoryRead+0x1cc>)
 8003d28:	68f8      	ldr	r0, [r7, #12]
 8003d2a:	f000 f91d 	bl	8003f68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d001      	beq.n	8003d38 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e097      	b.n	8003e68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d38:	2300      	movs	r3, #0
 8003d3a:	617b      	str	r3, [r7, #20]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	695b      	ldr	r3, [r3, #20]
 8003d42:	617b      	str	r3, [r7, #20]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	699b      	ldr	r3, [r3, #24]
 8003d4a:	617b      	str	r3, [r7, #20]
 8003d4c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d50:	6a39      	ldr	r1, [r7, #32]
 8003d52:	68f8      	ldr	r0, [r7, #12]
 8003d54:	f000 f9a8 	bl	80040a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00d      	beq.n	8003d7a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d62:	2b04      	cmp	r3, #4
 8003d64:	d107      	bne.n	8003d76 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d74:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e076      	b.n	8003e68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d7a:	88fb      	ldrh	r3, [r7, #6]
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d105      	bne.n	8003d8c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d80:	893b      	ldrh	r3, [r7, #8]
 8003d82:	b2da      	uxtb	r2, r3
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	611a      	str	r2, [r3, #16]
 8003d8a:	e021      	b.n	8003dd0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003d8c:	893b      	ldrh	r3, [r7, #8]
 8003d8e:	0a1b      	lsrs	r3, r3, #8
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	b2da      	uxtb	r2, r3
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d9c:	6a39      	ldr	r1, [r7, #32]
 8003d9e:	68f8      	ldr	r0, [r7, #12]
 8003da0:	f000 f982 	bl	80040a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d00d      	beq.n	8003dc6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dae:	2b04      	cmp	r3, #4
 8003db0:	d107      	bne.n	8003dc2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dc0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e050      	b.n	8003e68 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003dc6:	893b      	ldrh	r3, [r7, #8]
 8003dc8:	b2da      	uxtb	r2, r3
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dd2:	6a39      	ldr	r1, [r7, #32]
 8003dd4:	68f8      	ldr	r0, [r7, #12]
 8003dd6:	f000 f967 	bl	80040a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d00d      	beq.n	8003dfc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003de4:	2b04      	cmp	r3, #4
 8003de6:	d107      	bne.n	8003df8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003df6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e035      	b.n	8003e68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e0a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e0e:	9300      	str	r3, [sp, #0]
 8003e10:	6a3b      	ldr	r3, [r7, #32]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003e18:	68f8      	ldr	r0, [r7, #12]
 8003e1a:	f000 f82b 	bl	8003e74 <I2C_WaitOnFlagUntilTimeout>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d00d      	beq.n	8003e40 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e32:	d103      	bne.n	8003e3c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e3a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	e013      	b.n	8003e68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003e40:	897b      	ldrh	r3, [r7, #10]
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	f043 0301 	orr.w	r3, r3, #1
 8003e48:	b2da      	uxtb	r2, r3
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e52:	6a3a      	ldr	r2, [r7, #32]
 8003e54:	4906      	ldr	r1, [pc, #24]	@ (8003e70 <I2C_RequestMemoryRead+0x1cc>)
 8003e56:	68f8      	ldr	r0, [r7, #12]
 8003e58:	f000 f886 	bl	8003f68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d001      	beq.n	8003e66 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e000      	b.n	8003e68 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003e66:	2300      	movs	r3, #0
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3718      	adds	r7, #24
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	00010002 	.word	0x00010002

08003e74 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	60b9      	str	r1, [r7, #8]
 8003e7e:	603b      	str	r3, [r7, #0]
 8003e80:	4613      	mov	r3, r2
 8003e82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e84:	e048      	b.n	8003f18 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e8c:	d044      	beq.n	8003f18 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e8e:	f7fe fdbd 	bl	8002a0c <HAL_GetTick>
 8003e92:	4602      	mov	r2, r0
 8003e94:	69bb      	ldr	r3, [r7, #24]
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	683a      	ldr	r2, [r7, #0]
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d302      	bcc.n	8003ea4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d139      	bne.n	8003f18 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	0c1b      	lsrs	r3, r3, #16
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d10d      	bne.n	8003eca <I2C_WaitOnFlagUntilTimeout+0x56>
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	695b      	ldr	r3, [r3, #20]
 8003eb4:	43da      	mvns	r2, r3
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	4013      	ands	r3, r2
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	bf0c      	ite	eq
 8003ec0:	2301      	moveq	r3, #1
 8003ec2:	2300      	movne	r3, #0
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	e00c      	b.n	8003ee4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	699b      	ldr	r3, [r3, #24]
 8003ed0:	43da      	mvns	r2, r3
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	bf0c      	ite	eq
 8003edc:	2301      	moveq	r3, #1
 8003ede:	2300      	movne	r3, #0
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	79fb      	ldrb	r3, [r7, #7]
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d116      	bne.n	8003f18 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2200      	movs	r2, #0
 8003eee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2220      	movs	r2, #32
 8003ef4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f04:	f043 0220 	orr.w	r2, r3, #32
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	e023      	b.n	8003f60 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	0c1b      	lsrs	r3, r3, #16
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d10d      	bne.n	8003f3e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	695b      	ldr	r3, [r3, #20]
 8003f28:	43da      	mvns	r2, r3
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	bf0c      	ite	eq
 8003f34:	2301      	moveq	r3, #1
 8003f36:	2300      	movne	r3, #0
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	e00c      	b.n	8003f58 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	699b      	ldr	r3, [r3, #24]
 8003f44:	43da      	mvns	r2, r3
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	4013      	ands	r3, r2
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	bf0c      	ite	eq
 8003f50:	2301      	moveq	r3, #1
 8003f52:	2300      	movne	r3, #0
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	461a      	mov	r2, r3
 8003f58:	79fb      	ldrb	r3, [r7, #7]
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d093      	beq.n	8003e86 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f5e:	2300      	movs	r3, #0
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3710      	adds	r7, #16
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b084      	sub	sp, #16
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	60f8      	str	r0, [r7, #12]
 8003f70:	60b9      	str	r1, [r7, #8]
 8003f72:	607a      	str	r2, [r7, #4]
 8003f74:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f76:	e071      	b.n	800405c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	695b      	ldr	r3, [r3, #20]
 8003f7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f86:	d123      	bne.n	8003fd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f96:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003fa0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2220      	movs	r2, #32
 8003fac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fbc:	f043 0204 	orr.w	r2, r3, #4
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e067      	b.n	80040a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fd6:	d041      	beq.n	800405c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fd8:	f7fe fd18 	bl	8002a0c <HAL_GetTick>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d302      	bcc.n	8003fee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d136      	bne.n	800405c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	0c1b      	lsrs	r3, r3, #16
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d10c      	bne.n	8004012 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	695b      	ldr	r3, [r3, #20]
 8003ffe:	43da      	mvns	r2, r3
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	4013      	ands	r3, r2
 8004004:	b29b      	uxth	r3, r3
 8004006:	2b00      	cmp	r3, #0
 8004008:	bf14      	ite	ne
 800400a:	2301      	movne	r3, #1
 800400c:	2300      	moveq	r3, #0
 800400e:	b2db      	uxtb	r3, r3
 8004010:	e00b      	b.n	800402a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	699b      	ldr	r3, [r3, #24]
 8004018:	43da      	mvns	r2, r3
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	4013      	ands	r3, r2
 800401e:	b29b      	uxth	r3, r3
 8004020:	2b00      	cmp	r3, #0
 8004022:	bf14      	ite	ne
 8004024:	2301      	movne	r3, #1
 8004026:	2300      	moveq	r3, #0
 8004028:	b2db      	uxtb	r3, r3
 800402a:	2b00      	cmp	r3, #0
 800402c:	d016      	beq.n	800405c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2200      	movs	r2, #0
 8004032:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2220      	movs	r2, #32
 8004038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2200      	movs	r2, #0
 8004040:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004048:	f043 0220 	orr.w	r2, r3, #32
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2200      	movs	r2, #0
 8004054:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e021      	b.n	80040a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	0c1b      	lsrs	r3, r3, #16
 8004060:	b2db      	uxtb	r3, r3
 8004062:	2b01      	cmp	r3, #1
 8004064:	d10c      	bne.n	8004080 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	695b      	ldr	r3, [r3, #20]
 800406c:	43da      	mvns	r2, r3
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	4013      	ands	r3, r2
 8004072:	b29b      	uxth	r3, r3
 8004074:	2b00      	cmp	r3, #0
 8004076:	bf14      	ite	ne
 8004078:	2301      	movne	r3, #1
 800407a:	2300      	moveq	r3, #0
 800407c:	b2db      	uxtb	r3, r3
 800407e:	e00b      	b.n	8004098 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	699b      	ldr	r3, [r3, #24]
 8004086:	43da      	mvns	r2, r3
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	4013      	ands	r3, r2
 800408c:	b29b      	uxth	r3, r3
 800408e:	2b00      	cmp	r3, #0
 8004090:	bf14      	ite	ne
 8004092:	2301      	movne	r3, #1
 8004094:	2300      	moveq	r3, #0
 8004096:	b2db      	uxtb	r3, r3
 8004098:	2b00      	cmp	r3, #0
 800409a:	f47f af6d 	bne.w	8003f78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800409e:	2300      	movs	r3, #0
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3710      	adds	r7, #16
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b084      	sub	sp, #16
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	60b9      	str	r1, [r7, #8]
 80040b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80040b4:	e034      	b.n	8004120 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80040b6:	68f8      	ldr	r0, [r7, #12]
 80040b8:	f000 f8e3 	bl	8004282 <I2C_IsAcknowledgeFailed>
 80040bc:	4603      	mov	r3, r0
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d001      	beq.n	80040c6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e034      	b.n	8004130 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040cc:	d028      	beq.n	8004120 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040ce:	f7fe fc9d 	bl	8002a0c <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	68ba      	ldr	r2, [r7, #8]
 80040da:	429a      	cmp	r2, r3
 80040dc:	d302      	bcc.n	80040e4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d11d      	bne.n	8004120 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	695b      	ldr	r3, [r3, #20]
 80040ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040ee:	2b80      	cmp	r3, #128	@ 0x80
 80040f0:	d016      	beq.n	8004120 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2200      	movs	r2, #0
 80040f6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2220      	movs	r2, #32
 80040fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2200      	movs	r2, #0
 8004104:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800410c:	f043 0220 	orr.w	r2, r3, #32
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2200      	movs	r2, #0
 8004118:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e007      	b.n	8004130 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	695b      	ldr	r3, [r3, #20]
 8004126:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800412a:	2b80      	cmp	r3, #128	@ 0x80
 800412c:	d1c3      	bne.n	80040b6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800412e:	2300      	movs	r3, #0
}
 8004130:	4618      	mov	r0, r3
 8004132:	3710      	adds	r7, #16
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}

08004138 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b084      	sub	sp, #16
 800413c:	af00      	add	r7, sp, #0
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004144:	e034      	b.n	80041b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004146:	68f8      	ldr	r0, [r7, #12]
 8004148:	f000 f89b 	bl	8004282 <I2C_IsAcknowledgeFailed>
 800414c:	4603      	mov	r3, r0
 800414e:	2b00      	cmp	r3, #0
 8004150:	d001      	beq.n	8004156 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e034      	b.n	80041c0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800415c:	d028      	beq.n	80041b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800415e:	f7fe fc55 	bl	8002a0c <HAL_GetTick>
 8004162:	4602      	mov	r2, r0
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	1ad3      	subs	r3, r2, r3
 8004168:	68ba      	ldr	r2, [r7, #8]
 800416a:	429a      	cmp	r2, r3
 800416c:	d302      	bcc.n	8004174 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d11d      	bne.n	80041b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	695b      	ldr	r3, [r3, #20]
 800417a:	f003 0304 	and.w	r3, r3, #4
 800417e:	2b04      	cmp	r3, #4
 8004180:	d016      	beq.n	80041b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2200      	movs	r2, #0
 8004186:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2220      	movs	r2, #32
 800418c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2200      	movs	r2, #0
 8004194:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800419c:	f043 0220 	orr.w	r2, r3, #32
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e007      	b.n	80041c0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	695b      	ldr	r3, [r3, #20]
 80041b6:	f003 0304 	and.w	r3, r3, #4
 80041ba:	2b04      	cmp	r3, #4
 80041bc:	d1c3      	bne.n	8004146 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80041be:	2300      	movs	r3, #0
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3710      	adds	r7, #16
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}

080041c8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	60f8      	str	r0, [r7, #12]
 80041d0:	60b9      	str	r1, [r7, #8]
 80041d2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80041d4:	e049      	b.n	800426a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	695b      	ldr	r3, [r3, #20]
 80041dc:	f003 0310 	and.w	r3, r3, #16
 80041e0:	2b10      	cmp	r3, #16
 80041e2:	d119      	bne.n	8004218 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f06f 0210 	mvn.w	r2, #16
 80041ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2200      	movs	r2, #0
 80041f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2220      	movs	r2, #32
 80041f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2200      	movs	r2, #0
 8004200:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2200      	movs	r2, #0
 8004210:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	e030      	b.n	800427a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004218:	f7fe fbf8 	bl	8002a0c <HAL_GetTick>
 800421c:	4602      	mov	r2, r0
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	68ba      	ldr	r2, [r7, #8]
 8004224:	429a      	cmp	r2, r3
 8004226:	d302      	bcc.n	800422e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d11d      	bne.n	800426a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	695b      	ldr	r3, [r3, #20]
 8004234:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004238:	2b40      	cmp	r3, #64	@ 0x40
 800423a:	d016      	beq.n	800426a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2200      	movs	r2, #0
 8004240:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2220      	movs	r2, #32
 8004246:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2200      	movs	r2, #0
 800424e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004256:	f043 0220 	orr.w	r2, r3, #32
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2200      	movs	r2, #0
 8004262:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e007      	b.n	800427a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	695b      	ldr	r3, [r3, #20]
 8004270:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004274:	2b40      	cmp	r3, #64	@ 0x40
 8004276:	d1ae      	bne.n	80041d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004278:	2300      	movs	r3, #0
}
 800427a:	4618      	mov	r0, r3
 800427c:	3710      	adds	r7, #16
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}

08004282 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004282:	b480      	push	{r7}
 8004284:	b083      	sub	sp, #12
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	695b      	ldr	r3, [r3, #20]
 8004290:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004294:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004298:	d11b      	bne.n	80042d2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80042a2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2220      	movs	r2, #32
 80042ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042be:	f043 0204 	orr.w	r2, r3, #4
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e000      	b.n	80042d4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80042d2:	2300      	movs	r3, #0
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	370c      	adds	r7, #12
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr

080042e0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b084      	sub	sp, #16
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d101      	bne.n	80042f2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e0bf      	b.n	8004472 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d106      	bne.n	800430c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f7fd fdce 	bl	8001ea8 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2202      	movs	r2, #2
 8004310:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	699a      	ldr	r2, [r3, #24]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8004322:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	6999      	ldr	r1, [r3, #24]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	685a      	ldr	r2, [r3, #4]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004338:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	430a      	orrs	r2, r1
 8004346:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	6899      	ldr	r1, [r3, #8]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	4b4a      	ldr	r3, [pc, #296]	@ (800447c <HAL_LTDC_Init+0x19c>)
 8004354:	400b      	ands	r3, r1
 8004356:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	695b      	ldr	r3, [r3, #20]
 800435c:	041b      	lsls	r3, r3, #16
 800435e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	6899      	ldr	r1, [r3, #8]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	699a      	ldr	r2, [r3, #24]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	431a      	orrs	r2, r3
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	430a      	orrs	r2, r1
 8004374:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	68d9      	ldr	r1, [r3, #12]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	4b3e      	ldr	r3, [pc, #248]	@ (800447c <HAL_LTDC_Init+0x19c>)
 8004382:	400b      	ands	r3, r1
 8004384:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	69db      	ldr	r3, [r3, #28]
 800438a:	041b      	lsls	r3, r3, #16
 800438c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	68d9      	ldr	r1, [r3, #12]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6a1a      	ldr	r2, [r3, #32]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	431a      	orrs	r2, r3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	430a      	orrs	r2, r1
 80043a2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	6919      	ldr	r1, [r3, #16]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	4b33      	ldr	r3, [pc, #204]	@ (800447c <HAL_LTDC_Init+0x19c>)
 80043b0:	400b      	ands	r3, r1
 80043b2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043b8:	041b      	lsls	r3, r3, #16
 80043ba:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	6919      	ldr	r1, [r3, #16]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	431a      	orrs	r2, r3
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	430a      	orrs	r2, r1
 80043d0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	6959      	ldr	r1, [r3, #20]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	4b27      	ldr	r3, [pc, #156]	@ (800447c <HAL_LTDC_Init+0x19c>)
 80043de:	400b      	ands	r3, r1
 80043e0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043e6:	041b      	lsls	r3, r3, #16
 80043e8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	6959      	ldr	r1, [r3, #20]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	431a      	orrs	r2, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	430a      	orrs	r2, r1
 80043fe:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004406:	021b      	lsls	r3, r3, #8
 8004408:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8004410:	041b      	lsls	r3, r3, #16
 8004412:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8004422:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800442a:	68ba      	ldr	r2, [r7, #8]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	4313      	orrs	r3, r2
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8004436:	431a      	orrs	r2, r3
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	430a      	orrs	r2, r1
 800443e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f042 0206 	orr.w	r2, r2, #6
 800444e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	699a      	ldr	r2, [r3, #24]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f042 0201 	orr.w	r2, r2, #1
 800445e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8004470:	2300      	movs	r3, #0
}
 8004472:	4618      	mov	r0, r3
 8004474:	3710      	adds	r7, #16
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	f000f800 	.word	0xf000f800

08004480 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004480:	b5b0      	push	{r4, r5, r7, lr}
 8004482:	b084      	sub	sp, #16
 8004484:	af00      	add	r7, sp, #0
 8004486:	60f8      	str	r0, [r7, #12]
 8004488:	60b9      	str	r1, [r7, #8]
 800448a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8004492:	2b01      	cmp	r3, #1
 8004494:	d101      	bne.n	800449a <HAL_LTDC_ConfigLayer+0x1a>
 8004496:	2302      	movs	r3, #2
 8004498:	e02c      	b.n	80044f4 <HAL_LTDC_ConfigLayer+0x74>
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2201      	movs	r2, #1
 800449e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2202      	movs	r2, #2
 80044a6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80044aa:	68fa      	ldr	r2, [r7, #12]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2134      	movs	r1, #52	@ 0x34
 80044b0:	fb01 f303 	mul.w	r3, r1, r3
 80044b4:	4413      	add	r3, r2
 80044b6:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	4614      	mov	r4, r2
 80044be:	461d      	mov	r5, r3
 80044c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80044c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80044c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80044c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80044c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80044ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80044cc:	682b      	ldr	r3, [r5, #0]
 80044ce:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	68b9      	ldr	r1, [r7, #8]
 80044d4:	68f8      	ldr	r0, [r7, #12]
 80044d6:	f000 f811 	bl	80044fc <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	2201      	movs	r2, #1
 80044e0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2201      	movs	r2, #1
 80044e6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2200      	movs	r2, #0
 80044ee:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80044f2:	2300      	movs	r3, #0
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3710      	adds	r7, #16
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bdb0      	pop	{r4, r5, r7, pc}

080044fc <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b089      	sub	sp, #36	@ 0x24
 8004500:	af00      	add	r7, sp, #0
 8004502:	60f8      	str	r0, [r7, #12]
 8004504:	60b9      	str	r1, [r7, #8]
 8004506:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	685a      	ldr	r2, [r3, #4]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	0c1b      	lsrs	r3, r3, #16
 8004514:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004518:	4413      	add	r3, r2
 800451a:	041b      	lsls	r3, r3, #16
 800451c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	461a      	mov	r2, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	01db      	lsls	r3, r3, #7
 8004528:	4413      	add	r3, r2
 800452a:	3384      	adds	r3, #132	@ 0x84
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	68fa      	ldr	r2, [r7, #12]
 8004530:	6812      	ldr	r2, [r2, #0]
 8004532:	4611      	mov	r1, r2
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	01d2      	lsls	r2, r2, #7
 8004538:	440a      	add	r2, r1
 800453a:	3284      	adds	r2, #132	@ 0x84
 800453c:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004540:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	0c1b      	lsrs	r3, r3, #16
 800454e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004552:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004554:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4619      	mov	r1, r3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	01db      	lsls	r3, r3, #7
 8004560:	440b      	add	r3, r1
 8004562:	3384      	adds	r3, #132	@ 0x84
 8004564:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004566:	69fb      	ldr	r3, [r7, #28]
 8004568:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800456a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	68da      	ldr	r2, [r3, #12]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800457a:	4413      	add	r3, r2
 800457c:	041b      	lsls	r3, r3, #16
 800457e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	461a      	mov	r2, r3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	01db      	lsls	r3, r3, #7
 800458a:	4413      	add	r3, r2
 800458c:	3384      	adds	r3, #132	@ 0x84
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	68fa      	ldr	r2, [r7, #12]
 8004592:	6812      	ldr	r2, [r2, #0]
 8004594:	4611      	mov	r1, r2
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	01d2      	lsls	r2, r2, #7
 800459a:	440a      	add	r2, r1
 800459c:	3284      	adds	r2, #132	@ 0x84
 800459e:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80045a2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	689a      	ldr	r2, [r3, #8]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80045b2:	4413      	add	r3, r2
 80045b4:	1c5a      	adds	r2, r3, #1
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4619      	mov	r1, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	01db      	lsls	r3, r3, #7
 80045c0:	440b      	add	r3, r1
 80045c2:	3384      	adds	r3, #132	@ 0x84
 80045c4:	4619      	mov	r1, r3
 80045c6:	69fb      	ldr	r3, [r7, #28]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	461a      	mov	r2, r3
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	01db      	lsls	r3, r3, #7
 80045d6:	4413      	add	r3, r2
 80045d8:	3384      	adds	r3, #132	@ 0x84
 80045da:	691b      	ldr	r3, [r3, #16]
 80045dc:	68fa      	ldr	r2, [r7, #12]
 80045de:	6812      	ldr	r2, [r2, #0]
 80045e0:	4611      	mov	r1, r2
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	01d2      	lsls	r2, r2, #7
 80045e6:	440a      	add	r2, r1
 80045e8:	3284      	adds	r2, #132	@ 0x84
 80045ea:	f023 0307 	bic.w	r3, r3, #7
 80045ee:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	461a      	mov	r2, r3
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	01db      	lsls	r3, r3, #7
 80045fa:	4413      	add	r3, r2
 80045fc:	3384      	adds	r3, #132	@ 0x84
 80045fe:	461a      	mov	r2, r3
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	691b      	ldr	r3, [r3, #16]
 8004604:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800460c:	021b      	lsls	r3, r3, #8
 800460e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004616:	041b      	lsls	r3, r3, #16
 8004618:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	699b      	ldr	r3, [r3, #24]
 800461e:	061b      	lsls	r3, r3, #24
 8004620:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	461a      	mov	r2, r3
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	01db      	lsls	r3, r3, #7
 800462c:	4413      	add	r3, r2
 800462e:	3384      	adds	r3, #132	@ 0x84
 8004630:	699b      	ldr	r3, [r3, #24]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	461a      	mov	r2, r3
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	01db      	lsls	r3, r3, #7
 800463c:	4413      	add	r3, r2
 800463e:	3384      	adds	r3, #132	@ 0x84
 8004640:	461a      	mov	r2, r3
 8004642:	2300      	movs	r3, #0
 8004644:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800464c:	461a      	mov	r2, r3
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	431a      	orrs	r2, r3
 8004652:	69bb      	ldr	r3, [r7, #24]
 8004654:	431a      	orrs	r2, r3
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4619      	mov	r1, r3
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	01db      	lsls	r3, r3, #7
 8004660:	440b      	add	r3, r1
 8004662:	3384      	adds	r3, #132	@ 0x84
 8004664:	4619      	mov	r1, r3
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	4313      	orrs	r3, r2
 800466a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	461a      	mov	r2, r3
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	01db      	lsls	r3, r3, #7
 8004676:	4413      	add	r3, r2
 8004678:	3384      	adds	r3, #132	@ 0x84
 800467a:	695b      	ldr	r3, [r3, #20]
 800467c:	68fa      	ldr	r2, [r7, #12]
 800467e:	6812      	ldr	r2, [r2, #0]
 8004680:	4611      	mov	r1, r2
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	01d2      	lsls	r2, r2, #7
 8004686:	440a      	add	r2, r1
 8004688:	3284      	adds	r2, #132	@ 0x84
 800468a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800468e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	461a      	mov	r2, r3
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	01db      	lsls	r3, r3, #7
 800469a:	4413      	add	r3, r2
 800469c:	3384      	adds	r3, #132	@ 0x84
 800469e:	461a      	mov	r2, r3
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	695b      	ldr	r3, [r3, #20]
 80046a4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	461a      	mov	r2, r3
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	01db      	lsls	r3, r3, #7
 80046b0:	4413      	add	r3, r2
 80046b2:	3384      	adds	r3, #132	@ 0x84
 80046b4:	69db      	ldr	r3, [r3, #28]
 80046b6:	68fa      	ldr	r2, [r7, #12]
 80046b8:	6812      	ldr	r2, [r2, #0]
 80046ba:	4611      	mov	r1, r2
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	01d2      	lsls	r2, r2, #7
 80046c0:	440a      	add	r2, r1
 80046c2:	3284      	adds	r2, #132	@ 0x84
 80046c4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80046c8:	f023 0307 	bic.w	r3, r3, #7
 80046cc:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	69da      	ldr	r2, [r3, #28]
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	6a1b      	ldr	r3, [r3, #32]
 80046d6:	68f9      	ldr	r1, [r7, #12]
 80046d8:	6809      	ldr	r1, [r1, #0]
 80046da:	4608      	mov	r0, r1
 80046dc:	6879      	ldr	r1, [r7, #4]
 80046de:	01c9      	lsls	r1, r1, #7
 80046e0:	4401      	add	r1, r0
 80046e2:	3184      	adds	r1, #132	@ 0x84
 80046e4:	4313      	orrs	r3, r2
 80046e6:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	461a      	mov	r2, r3
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	01db      	lsls	r3, r3, #7
 80046f2:	4413      	add	r3, r2
 80046f4:	3384      	adds	r3, #132	@ 0x84
 80046f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	461a      	mov	r2, r3
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	01db      	lsls	r3, r3, #7
 8004702:	4413      	add	r3, r2
 8004704:	3384      	adds	r3, #132	@ 0x84
 8004706:	461a      	mov	r2, r3
 8004708:	2300      	movs	r3, #0
 800470a:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	461a      	mov	r2, r3
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	01db      	lsls	r3, r3, #7
 8004716:	4413      	add	r3, r2
 8004718:	3384      	adds	r3, #132	@ 0x84
 800471a:	461a      	mov	r2, r3
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004720:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d102      	bne.n	8004730 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800472a:	2304      	movs	r3, #4
 800472c:	61fb      	str	r3, [r7, #28]
 800472e:	e01b      	b.n	8004768 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	691b      	ldr	r3, [r3, #16]
 8004734:	2b01      	cmp	r3, #1
 8004736:	d102      	bne.n	800473e <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004738:	2303      	movs	r3, #3
 800473a:	61fb      	str	r3, [r7, #28]
 800473c:	e014      	b.n	8004768 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	691b      	ldr	r3, [r3, #16]
 8004742:	2b04      	cmp	r3, #4
 8004744:	d00b      	beq.n	800475e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800474a:	2b02      	cmp	r3, #2
 800474c:	d007      	beq.n	800475e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004752:	2b03      	cmp	r3, #3
 8004754:	d003      	beq.n	800475e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800475a:	2b07      	cmp	r3, #7
 800475c:	d102      	bne.n	8004764 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800475e:	2302      	movs	r3, #2
 8004760:	61fb      	str	r3, [r7, #28]
 8004762:	e001      	b.n	8004768 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004764:	2301      	movs	r3, #1
 8004766:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	461a      	mov	r2, r3
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	01db      	lsls	r3, r3, #7
 8004772:	4413      	add	r3, r2
 8004774:	3384      	adds	r3, #132	@ 0x84
 8004776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004778:	68fa      	ldr	r2, [r7, #12]
 800477a:	6812      	ldr	r2, [r2, #0]
 800477c:	4611      	mov	r1, r2
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	01d2      	lsls	r2, r2, #7
 8004782:	440a      	add	r2, r1
 8004784:	3284      	adds	r2, #132	@ 0x84
 8004786:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800478a:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004790:	69fa      	ldr	r2, [r7, #28]
 8004792:	fb02 f303 	mul.w	r3, r2, r3
 8004796:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	6859      	ldr	r1, [r3, #4]
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	1acb      	subs	r3, r1, r3
 80047a2:	69f9      	ldr	r1, [r7, #28]
 80047a4:	fb01 f303 	mul.w	r3, r1, r3
 80047a8:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80047aa:	68f9      	ldr	r1, [r7, #12]
 80047ac:	6809      	ldr	r1, [r1, #0]
 80047ae:	4608      	mov	r0, r1
 80047b0:	6879      	ldr	r1, [r7, #4]
 80047b2:	01c9      	lsls	r1, r1, #7
 80047b4:	4401      	add	r1, r0
 80047b6:	3184      	adds	r1, #132	@ 0x84
 80047b8:	4313      	orrs	r3, r2
 80047ba:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	461a      	mov	r2, r3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	01db      	lsls	r3, r3, #7
 80047c6:	4413      	add	r3, r2
 80047c8:	3384      	adds	r3, #132	@ 0x84
 80047ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047cc:	68fa      	ldr	r2, [r7, #12]
 80047ce:	6812      	ldr	r2, [r2, #0]
 80047d0:	4611      	mov	r1, r2
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	01d2      	lsls	r2, r2, #7
 80047d6:	440a      	add	r2, r1
 80047d8:	3284      	adds	r2, #132	@ 0x84
 80047da:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80047de:	f023 0307 	bic.w	r3, r3, #7
 80047e2:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	461a      	mov	r2, r3
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	01db      	lsls	r3, r3, #7
 80047ee:	4413      	add	r3, r2
 80047f0:	3384      	adds	r3, #132	@ 0x84
 80047f2:	461a      	mov	r2, r3
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047f8:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	461a      	mov	r2, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	01db      	lsls	r3, r3, #7
 8004804:	4413      	add	r3, r2
 8004806:	3384      	adds	r3, #132	@ 0x84
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	68fa      	ldr	r2, [r7, #12]
 800480c:	6812      	ldr	r2, [r2, #0]
 800480e:	4611      	mov	r1, r2
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	01d2      	lsls	r2, r2, #7
 8004814:	440a      	add	r2, r1
 8004816:	3284      	adds	r2, #132	@ 0x84
 8004818:	f043 0301 	orr.w	r3, r3, #1
 800481c:	6013      	str	r3, [r2, #0]
}
 800481e:	bf00      	nop
 8004820:	3724      	adds	r7, #36	@ 0x24
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr
	...

0800482c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b086      	sub	sp, #24
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d101      	bne.n	800483e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e267      	b.n	8004d0e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0301 	and.w	r3, r3, #1
 8004846:	2b00      	cmp	r3, #0
 8004848:	d075      	beq.n	8004936 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800484a:	4b88      	ldr	r3, [pc, #544]	@ (8004a6c <HAL_RCC_OscConfig+0x240>)
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	f003 030c 	and.w	r3, r3, #12
 8004852:	2b04      	cmp	r3, #4
 8004854:	d00c      	beq.n	8004870 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004856:	4b85      	ldr	r3, [pc, #532]	@ (8004a6c <HAL_RCC_OscConfig+0x240>)
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800485e:	2b08      	cmp	r3, #8
 8004860:	d112      	bne.n	8004888 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004862:	4b82      	ldr	r3, [pc, #520]	@ (8004a6c <HAL_RCC_OscConfig+0x240>)
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800486a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800486e:	d10b      	bne.n	8004888 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004870:	4b7e      	ldr	r3, [pc, #504]	@ (8004a6c <HAL_RCC_OscConfig+0x240>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004878:	2b00      	cmp	r3, #0
 800487a:	d05b      	beq.n	8004934 <HAL_RCC_OscConfig+0x108>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d157      	bne.n	8004934 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e242      	b.n	8004d0e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004890:	d106      	bne.n	80048a0 <HAL_RCC_OscConfig+0x74>
 8004892:	4b76      	ldr	r3, [pc, #472]	@ (8004a6c <HAL_RCC_OscConfig+0x240>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a75      	ldr	r2, [pc, #468]	@ (8004a6c <HAL_RCC_OscConfig+0x240>)
 8004898:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800489c:	6013      	str	r3, [r2, #0]
 800489e:	e01d      	b.n	80048dc <HAL_RCC_OscConfig+0xb0>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80048a8:	d10c      	bne.n	80048c4 <HAL_RCC_OscConfig+0x98>
 80048aa:	4b70      	ldr	r3, [pc, #448]	@ (8004a6c <HAL_RCC_OscConfig+0x240>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a6f      	ldr	r2, [pc, #444]	@ (8004a6c <HAL_RCC_OscConfig+0x240>)
 80048b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80048b4:	6013      	str	r3, [r2, #0]
 80048b6:	4b6d      	ldr	r3, [pc, #436]	@ (8004a6c <HAL_RCC_OscConfig+0x240>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a6c      	ldr	r2, [pc, #432]	@ (8004a6c <HAL_RCC_OscConfig+0x240>)
 80048bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048c0:	6013      	str	r3, [r2, #0]
 80048c2:	e00b      	b.n	80048dc <HAL_RCC_OscConfig+0xb0>
 80048c4:	4b69      	ldr	r3, [pc, #420]	@ (8004a6c <HAL_RCC_OscConfig+0x240>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a68      	ldr	r2, [pc, #416]	@ (8004a6c <HAL_RCC_OscConfig+0x240>)
 80048ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048ce:	6013      	str	r3, [r2, #0]
 80048d0:	4b66      	ldr	r3, [pc, #408]	@ (8004a6c <HAL_RCC_OscConfig+0x240>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a65      	ldr	r2, [pc, #404]	@ (8004a6c <HAL_RCC_OscConfig+0x240>)
 80048d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80048da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d013      	beq.n	800490c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048e4:	f7fe f892 	bl	8002a0c <HAL_GetTick>
 80048e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048ea:	e008      	b.n	80048fe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048ec:	f7fe f88e 	bl	8002a0c <HAL_GetTick>
 80048f0:	4602      	mov	r2, r0
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	2b64      	cmp	r3, #100	@ 0x64
 80048f8:	d901      	bls.n	80048fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	e207      	b.n	8004d0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048fe:	4b5b      	ldr	r3, [pc, #364]	@ (8004a6c <HAL_RCC_OscConfig+0x240>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004906:	2b00      	cmp	r3, #0
 8004908:	d0f0      	beq.n	80048ec <HAL_RCC_OscConfig+0xc0>
 800490a:	e014      	b.n	8004936 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800490c:	f7fe f87e 	bl	8002a0c <HAL_GetTick>
 8004910:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004912:	e008      	b.n	8004926 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004914:	f7fe f87a 	bl	8002a0c <HAL_GetTick>
 8004918:	4602      	mov	r2, r0
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	1ad3      	subs	r3, r2, r3
 800491e:	2b64      	cmp	r3, #100	@ 0x64
 8004920:	d901      	bls.n	8004926 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004922:	2303      	movs	r3, #3
 8004924:	e1f3      	b.n	8004d0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004926:	4b51      	ldr	r3, [pc, #324]	@ (8004a6c <HAL_RCC_OscConfig+0x240>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d1f0      	bne.n	8004914 <HAL_RCC_OscConfig+0xe8>
 8004932:	e000      	b.n	8004936 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004934:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 0302 	and.w	r3, r3, #2
 800493e:	2b00      	cmp	r3, #0
 8004940:	d063      	beq.n	8004a0a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004942:	4b4a      	ldr	r3, [pc, #296]	@ (8004a6c <HAL_RCC_OscConfig+0x240>)
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	f003 030c 	and.w	r3, r3, #12
 800494a:	2b00      	cmp	r3, #0
 800494c:	d00b      	beq.n	8004966 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800494e:	4b47      	ldr	r3, [pc, #284]	@ (8004a6c <HAL_RCC_OscConfig+0x240>)
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004956:	2b08      	cmp	r3, #8
 8004958:	d11c      	bne.n	8004994 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800495a:	4b44      	ldr	r3, [pc, #272]	@ (8004a6c <HAL_RCC_OscConfig+0x240>)
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004962:	2b00      	cmp	r3, #0
 8004964:	d116      	bne.n	8004994 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004966:	4b41      	ldr	r3, [pc, #260]	@ (8004a6c <HAL_RCC_OscConfig+0x240>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0302 	and.w	r3, r3, #2
 800496e:	2b00      	cmp	r3, #0
 8004970:	d005      	beq.n	800497e <HAL_RCC_OscConfig+0x152>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	2b01      	cmp	r3, #1
 8004978:	d001      	beq.n	800497e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e1c7      	b.n	8004d0e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800497e:	4b3b      	ldr	r3, [pc, #236]	@ (8004a6c <HAL_RCC_OscConfig+0x240>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	691b      	ldr	r3, [r3, #16]
 800498a:	00db      	lsls	r3, r3, #3
 800498c:	4937      	ldr	r1, [pc, #220]	@ (8004a6c <HAL_RCC_OscConfig+0x240>)
 800498e:	4313      	orrs	r3, r2
 8004990:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004992:	e03a      	b.n	8004a0a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d020      	beq.n	80049de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800499c:	4b34      	ldr	r3, [pc, #208]	@ (8004a70 <HAL_RCC_OscConfig+0x244>)
 800499e:	2201      	movs	r2, #1
 80049a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049a2:	f7fe f833 	bl	8002a0c <HAL_GetTick>
 80049a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049a8:	e008      	b.n	80049bc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049aa:	f7fe f82f 	bl	8002a0c <HAL_GetTick>
 80049ae:	4602      	mov	r2, r0
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	1ad3      	subs	r3, r2, r3
 80049b4:	2b02      	cmp	r3, #2
 80049b6:	d901      	bls.n	80049bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80049b8:	2303      	movs	r3, #3
 80049ba:	e1a8      	b.n	8004d0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049bc:	4b2b      	ldr	r3, [pc, #172]	@ (8004a6c <HAL_RCC_OscConfig+0x240>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 0302 	and.w	r3, r3, #2
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d0f0      	beq.n	80049aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049c8:	4b28      	ldr	r3, [pc, #160]	@ (8004a6c <HAL_RCC_OscConfig+0x240>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	691b      	ldr	r3, [r3, #16]
 80049d4:	00db      	lsls	r3, r3, #3
 80049d6:	4925      	ldr	r1, [pc, #148]	@ (8004a6c <HAL_RCC_OscConfig+0x240>)
 80049d8:	4313      	orrs	r3, r2
 80049da:	600b      	str	r3, [r1, #0]
 80049dc:	e015      	b.n	8004a0a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049de:	4b24      	ldr	r3, [pc, #144]	@ (8004a70 <HAL_RCC_OscConfig+0x244>)
 80049e0:	2200      	movs	r2, #0
 80049e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049e4:	f7fe f812 	bl	8002a0c <HAL_GetTick>
 80049e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049ea:	e008      	b.n	80049fe <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049ec:	f7fe f80e 	bl	8002a0c <HAL_GetTick>
 80049f0:	4602      	mov	r2, r0
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	2b02      	cmp	r3, #2
 80049f8:	d901      	bls.n	80049fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80049fa:	2303      	movs	r3, #3
 80049fc:	e187      	b.n	8004d0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049fe:	4b1b      	ldr	r3, [pc, #108]	@ (8004a6c <HAL_RCC_OscConfig+0x240>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 0302 	and.w	r3, r3, #2
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d1f0      	bne.n	80049ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 0308 	and.w	r3, r3, #8
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d036      	beq.n	8004a84 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	695b      	ldr	r3, [r3, #20]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d016      	beq.n	8004a4c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a1e:	4b15      	ldr	r3, [pc, #84]	@ (8004a74 <HAL_RCC_OscConfig+0x248>)
 8004a20:	2201      	movs	r2, #1
 8004a22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a24:	f7fd fff2 	bl	8002a0c <HAL_GetTick>
 8004a28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a2a:	e008      	b.n	8004a3e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a2c:	f7fd ffee 	bl	8002a0c <HAL_GetTick>
 8004a30:	4602      	mov	r2, r0
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	2b02      	cmp	r3, #2
 8004a38:	d901      	bls.n	8004a3e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	e167      	b.n	8004d0e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a3e:	4b0b      	ldr	r3, [pc, #44]	@ (8004a6c <HAL_RCC_OscConfig+0x240>)
 8004a40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a42:	f003 0302 	and.w	r3, r3, #2
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d0f0      	beq.n	8004a2c <HAL_RCC_OscConfig+0x200>
 8004a4a:	e01b      	b.n	8004a84 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a4c:	4b09      	ldr	r3, [pc, #36]	@ (8004a74 <HAL_RCC_OscConfig+0x248>)
 8004a4e:	2200      	movs	r2, #0
 8004a50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a52:	f7fd ffdb 	bl	8002a0c <HAL_GetTick>
 8004a56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a58:	e00e      	b.n	8004a78 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a5a:	f7fd ffd7 	bl	8002a0c <HAL_GetTick>
 8004a5e:	4602      	mov	r2, r0
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	1ad3      	subs	r3, r2, r3
 8004a64:	2b02      	cmp	r3, #2
 8004a66:	d907      	bls.n	8004a78 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004a68:	2303      	movs	r3, #3
 8004a6a:	e150      	b.n	8004d0e <HAL_RCC_OscConfig+0x4e2>
 8004a6c:	40023800 	.word	0x40023800
 8004a70:	42470000 	.word	0x42470000
 8004a74:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a78:	4b88      	ldr	r3, [pc, #544]	@ (8004c9c <HAL_RCC_OscConfig+0x470>)
 8004a7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a7c:	f003 0302 	and.w	r3, r3, #2
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d1ea      	bne.n	8004a5a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 0304 	and.w	r3, r3, #4
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	f000 8097 	beq.w	8004bc0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a92:	2300      	movs	r3, #0
 8004a94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a96:	4b81      	ldr	r3, [pc, #516]	@ (8004c9c <HAL_RCC_OscConfig+0x470>)
 8004a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d10f      	bne.n	8004ac2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	60bb      	str	r3, [r7, #8]
 8004aa6:	4b7d      	ldr	r3, [pc, #500]	@ (8004c9c <HAL_RCC_OscConfig+0x470>)
 8004aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aaa:	4a7c      	ldr	r2, [pc, #496]	@ (8004c9c <HAL_RCC_OscConfig+0x470>)
 8004aac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ab0:	6413      	str	r3, [r2, #64]	@ 0x40
 8004ab2:	4b7a      	ldr	r3, [pc, #488]	@ (8004c9c <HAL_RCC_OscConfig+0x470>)
 8004ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ab6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004aba:	60bb      	str	r3, [r7, #8]
 8004abc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ac2:	4b77      	ldr	r3, [pc, #476]	@ (8004ca0 <HAL_RCC_OscConfig+0x474>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d118      	bne.n	8004b00 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ace:	4b74      	ldr	r3, [pc, #464]	@ (8004ca0 <HAL_RCC_OscConfig+0x474>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a73      	ldr	r2, [pc, #460]	@ (8004ca0 <HAL_RCC_OscConfig+0x474>)
 8004ad4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ad8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ada:	f7fd ff97 	bl	8002a0c <HAL_GetTick>
 8004ade:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ae0:	e008      	b.n	8004af4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ae2:	f7fd ff93 	bl	8002a0c <HAL_GetTick>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	1ad3      	subs	r3, r2, r3
 8004aec:	2b02      	cmp	r3, #2
 8004aee:	d901      	bls.n	8004af4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004af0:	2303      	movs	r3, #3
 8004af2:	e10c      	b.n	8004d0e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004af4:	4b6a      	ldr	r3, [pc, #424]	@ (8004ca0 <HAL_RCC_OscConfig+0x474>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d0f0      	beq.n	8004ae2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d106      	bne.n	8004b16 <HAL_RCC_OscConfig+0x2ea>
 8004b08:	4b64      	ldr	r3, [pc, #400]	@ (8004c9c <HAL_RCC_OscConfig+0x470>)
 8004b0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b0c:	4a63      	ldr	r2, [pc, #396]	@ (8004c9c <HAL_RCC_OscConfig+0x470>)
 8004b0e:	f043 0301 	orr.w	r3, r3, #1
 8004b12:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b14:	e01c      	b.n	8004b50 <HAL_RCC_OscConfig+0x324>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	2b05      	cmp	r3, #5
 8004b1c:	d10c      	bne.n	8004b38 <HAL_RCC_OscConfig+0x30c>
 8004b1e:	4b5f      	ldr	r3, [pc, #380]	@ (8004c9c <HAL_RCC_OscConfig+0x470>)
 8004b20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b22:	4a5e      	ldr	r2, [pc, #376]	@ (8004c9c <HAL_RCC_OscConfig+0x470>)
 8004b24:	f043 0304 	orr.w	r3, r3, #4
 8004b28:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b2a:	4b5c      	ldr	r3, [pc, #368]	@ (8004c9c <HAL_RCC_OscConfig+0x470>)
 8004b2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b2e:	4a5b      	ldr	r2, [pc, #364]	@ (8004c9c <HAL_RCC_OscConfig+0x470>)
 8004b30:	f043 0301 	orr.w	r3, r3, #1
 8004b34:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b36:	e00b      	b.n	8004b50 <HAL_RCC_OscConfig+0x324>
 8004b38:	4b58      	ldr	r3, [pc, #352]	@ (8004c9c <HAL_RCC_OscConfig+0x470>)
 8004b3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b3c:	4a57      	ldr	r2, [pc, #348]	@ (8004c9c <HAL_RCC_OscConfig+0x470>)
 8004b3e:	f023 0301 	bic.w	r3, r3, #1
 8004b42:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b44:	4b55      	ldr	r3, [pc, #340]	@ (8004c9c <HAL_RCC_OscConfig+0x470>)
 8004b46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b48:	4a54      	ldr	r2, [pc, #336]	@ (8004c9c <HAL_RCC_OscConfig+0x470>)
 8004b4a:	f023 0304 	bic.w	r3, r3, #4
 8004b4e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d015      	beq.n	8004b84 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b58:	f7fd ff58 	bl	8002a0c <HAL_GetTick>
 8004b5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b5e:	e00a      	b.n	8004b76 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b60:	f7fd ff54 	bl	8002a0c <HAL_GetTick>
 8004b64:	4602      	mov	r2, r0
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d901      	bls.n	8004b76 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004b72:	2303      	movs	r3, #3
 8004b74:	e0cb      	b.n	8004d0e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b76:	4b49      	ldr	r3, [pc, #292]	@ (8004c9c <HAL_RCC_OscConfig+0x470>)
 8004b78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b7a:	f003 0302 	and.w	r3, r3, #2
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d0ee      	beq.n	8004b60 <HAL_RCC_OscConfig+0x334>
 8004b82:	e014      	b.n	8004bae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b84:	f7fd ff42 	bl	8002a0c <HAL_GetTick>
 8004b88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b8a:	e00a      	b.n	8004ba2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b8c:	f7fd ff3e 	bl	8002a0c <HAL_GetTick>
 8004b90:	4602      	mov	r2, r0
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d901      	bls.n	8004ba2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004b9e:	2303      	movs	r3, #3
 8004ba0:	e0b5      	b.n	8004d0e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ba2:	4b3e      	ldr	r3, [pc, #248]	@ (8004c9c <HAL_RCC_OscConfig+0x470>)
 8004ba4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ba6:	f003 0302 	and.w	r3, r3, #2
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d1ee      	bne.n	8004b8c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004bae:	7dfb      	ldrb	r3, [r7, #23]
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d105      	bne.n	8004bc0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bb4:	4b39      	ldr	r3, [pc, #228]	@ (8004c9c <HAL_RCC_OscConfig+0x470>)
 8004bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bb8:	4a38      	ldr	r2, [pc, #224]	@ (8004c9c <HAL_RCC_OscConfig+0x470>)
 8004bba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004bbe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	699b      	ldr	r3, [r3, #24]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	f000 80a1 	beq.w	8004d0c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004bca:	4b34      	ldr	r3, [pc, #208]	@ (8004c9c <HAL_RCC_OscConfig+0x470>)
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	f003 030c 	and.w	r3, r3, #12
 8004bd2:	2b08      	cmp	r3, #8
 8004bd4:	d05c      	beq.n	8004c90 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	699b      	ldr	r3, [r3, #24]
 8004bda:	2b02      	cmp	r3, #2
 8004bdc:	d141      	bne.n	8004c62 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bde:	4b31      	ldr	r3, [pc, #196]	@ (8004ca4 <HAL_RCC_OscConfig+0x478>)
 8004be0:	2200      	movs	r2, #0
 8004be2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004be4:	f7fd ff12 	bl	8002a0c <HAL_GetTick>
 8004be8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bea:	e008      	b.n	8004bfe <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bec:	f7fd ff0e 	bl	8002a0c <HAL_GetTick>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	1ad3      	subs	r3, r2, r3
 8004bf6:	2b02      	cmp	r3, #2
 8004bf8:	d901      	bls.n	8004bfe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	e087      	b.n	8004d0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bfe:	4b27      	ldr	r3, [pc, #156]	@ (8004c9c <HAL_RCC_OscConfig+0x470>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d1f0      	bne.n	8004bec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	69da      	ldr	r2, [r3, #28]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a1b      	ldr	r3, [r3, #32]
 8004c12:	431a      	orrs	r2, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c18:	019b      	lsls	r3, r3, #6
 8004c1a:	431a      	orrs	r2, r3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c20:	085b      	lsrs	r3, r3, #1
 8004c22:	3b01      	subs	r3, #1
 8004c24:	041b      	lsls	r3, r3, #16
 8004c26:	431a      	orrs	r2, r3
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c2c:	061b      	lsls	r3, r3, #24
 8004c2e:	491b      	ldr	r1, [pc, #108]	@ (8004c9c <HAL_RCC_OscConfig+0x470>)
 8004c30:	4313      	orrs	r3, r2
 8004c32:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c34:	4b1b      	ldr	r3, [pc, #108]	@ (8004ca4 <HAL_RCC_OscConfig+0x478>)
 8004c36:	2201      	movs	r2, #1
 8004c38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c3a:	f7fd fee7 	bl	8002a0c <HAL_GetTick>
 8004c3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c40:	e008      	b.n	8004c54 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c42:	f7fd fee3 	bl	8002a0c <HAL_GetTick>
 8004c46:	4602      	mov	r2, r0
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	2b02      	cmp	r3, #2
 8004c4e:	d901      	bls.n	8004c54 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004c50:	2303      	movs	r3, #3
 8004c52:	e05c      	b.n	8004d0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c54:	4b11      	ldr	r3, [pc, #68]	@ (8004c9c <HAL_RCC_OscConfig+0x470>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d0f0      	beq.n	8004c42 <HAL_RCC_OscConfig+0x416>
 8004c60:	e054      	b.n	8004d0c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c62:	4b10      	ldr	r3, [pc, #64]	@ (8004ca4 <HAL_RCC_OscConfig+0x478>)
 8004c64:	2200      	movs	r2, #0
 8004c66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c68:	f7fd fed0 	bl	8002a0c <HAL_GetTick>
 8004c6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c6e:	e008      	b.n	8004c82 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c70:	f7fd fecc 	bl	8002a0c <HAL_GetTick>
 8004c74:	4602      	mov	r2, r0
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	1ad3      	subs	r3, r2, r3
 8004c7a:	2b02      	cmp	r3, #2
 8004c7c:	d901      	bls.n	8004c82 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004c7e:	2303      	movs	r3, #3
 8004c80:	e045      	b.n	8004d0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c82:	4b06      	ldr	r3, [pc, #24]	@ (8004c9c <HAL_RCC_OscConfig+0x470>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d1f0      	bne.n	8004c70 <HAL_RCC_OscConfig+0x444>
 8004c8e:	e03d      	b.n	8004d0c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	699b      	ldr	r3, [r3, #24]
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d107      	bne.n	8004ca8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e038      	b.n	8004d0e <HAL_RCC_OscConfig+0x4e2>
 8004c9c:	40023800 	.word	0x40023800
 8004ca0:	40007000 	.word	0x40007000
 8004ca4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ca8:	4b1b      	ldr	r3, [pc, #108]	@ (8004d18 <HAL_RCC_OscConfig+0x4ec>)
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	699b      	ldr	r3, [r3, #24]
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d028      	beq.n	8004d08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d121      	bne.n	8004d08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d11a      	bne.n	8004d08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004cd2:	68fa      	ldr	r2, [r7, #12]
 8004cd4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004cd8:	4013      	ands	r3, r2
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004cde:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d111      	bne.n	8004d08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cee:	085b      	lsrs	r3, r3, #1
 8004cf0:	3b01      	subs	r3, #1
 8004cf2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d107      	bne.n	8004d08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d02:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d001      	beq.n	8004d0c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e000      	b.n	8004d0e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004d0c:	2300      	movs	r3, #0
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3718      	adds	r7, #24
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	40023800 	.word	0x40023800

08004d1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b084      	sub	sp, #16
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d101      	bne.n	8004d30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	e0cc      	b.n	8004eca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d30:	4b68      	ldr	r3, [pc, #416]	@ (8004ed4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 030f 	and.w	r3, r3, #15
 8004d38:	683a      	ldr	r2, [r7, #0]
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d90c      	bls.n	8004d58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d3e:	4b65      	ldr	r3, [pc, #404]	@ (8004ed4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d40:	683a      	ldr	r2, [r7, #0]
 8004d42:	b2d2      	uxtb	r2, r2
 8004d44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d46:	4b63      	ldr	r3, [pc, #396]	@ (8004ed4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 030f 	and.w	r3, r3, #15
 8004d4e:	683a      	ldr	r2, [r7, #0]
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d001      	beq.n	8004d58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	e0b8      	b.n	8004eca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 0302 	and.w	r3, r3, #2
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d020      	beq.n	8004da6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 0304 	and.w	r3, r3, #4
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d005      	beq.n	8004d7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d70:	4b59      	ldr	r3, [pc, #356]	@ (8004ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	4a58      	ldr	r2, [pc, #352]	@ (8004ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d76:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004d7a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 0308 	and.w	r3, r3, #8
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d005      	beq.n	8004d94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d88:	4b53      	ldr	r3, [pc, #332]	@ (8004ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	4a52      	ldr	r2, [pc, #328]	@ (8004ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d8e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004d92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d94:	4b50      	ldr	r3, [pc, #320]	@ (8004ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	494d      	ldr	r1, [pc, #308]	@ (8004ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8004da2:	4313      	orrs	r3, r2
 8004da4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 0301 	and.w	r3, r3, #1
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d044      	beq.n	8004e3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d107      	bne.n	8004dca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dba:	4b47      	ldr	r3, [pc, #284]	@ (8004ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d119      	bne.n	8004dfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e07f      	b.n	8004eca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	2b02      	cmp	r3, #2
 8004dd0:	d003      	beq.n	8004dda <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004dd6:	2b03      	cmp	r3, #3
 8004dd8:	d107      	bne.n	8004dea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dda:	4b3f      	ldr	r3, [pc, #252]	@ (8004ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d109      	bne.n	8004dfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e06f      	b.n	8004eca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dea:	4b3b      	ldr	r3, [pc, #236]	@ (8004ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 0302 	and.w	r3, r3, #2
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d101      	bne.n	8004dfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e067      	b.n	8004eca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004dfa:	4b37      	ldr	r3, [pc, #220]	@ (8004ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	f023 0203 	bic.w	r2, r3, #3
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	4934      	ldr	r1, [pc, #208]	@ (8004ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e0c:	f7fd fdfe 	bl	8002a0c <HAL_GetTick>
 8004e10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e12:	e00a      	b.n	8004e2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e14:	f7fd fdfa 	bl	8002a0c <HAL_GetTick>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d901      	bls.n	8004e2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e26:	2303      	movs	r3, #3
 8004e28:	e04f      	b.n	8004eca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e2a:	4b2b      	ldr	r3, [pc, #172]	@ (8004ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	f003 020c 	and.w	r2, r3, #12
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d1eb      	bne.n	8004e14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e3c:	4b25      	ldr	r3, [pc, #148]	@ (8004ed4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 030f 	and.w	r3, r3, #15
 8004e44:	683a      	ldr	r2, [r7, #0]
 8004e46:	429a      	cmp	r2, r3
 8004e48:	d20c      	bcs.n	8004e64 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e4a:	4b22      	ldr	r3, [pc, #136]	@ (8004ed4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e4c:	683a      	ldr	r2, [r7, #0]
 8004e4e:	b2d2      	uxtb	r2, r2
 8004e50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e52:	4b20      	ldr	r3, [pc, #128]	@ (8004ed4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f003 030f 	and.w	r3, r3, #15
 8004e5a:	683a      	ldr	r2, [r7, #0]
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d001      	beq.n	8004e64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	e032      	b.n	8004eca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 0304 	and.w	r3, r3, #4
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d008      	beq.n	8004e82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e70:	4b19      	ldr	r3, [pc, #100]	@ (8004ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	4916      	ldr	r1, [pc, #88]	@ (8004ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 0308 	and.w	r3, r3, #8
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d009      	beq.n	8004ea2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e8e:	4b12      	ldr	r3, [pc, #72]	@ (8004ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	691b      	ldr	r3, [r3, #16]
 8004e9a:	00db      	lsls	r3, r3, #3
 8004e9c:	490e      	ldr	r1, [pc, #56]	@ (8004ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004ea2:	f000 f821 	bl	8004ee8 <HAL_RCC_GetSysClockFreq>
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	4b0b      	ldr	r3, [pc, #44]	@ (8004ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	091b      	lsrs	r3, r3, #4
 8004eae:	f003 030f 	and.w	r3, r3, #15
 8004eb2:	490a      	ldr	r1, [pc, #40]	@ (8004edc <HAL_RCC_ClockConfig+0x1c0>)
 8004eb4:	5ccb      	ldrb	r3, [r1, r3]
 8004eb6:	fa22 f303 	lsr.w	r3, r2, r3
 8004eba:	4a09      	ldr	r2, [pc, #36]	@ (8004ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8004ebc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004ebe:	4b09      	ldr	r3, [pc, #36]	@ (8004ee4 <HAL_RCC_ClockConfig+0x1c8>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f7fd fd5e 	bl	8002984 <HAL_InitTick>

  return HAL_OK;
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3710      	adds	r7, #16
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	bf00      	nop
 8004ed4:	40023c00 	.word	0x40023c00
 8004ed8:	40023800 	.word	0x40023800
 8004edc:	080075b4 	.word	0x080075b4
 8004ee0:	2000001c 	.word	0x2000001c
 8004ee4:	20000020 	.word	0x20000020

08004ee8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ee8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004eec:	b094      	sub	sp, #80	@ 0x50
 8004eee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004efc:	2300      	movs	r3, #0
 8004efe:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f00:	4b79      	ldr	r3, [pc, #484]	@ (80050e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	f003 030c 	and.w	r3, r3, #12
 8004f08:	2b08      	cmp	r3, #8
 8004f0a:	d00d      	beq.n	8004f28 <HAL_RCC_GetSysClockFreq+0x40>
 8004f0c:	2b08      	cmp	r3, #8
 8004f0e:	f200 80e1 	bhi.w	80050d4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d002      	beq.n	8004f1c <HAL_RCC_GetSysClockFreq+0x34>
 8004f16:	2b04      	cmp	r3, #4
 8004f18:	d003      	beq.n	8004f22 <HAL_RCC_GetSysClockFreq+0x3a>
 8004f1a:	e0db      	b.n	80050d4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f1c:	4b73      	ldr	r3, [pc, #460]	@ (80050ec <HAL_RCC_GetSysClockFreq+0x204>)
 8004f1e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004f20:	e0db      	b.n	80050da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f22:	4b73      	ldr	r3, [pc, #460]	@ (80050f0 <HAL_RCC_GetSysClockFreq+0x208>)
 8004f24:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004f26:	e0d8      	b.n	80050da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f28:	4b6f      	ldr	r3, [pc, #444]	@ (80050e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004f30:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f32:	4b6d      	ldr	r3, [pc, #436]	@ (80050e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d063      	beq.n	8005006 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f3e:	4b6a      	ldr	r3, [pc, #424]	@ (80050e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	099b      	lsrs	r3, r3, #6
 8004f44:	2200      	movs	r2, #0
 8004f46:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004f48:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004f4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f50:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f52:	2300      	movs	r3, #0
 8004f54:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f56:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004f5a:	4622      	mov	r2, r4
 8004f5c:	462b      	mov	r3, r5
 8004f5e:	f04f 0000 	mov.w	r0, #0
 8004f62:	f04f 0100 	mov.w	r1, #0
 8004f66:	0159      	lsls	r1, r3, #5
 8004f68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f6c:	0150      	lsls	r0, r2, #5
 8004f6e:	4602      	mov	r2, r0
 8004f70:	460b      	mov	r3, r1
 8004f72:	4621      	mov	r1, r4
 8004f74:	1a51      	subs	r1, r2, r1
 8004f76:	6139      	str	r1, [r7, #16]
 8004f78:	4629      	mov	r1, r5
 8004f7a:	eb63 0301 	sbc.w	r3, r3, r1
 8004f7e:	617b      	str	r3, [r7, #20]
 8004f80:	f04f 0200 	mov.w	r2, #0
 8004f84:	f04f 0300 	mov.w	r3, #0
 8004f88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f8c:	4659      	mov	r1, fp
 8004f8e:	018b      	lsls	r3, r1, #6
 8004f90:	4651      	mov	r1, sl
 8004f92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004f96:	4651      	mov	r1, sl
 8004f98:	018a      	lsls	r2, r1, #6
 8004f9a:	4651      	mov	r1, sl
 8004f9c:	ebb2 0801 	subs.w	r8, r2, r1
 8004fa0:	4659      	mov	r1, fp
 8004fa2:	eb63 0901 	sbc.w	r9, r3, r1
 8004fa6:	f04f 0200 	mov.w	r2, #0
 8004faa:	f04f 0300 	mov.w	r3, #0
 8004fae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004fb2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004fb6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004fba:	4690      	mov	r8, r2
 8004fbc:	4699      	mov	r9, r3
 8004fbe:	4623      	mov	r3, r4
 8004fc0:	eb18 0303 	adds.w	r3, r8, r3
 8004fc4:	60bb      	str	r3, [r7, #8]
 8004fc6:	462b      	mov	r3, r5
 8004fc8:	eb49 0303 	adc.w	r3, r9, r3
 8004fcc:	60fb      	str	r3, [r7, #12]
 8004fce:	f04f 0200 	mov.w	r2, #0
 8004fd2:	f04f 0300 	mov.w	r3, #0
 8004fd6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004fda:	4629      	mov	r1, r5
 8004fdc:	024b      	lsls	r3, r1, #9
 8004fde:	4621      	mov	r1, r4
 8004fe0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004fe4:	4621      	mov	r1, r4
 8004fe6:	024a      	lsls	r2, r1, #9
 8004fe8:	4610      	mov	r0, r2
 8004fea:	4619      	mov	r1, r3
 8004fec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004fee:	2200      	movs	r2, #0
 8004ff0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ff2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ff4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004ff8:	f7fb f8f8 	bl	80001ec <__aeabi_uldivmod>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	460b      	mov	r3, r1
 8005000:	4613      	mov	r3, r2
 8005002:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005004:	e058      	b.n	80050b8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005006:	4b38      	ldr	r3, [pc, #224]	@ (80050e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	099b      	lsrs	r3, r3, #6
 800500c:	2200      	movs	r2, #0
 800500e:	4618      	mov	r0, r3
 8005010:	4611      	mov	r1, r2
 8005012:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005016:	623b      	str	r3, [r7, #32]
 8005018:	2300      	movs	r3, #0
 800501a:	627b      	str	r3, [r7, #36]	@ 0x24
 800501c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005020:	4642      	mov	r2, r8
 8005022:	464b      	mov	r3, r9
 8005024:	f04f 0000 	mov.w	r0, #0
 8005028:	f04f 0100 	mov.w	r1, #0
 800502c:	0159      	lsls	r1, r3, #5
 800502e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005032:	0150      	lsls	r0, r2, #5
 8005034:	4602      	mov	r2, r0
 8005036:	460b      	mov	r3, r1
 8005038:	4641      	mov	r1, r8
 800503a:	ebb2 0a01 	subs.w	sl, r2, r1
 800503e:	4649      	mov	r1, r9
 8005040:	eb63 0b01 	sbc.w	fp, r3, r1
 8005044:	f04f 0200 	mov.w	r2, #0
 8005048:	f04f 0300 	mov.w	r3, #0
 800504c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005050:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005054:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005058:	ebb2 040a 	subs.w	r4, r2, sl
 800505c:	eb63 050b 	sbc.w	r5, r3, fp
 8005060:	f04f 0200 	mov.w	r2, #0
 8005064:	f04f 0300 	mov.w	r3, #0
 8005068:	00eb      	lsls	r3, r5, #3
 800506a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800506e:	00e2      	lsls	r2, r4, #3
 8005070:	4614      	mov	r4, r2
 8005072:	461d      	mov	r5, r3
 8005074:	4643      	mov	r3, r8
 8005076:	18e3      	adds	r3, r4, r3
 8005078:	603b      	str	r3, [r7, #0]
 800507a:	464b      	mov	r3, r9
 800507c:	eb45 0303 	adc.w	r3, r5, r3
 8005080:	607b      	str	r3, [r7, #4]
 8005082:	f04f 0200 	mov.w	r2, #0
 8005086:	f04f 0300 	mov.w	r3, #0
 800508a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800508e:	4629      	mov	r1, r5
 8005090:	028b      	lsls	r3, r1, #10
 8005092:	4621      	mov	r1, r4
 8005094:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005098:	4621      	mov	r1, r4
 800509a:	028a      	lsls	r2, r1, #10
 800509c:	4610      	mov	r0, r2
 800509e:	4619      	mov	r1, r3
 80050a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80050a2:	2200      	movs	r2, #0
 80050a4:	61bb      	str	r3, [r7, #24]
 80050a6:	61fa      	str	r2, [r7, #28]
 80050a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80050ac:	f7fb f89e 	bl	80001ec <__aeabi_uldivmod>
 80050b0:	4602      	mov	r2, r0
 80050b2:	460b      	mov	r3, r1
 80050b4:	4613      	mov	r3, r2
 80050b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80050b8:	4b0b      	ldr	r3, [pc, #44]	@ (80050e8 <HAL_RCC_GetSysClockFreq+0x200>)
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	0c1b      	lsrs	r3, r3, #16
 80050be:	f003 0303 	and.w	r3, r3, #3
 80050c2:	3301      	adds	r3, #1
 80050c4:	005b      	lsls	r3, r3, #1
 80050c6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80050c8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80050ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80050cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80050d0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80050d2:	e002      	b.n	80050da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80050d4:	4b05      	ldr	r3, [pc, #20]	@ (80050ec <HAL_RCC_GetSysClockFreq+0x204>)
 80050d6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80050d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80050da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3750      	adds	r7, #80	@ 0x50
 80050e0:	46bd      	mov	sp, r7
 80050e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050e6:	bf00      	nop
 80050e8:	40023800 	.word	0x40023800
 80050ec:	00f42400 	.word	0x00f42400
 80050f0:	007a1200 	.word	0x007a1200

080050f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050f4:	b480      	push	{r7}
 80050f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050f8:	4b03      	ldr	r3, [pc, #12]	@ (8005108 <HAL_RCC_GetHCLKFreq+0x14>)
 80050fa:	681b      	ldr	r3, [r3, #0]
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr
 8005106:	bf00      	nop
 8005108:	2000001c 	.word	0x2000001c

0800510c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005110:	f7ff fff0 	bl	80050f4 <HAL_RCC_GetHCLKFreq>
 8005114:	4602      	mov	r2, r0
 8005116:	4b05      	ldr	r3, [pc, #20]	@ (800512c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	0a9b      	lsrs	r3, r3, #10
 800511c:	f003 0307 	and.w	r3, r3, #7
 8005120:	4903      	ldr	r1, [pc, #12]	@ (8005130 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005122:	5ccb      	ldrb	r3, [r1, r3]
 8005124:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005128:	4618      	mov	r0, r3
 800512a:	bd80      	pop	{r7, pc}
 800512c:	40023800 	.word	0x40023800
 8005130:	080075c4 	.word	0x080075c4

08005134 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b086      	sub	sp, #24
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800513c:	2300      	movs	r3, #0
 800513e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005140:	2300      	movs	r3, #0
 8005142:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f003 0301 	and.w	r3, r3, #1
 800514c:	2b00      	cmp	r3, #0
 800514e:	d10b      	bne.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005158:	2b00      	cmp	r3, #0
 800515a:	d105      	bne.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005164:	2b00      	cmp	r3, #0
 8005166:	d075      	beq.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005168:	4b91      	ldr	r3, [pc, #580]	@ (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800516a:	2200      	movs	r2, #0
 800516c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800516e:	f7fd fc4d 	bl	8002a0c <HAL_GetTick>
 8005172:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005174:	e008      	b.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005176:	f7fd fc49 	bl	8002a0c <HAL_GetTick>
 800517a:	4602      	mov	r2, r0
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	1ad3      	subs	r3, r2, r3
 8005180:	2b02      	cmp	r3, #2
 8005182:	d901      	bls.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005184:	2303      	movs	r3, #3
 8005186:	e189      	b.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005188:	4b8a      	ldr	r3, [pc, #552]	@ (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005190:	2b00      	cmp	r3, #0
 8005192:	d1f0      	bne.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 0301 	and.w	r3, r3, #1
 800519c:	2b00      	cmp	r3, #0
 800519e:	d009      	beq.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	019a      	lsls	r2, r3, #6
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	071b      	lsls	r3, r3, #28
 80051ac:	4981      	ldr	r1, [pc, #516]	@ (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80051ae:	4313      	orrs	r3, r2
 80051b0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 0302 	and.w	r3, r3, #2
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d01f      	beq.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80051c0:	4b7c      	ldr	r3, [pc, #496]	@ (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80051c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80051c6:	0f1b      	lsrs	r3, r3, #28
 80051c8:	f003 0307 	and.w	r3, r3, #7
 80051cc:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	019a      	lsls	r2, r3, #6
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	061b      	lsls	r3, r3, #24
 80051da:	431a      	orrs	r2, r3
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	071b      	lsls	r3, r3, #28
 80051e0:	4974      	ldr	r1, [pc, #464]	@ (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80051e2:	4313      	orrs	r3, r2
 80051e4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80051e8:	4b72      	ldr	r3, [pc, #456]	@ (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80051ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80051ee:	f023 021f 	bic.w	r2, r3, #31
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	69db      	ldr	r3, [r3, #28]
 80051f6:	3b01      	subs	r3, #1
 80051f8:	496e      	ldr	r1, [pc, #440]	@ (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80051fa:	4313      	orrs	r3, r2
 80051fc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005208:	2b00      	cmp	r3, #0
 800520a:	d00d      	beq.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	019a      	lsls	r2, r3, #6
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	68db      	ldr	r3, [r3, #12]
 8005216:	061b      	lsls	r3, r3, #24
 8005218:	431a      	orrs	r2, r3
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	071b      	lsls	r3, r3, #28
 8005220:	4964      	ldr	r1, [pc, #400]	@ (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005222:	4313      	orrs	r3, r2
 8005224:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005228:	4b61      	ldr	r3, [pc, #388]	@ (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800522a:	2201      	movs	r2, #1
 800522c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800522e:	f7fd fbed 	bl	8002a0c <HAL_GetTick>
 8005232:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005234:	e008      	b.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005236:	f7fd fbe9 	bl	8002a0c <HAL_GetTick>
 800523a:	4602      	mov	r2, r0
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	1ad3      	subs	r3, r2, r3
 8005240:	2b02      	cmp	r3, #2
 8005242:	d901      	bls.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005244:	2303      	movs	r3, #3
 8005246:	e129      	b.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005248:	4b5a      	ldr	r3, [pc, #360]	@ (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005250:	2b00      	cmp	r3, #0
 8005252:	d0f0      	beq.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f003 0304 	and.w	r3, r3, #4
 800525c:	2b00      	cmp	r3, #0
 800525e:	d105      	bne.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005268:	2b00      	cmp	r3, #0
 800526a:	d079      	beq.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800526c:	4b52      	ldr	r3, [pc, #328]	@ (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800526e:	2200      	movs	r2, #0
 8005270:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005272:	f7fd fbcb 	bl	8002a0c <HAL_GetTick>
 8005276:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005278:	e008      	b.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800527a:	f7fd fbc7 	bl	8002a0c <HAL_GetTick>
 800527e:	4602      	mov	r2, r0
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	1ad3      	subs	r3, r2, r3
 8005284:	2b02      	cmp	r3, #2
 8005286:	d901      	bls.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005288:	2303      	movs	r3, #3
 800528a:	e107      	b.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800528c:	4b49      	ldr	r3, [pc, #292]	@ (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005294:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005298:	d0ef      	beq.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 0304 	and.w	r3, r3, #4
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d020      	beq.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80052a6:	4b43      	ldr	r3, [pc, #268]	@ (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052ac:	0f1b      	lsrs	r3, r3, #28
 80052ae:	f003 0307 	and.w	r3, r3, #7
 80052b2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	691b      	ldr	r3, [r3, #16]
 80052b8:	019a      	lsls	r2, r3, #6
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	695b      	ldr	r3, [r3, #20]
 80052be:	061b      	lsls	r3, r3, #24
 80052c0:	431a      	orrs	r2, r3
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	071b      	lsls	r3, r3, #28
 80052c6:	493b      	ldr	r1, [pc, #236]	@ (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052c8:	4313      	orrs	r3, r2
 80052ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80052ce:	4b39      	ldr	r3, [pc, #228]	@ (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80052d4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6a1b      	ldr	r3, [r3, #32]
 80052dc:	3b01      	subs	r3, #1
 80052de:	021b      	lsls	r3, r3, #8
 80052e0:	4934      	ldr	r1, [pc, #208]	@ (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052e2:	4313      	orrs	r3, r2
 80052e4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f003 0308 	and.w	r3, r3, #8
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d01e      	beq.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80052f4:	4b2f      	ldr	r3, [pc, #188]	@ (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052fa:	0e1b      	lsrs	r3, r3, #24
 80052fc:	f003 030f 	and.w	r3, r3, #15
 8005300:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	019a      	lsls	r2, r3, #6
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	061b      	lsls	r3, r3, #24
 800530c:	431a      	orrs	r2, r3
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	699b      	ldr	r3, [r3, #24]
 8005312:	071b      	lsls	r3, r3, #28
 8005314:	4927      	ldr	r1, [pc, #156]	@ (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005316:	4313      	orrs	r3, r2
 8005318:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800531c:	4b25      	ldr	r3, [pc, #148]	@ (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800531e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005322:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800532a:	4922      	ldr	r1, [pc, #136]	@ (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800532c:	4313      	orrs	r3, r2
 800532e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005332:	4b21      	ldr	r3, [pc, #132]	@ (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005334:	2201      	movs	r2, #1
 8005336:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005338:	f7fd fb68 	bl	8002a0c <HAL_GetTick>
 800533c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800533e:	e008      	b.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005340:	f7fd fb64 	bl	8002a0c <HAL_GetTick>
 8005344:	4602      	mov	r2, r0
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	2b02      	cmp	r3, #2
 800534c:	d901      	bls.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800534e:	2303      	movs	r3, #3
 8005350:	e0a4      	b.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005352:	4b18      	ldr	r3, [pc, #96]	@ (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800535a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800535e:	d1ef      	bne.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f003 0320 	and.w	r3, r3, #32
 8005368:	2b00      	cmp	r3, #0
 800536a:	f000 808b 	beq.w	8005484 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800536e:	2300      	movs	r3, #0
 8005370:	60fb      	str	r3, [r7, #12]
 8005372:	4b10      	ldr	r3, [pc, #64]	@ (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005376:	4a0f      	ldr	r2, [pc, #60]	@ (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005378:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800537c:	6413      	str	r3, [r2, #64]	@ 0x40
 800537e:	4b0d      	ldr	r3, [pc, #52]	@ (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005382:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005386:	60fb      	str	r3, [r7, #12]
 8005388:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800538a:	4b0c      	ldr	r3, [pc, #48]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a0b      	ldr	r2, [pc, #44]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005390:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005394:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005396:	f7fd fb39 	bl	8002a0c <HAL_GetTick>
 800539a:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800539c:	e010      	b.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800539e:	f7fd fb35 	bl	8002a0c <HAL_GetTick>
 80053a2:	4602      	mov	r2, r0
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	1ad3      	subs	r3, r2, r3
 80053a8:	2b02      	cmp	r3, #2
 80053aa:	d909      	bls.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80053ac:	2303      	movs	r3, #3
 80053ae:	e075      	b.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x368>
 80053b0:	42470068 	.word	0x42470068
 80053b4:	40023800 	.word	0x40023800
 80053b8:	42470070 	.word	0x42470070
 80053bc:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80053c0:	4b38      	ldr	r3, [pc, #224]	@ (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d0e8      	beq.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80053cc:	4b36      	ldr	r3, [pc, #216]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80053ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053d4:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d02f      	beq.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x308>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053e4:	693a      	ldr	r2, [r7, #16]
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d028      	beq.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80053ea:	4b2f      	ldr	r3, [pc, #188]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80053ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053f2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80053f4:	4b2d      	ldr	r3, [pc, #180]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80053f6:	2201      	movs	r2, #1
 80053f8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80053fa:	4b2c      	ldr	r3, [pc, #176]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80053fc:	2200      	movs	r2, #0
 80053fe:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005400:	4a29      	ldr	r2, [pc, #164]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005406:	4b28      	ldr	r3, [pc, #160]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005408:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800540a:	f003 0301 	and.w	r3, r3, #1
 800540e:	2b01      	cmp	r3, #1
 8005410:	d114      	bne.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005412:	f7fd fafb 	bl	8002a0c <HAL_GetTick>
 8005416:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005418:	e00a      	b.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800541a:	f7fd faf7 	bl	8002a0c <HAL_GetTick>
 800541e:	4602      	mov	r2, r0
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	1ad3      	subs	r3, r2, r3
 8005424:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005428:	4293      	cmp	r3, r2
 800542a:	d901      	bls.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 800542c:	2303      	movs	r3, #3
 800542e:	e035      	b.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005430:	4b1d      	ldr	r3, [pc, #116]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005432:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005434:	f003 0302 	and.w	r3, r3, #2
 8005438:	2b00      	cmp	r3, #0
 800543a:	d0ee      	beq.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005440:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005444:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005448:	d10d      	bne.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800544a:	4b17      	ldr	r3, [pc, #92]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005456:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800545a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800545e:	4912      	ldr	r1, [pc, #72]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005460:	4313      	orrs	r3, r2
 8005462:	608b      	str	r3, [r1, #8]
 8005464:	e005      	b.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005466:	4b10      	ldr	r3, [pc, #64]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	4a0f      	ldr	r2, [pc, #60]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800546c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005470:	6093      	str	r3, [r2, #8]
 8005472:	4b0d      	ldr	r3, [pc, #52]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005474:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800547a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800547e:	490a      	ldr	r1, [pc, #40]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005480:	4313      	orrs	r3, r2
 8005482:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f003 0310 	and.w	r3, r3, #16
 800548c:	2b00      	cmp	r3, #0
 800548e:	d004      	beq.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8005496:	4b06      	ldr	r3, [pc, #24]	@ (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005498:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800549a:	2300      	movs	r3, #0
}
 800549c:	4618      	mov	r0, r3
 800549e:	3718      	adds	r7, #24
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}
 80054a4:	40007000 	.word	0x40007000
 80054a8:	40023800 	.word	0x40023800
 80054ac:	42470e40 	.word	0x42470e40
 80054b0:	424711e0 	.word	0x424711e0

080054b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b082      	sub	sp, #8
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d101      	bne.n	80054c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e07b      	b.n	80055be <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d108      	bne.n	80054e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80054d6:	d009      	beq.n	80054ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2200      	movs	r2, #0
 80054dc:	61da      	str	r2, [r3, #28]
 80054de:	e005      	b.n	80054ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2200      	movs	r2, #0
 80054e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2200      	movs	r2, #0
 80054ea:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2200      	movs	r2, #0
 80054f0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d106      	bne.n	800550c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2200      	movs	r2, #0
 8005502:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f7fc fdf6 	bl	80020f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2202      	movs	r2, #2
 8005510:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005522:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005534:	431a      	orrs	r2, r3
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	68db      	ldr	r3, [r3, #12]
 800553a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800553e:	431a      	orrs	r2, r3
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	691b      	ldr	r3, [r3, #16]
 8005544:	f003 0302 	and.w	r3, r3, #2
 8005548:	431a      	orrs	r2, r3
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	695b      	ldr	r3, [r3, #20]
 800554e:	f003 0301 	and.w	r3, r3, #1
 8005552:	431a      	orrs	r2, r3
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	699b      	ldr	r3, [r3, #24]
 8005558:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800555c:	431a      	orrs	r2, r3
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	69db      	ldr	r3, [r3, #28]
 8005562:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005566:	431a      	orrs	r2, r3
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6a1b      	ldr	r3, [r3, #32]
 800556c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005570:	ea42 0103 	orr.w	r1, r2, r3
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005578:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	430a      	orrs	r2, r1
 8005582:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	699b      	ldr	r3, [r3, #24]
 8005588:	0c1b      	lsrs	r3, r3, #16
 800558a:	f003 0104 	and.w	r1, r3, #4
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005592:	f003 0210 	and.w	r2, r3, #16
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	430a      	orrs	r2, r1
 800559c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	69da      	ldr	r2, [r3, #28]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80055ac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2200      	movs	r2, #0
 80055b2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2201      	movs	r2, #1
 80055b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80055bc:	2300      	movs	r3, #0
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3708      	adds	r7, #8
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}

080055c6 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80055c6:	b580      	push	{r7, lr}
 80055c8:	b082      	sub	sp, #8
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d101      	bne.n	80055d8 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80055d4:	2301      	movs	r3, #1
 80055d6:	e01a      	b.n	800560e <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2202      	movs	r2, #2
 80055dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80055ee:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f7fc fdc9 	bl	8002188 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800560c:	2300      	movs	r3, #0
}
 800560e:	4618      	mov	r0, r3
 8005610:	3708      	adds	r7, #8
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}

08005616 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005616:	b580      	push	{r7, lr}
 8005618:	b088      	sub	sp, #32
 800561a:	af00      	add	r7, sp, #0
 800561c:	60f8      	str	r0, [r7, #12]
 800561e:	60b9      	str	r1, [r7, #8]
 8005620:	603b      	str	r3, [r7, #0]
 8005622:	4613      	mov	r3, r2
 8005624:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005626:	f7fd f9f1 	bl	8002a0c <HAL_GetTick>
 800562a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800562c:	88fb      	ldrh	r3, [r7, #6]
 800562e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005636:	b2db      	uxtb	r3, r3
 8005638:	2b01      	cmp	r3, #1
 800563a:	d001      	beq.n	8005640 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800563c:	2302      	movs	r3, #2
 800563e:	e12a      	b.n	8005896 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d002      	beq.n	800564c <HAL_SPI_Transmit+0x36>
 8005646:	88fb      	ldrh	r3, [r7, #6]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d101      	bne.n	8005650 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800564c:	2301      	movs	r3, #1
 800564e:	e122      	b.n	8005896 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005656:	2b01      	cmp	r3, #1
 8005658:	d101      	bne.n	800565e <HAL_SPI_Transmit+0x48>
 800565a:	2302      	movs	r3, #2
 800565c:	e11b      	b.n	8005896 <HAL_SPI_Transmit+0x280>
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2201      	movs	r2, #1
 8005662:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2203      	movs	r2, #3
 800566a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2200      	movs	r2, #0
 8005672:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	68ba      	ldr	r2, [r7, #8]
 8005678:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	88fa      	ldrh	r2, [r7, #6]
 800567e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	88fa      	ldrh	r2, [r7, #6]
 8005684:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2200      	movs	r2, #0
 800568a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2200      	movs	r2, #0
 8005690:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2200      	movs	r2, #0
 8005696:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2200      	movs	r2, #0
 800569c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2200      	movs	r2, #0
 80056a2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056ac:	d10f      	bne.n	80056ce <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80056bc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80056cc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056d8:	2b40      	cmp	r3, #64	@ 0x40
 80056da:	d007      	beq.n	80056ec <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80056ea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	68db      	ldr	r3, [r3, #12]
 80056f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056f4:	d152      	bne.n	800579c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d002      	beq.n	8005704 <HAL_SPI_Transmit+0xee>
 80056fe:	8b7b      	ldrh	r3, [r7, #26]
 8005700:	2b01      	cmp	r3, #1
 8005702:	d145      	bne.n	8005790 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005708:	881a      	ldrh	r2, [r3, #0]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005714:	1c9a      	adds	r2, r3, #2
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800571e:	b29b      	uxth	r3, r3
 8005720:	3b01      	subs	r3, #1
 8005722:	b29a      	uxth	r2, r3
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005728:	e032      	b.n	8005790 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	f003 0302 	and.w	r3, r3, #2
 8005734:	2b02      	cmp	r3, #2
 8005736:	d112      	bne.n	800575e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800573c:	881a      	ldrh	r2, [r3, #0]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005748:	1c9a      	adds	r2, r3, #2
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005752:	b29b      	uxth	r3, r3
 8005754:	3b01      	subs	r3, #1
 8005756:	b29a      	uxth	r2, r3
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800575c:	e018      	b.n	8005790 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800575e:	f7fd f955 	bl	8002a0c <HAL_GetTick>
 8005762:	4602      	mov	r2, r0
 8005764:	69fb      	ldr	r3, [r7, #28]
 8005766:	1ad3      	subs	r3, r2, r3
 8005768:	683a      	ldr	r2, [r7, #0]
 800576a:	429a      	cmp	r2, r3
 800576c:	d803      	bhi.n	8005776 <HAL_SPI_Transmit+0x160>
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005774:	d102      	bne.n	800577c <HAL_SPI_Transmit+0x166>
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d109      	bne.n	8005790 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2201      	movs	r2, #1
 8005780:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2200      	movs	r2, #0
 8005788:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800578c:	2303      	movs	r3, #3
 800578e:	e082      	b.n	8005896 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005794:	b29b      	uxth	r3, r3
 8005796:	2b00      	cmp	r3, #0
 8005798:	d1c7      	bne.n	800572a <HAL_SPI_Transmit+0x114>
 800579a:	e053      	b.n	8005844 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d002      	beq.n	80057aa <HAL_SPI_Transmit+0x194>
 80057a4:	8b7b      	ldrh	r3, [r7, #26]
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	d147      	bne.n	800583a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	330c      	adds	r3, #12
 80057b4:	7812      	ldrb	r2, [r2, #0]
 80057b6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057bc:	1c5a      	adds	r2, r3, #1
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	3b01      	subs	r3, #1
 80057ca:	b29a      	uxth	r2, r3
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80057d0:	e033      	b.n	800583a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	f003 0302 	and.w	r3, r3, #2
 80057dc:	2b02      	cmp	r3, #2
 80057de:	d113      	bne.n	8005808 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	330c      	adds	r3, #12
 80057ea:	7812      	ldrb	r2, [r2, #0]
 80057ec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057f2:	1c5a      	adds	r2, r3, #1
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	3b01      	subs	r3, #1
 8005800:	b29a      	uxth	r2, r3
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005806:	e018      	b.n	800583a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005808:	f7fd f900 	bl	8002a0c <HAL_GetTick>
 800580c:	4602      	mov	r2, r0
 800580e:	69fb      	ldr	r3, [r7, #28]
 8005810:	1ad3      	subs	r3, r2, r3
 8005812:	683a      	ldr	r2, [r7, #0]
 8005814:	429a      	cmp	r2, r3
 8005816:	d803      	bhi.n	8005820 <HAL_SPI_Transmit+0x20a>
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800581e:	d102      	bne.n	8005826 <HAL_SPI_Transmit+0x210>
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d109      	bne.n	800583a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2201      	movs	r2, #1
 800582a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2200      	movs	r2, #0
 8005832:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005836:	2303      	movs	r3, #3
 8005838:	e02d      	b.n	8005896 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800583e:	b29b      	uxth	r3, r3
 8005840:	2b00      	cmp	r3, #0
 8005842:	d1c6      	bne.n	80057d2 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005844:	69fa      	ldr	r2, [r7, #28]
 8005846:	6839      	ldr	r1, [r7, #0]
 8005848:	68f8      	ldr	r0, [r7, #12]
 800584a:	f000 f8bf 	bl	80059cc <SPI_EndRxTxTransaction>
 800584e:	4603      	mov	r3, r0
 8005850:	2b00      	cmp	r3, #0
 8005852:	d002      	beq.n	800585a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2220      	movs	r2, #32
 8005858:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d10a      	bne.n	8005878 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005862:	2300      	movs	r3, #0
 8005864:	617b      	str	r3, [r7, #20]
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	617b      	str	r3, [r7, #20]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	617b      	str	r3, [r7, #20]
 8005876:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2201      	movs	r2, #1
 800587c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2200      	movs	r2, #0
 8005884:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800588c:	2b00      	cmp	r3, #0
 800588e:	d001      	beq.n	8005894 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	e000      	b.n	8005896 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005894:	2300      	movs	r3, #0
  }
}
 8005896:	4618      	mov	r0, r3
 8005898:	3720      	adds	r7, #32
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}

0800589e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 800589e:	b480      	push	{r7}
 80058a0:	b083      	sub	sp, #12
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80058ac:	b2db      	uxtb	r3, r3
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	370c      	adds	r7, #12
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr
	...

080058bc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b088      	sub	sp, #32
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	60f8      	str	r0, [r7, #12]
 80058c4:	60b9      	str	r1, [r7, #8]
 80058c6:	603b      	str	r3, [r7, #0]
 80058c8:	4613      	mov	r3, r2
 80058ca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80058cc:	f7fd f89e 	bl	8002a0c <HAL_GetTick>
 80058d0:	4602      	mov	r2, r0
 80058d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058d4:	1a9b      	subs	r3, r3, r2
 80058d6:	683a      	ldr	r2, [r7, #0]
 80058d8:	4413      	add	r3, r2
 80058da:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80058dc:	f7fd f896 	bl	8002a0c <HAL_GetTick>
 80058e0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80058e2:	4b39      	ldr	r3, [pc, #228]	@ (80059c8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	015b      	lsls	r3, r3, #5
 80058e8:	0d1b      	lsrs	r3, r3, #20
 80058ea:	69fa      	ldr	r2, [r7, #28]
 80058ec:	fb02 f303 	mul.w	r3, r2, r3
 80058f0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80058f2:	e054      	b.n	800599e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058fa:	d050      	beq.n	800599e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80058fc:	f7fd f886 	bl	8002a0c <HAL_GetTick>
 8005900:	4602      	mov	r2, r0
 8005902:	69bb      	ldr	r3, [r7, #24]
 8005904:	1ad3      	subs	r3, r2, r3
 8005906:	69fa      	ldr	r2, [r7, #28]
 8005908:	429a      	cmp	r2, r3
 800590a:	d902      	bls.n	8005912 <SPI_WaitFlagStateUntilTimeout+0x56>
 800590c:	69fb      	ldr	r3, [r7, #28]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d13d      	bne.n	800598e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	685a      	ldr	r2, [r3, #4]
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005920:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800592a:	d111      	bne.n	8005950 <SPI_WaitFlagStateUntilTimeout+0x94>
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005934:	d004      	beq.n	8005940 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800593e:	d107      	bne.n	8005950 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800594e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005954:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005958:	d10f      	bne.n	800597a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005968:	601a      	str	r2, [r3, #0]
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005978:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2201      	movs	r2, #1
 800597e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2200      	movs	r2, #0
 8005986:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800598a:	2303      	movs	r3, #3
 800598c:	e017      	b.n	80059be <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d101      	bne.n	8005998 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005994:	2300      	movs	r3, #0
 8005996:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	3b01      	subs	r3, #1
 800599c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	689a      	ldr	r2, [r3, #8]
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	4013      	ands	r3, r2
 80059a8:	68ba      	ldr	r2, [r7, #8]
 80059aa:	429a      	cmp	r2, r3
 80059ac:	bf0c      	ite	eq
 80059ae:	2301      	moveq	r3, #1
 80059b0:	2300      	movne	r3, #0
 80059b2:	b2db      	uxtb	r3, r3
 80059b4:	461a      	mov	r2, r3
 80059b6:	79fb      	ldrb	r3, [r7, #7]
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d19b      	bne.n	80058f4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80059bc:	2300      	movs	r3, #0
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3720      	adds	r7, #32
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
 80059c6:	bf00      	nop
 80059c8:	2000001c 	.word	0x2000001c

080059cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b088      	sub	sp, #32
 80059d0:	af02      	add	r7, sp, #8
 80059d2:	60f8      	str	r0, [r7, #12]
 80059d4:	60b9      	str	r1, [r7, #8]
 80059d6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	9300      	str	r3, [sp, #0]
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	2201      	movs	r2, #1
 80059e0:	2102      	movs	r1, #2
 80059e2:	68f8      	ldr	r0, [r7, #12]
 80059e4:	f7ff ff6a 	bl	80058bc <SPI_WaitFlagStateUntilTimeout>
 80059e8:	4603      	mov	r3, r0
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d007      	beq.n	80059fe <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059f2:	f043 0220 	orr.w	r2, r3, #32
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80059fa:	2303      	movs	r3, #3
 80059fc:	e032      	b.n	8005a64 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80059fe:	4b1b      	ldr	r3, [pc, #108]	@ (8005a6c <SPI_EndRxTxTransaction+0xa0>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a1b      	ldr	r2, [pc, #108]	@ (8005a70 <SPI_EndRxTxTransaction+0xa4>)
 8005a04:	fba2 2303 	umull	r2, r3, r2, r3
 8005a08:	0d5b      	lsrs	r3, r3, #21
 8005a0a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005a0e:	fb02 f303 	mul.w	r3, r2, r3
 8005a12:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005a1c:	d112      	bne.n	8005a44 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	9300      	str	r3, [sp, #0]
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	2200      	movs	r2, #0
 8005a26:	2180      	movs	r1, #128	@ 0x80
 8005a28:	68f8      	ldr	r0, [r7, #12]
 8005a2a:	f7ff ff47 	bl	80058bc <SPI_WaitFlagStateUntilTimeout>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d016      	beq.n	8005a62 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a38:	f043 0220 	orr.w	r2, r3, #32
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005a40:	2303      	movs	r3, #3
 8005a42:	e00f      	b.n	8005a64 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d00a      	beq.n	8005a60 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	3b01      	subs	r3, #1
 8005a4e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a5a:	2b80      	cmp	r3, #128	@ 0x80
 8005a5c:	d0f2      	beq.n	8005a44 <SPI_EndRxTxTransaction+0x78>
 8005a5e:	e000      	b.n	8005a62 <SPI_EndRxTxTransaction+0x96>
        break;
 8005a60:	bf00      	nop
  }

  return HAL_OK;
 8005a62:	2300      	movs	r3, #0
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3718      	adds	r7, #24
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}
 8005a6c:	2000001c 	.word	0x2000001c
 8005a70:	165e9f81 	.word	0x165e9f81

08005a74 <memset>:
 8005a74:	4402      	add	r2, r0
 8005a76:	4603      	mov	r3, r0
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d100      	bne.n	8005a7e <memset+0xa>
 8005a7c:	4770      	bx	lr
 8005a7e:	f803 1b01 	strb.w	r1, [r3], #1
 8005a82:	e7f9      	b.n	8005a78 <memset+0x4>

08005a84 <__libc_init_array>:
 8005a84:	b570      	push	{r4, r5, r6, lr}
 8005a86:	4d0d      	ldr	r5, [pc, #52]	@ (8005abc <__libc_init_array+0x38>)
 8005a88:	4c0d      	ldr	r4, [pc, #52]	@ (8005ac0 <__libc_init_array+0x3c>)
 8005a8a:	1b64      	subs	r4, r4, r5
 8005a8c:	10a4      	asrs	r4, r4, #2
 8005a8e:	2600      	movs	r6, #0
 8005a90:	42a6      	cmp	r6, r4
 8005a92:	d109      	bne.n	8005aa8 <__libc_init_array+0x24>
 8005a94:	4d0b      	ldr	r5, [pc, #44]	@ (8005ac4 <__libc_init_array+0x40>)
 8005a96:	4c0c      	ldr	r4, [pc, #48]	@ (8005ac8 <__libc_init_array+0x44>)
 8005a98:	f000 f818 	bl	8005acc <_init>
 8005a9c:	1b64      	subs	r4, r4, r5
 8005a9e:	10a4      	asrs	r4, r4, #2
 8005aa0:	2600      	movs	r6, #0
 8005aa2:	42a6      	cmp	r6, r4
 8005aa4:	d105      	bne.n	8005ab2 <__libc_init_array+0x2e>
 8005aa6:	bd70      	pop	{r4, r5, r6, pc}
 8005aa8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005aac:	4798      	blx	r3
 8005aae:	3601      	adds	r6, #1
 8005ab0:	e7ee      	b.n	8005a90 <__libc_init_array+0xc>
 8005ab2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ab6:	4798      	blx	r3
 8005ab8:	3601      	adds	r6, #1
 8005aba:	e7f2      	b.n	8005aa2 <__libc_init_array+0x1e>
 8005abc:	080075d4 	.word	0x080075d4
 8005ac0:	080075d4 	.word	0x080075d4
 8005ac4:	080075d4 	.word	0x080075d4
 8005ac8:	080075d8 	.word	0x080075d8

08005acc <_init>:
 8005acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ace:	bf00      	nop
 8005ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ad2:	bc08      	pop	{r3}
 8005ad4:	469e      	mov	lr, r3
 8005ad6:	4770      	bx	lr

08005ad8 <_fini>:
 8005ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ada:	bf00      	nop
 8005adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ade:	bc08      	pop	{r3}
 8005ae0:	469e      	mov	lr, r3
 8005ae2:	4770      	bx	lr
