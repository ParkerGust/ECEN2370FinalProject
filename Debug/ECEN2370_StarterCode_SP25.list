
ECEN2370_StarterCode_SP25.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072cc  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ae8  08007478  08007478  00008478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f60  08008f60  0000a024  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008f60  08008f60  00009f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008f68  08008f68  0000a024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f68  08008f68  00009f68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008f6c  08008f6c  00009f6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000024  20000000  08008f70  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a024  2**0
                  CONTENTS
 10 .bss          00025bfc  20000024  20000024  0000a024  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20025c20  20025c20  0000a024  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a024  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014acd  00000000  00000000  0000a054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000035a7  00000000  00000000  0001eb21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014b8  00000000  00000000  000220c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ff2  00000000  00000000  00023580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027b50  00000000  00000000  00024572  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019fb4  00000000  00000000  0004c0c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e317c  00000000  00000000  00066076  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001491f2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000055c0  00000000  00000000  00149238  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  0014e7f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000024 	.word	0x20000024
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08007460 	.word	0x08007460

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000028 	.word	0x20000028
 80001e8:	08007460 	.word	0x08007460

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b988 	b.w	8000514 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	468e      	mov	lr, r1
 8000224:	4604      	mov	r4, r0
 8000226:	4688      	mov	r8, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d962      	bls.n	80002f8 <__udivmoddi4+0xdc>
 8000232:	fab2 f682 	clz	r6, r2
 8000236:	b14e      	cbz	r6, 800024c <__udivmoddi4+0x30>
 8000238:	f1c6 0320 	rsb	r3, r6, #32
 800023c:	fa01 f806 	lsl.w	r8, r1, r6
 8000240:	fa20 f303 	lsr.w	r3, r0, r3
 8000244:	40b7      	lsls	r7, r6
 8000246:	ea43 0808 	orr.w	r8, r3, r8
 800024a:	40b4      	lsls	r4, r6
 800024c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000250:	fa1f fc87 	uxth.w	ip, r7
 8000254:	fbb8 f1fe 	udiv	r1, r8, lr
 8000258:	0c23      	lsrs	r3, r4, #16
 800025a:	fb0e 8811 	mls	r8, lr, r1, r8
 800025e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000262:	fb01 f20c 	mul.w	r2, r1, ip
 8000266:	429a      	cmp	r2, r3
 8000268:	d909      	bls.n	800027e <__udivmoddi4+0x62>
 800026a:	18fb      	adds	r3, r7, r3
 800026c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000270:	f080 80ea 	bcs.w	8000448 <__udivmoddi4+0x22c>
 8000274:	429a      	cmp	r2, r3
 8000276:	f240 80e7 	bls.w	8000448 <__udivmoddi4+0x22c>
 800027a:	3902      	subs	r1, #2
 800027c:	443b      	add	r3, r7
 800027e:	1a9a      	subs	r2, r3, r2
 8000280:	b2a3      	uxth	r3, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800028e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000292:	459c      	cmp	ip, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x8e>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f100 32ff 	add.w	r2, r0, #4294967295
 800029c:	f080 80d6 	bcs.w	800044c <__udivmoddi4+0x230>
 80002a0:	459c      	cmp	ip, r3
 80002a2:	f240 80d3 	bls.w	800044c <__udivmoddi4+0x230>
 80002a6:	443b      	add	r3, r7
 80002a8:	3802      	subs	r0, #2
 80002aa:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002ae:	eba3 030c 	sub.w	r3, r3, ip
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11d      	cbz	r5, 80002be <__udivmoddi4+0xa2>
 80002b6:	40f3      	lsrs	r3, r6
 80002b8:	2200      	movs	r2, #0
 80002ba:	e9c5 3200 	strd	r3, r2, [r5]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d905      	bls.n	80002d2 <__udivmoddi4+0xb6>
 80002c6:	b10d      	cbz	r5, 80002cc <__udivmoddi4+0xb0>
 80002c8:	e9c5 0100 	strd	r0, r1, [r5]
 80002cc:	2100      	movs	r1, #0
 80002ce:	4608      	mov	r0, r1
 80002d0:	e7f5      	b.n	80002be <__udivmoddi4+0xa2>
 80002d2:	fab3 f183 	clz	r1, r3
 80002d6:	2900      	cmp	r1, #0
 80002d8:	d146      	bne.n	8000368 <__udivmoddi4+0x14c>
 80002da:	4573      	cmp	r3, lr
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xc8>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 8105 	bhi.w	80004ee <__udivmoddi4+0x2d2>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	4690      	mov	r8, r2
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e5      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f2:	e9c5 4800 	strd	r4, r8, [r5]
 80002f6:	e7e2      	b.n	80002be <__udivmoddi4+0xa2>
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f000 8090 	beq.w	800041e <__udivmoddi4+0x202>
 80002fe:	fab2 f682 	clz	r6, r2
 8000302:	2e00      	cmp	r6, #0
 8000304:	f040 80a4 	bne.w	8000450 <__udivmoddi4+0x234>
 8000308:	1a8a      	subs	r2, r1, r2
 800030a:	0c03      	lsrs	r3, r0, #16
 800030c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000310:	b280      	uxth	r0, r0
 8000312:	b2bc      	uxth	r4, r7
 8000314:	2101      	movs	r1, #1
 8000316:	fbb2 fcfe 	udiv	ip, r2, lr
 800031a:	fb0e 221c 	mls	r2, lr, ip, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb04 f20c 	mul.w	r2, r4, ip
 8000326:	429a      	cmp	r2, r3
 8000328:	d907      	bls.n	800033a <__udivmoddi4+0x11e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000330:	d202      	bcs.n	8000338 <__udivmoddi4+0x11c>
 8000332:	429a      	cmp	r2, r3
 8000334:	f200 80e0 	bhi.w	80004f8 <__udivmoddi4+0x2dc>
 8000338:	46c4      	mov	ip, r8
 800033a:	1a9b      	subs	r3, r3, r2
 800033c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000340:	fb0e 3312 	mls	r3, lr, r2, r3
 8000344:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000348:	fb02 f404 	mul.w	r4, r2, r4
 800034c:	429c      	cmp	r4, r3
 800034e:	d907      	bls.n	8000360 <__udivmoddi4+0x144>
 8000350:	18fb      	adds	r3, r7, r3
 8000352:	f102 30ff 	add.w	r0, r2, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x142>
 8000358:	429c      	cmp	r4, r3
 800035a:	f200 80ca 	bhi.w	80004f2 <__udivmoddi4+0x2d6>
 800035e:	4602      	mov	r2, r0
 8000360:	1b1b      	subs	r3, r3, r4
 8000362:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000366:	e7a5      	b.n	80002b4 <__udivmoddi4+0x98>
 8000368:	f1c1 0620 	rsb	r6, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 f706 	lsr.w	r7, r2, r6
 8000372:	431f      	orrs	r7, r3
 8000374:	fa0e f401 	lsl.w	r4, lr, r1
 8000378:	fa20 f306 	lsr.w	r3, r0, r6
 800037c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000380:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	fa1f fc87 	uxth.w	ip, r7
 800038e:	fbbe f0f9 	udiv	r0, lr, r9
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	fb09 ee10 	mls	lr, r9, r0, lr
 8000398:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800039c:	fb00 fe0c 	mul.w	lr, r0, ip
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	fa02 f201 	lsl.w	r2, r2, r1
 80003a6:	d909      	bls.n	80003bc <__udivmoddi4+0x1a0>
 80003a8:	193c      	adds	r4, r7, r4
 80003aa:	f100 3aff 	add.w	sl, r0, #4294967295
 80003ae:	f080 809c 	bcs.w	80004ea <__udivmoddi4+0x2ce>
 80003b2:	45a6      	cmp	lr, r4
 80003b4:	f240 8099 	bls.w	80004ea <__udivmoddi4+0x2ce>
 80003b8:	3802      	subs	r0, #2
 80003ba:	443c      	add	r4, r7
 80003bc:	eba4 040e 	sub.w	r4, r4, lr
 80003c0:	fa1f fe83 	uxth.w	lr, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003d0:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d4:	45a4      	cmp	ip, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1ce>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f103 3eff 	add.w	lr, r3, #4294967295
 80003de:	f080 8082 	bcs.w	80004e6 <__udivmoddi4+0x2ca>
 80003e2:	45a4      	cmp	ip, r4
 80003e4:	d97f      	bls.n	80004e6 <__udivmoddi4+0x2ca>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	443c      	add	r4, r7
 80003ea:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ee:	eba4 040c 	sub.w	r4, r4, ip
 80003f2:	fba0 ec02 	umull	lr, ip, r0, r2
 80003f6:	4564      	cmp	r4, ip
 80003f8:	4673      	mov	r3, lr
 80003fa:	46e1      	mov	r9, ip
 80003fc:	d362      	bcc.n	80004c4 <__udivmoddi4+0x2a8>
 80003fe:	d05f      	beq.n	80004c0 <__udivmoddi4+0x2a4>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x1fe>
 8000402:	ebb8 0203 	subs.w	r2, r8, r3
 8000406:	eb64 0409 	sbc.w	r4, r4, r9
 800040a:	fa04 f606 	lsl.w	r6, r4, r6
 800040e:	fa22 f301 	lsr.w	r3, r2, r1
 8000412:	431e      	orrs	r6, r3
 8000414:	40cc      	lsrs	r4, r1
 8000416:	e9c5 6400 	strd	r6, r4, [r5]
 800041a:	2100      	movs	r1, #0
 800041c:	e74f      	b.n	80002be <__udivmoddi4+0xa2>
 800041e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000422:	0c01      	lsrs	r1, r0, #16
 8000424:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000428:	b280      	uxth	r0, r0
 800042a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800042e:	463b      	mov	r3, r7
 8000430:	4638      	mov	r0, r7
 8000432:	463c      	mov	r4, r7
 8000434:	46b8      	mov	r8, r7
 8000436:	46be      	mov	lr, r7
 8000438:	2620      	movs	r6, #32
 800043a:	fbb1 f1f7 	udiv	r1, r1, r7
 800043e:	eba2 0208 	sub.w	r2, r2, r8
 8000442:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000446:	e766      	b.n	8000316 <__udivmoddi4+0xfa>
 8000448:	4601      	mov	r1, r0
 800044a:	e718      	b.n	800027e <__udivmoddi4+0x62>
 800044c:	4610      	mov	r0, r2
 800044e:	e72c      	b.n	80002aa <__udivmoddi4+0x8e>
 8000450:	f1c6 0220 	rsb	r2, r6, #32
 8000454:	fa2e f302 	lsr.w	r3, lr, r2
 8000458:	40b7      	lsls	r7, r6
 800045a:	40b1      	lsls	r1, r6
 800045c:	fa20 f202 	lsr.w	r2, r0, r2
 8000460:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000464:	430a      	orrs	r2, r1
 8000466:	fbb3 f8fe 	udiv	r8, r3, lr
 800046a:	b2bc      	uxth	r4, r7
 800046c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000470:	0c11      	lsrs	r1, r2, #16
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb08 f904 	mul.w	r9, r8, r4
 800047a:	40b0      	lsls	r0, r6
 800047c:	4589      	cmp	r9, r1
 800047e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000482:	b280      	uxth	r0, r0
 8000484:	d93e      	bls.n	8000504 <__udivmoddi4+0x2e8>
 8000486:	1879      	adds	r1, r7, r1
 8000488:	f108 3cff 	add.w	ip, r8, #4294967295
 800048c:	d201      	bcs.n	8000492 <__udivmoddi4+0x276>
 800048e:	4589      	cmp	r9, r1
 8000490:	d81f      	bhi.n	80004d2 <__udivmoddi4+0x2b6>
 8000492:	eba1 0109 	sub.w	r1, r1, r9
 8000496:	fbb1 f9fe 	udiv	r9, r1, lr
 800049a:	fb09 f804 	mul.w	r8, r9, r4
 800049e:	fb0e 1119 	mls	r1, lr, r9, r1
 80004a2:	b292      	uxth	r2, r2
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	4542      	cmp	r2, r8
 80004aa:	d229      	bcs.n	8000500 <__udivmoddi4+0x2e4>
 80004ac:	18ba      	adds	r2, r7, r2
 80004ae:	f109 31ff 	add.w	r1, r9, #4294967295
 80004b2:	d2c4      	bcs.n	800043e <__udivmoddi4+0x222>
 80004b4:	4542      	cmp	r2, r8
 80004b6:	d2c2      	bcs.n	800043e <__udivmoddi4+0x222>
 80004b8:	f1a9 0102 	sub.w	r1, r9, #2
 80004bc:	443a      	add	r2, r7
 80004be:	e7be      	b.n	800043e <__udivmoddi4+0x222>
 80004c0:	45f0      	cmp	r8, lr
 80004c2:	d29d      	bcs.n	8000400 <__udivmoddi4+0x1e4>
 80004c4:	ebbe 0302 	subs.w	r3, lr, r2
 80004c8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004cc:	3801      	subs	r0, #1
 80004ce:	46e1      	mov	r9, ip
 80004d0:	e796      	b.n	8000400 <__udivmoddi4+0x1e4>
 80004d2:	eba7 0909 	sub.w	r9, r7, r9
 80004d6:	4449      	add	r1, r9
 80004d8:	f1a8 0c02 	sub.w	ip, r8, #2
 80004dc:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e0:	fb09 f804 	mul.w	r8, r9, r4
 80004e4:	e7db      	b.n	800049e <__udivmoddi4+0x282>
 80004e6:	4673      	mov	r3, lr
 80004e8:	e77f      	b.n	80003ea <__udivmoddi4+0x1ce>
 80004ea:	4650      	mov	r0, sl
 80004ec:	e766      	b.n	80003bc <__udivmoddi4+0x1a0>
 80004ee:	4608      	mov	r0, r1
 80004f0:	e6fd      	b.n	80002ee <__udivmoddi4+0xd2>
 80004f2:	443b      	add	r3, r7
 80004f4:	3a02      	subs	r2, #2
 80004f6:	e733      	b.n	8000360 <__udivmoddi4+0x144>
 80004f8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004fc:	443b      	add	r3, r7
 80004fe:	e71c      	b.n	800033a <__udivmoddi4+0x11e>
 8000500:	4649      	mov	r1, r9
 8000502:	e79c      	b.n	800043e <__udivmoddi4+0x222>
 8000504:	eba1 0109 	sub.w	r1, r1, r9
 8000508:	46c4      	mov	ip, r8
 800050a:	fbb1 f9fe 	udiv	r9, r1, lr
 800050e:	fb09 f804 	mul.w	r8, r9, r4
 8000512:	e7c4      	b.n	800049e <__udivmoddi4+0x282>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <scoreDirection>:
#include "AI.h"


int scoreDirection(uint8_t board[boardColumns][boardRows], int i, int j, int dir_i, int dir_j){
 8000518:	b480      	push	{r7}
 800051a:	b089      	sub	sp, #36	@ 0x24
 800051c:	af00      	add	r7, sp, #0
 800051e:	60f8      	str	r0, [r7, #12]
 8000520:	60b9      	str	r1, [r7, #8]
 8000522:	607a      	str	r2, [r7, #4]
 8000524:	603b      	str	r3, [r7, #0]
    int count = 0;
 8000526:	2300      	movs	r3, #0
 8000528:	61fb      	str	r3, [r7, #28]
    int empty = 0;
 800052a:	2300      	movs	r3, #0
 800052c:	61bb      	str	r3, [r7, #24]
    int dirScore =0;
 800052e:	2300      	movs	r3, #0
 8000530:	617b      	str	r3, [r7, #20]
    // score winability of the direction
    for (int k = 0; k < 4; k++) {
 8000532:	2300      	movs	r3, #0
 8000534:	613b      	str	r3, [r7, #16]
 8000536:	e062      	b.n	80005fe <scoreDirection+0xe6>
        if (!((i+dir_i*k)>=boardColumns || (i+dir_i*k)<0||(j+dir_j*k)>=boardRows || (j+dir_j*k)<0)){
 8000538:	683b      	ldr	r3, [r7, #0]
 800053a:	693a      	ldr	r2, [r7, #16]
 800053c:	fb03 f202 	mul.w	r2, r3, r2
 8000540:	68bb      	ldr	r3, [r7, #8]
 8000542:	4413      	add	r3, r2
 8000544:	2b06      	cmp	r3, #6
 8000546:	dc57      	bgt.n	80005f8 <scoreDirection+0xe0>
 8000548:	683b      	ldr	r3, [r7, #0]
 800054a:	693a      	ldr	r2, [r7, #16]
 800054c:	fb03 f202 	mul.w	r2, r3, r2
 8000550:	68bb      	ldr	r3, [r7, #8]
 8000552:	4413      	add	r3, r2
 8000554:	2b00      	cmp	r3, #0
 8000556:	db4f      	blt.n	80005f8 <scoreDirection+0xe0>
 8000558:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800055a:	693a      	ldr	r2, [r7, #16]
 800055c:	fb03 f202 	mul.w	r2, r3, r2
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	4413      	add	r3, r2
 8000564:	2b05      	cmp	r3, #5
 8000566:	dc47      	bgt.n	80005f8 <scoreDirection+0xe0>
 8000568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800056a:	693a      	ldr	r2, [r7, #16]
 800056c:	fb03 f202 	mul.w	r2, r3, r2
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	4413      	add	r3, r2
 8000574:	2b00      	cmp	r3, #0
 8000576:	db3f      	blt.n	80005f8 <scoreDirection+0xe0>
            if(board[i+dir_i*k][j+dir_j*k] == board[i][j]){
 8000578:	683b      	ldr	r3, [r7, #0]
 800057a:	693a      	ldr	r2, [r7, #16]
 800057c:	fb03 f202 	mul.w	r2, r3, r2
 8000580:	68bb      	ldr	r3, [r7, #8]
 8000582:	4413      	add	r3, r2
 8000584:	461a      	mov	r2, r3
 8000586:	4613      	mov	r3, r2
 8000588:	005b      	lsls	r3, r3, #1
 800058a:	4413      	add	r3, r2
 800058c:	005b      	lsls	r3, r3, #1
 800058e:	461a      	mov	r2, r3
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	441a      	add	r2, r3
 8000594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000596:	6939      	ldr	r1, [r7, #16]
 8000598:	fb03 f101 	mul.w	r1, r3, r1
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	440b      	add	r3, r1
 80005a0:	5cd1      	ldrb	r1, [r2, r3]
 80005a2:	68ba      	ldr	r2, [r7, #8]
 80005a4:	4613      	mov	r3, r2
 80005a6:	005b      	lsls	r3, r3, #1
 80005a8:	4413      	add	r3, r2
 80005aa:	005b      	lsls	r3, r3, #1
 80005ac:	461a      	mov	r2, r3
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	441a      	add	r2, r3
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	4413      	add	r3, r2
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	4299      	cmp	r1, r3
 80005ba:	d103      	bne.n	80005c4 <scoreDirection+0xac>
                count++;
 80005bc:	69fb      	ldr	r3, [r7, #28]
 80005be:	3301      	adds	r3, #1
 80005c0:	61fb      	str	r3, [r7, #28]
 80005c2:	e019      	b.n	80005f8 <scoreDirection+0xe0>
            }
            else if (board[i+dir_i*k][j+dir_j*k] == 0){
 80005c4:	683b      	ldr	r3, [r7, #0]
 80005c6:	693a      	ldr	r2, [r7, #16]
 80005c8:	fb03 f202 	mul.w	r2, r3, r2
 80005cc:	68bb      	ldr	r3, [r7, #8]
 80005ce:	4413      	add	r3, r2
 80005d0:	461a      	mov	r2, r3
 80005d2:	4613      	mov	r3, r2
 80005d4:	005b      	lsls	r3, r3, #1
 80005d6:	4413      	add	r3, r2
 80005d8:	005b      	lsls	r3, r3, #1
 80005da:	461a      	mov	r2, r3
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	441a      	add	r2, r3
 80005e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80005e2:	6939      	ldr	r1, [r7, #16]
 80005e4:	fb03 f101 	mul.w	r1, r3, r1
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	440b      	add	r3, r1
 80005ec:	5cd3      	ldrb	r3, [r2, r3]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d102      	bne.n	80005f8 <scoreDirection+0xe0>
                empty++;
 80005f2:	69bb      	ldr	r3, [r7, #24]
 80005f4:	3301      	adds	r3, #1
 80005f6:	61bb      	str	r3, [r7, #24]
    for (int k = 0; k < 4; k++) {
 80005f8:	693b      	ldr	r3, [r7, #16]
 80005fa:	3301      	adds	r3, #1
 80005fc:	613b      	str	r3, [r7, #16]
 80005fe:	693b      	ldr	r3, [r7, #16]
 8000600:	2b03      	cmp	r3, #3
 8000602:	dd99      	ble.n	8000538 <scoreDirection+0x20>
            }
        }
    }
    if (count == 3 && empty == 1) dirScore += 50;
 8000604:	69fb      	ldr	r3, [r7, #28]
 8000606:	2b03      	cmp	r3, #3
 8000608:	d106      	bne.n	8000618 <scoreDirection+0x100>
 800060a:	69bb      	ldr	r3, [r7, #24]
 800060c:	2b01      	cmp	r3, #1
 800060e:	d103      	bne.n	8000618 <scoreDirection+0x100>
 8000610:	697b      	ldr	r3, [r7, #20]
 8000612:	3332      	adds	r3, #50	@ 0x32
 8000614:	617b      	str	r3, [r7, #20]
 8000616:	e008      	b.n	800062a <scoreDirection+0x112>
    else if (count == 2 && empty == 2) dirScore += 10;
 8000618:	69fb      	ldr	r3, [r7, #28]
 800061a:	2b02      	cmp	r3, #2
 800061c:	d105      	bne.n	800062a <scoreDirection+0x112>
 800061e:	69bb      	ldr	r3, [r7, #24]
 8000620:	2b02      	cmp	r3, #2
 8000622:	d102      	bne.n	800062a <scoreDirection+0x112>
 8000624:	697b      	ldr	r3, [r7, #20]
 8000626:	330a      	adds	r3, #10
 8000628:	617b      	str	r3, [r7, #20]
    return dirScore;
 800062a:	697b      	ldr	r3, [r7, #20]
}
 800062c:	4618      	mov	r0, r3
 800062e:	3724      	adds	r7, #36	@ 0x24
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr

08000638 <scorePosition>:
int scorePosition(uint8_t board[boardColumns][boardRows], int i, int j){
 8000638:	b580      	push	{r7, lr}
 800063a:	b088      	sub	sp, #32
 800063c:	af02      	add	r7, sp, #8
 800063e:	60f8      	str	r0, [r7, #12]
 8000640:	60b9      	str	r1, [r7, #8]
 8000642:	607a      	str	r2, [r7, #4]
    int posScore = 0;
 8000644:	2300      	movs	r3, #0
 8000646:	617b      	str	r3, [r7, #20]
    //score winability of the position
    posScore += scoreDirection(board, i, j, 1,0);
 8000648:	2300      	movs	r3, #0
 800064a:	9300      	str	r3, [sp, #0]
 800064c:	2301      	movs	r3, #1
 800064e:	687a      	ldr	r2, [r7, #4]
 8000650:	68b9      	ldr	r1, [r7, #8]
 8000652:	68f8      	ldr	r0, [r7, #12]
 8000654:	f7ff ff60 	bl	8000518 <scoreDirection>
 8000658:	4602      	mov	r2, r0
 800065a:	697b      	ldr	r3, [r7, #20]
 800065c:	4413      	add	r3, r2
 800065e:	617b      	str	r3, [r7, #20]
    posScore += scoreDirection(board, i, j, 0,1);
 8000660:	2301      	movs	r3, #1
 8000662:	9300      	str	r3, [sp, #0]
 8000664:	2300      	movs	r3, #0
 8000666:	687a      	ldr	r2, [r7, #4]
 8000668:	68b9      	ldr	r1, [r7, #8]
 800066a:	68f8      	ldr	r0, [r7, #12]
 800066c:	f7ff ff54 	bl	8000518 <scoreDirection>
 8000670:	4602      	mov	r2, r0
 8000672:	697b      	ldr	r3, [r7, #20]
 8000674:	4413      	add	r3, r2
 8000676:	617b      	str	r3, [r7, #20]
    posScore += scoreDirection(board, i, j, 1,1);
 8000678:	2301      	movs	r3, #1
 800067a:	9300      	str	r3, [sp, #0]
 800067c:	2301      	movs	r3, #1
 800067e:	687a      	ldr	r2, [r7, #4]
 8000680:	68b9      	ldr	r1, [r7, #8]
 8000682:	68f8      	ldr	r0, [r7, #12]
 8000684:	f7ff ff48 	bl	8000518 <scoreDirection>
 8000688:	4602      	mov	r2, r0
 800068a:	697b      	ldr	r3, [r7, #20]
 800068c:	4413      	add	r3, r2
 800068e:	617b      	str	r3, [r7, #20]
    posScore += scoreDirection(board, i, j, 1,-1);
 8000690:	f04f 33ff 	mov.w	r3, #4294967295
 8000694:	9300      	str	r3, [sp, #0]
 8000696:	2301      	movs	r3, #1
 8000698:	687a      	ldr	r2, [r7, #4]
 800069a:	68b9      	ldr	r1, [r7, #8]
 800069c:	68f8      	ldr	r0, [r7, #12]
 800069e:	f7ff ff3b 	bl	8000518 <scoreDirection>
 80006a2:	4602      	mov	r2, r0
 80006a4:	697b      	ldr	r3, [r7, #20]
 80006a6:	4413      	add	r3, r2
 80006a8:	617b      	str	r3, [r7, #20]
    return posScore;
 80006aa:	697b      	ldr	r3, [r7, #20]
}
 80006ac:	4618      	mov	r0, r3
 80006ae:	3718      	adds	r7, #24
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}

080006b4 <scoreMove>:

int scoreMove(uint8_t board[boardColumns][boardRows]) {
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b088      	sub	sp, #32
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
    int score = 0;
 80006bc:	2300      	movs	r3, #0
 80006be:	61fb      	str	r3, [r7, #28]
    // prefers the center columns
    int center_col = boardColumns / 2;
 80006c0:	2303      	movs	r3, #3
 80006c2:	60fb      	str	r3, [r7, #12]
    for (int row = 0; row < boardRows; row++) {
 80006c4:	2300      	movs	r3, #0
 80006c6:	61bb      	str	r3, [r7, #24]
 80006c8:	e012      	b.n	80006f0 <scoreMove+0x3c>
        if (board[center_col][row] == AI)
 80006ca:	68fa      	ldr	r2, [r7, #12]
 80006cc:	4613      	mov	r3, r2
 80006ce:	005b      	lsls	r3, r3, #1
 80006d0:	4413      	add	r3, r2
 80006d2:	005b      	lsls	r3, r3, #1
 80006d4:	461a      	mov	r2, r3
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	441a      	add	r2, r3
 80006da:	69bb      	ldr	r3, [r7, #24]
 80006dc:	4413      	add	r3, r2
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	2b02      	cmp	r3, #2
 80006e2:	d102      	bne.n	80006ea <scoreMove+0x36>
            score += 6; 
 80006e4:	69fb      	ldr	r3, [r7, #28]
 80006e6:	3306      	adds	r3, #6
 80006e8:	61fb      	str	r3, [r7, #28]
    for (int row = 0; row < boardRows; row++) {
 80006ea:	69bb      	ldr	r3, [r7, #24]
 80006ec:	3301      	adds	r3, #1
 80006ee:	61bb      	str	r3, [r7, #24]
 80006f0:	69bb      	ldr	r3, [r7, #24]
 80006f2:	2b05      	cmp	r3, #5
 80006f4:	dde9      	ble.n	80006ca <scoreMove+0x16>
    }
    //score winability of the temp board
    for (int r = 0; r < boardRows; r++) {
 80006f6:	2300      	movs	r3, #0
 80006f8:	617b      	str	r3, [r7, #20]
 80006fa:	e014      	b.n	8000726 <scoreMove+0x72>
        for (int c = 0; c < boardColumns; c++) {
 80006fc:	2300      	movs	r3, #0
 80006fe:	613b      	str	r3, [r7, #16]
 8000700:	e00b      	b.n	800071a <scoreMove+0x66>
            score += scorePosition(board, c, r);
 8000702:	697a      	ldr	r2, [r7, #20]
 8000704:	6939      	ldr	r1, [r7, #16]
 8000706:	6878      	ldr	r0, [r7, #4]
 8000708:	f7ff ff96 	bl	8000638 <scorePosition>
 800070c:	4602      	mov	r2, r0
 800070e:	69fb      	ldr	r3, [r7, #28]
 8000710:	4413      	add	r3, r2
 8000712:	61fb      	str	r3, [r7, #28]
        for (int c = 0; c < boardColumns; c++) {
 8000714:	693b      	ldr	r3, [r7, #16]
 8000716:	3301      	adds	r3, #1
 8000718:	613b      	str	r3, [r7, #16]
 800071a:	693b      	ldr	r3, [r7, #16]
 800071c:	2b06      	cmp	r3, #6
 800071e:	ddf0      	ble.n	8000702 <scoreMove+0x4e>
    for (int r = 0; r < boardRows; r++) {
 8000720:	697b      	ldr	r3, [r7, #20]
 8000722:	3301      	adds	r3, #1
 8000724:	617b      	str	r3, [r7, #20]
 8000726:	697b      	ldr	r3, [r7, #20]
 8000728:	2b05      	cmp	r3, #5
 800072a:	dde7      	ble.n	80006fc <scoreMove+0x48>
        }
    }

    return score;
 800072c:	69fb      	ldr	r3, [r7, #28]
}
 800072e:	4618      	mov	r0, r3
 8000730:	3720      	adds	r7, #32
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}

08000736 <moveAI>:

int moveAI(uint8_t gameBoard[boardColumns][boardRows]) {
 8000736:	b580      	push	{r7, lr}
 8000738:	b094      	sub	sp, #80	@ 0x50
 800073a:	af00      	add	r7, sp, #0
 800073c:	6078      	str	r0, [r7, #4]
    int best_col = -1;
 800073e:	f04f 33ff 	mov.w	r3, #4294967295
 8000742:	64fb      	str	r3, [r7, #76]	@ 0x4c
    int best_score = -1;
 8000744:	f04f 33ff 	mov.w	r3, #4294967295
 8000748:	64bb      	str	r3, [r7, #72]	@ 0x48

    for (int col = 0; col < boardColumns; col++) {
 800074a:	2300      	movs	r3, #0
 800074c:	647b      	str	r3, [r7, #68]	@ 0x44
 800074e:	e09b      	b.n	8000888 <moveAI+0x152>
        if (gameBoard[col][0] == 0) {
 8000750:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000752:	4613      	mov	r3, r2
 8000754:	005b      	lsls	r3, r3, #1
 8000756:	4413      	add	r3, r2
 8000758:	005b      	lsls	r3, r3, #1
 800075a:	461a      	mov	r2, r3
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	4413      	add	r3, r2
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	2b00      	cmp	r3, #0
 8000764:	f040 808d 	bne.w	8000882 <moveAI+0x14c>
            int row = 0;
 8000768:	2300      	movs	r3, #0
 800076a:	643b      	str	r3, [r7, #64]	@ 0x40
            while (row < boardRows && gameBoard[col][row] == 0) {
 800076c:	e002      	b.n	8000774 <moveAI+0x3e>
                row++;
 800076e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000770:	3301      	adds	r3, #1
 8000772:	643b      	str	r3, [r7, #64]	@ 0x40
            while (row < boardRows && gameBoard[col][row] == 0) {
 8000774:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000776:	2b05      	cmp	r3, #5
 8000778:	dc0c      	bgt.n	8000794 <moveAI+0x5e>
 800077a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800077c:	4613      	mov	r3, r2
 800077e:	005b      	lsls	r3, r3, #1
 8000780:	4413      	add	r3, r2
 8000782:	005b      	lsls	r3, r3, #1
 8000784:	461a      	mov	r2, r3
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	441a      	add	r2, r3
 800078a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800078c:	4413      	add	r3, r2
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d0ec      	beq.n	800076e <moveAI+0x38>
            }
            if (row == 0) continue; 
 8000794:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000796:	2b00      	cmp	r3, #0
 8000798:	d072      	beq.n	8000880 <moveAI+0x14a>
            row--;  // simulated row drop
 800079a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800079c:	3b01      	subs	r3, #1
 800079e:	643b      	str	r3, [r7, #64]	@ 0x40
        
            //check win
            uint8_t tempBoard[boardColumns][boardRows];
            for (int i = 0; i < boardColumns; i++) {
 80007a0:	2300      	movs	r3, #0
 80007a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80007a4:	e022      	b.n	80007ec <moveAI+0xb6>
                for (int j = 0; j < boardRows; j++) {
 80007a6:	2300      	movs	r3, #0
 80007a8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80007aa:	e019      	b.n	80007e0 <moveAI+0xaa>
                    tempBoard[i][j] = gameBoard[i][j];
 80007ac:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80007ae:	4613      	mov	r3, r2
 80007b0:	005b      	lsls	r3, r3, #1
 80007b2:	4413      	add	r3, r2
 80007b4:	005b      	lsls	r3, r3, #1
 80007b6:	461a      	mov	r2, r3
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	441a      	add	r2, r3
 80007bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80007be:	4413      	add	r3, r2
 80007c0:	7819      	ldrb	r1, [r3, #0]
 80007c2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80007c4:	4613      	mov	r3, r2
 80007c6:	005b      	lsls	r3, r3, #1
 80007c8:	4413      	add	r3, r2
 80007ca:	005b      	lsls	r3, r3, #1
 80007cc:	3350      	adds	r3, #80	@ 0x50
 80007ce:	19da      	adds	r2, r3, r7
 80007d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80007d2:	4413      	add	r3, r2
 80007d4:	3b48      	subs	r3, #72	@ 0x48
 80007d6:	460a      	mov	r2, r1
 80007d8:	701a      	strb	r2, [r3, #0]
                for (int j = 0; j < boardRows; j++) {
 80007da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80007dc:	3301      	adds	r3, #1
 80007de:	63bb      	str	r3, [r7, #56]	@ 0x38
 80007e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80007e2:	2b05      	cmp	r3, #5
 80007e4:	dde2      	ble.n	80007ac <moveAI+0x76>
            for (int i = 0; i < boardColumns; i++) {
 80007e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80007e8:	3301      	adds	r3, #1
 80007ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80007ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80007ee:	2b06      	cmp	r3, #6
 80007f0:	ddd9      	ble.n	80007a6 <moveAI+0x70>
                }
            }
            tempBoard[col][row] = 2;
 80007f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80007f4:	4613      	mov	r3, r2
 80007f6:	005b      	lsls	r3, r3, #1
 80007f8:	4413      	add	r3, r2
 80007fa:	005b      	lsls	r3, r3, #1
 80007fc:	3350      	adds	r3, #80	@ 0x50
 80007fe:	19da      	adds	r2, r3, r7
 8000800:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000802:	4413      	add	r3, r2
 8000804:	3b48      	subs	r3, #72	@ 0x48
 8000806:	2202      	movs	r2, #2
 8000808:	701a      	strb	r2, [r3, #0]
            if (checkState(tempBoard) == 2) return col;
 800080a:	f107 0308 	add.w	r3, r7, #8
 800080e:	4618      	mov	r0, r3
 8000810:	f000 f843 	bl	800089a <checkState>
 8000814:	4603      	mov	r3, r0
 8000816:	2b02      	cmp	r3, #2
 8000818:	d101      	bne.n	800081e <moveAI+0xe8>
 800081a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800081c:	e039      	b.n	8000892 <moveAI+0x15c>
        
            //check block
            tempBoard[col][row] = 1;
 800081e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000820:	4613      	mov	r3, r2
 8000822:	005b      	lsls	r3, r3, #1
 8000824:	4413      	add	r3, r2
 8000826:	005b      	lsls	r3, r3, #1
 8000828:	3350      	adds	r3, #80	@ 0x50
 800082a:	19da      	adds	r2, r3, r7
 800082c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800082e:	4413      	add	r3, r2
 8000830:	3b48      	subs	r3, #72	@ 0x48
 8000832:	2201      	movs	r2, #1
 8000834:	701a      	strb	r2, [r3, #0]
            if (checkState(tempBoard) == 1) return col;
 8000836:	f107 0308 	add.w	r3, r7, #8
 800083a:	4618      	mov	r0, r3
 800083c:	f000 f82d 	bl	800089a <checkState>
 8000840:	4603      	mov	r3, r0
 8000842:	2b01      	cmp	r3, #1
 8000844:	d101      	bne.n	800084a <moveAI+0x114>
 8000846:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000848:	e023      	b.n	8000892 <moveAI+0x15c>
        
            //otherwise score move
            tempBoard[col][row] = 2;
 800084a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800084c:	4613      	mov	r3, r2
 800084e:	005b      	lsls	r3, r3, #1
 8000850:	4413      	add	r3, r2
 8000852:	005b      	lsls	r3, r3, #1
 8000854:	3350      	adds	r3, #80	@ 0x50
 8000856:	19da      	adds	r2, r3, r7
 8000858:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800085a:	4413      	add	r3, r2
 800085c:	3b48      	subs	r3, #72	@ 0x48
 800085e:	2202      	movs	r2, #2
 8000860:	701a      	strb	r2, [r3, #0]
            int score = scoreMove(tempBoard);
 8000862:	f107 0308 	add.w	r3, r7, #8
 8000866:	4618      	mov	r0, r3
 8000868:	f7ff ff24 	bl	80006b4 <scoreMove>
 800086c:	6378      	str	r0, [r7, #52]	@ 0x34
            if (score > best_score) {
 800086e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000870:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000872:	429a      	cmp	r2, r3
 8000874:	dd05      	ble.n	8000882 <moveAI+0x14c>
                best_score = score;
 8000876:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000878:	64bb      	str	r3, [r7, #72]	@ 0x48
                best_col = col;
 800087a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800087c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800087e:	e000      	b.n	8000882 <moveAI+0x14c>
            if (row == 0) continue; 
 8000880:	bf00      	nop
    for (int col = 0; col < boardColumns; col++) {
 8000882:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000884:	3301      	adds	r3, #1
 8000886:	647b      	str	r3, [r7, #68]	@ 0x44
 8000888:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800088a:	2b06      	cmp	r3, #6
 800088c:	f77f af60 	ble.w	8000750 <moveAI+0x1a>
            }
        }
    }

    return best_col;
 8000890:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 8000892:	4618      	mov	r0, r3
 8000894:	3750      	adds	r7, #80	@ 0x50
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}

0800089a <checkState>:

uint8_t checkState(uint8_t checkBoard[boardColumns][boardRows]){
 800089a:	b580      	push	{r7, lr}
 800089c:	b086      	sub	sp, #24
 800089e:	af02      	add	r7, sp, #8
 80008a0:	6078      	str	r0, [r7, #4]
    for (int i = 0; i< boardColumns; i++){
 80008a2:	2300      	movs	r3, #0
 80008a4:	60fb      	str	r3, [r7, #12]
 80008a6:	e051      	b.n	800094c <checkState+0xb2>
        for (int j = 0; j < boardRows; j++){
 80008a8:	2300      	movs	r3, #0
 80008aa:	60bb      	str	r3, [r7, #8]
 80008ac:	e048      	b.n	8000940 <checkState+0xa6>
            if (checkBoard[i][j] != 0){
 80008ae:	68fa      	ldr	r2, [r7, #12]
 80008b0:	4613      	mov	r3, r2
 80008b2:	005b      	lsls	r3, r3, #1
 80008b4:	4413      	add	r3, r2
 80008b6:	005b      	lsls	r3, r3, #1
 80008b8:	461a      	mov	r2, r3
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	441a      	add	r2, r3
 80008be:	68bb      	ldr	r3, [r7, #8]
 80008c0:	4413      	add	r3, r2
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d038      	beq.n	800093a <checkState+0xa0>
                if (checkDirection(checkBoard, i, j, 1, 0)|| //checking horizontal
 80008c8:	2300      	movs	r3, #0
 80008ca:	9300      	str	r3, [sp, #0]
 80008cc:	2301      	movs	r3, #1
 80008ce:	68ba      	ldr	r2, [r7, #8]
 80008d0:	68f9      	ldr	r1, [r7, #12]
 80008d2:	6878      	ldr	r0, [r7, #4]
 80008d4:	f000 f842 	bl	800095c <checkDirection>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d121      	bne.n	8000922 <checkState+0x88>
                    checkDirection(checkBoard, i, j, 0, 1)|| //checking vertical 
 80008de:	2301      	movs	r3, #1
 80008e0:	9300      	str	r3, [sp, #0]
 80008e2:	2300      	movs	r3, #0
 80008e4:	68ba      	ldr	r2, [r7, #8]
 80008e6:	68f9      	ldr	r1, [r7, #12]
 80008e8:	6878      	ldr	r0, [r7, #4]
 80008ea:	f000 f837 	bl	800095c <checkDirection>
 80008ee:	4603      	mov	r3, r0
                if (checkDirection(checkBoard, i, j, 1, 0)|| //checking horizontal
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d116      	bne.n	8000922 <checkState+0x88>
                    checkDirection(checkBoard, i, j, 1, 1)|| //checking / diagonal
 80008f4:	2301      	movs	r3, #1
 80008f6:	9300      	str	r3, [sp, #0]
 80008f8:	2301      	movs	r3, #1
 80008fa:	68ba      	ldr	r2, [r7, #8]
 80008fc:	68f9      	ldr	r1, [r7, #12]
 80008fe:	6878      	ldr	r0, [r7, #4]
 8000900:	f000 f82c 	bl	800095c <checkDirection>
 8000904:	4603      	mov	r3, r0
                    checkDirection(checkBoard, i, j, 0, 1)|| //checking vertical 
 8000906:	2b00      	cmp	r3, #0
 8000908:	d10b      	bne.n	8000922 <checkState+0x88>
                    checkDirection(checkBoard, i, j, 1, -1)){ //checking \ diagonal
 800090a:	f04f 33ff 	mov.w	r3, #4294967295
 800090e:	9300      	str	r3, [sp, #0]
 8000910:	2301      	movs	r3, #1
 8000912:	68ba      	ldr	r2, [r7, #8]
 8000914:	68f9      	ldr	r1, [r7, #12]
 8000916:	6878      	ldr	r0, [r7, #4]
 8000918:	f000 f820 	bl	800095c <checkDirection>
 800091c:	4603      	mov	r3, r0
                    checkDirection(checkBoard, i, j, 1, 1)|| //checking / diagonal
 800091e:	2b00      	cmp	r3, #0
 8000920:	d00b      	beq.n	800093a <checkState+0xa0>
                        return checkBoard[i][j];
 8000922:	68fa      	ldr	r2, [r7, #12]
 8000924:	4613      	mov	r3, r2
 8000926:	005b      	lsls	r3, r3, #1
 8000928:	4413      	add	r3, r2
 800092a:	005b      	lsls	r3, r3, #1
 800092c:	461a      	mov	r2, r3
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	441a      	add	r2, r3
 8000932:	68bb      	ldr	r3, [r7, #8]
 8000934:	4413      	add	r3, r2
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	e00c      	b.n	8000954 <checkState+0xba>
        for (int j = 0; j < boardRows; j++){
 800093a:	68bb      	ldr	r3, [r7, #8]
 800093c:	3301      	adds	r3, #1
 800093e:	60bb      	str	r3, [r7, #8]
 8000940:	68bb      	ldr	r3, [r7, #8]
 8000942:	2b05      	cmp	r3, #5
 8000944:	ddb3      	ble.n	80008ae <checkState+0x14>
    for (int i = 0; i< boardColumns; i++){
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	3301      	adds	r3, #1
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	2b06      	cmp	r3, #6
 8000950:	ddaa      	ble.n	80008a8 <checkState+0xe>
                }
            }
        }
    }
	return 0;
 8000952:	2300      	movs	r3, #0
}
 8000954:	4618      	mov	r0, r3
 8000956:	3710      	adds	r7, #16
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}

0800095c <checkDirection>:
bool checkDirection(uint8_t checkBoard[boardColumns][boardRows], int i, int j, int dir_i, int dir_j){
 800095c:	b480      	push	{r7}
 800095e:	b087      	sub	sp, #28
 8000960:	af00      	add	r7, sp, #0
 8000962:	60f8      	str	r0, [r7, #12]
 8000964:	60b9      	str	r1, [r7, #8]
 8000966:	607a      	str	r2, [r7, #4]
 8000968:	603b      	str	r3, [r7, #0]
    for (int k = 1; k < 4; k++){
 800096a:	2301      	movs	r3, #1
 800096c:	617b      	str	r3, [r7, #20]
 800096e:	e04a      	b.n	8000a06 <checkDirection+0xaa>
        if ((i+dir_i*k)>=boardColumns || (i+dir_i*k)<0){
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	697a      	ldr	r2, [r7, #20]
 8000974:	fb03 f202 	mul.w	r2, r3, r2
 8000978:	68bb      	ldr	r3, [r7, #8]
 800097a:	4413      	add	r3, r2
 800097c:	2b06      	cmp	r3, #6
 800097e:	dc07      	bgt.n	8000990 <checkDirection+0x34>
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	697a      	ldr	r2, [r7, #20]
 8000984:	fb03 f202 	mul.w	r2, r3, r2
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	4413      	add	r3, r2
 800098c:	2b00      	cmp	r3, #0
 800098e:	da01      	bge.n	8000994 <checkDirection+0x38>
            return false;
 8000990:	2300      	movs	r3, #0
 8000992:	e03c      	b.n	8000a0e <checkDirection+0xb2>
        } 
        if ((j+dir_j*k)>=boardRows || (j+dir_j*k)<0){
 8000994:	6a3b      	ldr	r3, [r7, #32]
 8000996:	697a      	ldr	r2, [r7, #20]
 8000998:	fb03 f202 	mul.w	r2, r3, r2
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	4413      	add	r3, r2
 80009a0:	2b05      	cmp	r3, #5
 80009a2:	dc07      	bgt.n	80009b4 <checkDirection+0x58>
 80009a4:	6a3b      	ldr	r3, [r7, #32]
 80009a6:	697a      	ldr	r2, [r7, #20]
 80009a8:	fb03 f202 	mul.w	r2, r3, r2
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	4413      	add	r3, r2
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	da01      	bge.n	80009b8 <checkDirection+0x5c>
            return false;
 80009b4:	2300      	movs	r3, #0
 80009b6:	e02a      	b.n	8000a0e <checkDirection+0xb2>
        } 
        if (checkBoard[i][j] != checkBoard[i+dir_i*k][j+dir_j*k]){
 80009b8:	68ba      	ldr	r2, [r7, #8]
 80009ba:	4613      	mov	r3, r2
 80009bc:	005b      	lsls	r3, r3, #1
 80009be:	4413      	add	r3, r2
 80009c0:	005b      	lsls	r3, r3, #1
 80009c2:	461a      	mov	r2, r3
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	441a      	add	r2, r3
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	4413      	add	r3, r2
 80009cc:	781a      	ldrb	r2, [r3, #0]
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	6979      	ldr	r1, [r7, #20]
 80009d2:	fb03 f101 	mul.w	r1, r3, r1
 80009d6:	68bb      	ldr	r3, [r7, #8]
 80009d8:	440b      	add	r3, r1
 80009da:	4619      	mov	r1, r3
 80009dc:	460b      	mov	r3, r1
 80009de:	005b      	lsls	r3, r3, #1
 80009e0:	440b      	add	r3, r1
 80009e2:	005b      	lsls	r3, r3, #1
 80009e4:	4619      	mov	r1, r3
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	4419      	add	r1, r3
 80009ea:	6a3b      	ldr	r3, [r7, #32]
 80009ec:	6978      	ldr	r0, [r7, #20]
 80009ee:	fb03 f000 	mul.w	r0, r3, r0
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4403      	add	r3, r0
 80009f6:	5ccb      	ldrb	r3, [r1, r3]
 80009f8:	429a      	cmp	r2, r3
 80009fa:	d001      	beq.n	8000a00 <checkDirection+0xa4>
            return false;
 80009fc:	2300      	movs	r3, #0
 80009fe:	e006      	b.n	8000a0e <checkDirection+0xb2>
    for (int k = 1; k < 4; k++){
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	3301      	adds	r3, #1
 8000a04:	617b      	str	r3, [r7, #20]
 8000a06:	697b      	ldr	r3, [r7, #20]
 8000a08:	2b03      	cmp	r3, #3
 8000a0a:	ddb1      	ble.n	8000970 <checkDirection+0x14>
        }

    }
    return true;
 8000a0c:	2301      	movs	r3, #1

}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	371c      	adds	r7, #28
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr

08000a1a <ApplicationInit>:
static bool dropped = false;
static uint8_t gameBoard[boardColumns][boardRows];
uint32_t lastMoveTime = 0;


void ApplicationInit(void){
 8000a1a:	b580      	push	{r7, lr}
 8000a1c:	af00      	add	r7, sp, #0
    Display_Init();
 8000a1e:	f000 f9dd 	bl	8000ddc <Display_Init>
	Gyro_Init();
 8000a22:	f000 fe11 	bl	8001648 <Gyro_Init>
    HAL_Delay(100);
 8000a26:	2064      	movs	r0, #100	@ 0x64
 8000a28:	f002 ff88 	bl	800393c <HAL_Delay>
	Button_Init_Interrupt();
 8000a2c:	f000 f9ac 	bl	8000d88 <Button_Init_Interrupt>
	startGame();
 8000a30:	f000 f802 	bl	8000a38 <startGame>
}
 8000a34:	bf00      	nop
 8000a36:	bd80      	pop	{r7, pc}

08000a38 <startGame>:

void startGame(void){
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
	Screen1_Display();
 8000a3c:	f000 f9de 	bl	8000dfc <Screen1_Display>
	checkPlayerMode();
 8000a40:	f000 f87e 	bl	8000b40 <checkPlayerMode>
	startTimer();
 8000a44:	f000 fdde 	bl	8001604 <startTimer>
	winner = 0;
 8000a48:	4b05      	ldr	r3, [pc, #20]	@ (8000a60 <startGame+0x28>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	701a      	strb	r2, [r3, #0]
	newGame();
 8000a4e:	f000 f895 	bl	8000b7c <newGame>
	Screen2_DisplayBoard(gameBoard);
 8000a52:	4804      	ldr	r0, [pc, #16]	@ (8000a64 <startGame+0x2c>)
 8000a54:	f000 fa8c 	bl	8000f70 <Screen2_DisplayBoard>
    playGame();
 8000a58:	f000 f806 	bl	8000a68 <playGame>
}
 8000a5c:	bf00      	nop
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	20000040 	.word	0x20000040
 8000a64:	20000048 	.word	0x20000048

08000a68 <playGame>:

void playGame(void){
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
	while (winner == 0){
 8000a6c:	e033      	b.n	8000ad6 <playGame+0x6e>
		Screen2_DisplayMoveChip(chipLoc, player1turn);
 8000a6e:	4b2d      	ldr	r3, [pc, #180]	@ (8000b24 <playGame+0xbc>)
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	4a2d      	ldr	r2, [pc, #180]	@ (8000b28 <playGame+0xc0>)
 8000a74:	7812      	ldrb	r2, [r2, #0]
 8000a76:	4611      	mov	r1, r2
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f000 fb25 	bl	80010c8 <Screen2_DisplayMoveChip>
		if(TwoPlayerMode == false && player1turn == false){
 8000a7e:	4b2b      	ldr	r3, [pc, #172]	@ (8000b2c <playGame+0xc4>)
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	f083 0301 	eor.w	r3, r3, #1
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d013      	beq.n	8000ab4 <playGame+0x4c>
 8000a8c:	4b26      	ldr	r3, [pc, #152]	@ (8000b28 <playGame+0xc0>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	f083 0301 	eor.w	r3, r3, #1
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d00c      	beq.n	8000ab4 <playGame+0x4c>
			chipLoc = moveAI(gameBoard);
 8000a9a:	4825      	ldr	r0, [pc, #148]	@ (8000b30 <playGame+0xc8>)
 8000a9c:	f7ff fe4b 	bl	8000736 <moveAI>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	b2da      	uxtb	r2, r3
 8000aa4:	4b1f      	ldr	r3, [pc, #124]	@ (8000b24 <playGame+0xbc>)
 8000aa6:	701a      	strb	r2, [r3, #0]
			drop();
 8000aa8:	f000 f8b8 	bl	8000c1c <drop>
			Screen2_DisplayBoard(gameBoard);
 8000aac:	4820      	ldr	r0, [pc, #128]	@ (8000b30 <playGame+0xc8>)
 8000aae:	f000 fa5f 	bl	8000f70 <Screen2_DisplayBoard>
 8000ab2:	e001      	b.n	8000ab8 <playGame+0x50>
		}
		else{
			moveGyro();
 8000ab4:	f000 f90a 	bl	8000ccc <moveGyro>
		}
		Screen2_DisplayMoveChip(chipLoc, player1turn);
 8000ab8:	4b1a      	ldr	r3, [pc, #104]	@ (8000b24 <playGame+0xbc>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	4a1a      	ldr	r2, [pc, #104]	@ (8000b28 <playGame+0xc0>)
 8000abe:	7812      	ldrb	r2, [r2, #0]
 8000ac0:	4611      	mov	r1, r2
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f000 fb00 	bl	80010c8 <Screen2_DisplayMoveChip>
		winner = checkState(gameBoard);
 8000ac8:	4819      	ldr	r0, [pc, #100]	@ (8000b30 <playGame+0xc8>)
 8000aca:	f7ff fee6 	bl	800089a <checkState>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	4b18      	ldr	r3, [pc, #96]	@ (8000b34 <playGame+0xcc>)
 8000ad4:	701a      	strb	r2, [r3, #0]
	while (winner == 0){
 8000ad6:	4b17      	ldr	r3, [pc, #92]	@ (8000b34 <playGame+0xcc>)
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d0c7      	beq.n	8000a6e <playGame+0x6>
	}
	if(winner == 1){
 8000ade:	4b15      	ldr	r3, [pc, #84]	@ (8000b34 <playGame+0xcc>)
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	2b01      	cmp	r3, #1
 8000ae4:	d106      	bne.n	8000af4 <playGame+0x8c>
		player1_Score++;
 8000ae6:	4b14      	ldr	r3, [pc, #80]	@ (8000b38 <playGame+0xd0>)
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	3301      	adds	r3, #1
 8000aec:	b2da      	uxtb	r2, r3
 8000aee:	4b12      	ldr	r3, [pc, #72]	@ (8000b38 <playGame+0xd0>)
 8000af0:	701a      	strb	r2, [r3, #0]
 8000af2:	e005      	b.n	8000b00 <playGame+0x98>
	}
	else{
		player2_Score++;
 8000af4:	4b11      	ldr	r3, [pc, #68]	@ (8000b3c <playGame+0xd4>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	3301      	adds	r3, #1
 8000afa:	b2da      	uxtb	r2, r3
 8000afc:	4b0f      	ldr	r3, [pc, #60]	@ (8000b3c <playGame+0xd4>)
 8000afe:	701a      	strb	r2, [r3, #0]
	}
	endTimer();
 8000b00:	f000 fd8c 	bl	800161c <endTimer>
	Screen3_Display(gameBoard, player1_Score, player2_Score);
 8000b04:	4b0c      	ldr	r3, [pc, #48]	@ (8000b38 <playGame+0xd0>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	4a0c      	ldr	r2, [pc, #48]	@ (8000b3c <playGame+0xd4>)
 8000b0a:	7812      	ldrb	r2, [r2, #0]
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4808      	ldr	r0, [pc, #32]	@ (8000b30 <playGame+0xc8>)
 8000b10:	f000 fb22 	bl	8001158 <Screen3_Display>
    while (winner != 0); // waiting for button interrupt
 8000b14:	bf00      	nop
 8000b16:	4b07      	ldr	r3, [pc, #28]	@ (8000b34 <playGame+0xcc>)
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d1fb      	bne.n	8000b16 <playGame+0xae>
}
 8000b1e:	bf00      	nop
 8000b20:	bf00      	nop
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	20000000 	.word	0x20000000
 8000b28:	20000001 	.word	0x20000001
 8000b2c:	20000043 	.word	0x20000043
 8000b30:	20000048 	.word	0x20000048
 8000b34:	20000040 	.word	0x20000040
 8000b38:	20000041 	.word	0x20000041
 8000b3c:	20000042 	.word	0x20000042

08000b40 <checkPlayerMode>:


void checkPlayerMode(void){
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
	STMPE811_TouchData touch;
	touch.pressed = STMPE811_State_Released;
 8000b46:	2301      	movs	r3, #1
 8000b48:	713b      	strb	r3, [r7, #4]
	while(touch.pressed == STMPE811_State_Released){
 8000b4a:	e003      	b.n	8000b54 <checkPlayerMode+0x14>
		returnTouchStateAndLocation(&touch);
 8000b4c:	463b      	mov	r3, r7
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f001 f9cd 	bl	8001eee <returnTouchStateAndLocation>
	while(touch.pressed == STMPE811_State_Released){
 8000b54:	793b      	ldrb	r3, [r7, #4]
 8000b56:	2b01      	cmp	r3, #1
 8000b58:	d0f8      	beq.n	8000b4c <checkPlayerMode+0xc>
	}
	if (touch.x > LCD_PIXEL_WIDTH/2){
 8000b5a:	883b      	ldrh	r3, [r7, #0]
 8000b5c:	2b78      	cmp	r3, #120	@ 0x78
 8000b5e:	d903      	bls.n	8000b68 <checkPlayerMode+0x28>
		TwoPlayerMode = LEFT_TOUCH;
 8000b60:	4b05      	ldr	r3, [pc, #20]	@ (8000b78 <checkPlayerMode+0x38>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	701a      	strb	r2, [r3, #0]
	}
	else{
		TwoPlayerMode = RIGHT_TOUCH;
	}
}
 8000b66:	e002      	b.n	8000b6e <checkPlayerMode+0x2e>
		TwoPlayerMode = RIGHT_TOUCH;
 8000b68:	4b03      	ldr	r3, [pc, #12]	@ (8000b78 <checkPlayerMode+0x38>)
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	701a      	strb	r2, [r3, #0]
}
 8000b6e:	bf00      	nop
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	20000043 	.word	0x20000043

08000b7c <newGame>:

void newGame(void){
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
	startTimer();
 8000b82:	f000 fd3f 	bl	8001604 <startTimer>
	LCD_Clear(0, LCD_COLOR_GREY);
 8000b86:	f24f 71de 	movw	r1, #63454	@ 0xf7de
 8000b8a:	2000      	movs	r0, #0
 8000b8c:	f001 f8cc 	bl	8001d28 <LCD_Clear>
	if (startPlayer1 == true){
 8000b90:	4b1d      	ldr	r3, [pc, #116]	@ (8000c08 <newGame+0x8c>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d006      	beq.n	8000ba6 <newGame+0x2a>
        startPlayer1 = false;
 8000b98:	4b1b      	ldr	r3, [pc, #108]	@ (8000c08 <newGame+0x8c>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	701a      	strb	r2, [r3, #0]
		player1turn = false;
 8000b9e:	4b1b      	ldr	r3, [pc, #108]	@ (8000c0c <newGame+0x90>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	701a      	strb	r2, [r3, #0]
 8000ba4:	e005      	b.n	8000bb2 <newGame+0x36>
	}
	else{
        startPlayer1 = true;
 8000ba6:	4b18      	ldr	r3, [pc, #96]	@ (8000c08 <newGame+0x8c>)
 8000ba8:	2201      	movs	r2, #1
 8000baa:	701a      	strb	r2, [r3, #0]
		player1turn = true;
 8000bac:	4b17      	ldr	r3, [pc, #92]	@ (8000c0c <newGame+0x90>)
 8000bae:	2201      	movs	r2, #1
 8000bb0:	701a      	strb	r2, [r3, #0]
	}
	winner = 0;
 8000bb2:	4b17      	ldr	r3, [pc, #92]	@ (8000c10 <newGame+0x94>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i<boardColumns; i++){
 8000bb8:	2300      	movs	r3, #0
 8000bba:	607b      	str	r3, [r7, #4]
 8000bbc:	e016      	b.n	8000bec <newGame+0x70>
		for (int j = 0; j<boardRows; j++){
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	603b      	str	r3, [r7, #0]
 8000bc2:	e00d      	b.n	8000be0 <newGame+0x64>
	        gameBoard[i][j] = 0;
 8000bc4:	4913      	ldr	r1, [pc, #76]	@ (8000c14 <newGame+0x98>)
 8000bc6:	687a      	ldr	r2, [r7, #4]
 8000bc8:	4613      	mov	r3, r2
 8000bca:	005b      	lsls	r3, r3, #1
 8000bcc:	4413      	add	r3, r2
 8000bce:	005b      	lsls	r3, r3, #1
 8000bd0:	18ca      	adds	r2, r1, r3
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	4413      	add	r3, r2
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j<boardRows; j++){
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	3301      	adds	r3, #1
 8000bde:	603b      	str	r3, [r7, #0]
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	2b05      	cmp	r3, #5
 8000be4:	ddee      	ble.n	8000bc4 <newGame+0x48>
	for (int i = 0; i<boardColumns; i++){
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	3301      	adds	r3, #1
 8000bea:	607b      	str	r3, [r7, #4]
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	2b06      	cmp	r3, #6
 8000bf0:	dde5      	ble.n	8000bbe <newGame+0x42>
		}
	}
    chipLoc = 3;
 8000bf2:	4b09      	ldr	r3, [pc, #36]	@ (8000c18 <newGame+0x9c>)
 8000bf4:	2203      	movs	r2, #3
 8000bf6:	701a      	strb	r2, [r3, #0]
    Screen2_DisplayBoard(gameBoard);
 8000bf8:	4806      	ldr	r0, [pc, #24]	@ (8000c14 <newGame+0x98>)
 8000bfa:	f000 f9b9 	bl	8000f70 <Screen2_DisplayBoard>
}
 8000bfe:	bf00      	nop
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	20000044 	.word	0x20000044
 8000c0c:	20000001 	.word	0x20000001
 8000c10:	20000040 	.word	0x20000040
 8000c14:	20000048 	.word	0x20000048
 8000c18:	20000000 	.word	0x20000000

08000c1c <drop>:


void drop(void){
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
    int j = 0;
 8000c22:	2300      	movs	r3, #0
 8000c24:	607b      	str	r3, [r7, #4]
    while (gameBoard[chipLoc][j] == 0 && j<boardRows){
 8000c26:	e002      	b.n	8000c2e <drop+0x12>
        j++;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	607b      	str	r3, [r7, #4]
    while (gameBoard[chipLoc][j] == 0 && j<boardRows){
 8000c2e:	4b23      	ldr	r3, [pc, #140]	@ (8000cbc <drop+0xa0>)
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	4619      	mov	r1, r3
 8000c34:	4a22      	ldr	r2, [pc, #136]	@ (8000cc0 <drop+0xa4>)
 8000c36:	460b      	mov	r3, r1
 8000c38:	005b      	lsls	r3, r3, #1
 8000c3a:	440b      	add	r3, r1
 8000c3c:	005b      	lsls	r3, r3, #1
 8000c3e:	441a      	add	r2, r3
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	4413      	add	r3, r2
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d102      	bne.n	8000c50 <drop+0x34>
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	2b05      	cmp	r3, #5
 8000c4e:	ddeb      	ble.n	8000c28 <drop+0xc>
    }
    if(j>0){
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	dd2c      	ble.n	8000cb0 <drop+0x94>
		if (player1turn){
 8000c56:	4b1b      	ldr	r3, [pc, #108]	@ (8000cc4 <drop+0xa8>)
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d011      	beq.n	8000c82 <drop+0x66>
			gameBoard[chipLoc][j-1] = 1;
 8000c5e:	4b17      	ldr	r3, [pc, #92]	@ (8000cbc <drop+0xa0>)
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	4618      	mov	r0, r3
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	1e5a      	subs	r2, r3, #1
 8000c68:	4915      	ldr	r1, [pc, #84]	@ (8000cc0 <drop+0xa4>)
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	005b      	lsls	r3, r3, #1
 8000c6e:	4403      	add	r3, r0
 8000c70:	005b      	lsls	r3, r3, #1
 8000c72:	440b      	add	r3, r1
 8000c74:	4413      	add	r3, r2
 8000c76:	2201      	movs	r2, #1
 8000c78:	701a      	strb	r2, [r3, #0]
			player1turn = false;
 8000c7a:	4b12      	ldr	r3, [pc, #72]	@ (8000cc4 <drop+0xa8>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	701a      	strb	r2, [r3, #0]
 8000c80:	e010      	b.n	8000ca4 <drop+0x88>
		}
		else{
			gameBoard[chipLoc][j-1] = 2;
 8000c82:	4b0e      	ldr	r3, [pc, #56]	@ (8000cbc <drop+0xa0>)
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	4618      	mov	r0, r3
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	1e5a      	subs	r2, r3, #1
 8000c8c:	490c      	ldr	r1, [pc, #48]	@ (8000cc0 <drop+0xa4>)
 8000c8e:	4603      	mov	r3, r0
 8000c90:	005b      	lsls	r3, r3, #1
 8000c92:	4403      	add	r3, r0
 8000c94:	005b      	lsls	r3, r3, #1
 8000c96:	440b      	add	r3, r1
 8000c98:	4413      	add	r3, r2
 8000c9a:	2202      	movs	r2, #2
 8000c9c:	701a      	strb	r2, [r3, #0]
			player1turn = true;
 8000c9e:	4b09      	ldr	r3, [pc, #36]	@ (8000cc4 <drop+0xa8>)
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	701a      	strb	r2, [r3, #0]
		}
		chipLoc = 3;
 8000ca4:	4b05      	ldr	r3, [pc, #20]	@ (8000cbc <drop+0xa0>)
 8000ca6:	2203      	movs	r2, #3
 8000ca8:	701a      	strb	r2, [r3, #0]
		dropped = true;
 8000caa:	4b07      	ldr	r3, [pc, #28]	@ (8000cc8 <drop+0xac>)
 8000cac:	2201      	movs	r2, #1
 8000cae:	701a      	strb	r2, [r3, #0]
    }
}
 8000cb0:	bf00      	nop
 8000cb2:	370c      	adds	r7, #12
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr
 8000cbc:	20000000 	.word	0x20000000
 8000cc0:	20000048 	.word	0x20000048
 8000cc4:	20000001 	.word	0x20000001
 8000cc8:	20000045 	.word	0x20000045

08000ccc <moveGyro>:
    }
}



void moveGyro(void) {
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
    int16_t gyroLoc = Gyro_GetYLoc();
 8000cd2:	f000 fd95 	bl	8001800 <Gyro_GetYLoc>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	80fb      	strh	r3, [r7, #6]
    uint32_t now = HAL_GetTick();
 8000cda:	f002 fe23 	bl	8003924 <HAL_GetTick>
 8000cde:	6038      	str	r0, [r7, #0]

    if (now - lastMoveTime > DEBOUNCE_TIME) {
 8000ce0:	4b17      	ldr	r3, [pc, #92]	@ (8000d40 <moveGyro+0x74>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	683a      	ldr	r2, [r7, #0]
 8000ce6:	1ad3      	subs	r3, r2, r3
 8000ce8:	2b50      	cmp	r3, #80	@ 0x50
 8000cea:	d924      	bls.n	8000d36 <moveGyro+0x6a>
        if (gyroLoc > MOVE_THRESHOLD && chipLoc < 6) {
 8000cec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cf0:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000cf4:	dd0d      	ble.n	8000d12 <moveGyro+0x46>
 8000cf6:	4b13      	ldr	r3, [pc, #76]	@ (8000d44 <moveGyro+0x78>)
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	2b05      	cmp	r3, #5
 8000cfc:	d809      	bhi.n	8000d12 <moveGyro+0x46>
            chipLoc++;
 8000cfe:	4b11      	ldr	r3, [pc, #68]	@ (8000d44 <moveGyro+0x78>)
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	3301      	adds	r3, #1
 8000d04:	b2da      	uxtb	r2, r3
 8000d06:	4b0f      	ldr	r3, [pc, #60]	@ (8000d44 <moveGyro+0x78>)
 8000d08:	701a      	strb	r2, [r3, #0]
            lastMoveTime = now;
 8000d0a:	4a0d      	ldr	r2, [pc, #52]	@ (8000d40 <moveGyro+0x74>)
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	6013      	str	r3, [r2, #0]
        } else if (gyroLoc < -MOVE_THRESHOLD && chipLoc > 0) {
            chipLoc--;
            lastMoveTime = now;
        }
    }
}
 8000d10:	e011      	b.n	8000d36 <moveGyro+0x6a>
        } else if (gyroLoc < -MOVE_THRESHOLD && chipLoc > 0) {
 8000d12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d16:	f513 6ffa 	cmn.w	r3, #2000	@ 0x7d0
 8000d1a:	da0c      	bge.n	8000d36 <moveGyro+0x6a>
 8000d1c:	4b09      	ldr	r3, [pc, #36]	@ (8000d44 <moveGyro+0x78>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d008      	beq.n	8000d36 <moveGyro+0x6a>
            chipLoc--;
 8000d24:	4b07      	ldr	r3, [pc, #28]	@ (8000d44 <moveGyro+0x78>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	3b01      	subs	r3, #1
 8000d2a:	b2da      	uxtb	r2, r3
 8000d2c:	4b05      	ldr	r3, [pc, #20]	@ (8000d44 <moveGyro+0x78>)
 8000d2e:	701a      	strb	r2, [r3, #0]
            lastMoveTime = now;
 8000d30:	4a03      	ldr	r2, [pc, #12]	@ (8000d40 <moveGyro+0x74>)
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	6013      	str	r3, [r2, #0]
}
 8000d36:	bf00      	nop
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	20000074 	.word	0x20000074
 8000d44:	20000000 	.word	0x20000000

08000d48 <EXTI0_IRQHandler>:


	
void EXTI0_IRQHandler(){
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8000d4c:	2006      	movs	r0, #6
 8000d4e:	f002 ff42 	bl	8003bd6 <HAL_NVIC_DisableIRQ>
	if(winner == 0){
 8000d52:	4b0a      	ldr	r3, [pc, #40]	@ (8000d7c <EXTI0_IRQHandler+0x34>)
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d105      	bne.n	8000d66 <EXTI0_IRQHandler+0x1e>
		drop();
 8000d5a:	f7ff ff5f 	bl	8000c1c <drop>
        Screen2_DisplayBoard(gameBoard);
 8000d5e:	4808      	ldr	r0, [pc, #32]	@ (8000d80 <EXTI0_IRQHandler+0x38>)
 8000d60:	f000 f906 	bl	8000f70 <Screen2_DisplayBoard>
 8000d64:	e001      	b.n	8000d6a <EXTI0_IRQHandler+0x22>
	}
	else{
		newGame();
 8000d66:	f7ff ff09 	bl	8000b7c <newGame>
	}
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);
 8000d6a:	4b06      	ldr	r3, [pc, #24]	@ (8000d84 <EXTI0_IRQHandler+0x3c>)
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	615a      	str	r2, [r3, #20]
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000d70:	2006      	movs	r0, #6
 8000d72:	f002 ff22 	bl	8003bba <HAL_NVIC_EnableIRQ>
}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	20000040 	.word	0x20000040
 8000d80:	20000048 	.word	0x20000048
 8000d84:	40013c00 	.word	0x40013c00

08000d88 <Button_Init_Interrupt>:
#include "Button_Driver.h"



void Button_Init_Interrupt(){
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b086      	sub	sp, #24
 8000d8c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef PinConfig;
	PinConfig.Mode = GPIO_MODE_IT_RISING;
 8000d8e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000d92:	60bb      	str	r3, [r7, #8]
	PinConfig.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000d94:	2301      	movs	r3, #1
 8000d96:	613b      	str	r3, [r7, #16]
	PinConfig.Pull = GPIO_NOPULL;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	60fb      	str	r3, [r7, #12]
	PinConfig.Pin = GPIO_PIN_0;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	607b      	str	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000da0:	2300      	movs	r3, #0
 8000da2:	603b      	str	r3, [r7, #0]
 8000da4:	4b0b      	ldr	r3, [pc, #44]	@ (8000dd4 <Button_Init_Interrupt+0x4c>)
 8000da6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da8:	4a0a      	ldr	r2, [pc, #40]	@ (8000dd4 <Button_Init_Interrupt+0x4c>)
 8000daa:	f043 0301 	orr.w	r3, r3, #1
 8000dae:	6313      	str	r3, [r2, #48]	@ 0x30
 8000db0:	4b08      	ldr	r3, [pc, #32]	@ (8000dd4 <Button_Init_Interrupt+0x4c>)
 8000db2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db4:	f003 0301 	and.w	r3, r3, #1
 8000db8:	603b      	str	r3, [r7, #0]
 8000dba:	683b      	ldr	r3, [r7, #0]
	HAL_GPIO_Init(GPIOA, &PinConfig);
 8000dbc:	1d3b      	adds	r3, r7, #4
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4805      	ldr	r0, [pc, #20]	@ (8000dd8 <Button_Init_Interrupt+0x50>)
 8000dc2:	f002 ff23 	bl	8003c0c <HAL_GPIO_Init>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000dc6:	2006      	movs	r0, #6
 8000dc8:	f002 fef7 	bl	8003bba <HAL_NVIC_EnableIRQ>
}
 8000dcc:	bf00      	nop
 8000dce:	3718      	adds	r7, #24
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	40023800 	.word	0x40023800
 8000dd8:	40020000 	.word	0x40020000

08000ddc <Display_Init>:

static uint32_t startTime;
static uint32_t endTime;
static uint32_t timePlayed;

void Display_Init(void){
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
    LTCD__Init();
 8000de0:	f000 fed2 	bl	8001b88 <LTCD__Init>
    LTCD_Layer_Init(0);
 8000de4:	2000      	movs	r0, #0
 8000de6:	f000 fe8f 	bl	8001b08 <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_WHITE);
 8000dea:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000dee:	2000      	movs	r0, #0
 8000df0:	f000 ff9a 	bl	8001d28 <LCD_Clear>
	InitializeLCDTouch();
 8000df4:	f001 f870 	bl	8001ed8 <InitializeLCDTouch>
}
 8000df8:	bf00      	nop
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <Screen1_Display>:


void Screen1_Display(void){
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
    LCD_Clear(0, LCD_COLOR_GREY);
 8000e00:	f24f 71de 	movw	r1, #63454	@ 0xf7de
 8000e04:	2000      	movs	r0, #0
 8000e06:	f000 ff8f 	bl	8001d28 <LCD_Clear>
    
    LCD_SetFont(&Font16x24);
 8000e0a:	4857      	ldr	r0, [pc, #348]	@ (8000f68 <Screen1_Display+0x16c>)
 8000e0c:	f000 ffbe 	bl	8001d8c <LCD_SetFont>
    LCD_SetTextColor(LCD_COLOR_BLACK);
 8000e10:	2000      	movs	r0, #0
 8000e12:	f000 ffab 	bl	8001d6c <LCD_SetTextColor>
    LCD_DisplayChar(20, 25, 'C');
 8000e16:	2243      	movs	r2, #67	@ 0x43
 8000e18:	2119      	movs	r1, #25
 8000e1a:	2014      	movs	r0, #20
 8000e1c:	f001 f834 	bl	8001e88 <LCD_DisplayChar>
    LCD_DisplayChar(40, 25, 'O');
 8000e20:	224f      	movs	r2, #79	@ 0x4f
 8000e22:	2119      	movs	r1, #25
 8000e24:	2028      	movs	r0, #40	@ 0x28
 8000e26:	f001 f82f 	bl	8001e88 <LCD_DisplayChar>
    LCD_DisplayChar(60, 25, 'N');
 8000e2a:	224e      	movs	r2, #78	@ 0x4e
 8000e2c:	2119      	movs	r1, #25
 8000e2e:	203c      	movs	r0, #60	@ 0x3c
 8000e30:	f001 f82a 	bl	8001e88 <LCD_DisplayChar>
    LCD_DisplayChar(80, 25, 'N');
 8000e34:	224e      	movs	r2, #78	@ 0x4e
 8000e36:	2119      	movs	r1, #25
 8000e38:	2050      	movs	r0, #80	@ 0x50
 8000e3a:	f001 f825 	bl	8001e88 <LCD_DisplayChar>
    LCD_DisplayChar(100, 25, 'E');
 8000e3e:	2245      	movs	r2, #69	@ 0x45
 8000e40:	2119      	movs	r1, #25
 8000e42:	2064      	movs	r0, #100	@ 0x64
 8000e44:	f001 f820 	bl	8001e88 <LCD_DisplayChar>
    LCD_DisplayChar(120, 25, 'C');
 8000e48:	2243      	movs	r2, #67	@ 0x43
 8000e4a:	2119      	movs	r1, #25
 8000e4c:	2078      	movs	r0, #120	@ 0x78
 8000e4e:	f001 f81b 	bl	8001e88 <LCD_DisplayChar>
    LCD_DisplayChar(140, 25, 'T');
 8000e52:	2254      	movs	r2, #84	@ 0x54
 8000e54:	2119      	movs	r1, #25
 8000e56:	208c      	movs	r0, #140	@ 0x8c
 8000e58:	f001 f816 	bl	8001e88 <LCD_DisplayChar>
    LCD_DisplayChar(180, 25, '4');
 8000e5c:	2234      	movs	r2, #52	@ 0x34
 8000e5e:	2119      	movs	r1, #25
 8000e60:	20b4      	movs	r0, #180	@ 0xb4
 8000e62:	f001 f811 	bl	8001e88 <LCD_DisplayChar>

    LCD_SetFont(&Font12x12);
 8000e66:	4841      	ldr	r0, [pc, #260]	@ (8000f6c <Screen1_Display+0x170>)
 8000e68:	f000 ff90 	bl	8001d8c <LCD_SetFont>
    LCD_DisplayChar(20, 110, '1');
 8000e6c:	2231      	movs	r2, #49	@ 0x31
 8000e6e:	216e      	movs	r1, #110	@ 0x6e
 8000e70:	2014      	movs	r0, #20
 8000e72:	f001 f809 	bl	8001e88 <LCD_DisplayChar>
    LCD_DisplayChar(35, 110, 'P');
 8000e76:	2250      	movs	r2, #80	@ 0x50
 8000e78:	216e      	movs	r1, #110	@ 0x6e
 8000e7a:	2023      	movs	r0, #35	@ 0x23
 8000e7c:	f001 f804 	bl	8001e88 <LCD_DisplayChar>
    LCD_DisplayChar(45, 110, 'L');
 8000e80:	224c      	movs	r2, #76	@ 0x4c
 8000e82:	216e      	movs	r1, #110	@ 0x6e
 8000e84:	202d      	movs	r0, #45	@ 0x2d
 8000e86:	f000 ffff 	bl	8001e88 <LCD_DisplayChar>
    LCD_DisplayChar(55, 110, 'A');
 8000e8a:	2241      	movs	r2, #65	@ 0x41
 8000e8c:	216e      	movs	r1, #110	@ 0x6e
 8000e8e:	2037      	movs	r0, #55	@ 0x37
 8000e90:	f000 fffa 	bl	8001e88 <LCD_DisplayChar>
    LCD_DisplayChar(65, 110, 'Y');
 8000e94:	2259      	movs	r2, #89	@ 0x59
 8000e96:	216e      	movs	r1, #110	@ 0x6e
 8000e98:	2041      	movs	r0, #65	@ 0x41
 8000e9a:	f000 fff5 	bl	8001e88 <LCD_DisplayChar>
    LCD_DisplayChar(75, 110, 'E');
 8000e9e:	2245      	movs	r2, #69	@ 0x45
 8000ea0:	216e      	movs	r1, #110	@ 0x6e
 8000ea2:	204b      	movs	r0, #75	@ 0x4b
 8000ea4:	f000 fff0 	bl	8001e88 <LCD_DisplayChar>
    LCD_DisplayChar(85, 110, 'R');
 8000ea8:	2252      	movs	r2, #82	@ 0x52
 8000eaa:	216e      	movs	r1, #110	@ 0x6e
 8000eac:	2055      	movs	r0, #85	@ 0x55
 8000eae:	f000 ffeb 	bl	8001e88 <LCD_DisplayChar>
    LCD_DisplayChar(40, 125, 'M');
 8000eb2:	224d      	movs	r2, #77	@ 0x4d
 8000eb4:	217d      	movs	r1, #125	@ 0x7d
 8000eb6:	2028      	movs	r0, #40	@ 0x28
 8000eb8:	f000 ffe6 	bl	8001e88 <LCD_DisplayChar>
    LCD_DisplayChar(50, 125, 'O');
 8000ebc:	224f      	movs	r2, #79	@ 0x4f
 8000ebe:	217d      	movs	r1, #125	@ 0x7d
 8000ec0:	2032      	movs	r0, #50	@ 0x32
 8000ec2:	f000 ffe1 	bl	8001e88 <LCD_DisplayChar>
    LCD_DisplayChar(60, 125, 'D');
 8000ec6:	2244      	movs	r2, #68	@ 0x44
 8000ec8:	217d      	movs	r1, #125	@ 0x7d
 8000eca:	203c      	movs	r0, #60	@ 0x3c
 8000ecc:	f000 ffdc 	bl	8001e88 <LCD_DisplayChar>
    LCD_DisplayChar(70, 125, 'E');
 8000ed0:	2245      	movs	r2, #69	@ 0x45
 8000ed2:	217d      	movs	r1, #125	@ 0x7d
 8000ed4:	2046      	movs	r0, #70	@ 0x46
 8000ed6:	f000 ffd7 	bl	8001e88 <LCD_DisplayChar>

    LCD_DisplayChar(140, 110, '2');
 8000eda:	2232      	movs	r2, #50	@ 0x32
 8000edc:	216e      	movs	r1, #110	@ 0x6e
 8000ede:	208c      	movs	r0, #140	@ 0x8c
 8000ee0:	f000 ffd2 	bl	8001e88 <LCD_DisplayChar>
    LCD_DisplayChar(155, 110, 'P');
 8000ee4:	2250      	movs	r2, #80	@ 0x50
 8000ee6:	216e      	movs	r1, #110	@ 0x6e
 8000ee8:	209b      	movs	r0, #155	@ 0x9b
 8000eea:	f000 ffcd 	bl	8001e88 <LCD_DisplayChar>
    LCD_DisplayChar(165, 110, 'L');
 8000eee:	224c      	movs	r2, #76	@ 0x4c
 8000ef0:	216e      	movs	r1, #110	@ 0x6e
 8000ef2:	20a5      	movs	r0, #165	@ 0xa5
 8000ef4:	f000 ffc8 	bl	8001e88 <LCD_DisplayChar>
    LCD_DisplayChar(175, 110, 'A');
 8000ef8:	2241      	movs	r2, #65	@ 0x41
 8000efa:	216e      	movs	r1, #110	@ 0x6e
 8000efc:	20af      	movs	r0, #175	@ 0xaf
 8000efe:	f000 ffc3 	bl	8001e88 <LCD_DisplayChar>
    LCD_DisplayChar(185, 110, 'Y');
 8000f02:	2259      	movs	r2, #89	@ 0x59
 8000f04:	216e      	movs	r1, #110	@ 0x6e
 8000f06:	20b9      	movs	r0, #185	@ 0xb9
 8000f08:	f000 ffbe 	bl	8001e88 <LCD_DisplayChar>
    LCD_DisplayChar(195, 110, 'E');
 8000f0c:	2245      	movs	r2, #69	@ 0x45
 8000f0e:	216e      	movs	r1, #110	@ 0x6e
 8000f10:	20c3      	movs	r0, #195	@ 0xc3
 8000f12:	f000 ffb9 	bl	8001e88 <LCD_DisplayChar>
    LCD_DisplayChar(205, 110, 'R');
 8000f16:	2252      	movs	r2, #82	@ 0x52
 8000f18:	216e      	movs	r1, #110	@ 0x6e
 8000f1a:	20cd      	movs	r0, #205	@ 0xcd
 8000f1c:	f000 ffb4 	bl	8001e88 <LCD_DisplayChar>
    LCD_DisplayChar(160, 125, 'M');
 8000f20:	224d      	movs	r2, #77	@ 0x4d
 8000f22:	217d      	movs	r1, #125	@ 0x7d
 8000f24:	20a0      	movs	r0, #160	@ 0xa0
 8000f26:	f000 ffaf 	bl	8001e88 <LCD_DisplayChar>
    LCD_DisplayChar(170, 125, 'O');
 8000f2a:	224f      	movs	r2, #79	@ 0x4f
 8000f2c:	217d      	movs	r1, #125	@ 0x7d
 8000f2e:	20aa      	movs	r0, #170	@ 0xaa
 8000f30:	f000 ffaa 	bl	8001e88 <LCD_DisplayChar>
    LCD_DisplayChar(180, 125, 'D');
 8000f34:	2244      	movs	r2, #68	@ 0x44
 8000f36:	217d      	movs	r1, #125	@ 0x7d
 8000f38:	20b4      	movs	r0, #180	@ 0xb4
 8000f3a:	f000 ffa5 	bl	8001e88 <LCD_DisplayChar>
    LCD_DisplayChar(190, 125, 'E');
 8000f3e:	2245      	movs	r2, #69	@ 0x45
 8000f40:	217d      	movs	r1, #125	@ 0x7d
 8000f42:	20be      	movs	r0, #190	@ 0xbe
 8000f44:	f000 ffa0 	bl	8001e88 <LCD_DisplayChar>


    LCD_Draw_Circle_Fill(60, (LCD_PIXEL_HEIGHT/2)+20, 40, LCD_COLOR_RED);
 8000f48:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000f4c:	2228      	movs	r2, #40	@ 0x28
 8000f4e:	21b4      	movs	r1, #180	@ 0xb4
 8000f50:	203c      	movs	r0, #60	@ 0x3c
 8000f52:	f000 fe95 	bl	8001c80 <LCD_Draw_Circle_Fill>
    LCD_Draw_Circle_Fill(LCD_PIXEL_WIDTH-60, (LCD_PIXEL_HEIGHT/2)+20, 40, LCD_COLOR_BLUE);
 8000f56:	231f      	movs	r3, #31
 8000f58:	2228      	movs	r2, #40	@ 0x28
 8000f5a:	21b4      	movs	r1, #180	@ 0xb4
 8000f5c:	20b4      	movs	r0, #180	@ 0xb4
 8000f5e:	f000 fe8f 	bl	8001c80 <LCD_Draw_Circle_Fill>
}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	20000004 	.word	0x20000004
 8000f6c:	2000000c 	.word	0x2000000c

08000f70 <Screen2_DisplayBoard>:

void Screen2_DisplayBoard(uint8_t gameBoard[boardColumns][boardRows]){
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
    LCD_Clear(0, LCD_COLOR_GREY);
 8000f78:	f24f 71de 	movw	r1, #63454	@ 0xf7de
 8000f7c:	2000      	movs	r0, #0
 8000f7e:	f000 fed3 	bl	8001d28 <LCD_Clear>
    
    LCD_SetFont(&Font16x24);
 8000f82:	4850      	ldr	r0, [pc, #320]	@ (80010c4 <Screen2_DisplayBoard+0x154>)
 8000f84:	f000 ff02 	bl	8001d8c <LCD_SetFont>
    LCD_SetTextColor(LCD_COLOR_BLACK);
 8000f88:	2000      	movs	r0, #0
 8000f8a:	f000 feef 	bl	8001d6c <LCD_SetTextColor>
    LCD_DisplayChar(20, 25, 'C');
 8000f8e:	2243      	movs	r2, #67	@ 0x43
 8000f90:	2119      	movs	r1, #25
 8000f92:	2014      	movs	r0, #20
 8000f94:	f000 ff78 	bl	8001e88 <LCD_DisplayChar>
    LCD_DisplayChar(40, 25, 'O');
 8000f98:	224f      	movs	r2, #79	@ 0x4f
 8000f9a:	2119      	movs	r1, #25
 8000f9c:	2028      	movs	r0, #40	@ 0x28
 8000f9e:	f000 ff73 	bl	8001e88 <LCD_DisplayChar>
    LCD_DisplayChar(60, 25, 'N');
 8000fa2:	224e      	movs	r2, #78	@ 0x4e
 8000fa4:	2119      	movs	r1, #25
 8000fa6:	203c      	movs	r0, #60	@ 0x3c
 8000fa8:	f000 ff6e 	bl	8001e88 <LCD_DisplayChar>
    LCD_DisplayChar(80, 25, 'N');
 8000fac:	224e      	movs	r2, #78	@ 0x4e
 8000fae:	2119      	movs	r1, #25
 8000fb0:	2050      	movs	r0, #80	@ 0x50
 8000fb2:	f000 ff69 	bl	8001e88 <LCD_DisplayChar>
    LCD_DisplayChar(100, 25, 'E');
 8000fb6:	2245      	movs	r2, #69	@ 0x45
 8000fb8:	2119      	movs	r1, #25
 8000fba:	2064      	movs	r0, #100	@ 0x64
 8000fbc:	f000 ff64 	bl	8001e88 <LCD_DisplayChar>
    LCD_DisplayChar(120, 25, 'C');
 8000fc0:	2243      	movs	r2, #67	@ 0x43
 8000fc2:	2119      	movs	r1, #25
 8000fc4:	2078      	movs	r0, #120	@ 0x78
 8000fc6:	f000 ff5f 	bl	8001e88 <LCD_DisplayChar>
    LCD_DisplayChar(140, 25, 'T');
 8000fca:	2254      	movs	r2, #84	@ 0x54
 8000fcc:	2119      	movs	r1, #25
 8000fce:	208c      	movs	r0, #140	@ 0x8c
 8000fd0:	f000 ff5a 	bl	8001e88 <LCD_DisplayChar>
    LCD_DisplayChar(180, 25, '4');
 8000fd4:	2234      	movs	r2, #52	@ 0x34
 8000fd6:	2119      	movs	r1, #25
 8000fd8:	20b4      	movs	r0, #180	@ 0xb4
 8000fda:	f000 ff55 	bl	8001e88 <LCD_DisplayChar>

    for (int i = 0; i<boardColumns; i++){
 8000fde:	2300      	movs	r3, #0
 8000fe0:	60fb      	str	r3, [r7, #12]
 8000fe2:	e067      	b.n	80010b4 <Screen2_DisplayBoard+0x144>
        for (int j = 0; j<boardRows; j++){
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	60bb      	str	r3, [r7, #8]
 8000fe8:	e05e      	b.n	80010a8 <Screen2_DisplayBoard+0x138>
            if (gameBoard[i][j] == 1){
 8000fea:	68fa      	ldr	r2, [r7, #12]
 8000fec:	4613      	mov	r3, r2
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	4413      	add	r3, r2
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	441a      	add	r2, r3
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	2b01      	cmp	r3, #1
 8001002:	d115      	bne.n	8001030 <Screen2_DisplayBoard+0xc0>
                LCD_Draw_Circle_Fill((i*30)+30, (j*30)+115, 12, LCD_COLOR_BLUE);
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	3301      	adds	r3, #1
 8001008:	b29b      	uxth	r3, r3
 800100a:	461a      	mov	r2, r3
 800100c:	0112      	lsls	r2, r2, #4
 800100e:	1ad3      	subs	r3, r2, r3
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	b298      	uxth	r0, r3
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	b29b      	uxth	r3, r3
 8001018:	461a      	mov	r2, r3
 800101a:	0112      	lsls	r2, r2, #4
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	b29b      	uxth	r3, r3
 8001022:	3373      	adds	r3, #115	@ 0x73
 8001024:	b299      	uxth	r1, r3
 8001026:	231f      	movs	r3, #31
 8001028:	220c      	movs	r2, #12
 800102a:	f000 fe29 	bl	8001c80 <LCD_Draw_Circle_Fill>
 800102e:	e038      	b.n	80010a2 <Screen2_DisplayBoard+0x132>
            }
            else if (gameBoard[i][j] == 2){
 8001030:	68fa      	ldr	r2, [r7, #12]
 8001032:	4613      	mov	r3, r2
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	4413      	add	r3, r2
 8001038:	005b      	lsls	r3, r3, #1
 800103a:	461a      	mov	r2, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	441a      	add	r2, r3
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	4413      	add	r3, r2
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	2b02      	cmp	r3, #2
 8001048:	d116      	bne.n	8001078 <Screen2_DisplayBoard+0x108>
                LCD_Draw_Circle_Fill((i*30)+30, (j*30)+115, 12, LCD_COLOR_RED);
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	3301      	adds	r3, #1
 800104e:	b29b      	uxth	r3, r3
 8001050:	461a      	mov	r2, r3
 8001052:	0112      	lsls	r2, r2, #4
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	b298      	uxth	r0, r3
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	b29b      	uxth	r3, r3
 800105e:	461a      	mov	r2, r3
 8001060:	0112      	lsls	r2, r2, #4
 8001062:	1ad3      	subs	r3, r2, r3
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	b29b      	uxth	r3, r3
 8001068:	3373      	adds	r3, #115	@ 0x73
 800106a:	b299      	uxth	r1, r3
 800106c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001070:	220c      	movs	r2, #12
 8001072:	f000 fe05 	bl	8001c80 <LCD_Draw_Circle_Fill>
 8001076:	e014      	b.n	80010a2 <Screen2_DisplayBoard+0x132>
            }
            else{
                LCD_Draw_Circle_Fill((i*30)+30, (j*30)+115, 12, LCD_COLOR_BLACK);
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	3301      	adds	r3, #1
 800107c:	b29b      	uxth	r3, r3
 800107e:	461a      	mov	r2, r3
 8001080:	0112      	lsls	r2, r2, #4
 8001082:	1ad3      	subs	r3, r2, r3
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	b298      	uxth	r0, r3
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	b29b      	uxth	r3, r3
 800108c:	461a      	mov	r2, r3
 800108e:	0112      	lsls	r2, r2, #4
 8001090:	1ad3      	subs	r3, r2, r3
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	b29b      	uxth	r3, r3
 8001096:	3373      	adds	r3, #115	@ 0x73
 8001098:	b299      	uxth	r1, r3
 800109a:	2300      	movs	r3, #0
 800109c:	220c      	movs	r2, #12
 800109e:	f000 fdef 	bl	8001c80 <LCD_Draw_Circle_Fill>
        for (int j = 0; j<boardRows; j++){
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	3301      	adds	r3, #1
 80010a6:	60bb      	str	r3, [r7, #8]
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	2b05      	cmp	r3, #5
 80010ac:	dd9d      	ble.n	8000fea <Screen2_DisplayBoard+0x7a>
    for (int i = 0; i<boardColumns; i++){
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	3301      	adds	r3, #1
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	2b06      	cmp	r3, #6
 80010b8:	dd94      	ble.n	8000fe4 <Screen2_DisplayBoard+0x74>
            }
        }
    }
}
 80010ba:	bf00      	nop
 80010bc:	bf00      	nop
 80010be:	3710      	adds	r7, #16
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	20000004 	.word	0x20000004

080010c8 <Screen2_DisplayMoveChip>:

void Screen2_DisplayMoveChip(uint8_t chipLoc,  bool player1turn){
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	460a      	mov	r2, r1
 80010d2:	71fb      	strb	r3, [r7, #7]
 80010d4:	4613      	mov	r3, r2
 80010d6:	71bb      	strb	r3, [r7, #6]
    for (int i = 0; i<boardColumns; i++){
 80010d8:	2300      	movs	r3, #0
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	e034      	b.n	8001148 <Screen2_DisplayMoveChip+0x80>
        if (i == chipLoc){
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	68fa      	ldr	r2, [r7, #12]
 80010e2:	429a      	cmp	r2, r3
 80010e4:	d11f      	bne.n	8001126 <Screen2_DisplayMoveChip+0x5e>
            if (player1turn){
 80010e6:	79bb      	ldrb	r3, [r7, #6]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d00d      	beq.n	8001108 <Screen2_DisplayMoveChip+0x40>
                LCD_Draw_Circle_Fill((i*30)+30, 80, 12, LCD_COLOR_BLUE);
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	3301      	adds	r3, #1
 80010f0:	b29b      	uxth	r3, r3
 80010f2:	461a      	mov	r2, r3
 80010f4:	0112      	lsls	r2, r2, #4
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	b298      	uxth	r0, r3
 80010fc:	231f      	movs	r3, #31
 80010fe:	220c      	movs	r2, #12
 8001100:	2150      	movs	r1, #80	@ 0x50
 8001102:	f000 fdbd 	bl	8001c80 <LCD_Draw_Circle_Fill>
 8001106:	e01c      	b.n	8001142 <Screen2_DisplayMoveChip+0x7a>
            }
            else{
                LCD_Draw_Circle_Fill((i*30)+30, 80, 12, LCD_COLOR_RED);
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	3301      	adds	r3, #1
 800110c:	b29b      	uxth	r3, r3
 800110e:	461a      	mov	r2, r3
 8001110:	0112      	lsls	r2, r2, #4
 8001112:	1ad3      	subs	r3, r2, r3
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	b298      	uxth	r0, r3
 8001118:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800111c:	220c      	movs	r2, #12
 800111e:	2150      	movs	r1, #80	@ 0x50
 8001120:	f000 fdae 	bl	8001c80 <LCD_Draw_Circle_Fill>
 8001124:	e00d      	b.n	8001142 <Screen2_DisplayMoveChip+0x7a>
            }
        }
        else{
            LCD_Draw_Circle_Fill((i*30)+30, 80, 12, LCD_COLOR_GREY);
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	3301      	adds	r3, #1
 800112a:	b29b      	uxth	r3, r3
 800112c:	461a      	mov	r2, r3
 800112e:	0112      	lsls	r2, r2, #4
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	b298      	uxth	r0, r3
 8001136:	f24f 73de 	movw	r3, #63454	@ 0xf7de
 800113a:	220c      	movs	r2, #12
 800113c:	2150      	movs	r1, #80	@ 0x50
 800113e:	f000 fd9f 	bl	8001c80 <LCD_Draw_Circle_Fill>
    for (int i = 0; i<boardColumns; i++){
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	3301      	adds	r3, #1
 8001146:	60fb      	str	r3, [r7, #12]
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	2b06      	cmp	r3, #6
 800114c:	ddc7      	ble.n	80010de <Screen2_DisplayMoveChip+0x16>
        }
    }

}
 800114e:	bf00      	nop
 8001150:	bf00      	nop
 8001152:	3710      	adds	r7, #16
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}

08001158 <Screen3_Display>:

void Screen3_Display(uint8_t gameBoard[boardColumns][boardRows], uint8_t player1_Score, uint8_t player2_Score){
 8001158:	b580      	push	{r7, lr}
 800115a:	b088      	sub	sp, #32
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	460b      	mov	r3, r1
 8001162:	70fb      	strb	r3, [r7, #3]
 8001164:	4613      	mov	r3, r2
 8001166:	70bb      	strb	r3, [r7, #2]
    LCD_Clear(0, LCD_COLOR_GREY);
 8001168:	f24f 71de 	movw	r1, #63454	@ 0xf7de
 800116c:	2000      	movs	r0, #0
 800116e:	f000 fddb 	bl	8001d28 <LCD_Clear>
    
    LCD_SetFont(&Font16x24);
 8001172:	48e7      	ldr	r0, [pc, #924]	@ (8001510 <Screen3_Display+0x3b8>)
 8001174:	f000 fe0a 	bl	8001d8c <LCD_SetFont>
    LCD_SetTextColor(LCD_COLOR_BLACK);
 8001178:	2000      	movs	r0, #0
 800117a:	f000 fdf7 	bl	8001d6c <LCD_SetTextColor>
    LCD_DisplayChar(20, 15, 'C');
 800117e:	2243      	movs	r2, #67	@ 0x43
 8001180:	210f      	movs	r1, #15
 8001182:	2014      	movs	r0, #20
 8001184:	f000 fe80 	bl	8001e88 <LCD_DisplayChar>
    LCD_DisplayChar(40, 15, 'O');
 8001188:	224f      	movs	r2, #79	@ 0x4f
 800118a:	210f      	movs	r1, #15
 800118c:	2028      	movs	r0, #40	@ 0x28
 800118e:	f000 fe7b 	bl	8001e88 <LCD_DisplayChar>
    LCD_DisplayChar(60, 15, 'N');
 8001192:	224e      	movs	r2, #78	@ 0x4e
 8001194:	210f      	movs	r1, #15
 8001196:	203c      	movs	r0, #60	@ 0x3c
 8001198:	f000 fe76 	bl	8001e88 <LCD_DisplayChar>
    LCD_DisplayChar(80, 15, 'N');
 800119c:	224e      	movs	r2, #78	@ 0x4e
 800119e:	210f      	movs	r1, #15
 80011a0:	2050      	movs	r0, #80	@ 0x50
 80011a2:	f000 fe71 	bl	8001e88 <LCD_DisplayChar>
    LCD_DisplayChar(100, 15, 'E');
 80011a6:	2245      	movs	r2, #69	@ 0x45
 80011a8:	210f      	movs	r1, #15
 80011aa:	2064      	movs	r0, #100	@ 0x64
 80011ac:	f000 fe6c 	bl	8001e88 <LCD_DisplayChar>
    LCD_DisplayChar(120, 15, 'C');
 80011b0:	2243      	movs	r2, #67	@ 0x43
 80011b2:	210f      	movs	r1, #15
 80011b4:	2078      	movs	r0, #120	@ 0x78
 80011b6:	f000 fe67 	bl	8001e88 <LCD_DisplayChar>
    LCD_DisplayChar(140, 15, 'T');
 80011ba:	2254      	movs	r2, #84	@ 0x54
 80011bc:	210f      	movs	r1, #15
 80011be:	208c      	movs	r0, #140	@ 0x8c
 80011c0:	f000 fe62 	bl	8001e88 <LCD_DisplayChar>
    LCD_DisplayChar(180, 15, '4');
 80011c4:	2234      	movs	r2, #52	@ 0x34
 80011c6:	210f      	movs	r1, #15
 80011c8:	20b4      	movs	r0, #180	@ 0xb4
 80011ca:	f000 fe5d 	bl	8001e88 <LCD_DisplayChar>

    char score1 = (char)(player1_Score+48);
 80011ce:	78fb      	ldrb	r3, [r7, #3]
 80011d0:	3330      	adds	r3, #48	@ 0x30
 80011d2:	75fb      	strb	r3, [r7, #23]
	char score2 = (char)(player2_Score+48);
 80011d4:	78bb      	ldrb	r3, [r7, #2]
 80011d6:	3330      	adds	r3, #48	@ 0x30
 80011d8:	75bb      	strb	r3, [r7, #22]

    LCD_SetTextColor(LCD_COLOR_BLUE);
 80011da:	201f      	movs	r0, #31
 80011dc:	f000 fdc6 	bl	8001d6c <LCD_SetTextColor>
    LCD_SetFont(&Font12x12);
 80011e0:	48cc      	ldr	r0, [pc, #816]	@ (8001514 <Screen3_Display+0x3bc>)
 80011e2:	f000 fdd3 	bl	8001d8c <LCD_SetFont>
	LCD_DisplayChar(20, 40, 'P');
 80011e6:	2250      	movs	r2, #80	@ 0x50
 80011e8:	2128      	movs	r1, #40	@ 0x28
 80011ea:	2014      	movs	r0, #20
 80011ec:	f000 fe4c 	bl	8001e88 <LCD_DisplayChar>
    LCD_DisplayChar(30, 40, 'L');
 80011f0:	224c      	movs	r2, #76	@ 0x4c
 80011f2:	2128      	movs	r1, #40	@ 0x28
 80011f4:	201e      	movs	r0, #30
 80011f6:	f000 fe47 	bl	8001e88 <LCD_DisplayChar>
    LCD_DisplayChar(40, 40, 'A');
 80011fa:	2241      	movs	r2, #65	@ 0x41
 80011fc:	2128      	movs	r1, #40	@ 0x28
 80011fe:	2028      	movs	r0, #40	@ 0x28
 8001200:	f000 fe42 	bl	8001e88 <LCD_DisplayChar>
    LCD_DisplayChar(50, 40, 'Y');
 8001204:	2259      	movs	r2, #89	@ 0x59
 8001206:	2128      	movs	r1, #40	@ 0x28
 8001208:	2032      	movs	r0, #50	@ 0x32
 800120a:	f000 fe3d 	bl	8001e88 <LCD_DisplayChar>
    LCD_DisplayChar(60, 40, 'E');
 800120e:	2245      	movs	r2, #69	@ 0x45
 8001210:	2128      	movs	r1, #40	@ 0x28
 8001212:	203c      	movs	r0, #60	@ 0x3c
 8001214:	f000 fe38 	bl	8001e88 <LCD_DisplayChar>
    LCD_DisplayChar(70, 40, 'R');
 8001218:	2252      	movs	r2, #82	@ 0x52
 800121a:	2128      	movs	r1, #40	@ 0x28
 800121c:	2046      	movs	r0, #70	@ 0x46
 800121e:	f000 fe33 	bl	8001e88 <LCD_DisplayChar>
    LCD_DisplayChar(85, 40, '1');
 8001222:	2231      	movs	r2, #49	@ 0x31
 8001224:	2128      	movs	r1, #40	@ 0x28
 8001226:	2055      	movs	r0, #85	@ 0x55
 8001228:	f000 fe2e 	bl	8001e88 <LCD_DisplayChar>
    LCD_DisplayChar(25, 55, 'S');
 800122c:	2253      	movs	r2, #83	@ 0x53
 800122e:	2137      	movs	r1, #55	@ 0x37
 8001230:	2019      	movs	r0, #25
 8001232:	f000 fe29 	bl	8001e88 <LCD_DisplayChar>
    LCD_DisplayChar(35, 55, 'C');
 8001236:	2243      	movs	r2, #67	@ 0x43
 8001238:	2137      	movs	r1, #55	@ 0x37
 800123a:	2023      	movs	r0, #35	@ 0x23
 800123c:	f000 fe24 	bl	8001e88 <LCD_DisplayChar>
    LCD_DisplayChar(45, 55, 'O');
 8001240:	224f      	movs	r2, #79	@ 0x4f
 8001242:	2137      	movs	r1, #55	@ 0x37
 8001244:	202d      	movs	r0, #45	@ 0x2d
 8001246:	f000 fe1f 	bl	8001e88 <LCD_DisplayChar>
    LCD_DisplayChar(55, 55, 'R');
 800124a:	2252      	movs	r2, #82	@ 0x52
 800124c:	2137      	movs	r1, #55	@ 0x37
 800124e:	2037      	movs	r0, #55	@ 0x37
 8001250:	f000 fe1a 	bl	8001e88 <LCD_DisplayChar>
	LCD_DisplayChar(65, 55, 'E');
 8001254:	2245      	movs	r2, #69	@ 0x45
 8001256:	2137      	movs	r1, #55	@ 0x37
 8001258:	2041      	movs	r0, #65	@ 0x41
 800125a:	f000 fe15 	bl	8001e88 <LCD_DisplayChar>
	LCD_DisplayChar(75, 55, ':');
 800125e:	223a      	movs	r2, #58	@ 0x3a
 8001260:	2137      	movs	r1, #55	@ 0x37
 8001262:	204b      	movs	r0, #75	@ 0x4b
 8001264:	f000 fe10 	bl	8001e88 <LCD_DisplayChar>
	LCD_DisplayChar(85, 55, score1);
 8001268:	7dfb      	ldrb	r3, [r7, #23]
 800126a:	461a      	mov	r2, r3
 800126c:	2137      	movs	r1, #55	@ 0x37
 800126e:	2055      	movs	r0, #85	@ 0x55
 8001270:	f000 fe0a 	bl	8001e88 <LCD_DisplayChar>

    LCD_SetTextColor(LCD_COLOR_RED);
 8001274:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 8001278:	f000 fd78 	bl	8001d6c <LCD_SetTextColor>
    LCD_DisplayChar(140, 40, 'P');
 800127c:	2250      	movs	r2, #80	@ 0x50
 800127e:	2128      	movs	r1, #40	@ 0x28
 8001280:	208c      	movs	r0, #140	@ 0x8c
 8001282:	f000 fe01 	bl	8001e88 <LCD_DisplayChar>
    LCD_DisplayChar(150, 40, 'L');
 8001286:	224c      	movs	r2, #76	@ 0x4c
 8001288:	2128      	movs	r1, #40	@ 0x28
 800128a:	2096      	movs	r0, #150	@ 0x96
 800128c:	f000 fdfc 	bl	8001e88 <LCD_DisplayChar>
    LCD_DisplayChar(160, 40, 'A');
 8001290:	2241      	movs	r2, #65	@ 0x41
 8001292:	2128      	movs	r1, #40	@ 0x28
 8001294:	20a0      	movs	r0, #160	@ 0xa0
 8001296:	f000 fdf7 	bl	8001e88 <LCD_DisplayChar>
    LCD_DisplayChar(170, 40, 'Y');
 800129a:	2259      	movs	r2, #89	@ 0x59
 800129c:	2128      	movs	r1, #40	@ 0x28
 800129e:	20aa      	movs	r0, #170	@ 0xaa
 80012a0:	f000 fdf2 	bl	8001e88 <LCD_DisplayChar>
    LCD_DisplayChar(180, 40, 'E');
 80012a4:	2245      	movs	r2, #69	@ 0x45
 80012a6:	2128      	movs	r1, #40	@ 0x28
 80012a8:	20b4      	movs	r0, #180	@ 0xb4
 80012aa:	f000 fded 	bl	8001e88 <LCD_DisplayChar>
    LCD_DisplayChar(190, 40, 'R');
 80012ae:	2252      	movs	r2, #82	@ 0x52
 80012b0:	2128      	movs	r1, #40	@ 0x28
 80012b2:	20be      	movs	r0, #190	@ 0xbe
 80012b4:	f000 fde8 	bl	8001e88 <LCD_DisplayChar>
    LCD_DisplayChar(205, 40, '2');
 80012b8:	2232      	movs	r2, #50	@ 0x32
 80012ba:	2128      	movs	r1, #40	@ 0x28
 80012bc:	20cd      	movs	r0, #205	@ 0xcd
 80012be:	f000 fde3 	bl	8001e88 <LCD_DisplayChar>
    LCD_DisplayChar(145, 55, 'S');
 80012c2:	2253      	movs	r2, #83	@ 0x53
 80012c4:	2137      	movs	r1, #55	@ 0x37
 80012c6:	2091      	movs	r0, #145	@ 0x91
 80012c8:	f000 fdde 	bl	8001e88 <LCD_DisplayChar>
    LCD_DisplayChar(155, 55, 'C');
 80012cc:	2243      	movs	r2, #67	@ 0x43
 80012ce:	2137      	movs	r1, #55	@ 0x37
 80012d0:	209b      	movs	r0, #155	@ 0x9b
 80012d2:	f000 fdd9 	bl	8001e88 <LCD_DisplayChar>
    LCD_DisplayChar(165, 55, 'O');
 80012d6:	224f      	movs	r2, #79	@ 0x4f
 80012d8:	2137      	movs	r1, #55	@ 0x37
 80012da:	20a5      	movs	r0, #165	@ 0xa5
 80012dc:	f000 fdd4 	bl	8001e88 <LCD_DisplayChar>
    LCD_DisplayChar(175, 55, 'R');
 80012e0:	2252      	movs	r2, #82	@ 0x52
 80012e2:	2137      	movs	r1, #55	@ 0x37
 80012e4:	20af      	movs	r0, #175	@ 0xaf
 80012e6:	f000 fdcf 	bl	8001e88 <LCD_DisplayChar>
	LCD_DisplayChar(185, 55, 'E');
 80012ea:	2245      	movs	r2, #69	@ 0x45
 80012ec:	2137      	movs	r1, #55	@ 0x37
 80012ee:	20b9      	movs	r0, #185	@ 0xb9
 80012f0:	f000 fdca 	bl	8001e88 <LCD_DisplayChar>
	LCD_DisplayChar(195, 55, ':');
 80012f4:	223a      	movs	r2, #58	@ 0x3a
 80012f6:	2137      	movs	r1, #55	@ 0x37
 80012f8:	20c3      	movs	r0, #195	@ 0xc3
 80012fa:	f000 fdc5 	bl	8001e88 <LCD_DisplayChar>
	LCD_DisplayChar(205, 55, score2);
 80012fe:	7dbb      	ldrb	r3, [r7, #22]
 8001300:	461a      	mov	r2, r3
 8001302:	2137      	movs	r1, #55	@ 0x37
 8001304:	20cd      	movs	r0, #205	@ 0xcd
 8001306:	f000 fdbf 	bl	8001e88 <LCD_DisplayChar>

    LCD_SetTextColor(LCD_COLOR_BLACK);
 800130a:	2000      	movs	r0, #0
 800130c:	f000 fd2e 	bl	8001d6c <LCD_SetTextColor>
	LCD_DisplayChar(40, 70, 'T');
 8001310:	2254      	movs	r2, #84	@ 0x54
 8001312:	2146      	movs	r1, #70	@ 0x46
 8001314:	2028      	movs	r0, #40	@ 0x28
 8001316:	f000 fdb7 	bl	8001e88 <LCD_DisplayChar>
	LCD_DisplayChar(50, 70, 'I');
 800131a:	2249      	movs	r2, #73	@ 0x49
 800131c:	2146      	movs	r1, #70	@ 0x46
 800131e:	2032      	movs	r0, #50	@ 0x32
 8001320:	f000 fdb2 	bl	8001e88 <LCD_DisplayChar>
	LCD_DisplayChar(55, 70, 'M');
 8001324:	224d      	movs	r2, #77	@ 0x4d
 8001326:	2146      	movs	r1, #70	@ 0x46
 8001328:	2037      	movs	r0, #55	@ 0x37
 800132a:	f000 fdad 	bl	8001e88 <LCD_DisplayChar>
	LCD_DisplayChar(65, 70, 'E');
 800132e:	2245      	movs	r2, #69	@ 0x45
 8001330:	2146      	movs	r1, #70	@ 0x46
 8001332:	2041      	movs	r0, #65	@ 0x41
 8001334:	f000 fda8 	bl	8001e88 <LCD_DisplayChar>
	LCD_DisplayChar(80, 70, 'P');
 8001338:	2250      	movs	r2, #80	@ 0x50
 800133a:	2146      	movs	r1, #70	@ 0x46
 800133c:	2050      	movs	r0, #80	@ 0x50
 800133e:	f000 fda3 	bl	8001e88 <LCD_DisplayChar>
	LCD_DisplayChar(90, 70, 'L');
 8001342:	224c      	movs	r2, #76	@ 0x4c
 8001344:	2146      	movs	r1, #70	@ 0x46
 8001346:	205a      	movs	r0, #90	@ 0x5a
 8001348:	f000 fd9e 	bl	8001e88 <LCD_DisplayChar>
	LCD_DisplayChar(100, 70, 'A');
 800134c:	2241      	movs	r2, #65	@ 0x41
 800134e:	2146      	movs	r1, #70	@ 0x46
 8001350:	2064      	movs	r0, #100	@ 0x64
 8001352:	f000 fd99 	bl	8001e88 <LCD_DisplayChar>
	LCD_DisplayChar(110, 70, 'Y');
 8001356:	2259      	movs	r2, #89	@ 0x59
 8001358:	2146      	movs	r1, #70	@ 0x46
 800135a:	206e      	movs	r0, #110	@ 0x6e
 800135c:	f000 fd94 	bl	8001e88 <LCD_DisplayChar>
	LCD_DisplayChar(120, 70, 'E');
 8001360:	2245      	movs	r2, #69	@ 0x45
 8001362:	2146      	movs	r1, #70	@ 0x46
 8001364:	2078      	movs	r0, #120	@ 0x78
 8001366:	f000 fd8f 	bl	8001e88 <LCD_DisplayChar>
	LCD_DisplayChar(130, 70, 'D');
 800136a:	2244      	movs	r2, #68	@ 0x44
 800136c:	2146      	movs	r1, #70	@ 0x46
 800136e:	2082      	movs	r0, #130	@ 0x82
 8001370:	f000 fd8a 	bl	8001e88 <LCD_DisplayChar>

	uint32_t seconds = timePlayed/1000;
 8001374:	4b68      	ldr	r3, [pc, #416]	@ (8001518 <Screen3_Display+0x3c0>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a68      	ldr	r2, [pc, #416]	@ (800151c <Screen3_Display+0x3c4>)
 800137a:	fba2 2303 	umull	r2, r3, r2, r3
 800137e:	099b      	lsrs	r3, r3, #6
 8001380:	613b      	str	r3, [r7, #16]
	char sec_1 = (char)(((seconds / 1000) %10)+48);
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	4a65      	ldr	r2, [pc, #404]	@ (800151c <Screen3_Display+0x3c4>)
 8001386:	fba2 2303 	umull	r2, r3, r2, r3
 800138a:	0999      	lsrs	r1, r3, #6
 800138c:	4b64      	ldr	r3, [pc, #400]	@ (8001520 <Screen3_Display+0x3c8>)
 800138e:	fba3 2301 	umull	r2, r3, r3, r1
 8001392:	08da      	lsrs	r2, r3, #3
 8001394:	4613      	mov	r3, r2
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	4413      	add	r3, r2
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	1aca      	subs	r2, r1, r3
 800139e:	b2d3      	uxtb	r3, r2
 80013a0:	3330      	adds	r3, #48	@ 0x30
 80013a2:	73fb      	strb	r3, [r7, #15]
	char sec_2 = (char)(((seconds / 100) %10)+48);
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	4a5f      	ldr	r2, [pc, #380]	@ (8001524 <Screen3_Display+0x3cc>)
 80013a8:	fba2 2303 	umull	r2, r3, r2, r3
 80013ac:	0959      	lsrs	r1, r3, #5
 80013ae:	4b5c      	ldr	r3, [pc, #368]	@ (8001520 <Screen3_Display+0x3c8>)
 80013b0:	fba3 2301 	umull	r2, r3, r3, r1
 80013b4:	08da      	lsrs	r2, r3, #3
 80013b6:	4613      	mov	r3, r2
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	4413      	add	r3, r2
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	1aca      	subs	r2, r1, r3
 80013c0:	b2d3      	uxtb	r3, r2
 80013c2:	3330      	adds	r3, #48	@ 0x30
 80013c4:	73bb      	strb	r3, [r7, #14]
	char sec_3 = (char)(((seconds / 10) %10)+48);
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	4a55      	ldr	r2, [pc, #340]	@ (8001520 <Screen3_Display+0x3c8>)
 80013ca:	fba2 2303 	umull	r2, r3, r2, r3
 80013ce:	08d9      	lsrs	r1, r3, #3
 80013d0:	4b53      	ldr	r3, [pc, #332]	@ (8001520 <Screen3_Display+0x3c8>)
 80013d2:	fba3 2301 	umull	r2, r3, r3, r1
 80013d6:	08da      	lsrs	r2, r3, #3
 80013d8:	4613      	mov	r3, r2
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	4413      	add	r3, r2
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	1aca      	subs	r2, r1, r3
 80013e2:	b2d3      	uxtb	r3, r2
 80013e4:	3330      	adds	r3, #48	@ 0x30
 80013e6:	737b      	strb	r3, [r7, #13]
	char sec_4 = (char)((seconds %10)+48);
 80013e8:	6939      	ldr	r1, [r7, #16]
 80013ea:	4b4d      	ldr	r3, [pc, #308]	@ (8001520 <Screen3_Display+0x3c8>)
 80013ec:	fba3 2301 	umull	r2, r3, r3, r1
 80013f0:	08da      	lsrs	r2, r3, #3
 80013f2:	4613      	mov	r3, r2
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	4413      	add	r3, r2
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	1aca      	subs	r2, r1, r3
 80013fc:	b2d3      	uxtb	r3, r2
 80013fe:	3330      	adds	r3, #48	@ 0x30
 8001400:	733b      	strb	r3, [r7, #12]
	LCD_DisplayChar(150, 70, sec_1);
 8001402:	7bfb      	ldrb	r3, [r7, #15]
 8001404:	461a      	mov	r2, r3
 8001406:	2146      	movs	r1, #70	@ 0x46
 8001408:	2096      	movs	r0, #150	@ 0x96
 800140a:	f000 fd3d 	bl	8001e88 <LCD_DisplayChar>
	LCD_DisplayChar(160, 70, sec_2);
 800140e:	7bbb      	ldrb	r3, [r7, #14]
 8001410:	461a      	mov	r2, r3
 8001412:	2146      	movs	r1, #70	@ 0x46
 8001414:	20a0      	movs	r0, #160	@ 0xa0
 8001416:	f000 fd37 	bl	8001e88 <LCD_DisplayChar>
	LCD_DisplayChar(170, 70, sec_3);
 800141a:	7b7b      	ldrb	r3, [r7, #13]
 800141c:	461a      	mov	r2, r3
 800141e:	2146      	movs	r1, #70	@ 0x46
 8001420:	20aa      	movs	r0, #170	@ 0xaa
 8001422:	f000 fd31 	bl	8001e88 <LCD_DisplayChar>
	LCD_DisplayChar(180, 70, sec_4);
 8001426:	7b3b      	ldrb	r3, [r7, #12]
 8001428:	461a      	mov	r2, r3
 800142a:	2146      	movs	r1, #70	@ 0x46
 800142c:	20b4      	movs	r0, #180	@ 0xb4
 800142e:	f000 fd2b 	bl	8001e88 <LCD_DisplayChar>
    LCD_DisplayChar(190, 70, 's');
 8001432:	2273      	movs	r2, #115	@ 0x73
 8001434:	2146      	movs	r1, #70	@ 0x46
 8001436:	20be      	movs	r0, #190	@ 0xbe
 8001438:	f000 fd26 	bl	8001e88 <LCD_DisplayChar>
    
    LCD_DisplayChar(15, 85, 'P');
 800143c:	2250      	movs	r2, #80	@ 0x50
 800143e:	2155      	movs	r1, #85	@ 0x55
 8001440:	200f      	movs	r0, #15
 8001442:	f000 fd21 	bl	8001e88 <LCD_DisplayChar>
	LCD_DisplayChar(25, 85, 'R');
 8001446:	2252      	movs	r2, #82	@ 0x52
 8001448:	2155      	movs	r1, #85	@ 0x55
 800144a:	2019      	movs	r0, #25
 800144c:	f000 fd1c 	bl	8001e88 <LCD_DisplayChar>
	LCD_DisplayChar(35, 85, 'E');
 8001450:	2245      	movs	r2, #69	@ 0x45
 8001452:	2155      	movs	r1, #85	@ 0x55
 8001454:	2023      	movs	r0, #35	@ 0x23
 8001456:	f000 fd17 	bl	8001e88 <LCD_DisplayChar>
	LCD_DisplayChar(45, 85, 'S');
 800145a:	2253      	movs	r2, #83	@ 0x53
 800145c:	2155      	movs	r1, #85	@ 0x55
 800145e:	202d      	movs	r0, #45	@ 0x2d
 8001460:	f000 fd12 	bl	8001e88 <LCD_DisplayChar>
	LCD_DisplayChar(55, 85, 'S');
 8001464:	2253      	movs	r2, #83	@ 0x53
 8001466:	2155      	movs	r1, #85	@ 0x55
 8001468:	2037      	movs	r0, #55	@ 0x37
 800146a:	f000 fd0d 	bl	8001e88 <LCD_DisplayChar>
	LCD_DisplayChar(70, 85, 'B');
 800146e:	2242      	movs	r2, #66	@ 0x42
 8001470:	2155      	movs	r1, #85	@ 0x55
 8001472:	2046      	movs	r0, #70	@ 0x46
 8001474:	f000 fd08 	bl	8001e88 <LCD_DisplayChar>
	LCD_DisplayChar(80, 85, 'U');
 8001478:	2255      	movs	r2, #85	@ 0x55
 800147a:	2155      	movs	r1, #85	@ 0x55
 800147c:	2050      	movs	r0, #80	@ 0x50
 800147e:	f000 fd03 	bl	8001e88 <LCD_DisplayChar>
	LCD_DisplayChar(90, 85, 'T');
 8001482:	2254      	movs	r2, #84	@ 0x54
 8001484:	2155      	movs	r1, #85	@ 0x55
 8001486:	205a      	movs	r0, #90	@ 0x5a
 8001488:	f000 fcfe 	bl	8001e88 <LCD_DisplayChar>
	LCD_DisplayChar(100, 85, 'T');
 800148c:	2254      	movs	r2, #84	@ 0x54
 800148e:	2155      	movs	r1, #85	@ 0x55
 8001490:	2064      	movs	r0, #100	@ 0x64
 8001492:	f000 fcf9 	bl	8001e88 <LCD_DisplayChar>
	LCD_DisplayChar(110, 85, 'O');
 8001496:	224f      	movs	r2, #79	@ 0x4f
 8001498:	2155      	movs	r1, #85	@ 0x55
 800149a:	206e      	movs	r0, #110	@ 0x6e
 800149c:	f000 fcf4 	bl	8001e88 <LCD_DisplayChar>
    LCD_DisplayChar(120, 85, 'N');
 80014a0:	224e      	movs	r2, #78	@ 0x4e
 80014a2:	2155      	movs	r1, #85	@ 0x55
 80014a4:	2078      	movs	r0, #120	@ 0x78
 80014a6:	f000 fcef 	bl	8001e88 <LCD_DisplayChar>
    LCD_DisplayChar(135, 85, 'T');
 80014aa:	2254      	movs	r2, #84	@ 0x54
 80014ac:	2155      	movs	r1, #85	@ 0x55
 80014ae:	2087      	movs	r0, #135	@ 0x87
 80014b0:	f000 fcea 	bl	8001e88 <LCD_DisplayChar>
    LCD_DisplayChar(145, 85, 'O');
 80014b4:	224f      	movs	r2, #79	@ 0x4f
 80014b6:	2155      	movs	r1, #85	@ 0x55
 80014b8:	2091      	movs	r0, #145	@ 0x91
 80014ba:	f000 fce5 	bl	8001e88 <LCD_DisplayChar>
    LCD_DisplayChar(160, 85, 'R');
 80014be:	2252      	movs	r2, #82	@ 0x52
 80014c0:	2155      	movs	r1, #85	@ 0x55
 80014c2:	20a0      	movs	r0, #160	@ 0xa0
 80014c4:	f000 fce0 	bl	8001e88 <LCD_DisplayChar>
    LCD_DisplayChar(170, 85, 'E');
 80014c8:	2245      	movs	r2, #69	@ 0x45
 80014ca:	2155      	movs	r1, #85	@ 0x55
 80014cc:	20aa      	movs	r0, #170	@ 0xaa
 80014ce:	f000 fcdb 	bl	8001e88 <LCD_DisplayChar>
    LCD_DisplayChar(180, 85, 'S');
 80014d2:	2253      	movs	r2, #83	@ 0x53
 80014d4:	2155      	movs	r1, #85	@ 0x55
 80014d6:	20b4      	movs	r0, #180	@ 0xb4
 80014d8:	f000 fcd6 	bl	8001e88 <LCD_DisplayChar>
    LCD_DisplayChar(190, 85, 'T');
 80014dc:	2254      	movs	r2, #84	@ 0x54
 80014de:	2155      	movs	r1, #85	@ 0x55
 80014e0:	20be      	movs	r0, #190	@ 0xbe
 80014e2:	f000 fcd1 	bl	8001e88 <LCD_DisplayChar>
    LCD_DisplayChar(200, 85, 'A');
 80014e6:	2241      	movs	r2, #65	@ 0x41
 80014e8:	2155      	movs	r1, #85	@ 0x55
 80014ea:	20c8      	movs	r0, #200	@ 0xc8
 80014ec:	f000 fccc 	bl	8001e88 <LCD_DisplayChar>
    LCD_DisplayChar(210, 85, 'R');
 80014f0:	2252      	movs	r2, #82	@ 0x52
 80014f2:	2155      	movs	r1, #85	@ 0x55
 80014f4:	20d2      	movs	r0, #210	@ 0xd2
 80014f6:	f000 fcc7 	bl	8001e88 <LCD_DisplayChar>
    LCD_DisplayChar(220, 85, 'T');
 80014fa:	2254      	movs	r2, #84	@ 0x54
 80014fc:	2155      	movs	r1, #85	@ 0x55
 80014fe:	20dc      	movs	r0, #220	@ 0xdc
 8001500:	f000 fcc2 	bl	8001e88 <LCD_DisplayChar>

    for (int i = 0; i<boardColumns; i++){
 8001504:	2300      	movs	r3, #0
 8001506:	61fb      	str	r3, [r7, #28]
 8001508:	e073      	b.n	80015f2 <Screen3_Display+0x49a>
        for (int j = 0; j<boardRows; j++){
 800150a:	2300      	movs	r3, #0
 800150c:	61bb      	str	r3, [r7, #24]
 800150e:	e06a      	b.n	80015e6 <Screen3_Display+0x48e>
 8001510:	20000004 	.word	0x20000004
 8001514:	2000000c 	.word	0x2000000c
 8001518:	20000080 	.word	0x20000080
 800151c:	10624dd3 	.word	0x10624dd3
 8001520:	cccccccd 	.word	0xcccccccd
 8001524:	51eb851f 	.word	0x51eb851f
            if (gameBoard[i][j] == 1){
 8001528:	69fa      	ldr	r2, [r7, #28]
 800152a:	4613      	mov	r3, r2
 800152c:	005b      	lsls	r3, r3, #1
 800152e:	4413      	add	r3, r2
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	461a      	mov	r2, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	441a      	add	r2, r3
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	4413      	add	r3, r2
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	2b01      	cmp	r3, #1
 8001540:	d115      	bne.n	800156e <Screen3_Display+0x416>
                LCD_Draw_Circle_Fill((i*30)+30, (j*30)+115, 12, LCD_COLOR_BLUE);
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	3301      	adds	r3, #1
 8001546:	b29b      	uxth	r3, r3
 8001548:	461a      	mov	r2, r3
 800154a:	0112      	lsls	r2, r2, #4
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	b298      	uxth	r0, r3
 8001552:	69bb      	ldr	r3, [r7, #24]
 8001554:	b29b      	uxth	r3, r3
 8001556:	461a      	mov	r2, r3
 8001558:	0112      	lsls	r2, r2, #4
 800155a:	1ad3      	subs	r3, r2, r3
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	b29b      	uxth	r3, r3
 8001560:	3373      	adds	r3, #115	@ 0x73
 8001562:	b299      	uxth	r1, r3
 8001564:	231f      	movs	r3, #31
 8001566:	220c      	movs	r2, #12
 8001568:	f000 fb8a 	bl	8001c80 <LCD_Draw_Circle_Fill>
 800156c:	e038      	b.n	80015e0 <Screen3_Display+0x488>
            }
            else if (gameBoard[i][j] == 2){
 800156e:	69fa      	ldr	r2, [r7, #28]
 8001570:	4613      	mov	r3, r2
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	4413      	add	r3, r2
 8001576:	005b      	lsls	r3, r3, #1
 8001578:	461a      	mov	r2, r3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	441a      	add	r2, r3
 800157e:	69bb      	ldr	r3, [r7, #24]
 8001580:	4413      	add	r3, r2
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	2b02      	cmp	r3, #2
 8001586:	d116      	bne.n	80015b6 <Screen3_Display+0x45e>
                LCD_Draw_Circle_Fill((i*30)+30, (j*30)+115, 12, LCD_COLOR_RED);
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	3301      	adds	r3, #1
 800158c:	b29b      	uxth	r3, r3
 800158e:	461a      	mov	r2, r3
 8001590:	0112      	lsls	r2, r2, #4
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	b298      	uxth	r0, r3
 8001598:	69bb      	ldr	r3, [r7, #24]
 800159a:	b29b      	uxth	r3, r3
 800159c:	461a      	mov	r2, r3
 800159e:	0112      	lsls	r2, r2, #4
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	005b      	lsls	r3, r3, #1
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	3373      	adds	r3, #115	@ 0x73
 80015a8:	b299      	uxth	r1, r3
 80015aa:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80015ae:	220c      	movs	r2, #12
 80015b0:	f000 fb66 	bl	8001c80 <LCD_Draw_Circle_Fill>
 80015b4:	e014      	b.n	80015e0 <Screen3_Display+0x488>
            }
            else{
                LCD_Draw_Circle_Fill((i*30)+30, (j*30)+115, 12, LCD_COLOR_BLACK);
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	3301      	adds	r3, #1
 80015ba:	b29b      	uxth	r3, r3
 80015bc:	461a      	mov	r2, r3
 80015be:	0112      	lsls	r2, r2, #4
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	b298      	uxth	r0, r3
 80015c6:	69bb      	ldr	r3, [r7, #24]
 80015c8:	b29b      	uxth	r3, r3
 80015ca:	461a      	mov	r2, r3
 80015cc:	0112      	lsls	r2, r2, #4
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	3373      	adds	r3, #115	@ 0x73
 80015d6:	b299      	uxth	r1, r3
 80015d8:	2300      	movs	r3, #0
 80015da:	220c      	movs	r2, #12
 80015dc:	f000 fb50 	bl	8001c80 <LCD_Draw_Circle_Fill>
        for (int j = 0; j<boardRows; j++){
 80015e0:	69bb      	ldr	r3, [r7, #24]
 80015e2:	3301      	adds	r3, #1
 80015e4:	61bb      	str	r3, [r7, #24]
 80015e6:	69bb      	ldr	r3, [r7, #24]
 80015e8:	2b05      	cmp	r3, #5
 80015ea:	dd9d      	ble.n	8001528 <Screen3_Display+0x3d0>
    for (int i = 0; i<boardColumns; i++){
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	3301      	adds	r3, #1
 80015f0:	61fb      	str	r3, [r7, #28]
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	2b06      	cmp	r3, #6
 80015f6:	dd88      	ble.n	800150a <Screen3_Display+0x3b2>
            }
        }
    }
}
 80015f8:	bf00      	nop
 80015fa:	bf00      	nop
 80015fc:	3720      	adds	r7, #32
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop

08001604 <startTimer>:

void startTimer(void){
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
	startTime = HAL_GetTick();
 8001608:	f002 f98c 	bl	8003924 <HAL_GetTick>
 800160c:	4603      	mov	r3, r0
 800160e:	4a02      	ldr	r2, [pc, #8]	@ (8001618 <startTimer+0x14>)
 8001610:	6013      	str	r3, [r2, #0]
}
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	20000078 	.word	0x20000078

0800161c <endTimer>:

void endTimer(void){
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
    endTime = HAL_GetTick();
 8001620:	f002 f980 	bl	8003924 <HAL_GetTick>
 8001624:	4603      	mov	r3, r0
 8001626:	4a05      	ldr	r2, [pc, #20]	@ (800163c <endTimer+0x20>)
 8001628:	6013      	str	r3, [r2, #0]
	timePlayed = endTime-startTime;
 800162a:	4b04      	ldr	r3, [pc, #16]	@ (800163c <endTimer+0x20>)
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	4b04      	ldr	r3, [pc, #16]	@ (8001640 <endTimer+0x24>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	4a03      	ldr	r2, [pc, #12]	@ (8001644 <endTimer+0x28>)
 8001636:	6013      	str	r3, [r2, #0]
 8001638:	bf00      	nop
 800163a:	bd80      	pop	{r7, pc}
 800163c:	2000007c 	.word	0x2000007c
 8001640:	20000078 	.word	0x20000078
 8001644:	20000080 	.word	0x20000080

08001648 <Gyro_Init>:

static HAL_StatusTypeDef HAL_Status;

static SPI_HandleTypeDef hspi5;

void Gyro_Init(){
 8001648:	b580      	push	{r7, lr}
 800164a:	b098      	sub	sp, #96	@ 0x60
 800164c:	af00      	add	r7, sp, #0
		__HAL_RCC_GPIOF_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	60bb      	str	r3, [r7, #8]
 8001652:	4b65      	ldr	r3, [pc, #404]	@ (80017e8 <Gyro_Init+0x1a0>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001656:	4a64      	ldr	r2, [pc, #400]	@ (80017e8 <Gyro_Init+0x1a0>)
 8001658:	f043 0320 	orr.w	r3, r3, #32
 800165c:	6313      	str	r3, [r2, #48]	@ 0x30
 800165e:	4b62      	ldr	r3, [pc, #392]	@ (80017e8 <Gyro_Init+0x1a0>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001662:	f003 0320 	and.w	r3, r3, #32
 8001666:	60bb      	str	r3, [r7, #8]
 8001668:	68bb      	ldr	r3, [r7, #8]
		__HAL_RCC_GPIOC_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	607b      	str	r3, [r7, #4]
 800166e:	4b5e      	ldr	r3, [pc, #376]	@ (80017e8 <Gyro_Init+0x1a0>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001672:	4a5d      	ldr	r2, [pc, #372]	@ (80017e8 <Gyro_Init+0x1a0>)
 8001674:	f043 0304 	orr.w	r3, r3, #4
 8001678:	6313      	str	r3, [r2, #48]	@ 0x30
 800167a:	4b5b      	ldr	r3, [pc, #364]	@ (80017e8 <Gyro_Init+0x1a0>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167e:	f003 0304 	and.w	r3, r3, #4
 8001682:	607b      	str	r3, [r7, #4]
 8001684:	687b      	ldr	r3, [r7, #4]
		__HAL_RCC_SPI5_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	603b      	str	r3, [r7, #0]
 800168a:	4b57      	ldr	r3, [pc, #348]	@ (80017e8 <Gyro_Init+0x1a0>)
 800168c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800168e:	4a56      	ldr	r2, [pc, #344]	@ (80017e8 <Gyro_Init+0x1a0>)
 8001690:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001694:	6453      	str	r3, [r2, #68]	@ 0x44
 8001696:	4b54      	ldr	r3, [pc, #336]	@ (80017e8 <Gyro_Init+0x1a0>)
 8001698:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800169a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800169e:	603b      	str	r3, [r7, #0]
 80016a0:	683b      	ldr	r3, [r7, #0]

	GPIO_InitTypeDef PinConfig0;
	PinConfig0.Mode = GPIO_MODE_AF_PP;
 80016a2:	2302      	movs	r3, #2
 80016a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
	PinConfig0.Pull = GPIO_NOPULL;
 80016a6:	2300      	movs	r3, #0
 80016a8:	653b      	str	r3, [r7, #80]	@ 0x50
	PinConfig0.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80016aa:	2301      	movs	r3, #1
 80016ac:	657b      	str	r3, [r7, #84]	@ 0x54
	PinConfig0.Alternate = GPIO_AF5_SPI5;
 80016ae:	2305      	movs	r3, #5
 80016b0:	65bb      	str	r3, [r7, #88]	@ 0x58
	PinConfig0.Pin = GPIO_PIN_7;
 80016b2:	2380      	movs	r3, #128	@ 0x80
 80016b4:	64bb      	str	r3, [r7, #72]	@ 0x48
	HAL_GPIO_Init(GPIOF, &PinConfig0);
 80016b6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80016ba:	4619      	mov	r1, r3
 80016bc:	484b      	ldr	r0, [pc, #300]	@ (80017ec <Gyro_Init+0x1a4>)
 80016be:	f002 faa5 	bl	8003c0c <HAL_GPIO_Init>

	GPIO_InitTypeDef PinConfig1;
	PinConfig1.Mode = GPIO_MODE_AF_PP;
 80016c2:	2302      	movs	r3, #2
 80016c4:	63bb      	str	r3, [r7, #56]	@ 0x38
	PinConfig1.Pull = GPIO_NOPULL;
 80016c6:	2300      	movs	r3, #0
 80016c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
	PinConfig1.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80016ca:	2301      	movs	r3, #1
 80016cc:	643b      	str	r3, [r7, #64]	@ 0x40
	PinConfig1.Alternate = GPIO_AF5_SPI5;
 80016ce:	2305      	movs	r3, #5
 80016d0:	647b      	str	r3, [r7, #68]	@ 0x44
	PinConfig1.Pin = GPIO_PIN_8;
 80016d2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016d6:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(GPIOF, &PinConfig1);
 80016d8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80016dc:	4619      	mov	r1, r3
 80016de:	4843      	ldr	r0, [pc, #268]	@ (80017ec <Gyro_Init+0x1a4>)
 80016e0:	f002 fa94 	bl	8003c0c <HAL_GPIO_Init>

	GPIO_InitTypeDef PinConfig2;
	PinConfig2.Mode = GPIO_MODE_AF_PP;
 80016e4:	2302      	movs	r3, #2
 80016e6:	627b      	str	r3, [r7, #36]	@ 0x24
	PinConfig2.Pull = GPIO_NOPULL;
 80016e8:	2300      	movs	r3, #0
 80016ea:	62bb      	str	r3, [r7, #40]	@ 0x28
	PinConfig2.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80016ec:	2301      	movs	r3, #1
 80016ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
	PinConfig2.Alternate = GPIO_AF5_SPI5;
 80016f0:	2305      	movs	r3, #5
 80016f2:	633b      	str	r3, [r7, #48]	@ 0x30
	PinConfig2.Pin = GPIO_PIN_9;
 80016f4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80016f8:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOF, &PinConfig2);
 80016fa:	f107 0320 	add.w	r3, r7, #32
 80016fe:	4619      	mov	r1, r3
 8001700:	483a      	ldr	r0, [pc, #232]	@ (80017ec <Gyro_Init+0x1a4>)
 8001702:	f002 fa83 	bl	8003c0c <HAL_GPIO_Init>

	GPIO_InitTypeDef PinConfig3;
	PinConfig3.Mode = GPIO_MODE_OUTPUT_PP;
 8001706:	2301      	movs	r3, #1
 8001708:	613b      	str	r3, [r7, #16]
	PinConfig3.Pull = GPIO_NOPULL;
 800170a:	2300      	movs	r3, #0
 800170c:	617b      	str	r3, [r7, #20]
	PinConfig3.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800170e:	2301      	movs	r3, #1
 8001710:	61bb      	str	r3, [r7, #24]
	PinConfig3.Pin = GPIO_PIN_1;
 8001712:	2302      	movs	r3, #2
 8001714:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOC, &PinConfig3);
 8001716:	f107 030c 	add.w	r3, r7, #12
 800171a:	4619      	mov	r1, r3
 800171c:	4834      	ldr	r0, [pc, #208]	@ (80017f0 <Gyro_Init+0x1a8>)
 800171e:	f002 fa75 	bl	8003c0c <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 1);
 8001722:	2201      	movs	r2, #1
 8001724:	2102      	movs	r1, #2
 8001726:	4832      	ldr	r0, [pc, #200]	@ (80017f0 <Gyro_Init+0x1a8>)
 8001728:	f002 fd40 	bl	80041ac <HAL_GPIO_WritePin>

	hspi5.Instance = SPI5;
 800172c:	4b31      	ldr	r3, [pc, #196]	@ (80017f4 <Gyro_Init+0x1ac>)
 800172e:	4a32      	ldr	r2, [pc, #200]	@ (80017f8 <Gyro_Init+0x1b0>)
 8001730:	601a      	str	r2, [r3, #0]
	hspi5.Init.Mode = SPI_MODE_MASTER;
 8001732:	4b30      	ldr	r3, [pc, #192]	@ (80017f4 <Gyro_Init+0x1ac>)
 8001734:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001738:	605a      	str	r2, [r3, #4]
	hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800173a:	4b2e      	ldr	r3, [pc, #184]	@ (80017f4 <Gyro_Init+0x1ac>)
 800173c:	2200      	movs	r2, #0
 800173e:	609a      	str	r2, [r3, #8]
	hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001740:	4b2c      	ldr	r3, [pc, #176]	@ (80017f4 <Gyro_Init+0x1ac>)
 8001742:	2200      	movs	r2, #0
 8001744:	60da      	str	r2, [r3, #12]
	hspi5.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001746:	4b2b      	ldr	r3, [pc, #172]	@ (80017f4 <Gyro_Init+0x1ac>)
 8001748:	2202      	movs	r2, #2
 800174a:	611a      	str	r2, [r3, #16]
	hspi5.Init.CLKPhase = SPI_PHASE_2EDGE;
 800174c:	4b29      	ldr	r3, [pc, #164]	@ (80017f4 <Gyro_Init+0x1ac>)
 800174e:	2201      	movs	r2, #1
 8001750:	615a      	str	r2, [r3, #20]
	hspi5.Init.NSS = SPI_NSS_SOFT;
 8001752:	4b28      	ldr	r3, [pc, #160]	@ (80017f4 <Gyro_Init+0x1ac>)
 8001754:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001758:	619a      	str	r2, [r3, #24]
	hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800175a:	4b26      	ldr	r3, [pc, #152]	@ (80017f4 <Gyro_Init+0x1ac>)
 800175c:	2210      	movs	r2, #16
 800175e:	61da      	str	r2, [r3, #28]
	hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001760:	4b24      	ldr	r3, [pc, #144]	@ (80017f4 <Gyro_Init+0x1ac>)
 8001762:	2200      	movs	r2, #0
 8001764:	621a      	str	r2, [r3, #32]
	hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001766:	4b23      	ldr	r3, [pc, #140]	@ (80017f4 <Gyro_Init+0x1ac>)
 8001768:	2200      	movs	r2, #0
 800176a:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_Status = HAL_SPI_Init(&hspi5);
 800176c:	4821      	ldr	r0, [pc, #132]	@ (80017f4 <Gyro_Init+0x1ac>)
 800176e:	f004 feeb 	bl	8006548 <HAL_SPI_Init>
 8001772:	4603      	mov	r3, r0
 8001774:	461a      	mov	r2, r3
 8001776:	4b21      	ldr	r3, [pc, #132]	@ (80017fc <Gyro_Init+0x1b4>)
 8001778:	701a      	strb	r2, [r3, #0]

	Gyro_Power();
 800177a:	f000 f85d 	bl	8001838 <Gyro_Power>
	uint8_t CR5_Config = 0;
 800177e:	2300      	movs	r3, #0
 8001780:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	CR5_Config |= (GYRO_CR5_REBOOTMEMCONTENT);
 8001784:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8001788:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800178c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	CR5_Config |= (GYRO_CR5_FIFO);
 8001790:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8001794:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001798:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	Gyro_ConfigureReg(GYRO_CR5, CR5_Config);
 800179c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80017a0:	4619      	mov	r1, r3
 80017a2:	2024      	movs	r0, #36	@ 0x24
 80017a4:	f000 f85e 	bl	8001864 <Gyro_ConfigureReg>
	uint8_t CR1_Config = 0;
 80017a8:	2300      	movs	r3, #0
 80017aa:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
	CR1_Config |= GYRO_CR1_POWERDOWN_NORMAL_ENABLE;
 80017ae:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 80017b2:	f043 0308 	orr.w	r3, r3, #8
 80017b6:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
	CR1_Config |= GYRO_CR1_BANDWIDTH_SET;
 80017ba:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 80017be:	f043 0310 	orr.w	r3, r3, #16
 80017c2:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
	CR1_Config |= GYRO_CR1_Y_ENABLE;
 80017c6:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 80017ca:	f043 0302 	orr.w	r3, r3, #2
 80017ce:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
	Gyro_ConfigureReg(GYRO_CR1, CR1_Config);
 80017d2:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 80017d6:	4619      	mov	r1, r3
 80017d8:	2020      	movs	r0, #32
 80017da:	f000 f843 	bl	8001864 <Gyro_ConfigureReg>
}
 80017de:	bf00      	nop
 80017e0:	3760      	adds	r7, #96	@ 0x60
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	40023800 	.word	0x40023800
 80017ec:	40021400 	.word	0x40021400
 80017f0:	40020800 	.word	0x40020800
 80017f4:	20000088 	.word	0x20000088
 80017f8:	40015000 	.word	0x40015000
 80017fc:	20000084 	.word	0x20000084

08001800 <Gyro_GetYLoc>:
int16_t Gyro_GetYLoc(){
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
	uint8_t yLow = Gyro_ReadReg(GYRO_OUT_Y_L);
 8001806:	202a      	movs	r0, #42	@ 0x2a
 8001808:	f000 f854 	bl	80018b4 <Gyro_ReadReg>
 800180c:	4603      	mov	r3, r0
 800180e:	71fb      	strb	r3, [r7, #7]
	uint16_t yHigh = Gyro_ReadReg(GYRO_OUT_Y_H);
 8001810:	202b      	movs	r0, #43	@ 0x2b
 8001812:	f000 f84f 	bl	80018b4 <Gyro_ReadReg>
 8001816:	4603      	mov	r3, r0
 8001818:	80bb      	strh	r3, [r7, #4]
	yHigh = yHigh << 8;
 800181a:	88bb      	ldrh	r3, [r7, #4]
 800181c:	021b      	lsls	r3, r3, #8
 800181e:	80bb      	strh	r3, [r7, #4]
	int16_t yLoc = (int16_t)(yLow | yHigh);
 8001820:	79fb      	ldrb	r3, [r7, #7]
 8001822:	b29a      	uxth	r2, r3
 8001824:	88bb      	ldrh	r3, [r7, #4]
 8001826:	4313      	orrs	r3, r2
 8001828:	b29b      	uxth	r3, r3
 800182a:	807b      	strh	r3, [r7, #2]
	return yLoc;
 800182c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
}
 8001830:	4618      	mov	r0, r3
 8001832:	3708      	adds	r7, #8
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}

08001838 <Gyro_Power>:
void Gyro_GetPrintID	(){
	uint8_t ID = Gyro_ReadReg(GYRO_WHO_AM_I);
	printf("Gyro ID: 0x%02X\n", ID);
}

void Gyro_Power(){
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
	uint8_t CR1_Config = 0;
 800183e:	2300      	movs	r3, #0
 8001840:	71fb      	strb	r3, [r7, #7]
	CR1_Config |= GYRO_CR1_POWERDOWN_NORMAL_ENABLE;
 8001842:	79fb      	ldrb	r3, [r7, #7]
 8001844:	f043 0308 	orr.w	r3, r3, #8
 8001848:	71fb      	strb	r3, [r7, #7]
	Gyro_ConfigureReg(GYRO_CR1, CR1_Config);
 800184a:	79fb      	ldrb	r3, [r7, #7]
 800184c:	4619      	mov	r1, r3
 800184e:	2020      	movs	r0, #32
 8001850:	f000 f808 	bl	8001864 <Gyro_ConfigureReg>
	HAL_Delay(100);
 8001854:	2064      	movs	r0, #100	@ 0x64
 8001856:	f002 f871 	bl	800393c <HAL_Delay>
}
 800185a:	bf00      	nop
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
	...

08001864 <Gyro_ConfigureReg>:
void Gyro_GetPrintTemp(){
	uint8_t Temp = Gyro_ReadReg(GYRO_OUT_TEMP);
	printf("Temperature: %d\n", Temp);
}

void Gyro_ConfigureReg(uint16_t Reg, uint8_t data){
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	4603      	mov	r3, r0
 800186c:	460a      	mov	r2, r1
 800186e:	80fb      	strh	r3, [r7, #6]
 8001870:	4613      	mov	r3, r2
 8001872:	717b      	strb	r3, [r7, #5]
	uint16_t package = 0;
 8001874:	2300      	movs	r3, #0
 8001876:	81fb      	strh	r3, [r7, #14]
	package = SPI_WRITE | Reg ;
 8001878:	88fb      	ldrh	r3, [r7, #6]
 800187a:	81fb      	strh	r3, [r7, #14]
	package |= (data << SPI_DATA_OFFSET);
 800187c:	797b      	ldrb	r3, [r7, #5]
 800187e:	b21b      	sxth	r3, r3
 8001880:	021b      	lsls	r3, r3, #8
 8001882:	b21a      	sxth	r2, r3
 8001884:	89fb      	ldrh	r3, [r7, #14]
 8001886:	b21b      	sxth	r3, r3
 8001888:	4313      	orrs	r3, r2
 800188a:	b21b      	sxth	r3, r3
 800188c:	b29b      	uxth	r3, r3
 800188e:	81fb      	strh	r3, [r7, #14]
	Gyro_EnableSlaveConnection();
 8001890:	f000 f85a 	bl	8001948 <Gyro_EnableSlaveConnection>

	HAL_SPI_Transmit(&hspi5, (uint8_t*) &package, 2, timeout);
 8001894:	f107 010e 	add.w	r1, r7, #14
 8001898:	f640 2328 	movw	r3, #2600	@ 0xa28
 800189c:	2202      	movs	r2, #2
 800189e:	4804      	ldr	r0, [pc, #16]	@ (80018b0 <Gyro_ConfigureReg+0x4c>)
 80018a0:	f004 ff03 	bl	80066aa <HAL_SPI_Transmit>

	Gyro_DisableSlaveConnection();
 80018a4:	f000 f85c 	bl	8001960 <Gyro_DisableSlaveConnection>

}
 80018a8:	bf00      	nop
 80018aa:	3710      	adds	r7, #16
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	20000088 	.word	0x20000088

080018b4 <Gyro_ReadReg>:

uint16_t Gyro_ReadReg(uint16_t Reg){
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b086      	sub	sp, #24
 80018b8:	af02      	add	r7, sp, #8
 80018ba:	4603      	mov	r3, r0
 80018bc:	80fb      	strh	r3, [r7, #6]
	uint8_t package = 0;
 80018be:	2300      	movs	r3, #0
 80018c0:	737b      	strb	r3, [r7, #13]
	package = SPI_READ | Reg;
 80018c2:	88fb      	ldrh	r3, [r7, #6]
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	737b      	strb	r3, [r7, #13]
	uint16_t data = 0;
 80018ce:	2300      	movs	r3, #0
 80018d0:	817b      	strh	r3, [r7, #10]
	Gyro_EnableSlaveConnection();
 80018d2:	f000 f839 	bl	8001948 <Gyro_EnableSlaveConnection>

	while (HAL_GPIO_ReadPin(GYRO_CS_PORT, GYRO_CS_PIN) != GPIO_PIN_RESET);
 80018d6:	bf00      	nop
 80018d8:	2102      	movs	r1, #2
 80018da:	4810      	ldr	r0, [pc, #64]	@ (800191c <Gyro_ReadReg+0x68>)
 80018dc:	f002 fc4e 	bl	800417c <HAL_GPIO_ReadPin>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d1f8      	bne.n	80018d8 <Gyro_ReadReg+0x24>
	HAL_Status = HAL_SPI_TransmitReceive(&hspi5, &package,(uint8_t*) &data, 2, timeout);
 80018e6:	f107 020a 	add.w	r2, r7, #10
 80018ea:	f107 010d 	add.w	r1, r7, #13
 80018ee:	f640 2328 	movw	r3, #2600	@ 0xa28
 80018f2:	9300      	str	r3, [sp, #0]
 80018f4:	2302      	movs	r3, #2
 80018f6:	480a      	ldr	r0, [pc, #40]	@ (8001920 <Gyro_ReadReg+0x6c>)
 80018f8:	f005 f81b 	bl	8006932 <HAL_SPI_TransmitReceive>
 80018fc:	4603      	mov	r3, r0
 80018fe:	461a      	mov	r2, r3
 8001900:	4b08      	ldr	r3, [pc, #32]	@ (8001924 <Gyro_ReadReg+0x70>)
 8001902:	701a      	strb	r2, [r3, #0]
	Gyro_VerifyHAL();
 8001904:	f000 f810 	bl	8001928 <Gyro_VerifyHAL>
	uint16_t DataReturned = (0xFF00 & data) >> 8;
 8001908:	897b      	ldrh	r3, [r7, #10]
 800190a:	0a1b      	lsrs	r3, r3, #8
 800190c:	81fb      	strh	r3, [r7, #14]
	Gyro_DisableSlaveConnection();
 800190e:	f000 f827 	bl	8001960 <Gyro_DisableSlaveConnection>
	return DataReturned;
 8001912:	89fb      	ldrh	r3, [r7, #14]

}
 8001914:	4618      	mov	r0, r3
 8001916:	3710      	adds	r7, #16
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	40020800 	.word	0x40020800
 8001920:	20000088 	.word	0x20000088
 8001924:	20000084 	.word	0x20000084

08001928 <Gyro_VerifyHAL>:

void Gyro_VerifyHAL(){
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
	while(HAL_Status != HAL_OK);
 800192c:	bf00      	nop
 800192e:	4b05      	ldr	r3, [pc, #20]	@ (8001944 <Gyro_VerifyHAL+0x1c>)
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d1fb      	bne.n	800192e <Gyro_VerifyHAL+0x6>
}
 8001936:	bf00      	nop
 8001938:	bf00      	nop
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	20000084 	.word	0x20000084

08001948 <Gyro_EnableSlaveConnection>:

void Gyro_EnableSlaveConnection(){
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GYRO_CS_PORT, GYRO_CS_PIN, 0);
 800194c:	2200      	movs	r2, #0
 800194e:	2102      	movs	r1, #2
 8001950:	4802      	ldr	r0, [pc, #8]	@ (800195c <Gyro_EnableSlaveConnection+0x14>)
 8001952:	f002 fc2b 	bl	80041ac <HAL_GPIO_WritePin>
}
 8001956:	bf00      	nop
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	40020800 	.word	0x40020800

08001960 <Gyro_DisableSlaveConnection>:

void Gyro_DisableSlaveConnection(){
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GYRO_CS_PORT, GYRO_CS_PIN, 1);
 8001964:	2201      	movs	r2, #1
 8001966:	2102      	movs	r1, #2
 8001968:	4802      	ldr	r0, [pc, #8]	@ (8001974 <Gyro_DisableSlaveConnection+0x14>)
 800196a:	f002 fc1f 	bl	80041ac <HAL_GPIO_WritePin>
}
 800196e:	bf00      	nop
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	40020800 	.word	0x40020800

08001978 <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b08c      	sub	sp, #48	@ 0x30
 800197c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800197e:	2300      	movs	r3, #0
 8001980:	61bb      	str	r3, [r7, #24]
 8001982:	4b5a      	ldr	r3, [pc, #360]	@ (8001aec <LCD_GPIO_Init+0x174>)
 8001984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001986:	4a59      	ldr	r2, [pc, #356]	@ (8001aec <LCD_GPIO_Init+0x174>)
 8001988:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800198c:	6453      	str	r3, [r2, #68]	@ 0x44
 800198e:	4b57      	ldr	r3, [pc, #348]	@ (8001aec <LCD_GPIO_Init+0x174>)
 8001990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001992:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001996:	61bb      	str	r3, [r7, #24]
 8001998:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800199a:	2300      	movs	r3, #0
 800199c:	617b      	str	r3, [r7, #20]
 800199e:	4b53      	ldr	r3, [pc, #332]	@ (8001aec <LCD_GPIO_Init+0x174>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a2:	4a52      	ldr	r2, [pc, #328]	@ (8001aec <LCD_GPIO_Init+0x174>)
 80019a4:	f043 0301 	orr.w	r3, r3, #1
 80019a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019aa:	4b50      	ldr	r3, [pc, #320]	@ (8001aec <LCD_GPIO_Init+0x174>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ae:	f003 0301 	and.w	r3, r3, #1
 80019b2:	617b      	str	r3, [r7, #20]
 80019b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019b6:	2300      	movs	r3, #0
 80019b8:	613b      	str	r3, [r7, #16]
 80019ba:	4b4c      	ldr	r3, [pc, #304]	@ (8001aec <LCD_GPIO_Init+0x174>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019be:	4a4b      	ldr	r2, [pc, #300]	@ (8001aec <LCD_GPIO_Init+0x174>)
 80019c0:	f043 0302 	orr.w	r3, r3, #2
 80019c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019c6:	4b49      	ldr	r3, [pc, #292]	@ (8001aec <LCD_GPIO_Init+0x174>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ca:	f003 0302 	and.w	r3, r3, #2
 80019ce:	613b      	str	r3, [r7, #16]
 80019d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019d2:	2300      	movs	r3, #0
 80019d4:	60fb      	str	r3, [r7, #12]
 80019d6:	4b45      	ldr	r3, [pc, #276]	@ (8001aec <LCD_GPIO_Init+0x174>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019da:	4a44      	ldr	r2, [pc, #272]	@ (8001aec <LCD_GPIO_Init+0x174>)
 80019dc:	f043 0304 	orr.w	r3, r3, #4
 80019e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019e2:	4b42      	ldr	r3, [pc, #264]	@ (8001aec <LCD_GPIO_Init+0x174>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e6:	f003 0304 	and.w	r3, r3, #4
 80019ea:	60fb      	str	r3, [r7, #12]
 80019ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019ee:	2300      	movs	r3, #0
 80019f0:	60bb      	str	r3, [r7, #8]
 80019f2:	4b3e      	ldr	r3, [pc, #248]	@ (8001aec <LCD_GPIO_Init+0x174>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f6:	4a3d      	ldr	r2, [pc, #244]	@ (8001aec <LCD_GPIO_Init+0x174>)
 80019f8:	f043 0308 	orr.w	r3, r3, #8
 80019fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80019fe:	4b3b      	ldr	r3, [pc, #236]	@ (8001aec <LCD_GPIO_Init+0x174>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a02:	f003 0308 	and.w	r3, r3, #8
 8001a06:	60bb      	str	r3, [r7, #8]
 8001a08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	607b      	str	r3, [r7, #4]
 8001a0e:	4b37      	ldr	r3, [pc, #220]	@ (8001aec <LCD_GPIO_Init+0x174>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a12:	4a36      	ldr	r2, [pc, #216]	@ (8001aec <LCD_GPIO_Init+0x174>)
 8001a14:	f043 0320 	orr.w	r3, r3, #32
 8001a18:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a1a:	4b34      	ldr	r3, [pc, #208]	@ (8001aec <LCD_GPIO_Init+0x174>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a1e:	f003 0320 	and.w	r3, r3, #32
 8001a22:	607b      	str	r3, [r7, #4]
 8001a24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a26:	2300      	movs	r3, #0
 8001a28:	603b      	str	r3, [r7, #0]
 8001a2a:	4b30      	ldr	r3, [pc, #192]	@ (8001aec <LCD_GPIO_Init+0x174>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a2e:	4a2f      	ldr	r2, [pc, #188]	@ (8001aec <LCD_GPIO_Init+0x174>)
 8001a30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a34:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a36:	4b2d      	ldr	r3, [pc, #180]	@ (8001aec <LCD_GPIO_Init+0x174>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a3e:	603b      	str	r3, [r7, #0]
 8001a40:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8001a42:	f641 0358 	movw	r3, #6232	@ 0x1858
 8001a46:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8001a48:	2302      	movs	r3, #2
 8001a4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001a50:	2302      	movs	r3, #2
 8001a52:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8001a54:	230e      	movs	r3, #14
 8001a56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001a58:	f107 031c 	add.w	r3, r7, #28
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4824      	ldr	r0, [pc, #144]	@ (8001af0 <LCD_GPIO_Init+0x178>)
 8001a60:	f002 f8d4 	bl	8003c0c <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8001a64:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001a68:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001a6a:	f107 031c 	add.w	r3, r7, #28
 8001a6e:	4619      	mov	r1, r3
 8001a70:	4820      	ldr	r0, [pc, #128]	@ (8001af4 <LCD_GPIO_Init+0x17c>)
 8001a72:	f002 f8cb 	bl	8003c0c <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8001a76:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8001a7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001a7c:	f107 031c 	add.w	r3, r7, #28
 8001a80:	4619      	mov	r1, r3
 8001a82:	481d      	ldr	r0, [pc, #116]	@ (8001af8 <LCD_GPIO_Init+0x180>)
 8001a84:	f002 f8c2 	bl	8003c0c <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8001a88:	2348      	movs	r3, #72	@ 0x48
 8001a8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001a8c:	f107 031c 	add.w	r3, r7, #28
 8001a90:	4619      	mov	r1, r3
 8001a92:	481a      	ldr	r0, [pc, #104]	@ (8001afc <LCD_GPIO_Init+0x184>)
 8001a94:	f002 f8ba 	bl	8003c0c <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8001a98:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a9c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8001a9e:	f107 031c 	add.w	r3, r7, #28
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	4816      	ldr	r0, [pc, #88]	@ (8001b00 <LCD_GPIO_Init+0x188>)
 8001aa6:	f002 f8b1 	bl	8003c0c <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8001aaa:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8001aae:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001ab0:	f107 031c 	add.w	r3, r7, #28
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	4813      	ldr	r0, [pc, #76]	@ (8001b04 <LCD_GPIO_Init+0x18c>)
 8001ab8:	f002 f8a8 	bl	8003c0c <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8001abc:	2303      	movs	r3, #3
 8001abe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8001ac0:	2309      	movs	r3, #9
 8001ac2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001ac4:	f107 031c 	add.w	r3, r7, #28
 8001ac8:	4619      	mov	r1, r3
 8001aca:	480a      	ldr	r0, [pc, #40]	@ (8001af4 <LCD_GPIO_Init+0x17c>)
 8001acc:	f002 f89e 	bl	8003c0c <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8001ad0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001ad4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001ad6:	f107 031c 	add.w	r3, r7, #28
 8001ada:	4619      	mov	r1, r3
 8001adc:	4809      	ldr	r0, [pc, #36]	@ (8001b04 <LCD_GPIO_Init+0x18c>)
 8001ade:	f002 f895 	bl	8003c0c <HAL_GPIO_Init>
}
 8001ae2:	bf00      	nop
 8001ae4:	3730      	adds	r7, #48	@ 0x30
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	40023800 	.word	0x40023800
 8001af0:	40020000 	.word	0x40020000
 8001af4:	40020400 	.word	0x40020400
 8001af8:	40020800 	.word	0x40020800
 8001afc:	40020c00 	.word	0x40020c00
 8001b00:	40021400 	.word	0x40021400
 8001b04:	40021800 	.word	0x40021800

08001b08 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b090      	sub	sp, #64	@ 0x40
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 8001b12:	2300      	movs	r3, #0
 8001b14:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 8001b16:	23f0      	movs	r3, #240	@ 0xf0
 8001b18:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 8001b1e:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001b22:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 8001b24:	2302      	movs	r3, #2
 8001b26:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8001b28:	23ff      	movs	r3, #255	@ 0xff
 8001b2a:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001b30:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b34:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001b36:	2305      	movs	r3, #5
 8001b38:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 8001b3a:	79fb      	ldrb	r3, [r7, #7]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d101      	bne.n	8001b44 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 8001b40:	4b0f      	ldr	r3, [pc, #60]	@ (8001b80 <LTCD_Layer_Init+0x78>)
 8001b42:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 8001b44:	23f0      	movs	r3, #240	@ 0xf0
 8001b46:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8001b48:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001b4c:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8001b54:	2300      	movs	r3, #0
 8001b56:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 8001b60:	79fa      	ldrb	r2, [r7, #7]
 8001b62:	f107 030c 	add.w	r3, r7, #12
 8001b66:	4619      	mov	r1, r3
 8001b68:	4806      	ldr	r0, [pc, #24]	@ (8001b84 <LTCD_Layer_Init+0x7c>)
 8001b6a:	f003 fca9 	bl	80054c0 <HAL_LTDC_ConfigLayer>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 8001b74:	f000 f9aa 	bl	8001ecc <LCD_Error_Handler>
	}
}
 8001b78:	bf00      	nop
 8001b7a:	3740      	adds	r7, #64	@ 0x40
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	200001bc 	.word	0x200001bc
 8001b84:	200000e0 	.word	0x200000e0

08001b88 <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 8001b8c:	4b2a      	ldr	r3, [pc, #168]	@ (8001c38 <LTCD__Init+0xb0>)
 8001b8e:	4a2b      	ldr	r2, [pc, #172]	@ (8001c3c <LTCD__Init+0xb4>)
 8001b90:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 8001b92:	4b29      	ldr	r3, [pc, #164]	@ (8001c38 <LTCD__Init+0xb0>)
 8001b94:	2209      	movs	r2, #9
 8001b96:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 8001b98:	4b27      	ldr	r3, [pc, #156]	@ (8001c38 <LTCD__Init+0xb0>)
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 8001b9e:	4b26      	ldr	r3, [pc, #152]	@ (8001c38 <LTCD__Init+0xb0>)
 8001ba0:	221d      	movs	r2, #29
 8001ba2:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8001ba4:	4b24      	ldr	r3, [pc, #144]	@ (8001c38 <LTCD__Init+0xb0>)
 8001ba6:	2203      	movs	r2, #3
 8001ba8:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 8001baa:	4b23      	ldr	r3, [pc, #140]	@ (8001c38 <LTCD__Init+0xb0>)
 8001bac:	f240 120d 	movw	r2, #269	@ 0x10d
 8001bb0:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 8001bb2:	4b21      	ldr	r3, [pc, #132]	@ (8001c38 <LTCD__Init+0xb0>)
 8001bb4:	f240 1243 	movw	r2, #323	@ 0x143
 8001bb8:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 8001bba:	4b1f      	ldr	r3, [pc, #124]	@ (8001c38 <LTCD__Init+0xb0>)
 8001bbc:	f240 1217 	movw	r2, #279	@ 0x117
 8001bc0:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 8001bc2:	4b1d      	ldr	r3, [pc, #116]	@ (8001c38 <LTCD__Init+0xb0>)
 8001bc4:	f240 1247 	movw	r2, #327	@ 0x147
 8001bc8:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 8001bca:	4b1b      	ldr	r3, [pc, #108]	@ (8001c38 <LTCD__Init+0xb0>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 8001bd2:	4b19      	ldr	r3, [pc, #100]	@ (8001c38 <LTCD__Init+0xb0>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 8001bda:	4b17      	ldr	r3, [pc, #92]	@ (8001c38 <LTCD__Init+0xb0>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001be2:	4b17      	ldr	r3, [pc, #92]	@ (8001c40 <LTCD__Init+0xb8>)
 8001be4:	2208      	movs	r2, #8
 8001be6:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001be8:	4b15      	ldr	r3, [pc, #84]	@ (8001c40 <LTCD__Init+0xb8>)
 8001bea:	22c0      	movs	r2, #192	@ 0xc0
 8001bec:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8001bee:	4b14      	ldr	r3, [pc, #80]	@ (8001c40 <LTCD__Init+0xb8>)
 8001bf0:	2204      	movs	r2, #4
 8001bf2:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001bf4:	4b12      	ldr	r3, [pc, #72]	@ (8001c40 <LTCD__Init+0xb8>)
 8001bf6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001bfa:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8001bfc:	4810      	ldr	r0, [pc, #64]	@ (8001c40 <LTCD__Init+0xb8>)
 8001bfe:	f004 fab9 	bl	8006174 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001c02:	4b0d      	ldr	r3, [pc, #52]	@ (8001c38 <LTCD__Init+0xb0>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001c08:	4b0b      	ldr	r3, [pc, #44]	@ (8001c38 <LTCD__Init+0xb0>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001c0e:	4b0a      	ldr	r3, [pc, #40]	@ (8001c38 <LTCD__Init+0xb0>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001c14:	4b08      	ldr	r3, [pc, #32]	@ (8001c38 <LTCD__Init+0xb0>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 8001c1a:	f7ff fead 	bl	8001978 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001c1e:	4806      	ldr	r0, [pc, #24]	@ (8001c38 <LTCD__Init+0xb0>)
 8001c20:	f003 fb7e 	bl	8005320 <HAL_LTDC_Init>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 8001c2a:	f000 f94f 	bl	8001ecc <LCD_Error_Handler>
	 }

	ili9341_Init();
 8001c2e:	f000 f96a 	bl	8001f06 <ili9341_Init>
}
 8001c32:	bf00      	nop
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	200000e0 	.word	0x200000e0
 8001c3c:	40016800 	.word	0x40016800
 8001c40:	20000188 	.word	0x20000188

08001c44 <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	80fb      	strh	r3, [r7, #6]
 8001c4e:	460b      	mov	r3, r1
 8001c50:	80bb      	strh	r3, [r7, #4]
 8001c52:	4613      	mov	r3, r2
 8001c54:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 8001c56:	88ba      	ldrh	r2, [r7, #4]
 8001c58:	4613      	mov	r3, r2
 8001c5a:	011b      	lsls	r3, r3, #4
 8001c5c:	1a9b      	subs	r3, r3, r2
 8001c5e:	011b      	lsls	r3, r3, #4
 8001c60:	461a      	mov	r2, r3
 8001c62:	88fb      	ldrh	r3, [r7, #6]
 8001c64:	4413      	add	r3, r2
 8001c66:	4905      	ldr	r1, [pc, #20]	@ (8001c7c <LCD_Draw_Pixel+0x38>)
 8001c68:	887a      	ldrh	r2, [r7, #2]
 8001c6a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8001c6e:	bf00      	nop
 8001c70:	370c      	adds	r7, #12
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	200001bc 	.word	0x200001bc

08001c80 <LCD_Draw_Circle_Fill>:
 * These functions are simple examples. Most computer graphics like OpenGl and stm's graphics library use a state machine. Where you first call some function like SetColor(color), SetPosition(x,y), then DrawSqure(size)
 * Instead all of these are explicit where color, size, and position are passed in.
 * There is tons of ways to handle drawing. I dont think it matters too much.
 */
void LCD_Draw_Circle_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t radius, uint16_t color)
{
 8001c80:	b590      	push	{r4, r7, lr}
 8001c82:	b085      	sub	sp, #20
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	4604      	mov	r4, r0
 8001c88:	4608      	mov	r0, r1
 8001c8a:	4611      	mov	r1, r2
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	4623      	mov	r3, r4
 8001c90:	80fb      	strh	r3, [r7, #6]
 8001c92:	4603      	mov	r3, r0
 8001c94:	80bb      	strh	r3, [r7, #4]
 8001c96:	460b      	mov	r3, r1
 8001c98:	807b      	strh	r3, [r7, #2]
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	803b      	strh	r3, [r7, #0]
    for(int16_t y=-radius; y<=radius; y++)
 8001c9e:	887b      	ldrh	r3, [r7, #2]
 8001ca0:	425b      	negs	r3, r3
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	81fb      	strh	r3, [r7, #14]
 8001ca6:	e034      	b.n	8001d12 <LCD_Draw_Circle_Fill+0x92>
    {
        for(int16_t x=-radius; x<=radius; x++)
 8001ca8:	887b      	ldrh	r3, [r7, #2]
 8001caa:	425b      	negs	r3, r3
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	81bb      	strh	r3, [r7, #12]
 8001cb0:	e024      	b.n	8001cfc <LCD_Draw_Circle_Fill+0x7c>
        {
            if(x*x+y*y <= radius*radius)
 8001cb2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001cb6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001cba:	fb03 f202 	mul.w	r2, r3, r2
 8001cbe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001cc2:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8001cc6:	fb01 f303 	mul.w	r3, r1, r3
 8001cca:	441a      	add	r2, r3
 8001ccc:	887b      	ldrh	r3, [r7, #2]
 8001cce:	8879      	ldrh	r1, [r7, #2]
 8001cd0:	fb01 f303 	mul.w	r3, r1, r3
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	dc0b      	bgt.n	8001cf0 <LCD_Draw_Circle_Fill+0x70>
            {
            	LCD_Draw_Pixel(x+Xpos, y+Ypos, color);
 8001cd8:	89ba      	ldrh	r2, [r7, #12]
 8001cda:	88fb      	ldrh	r3, [r7, #6]
 8001cdc:	4413      	add	r3, r2
 8001cde:	b298      	uxth	r0, r3
 8001ce0:	89fa      	ldrh	r2, [r7, #14]
 8001ce2:	88bb      	ldrh	r3, [r7, #4]
 8001ce4:	4413      	add	r3, r2
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	883a      	ldrh	r2, [r7, #0]
 8001cea:	4619      	mov	r1, r3
 8001cec:	f7ff ffaa 	bl	8001c44 <LCD_Draw_Pixel>
        for(int16_t x=-radius; x<=radius; x++)
 8001cf0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001cf4:	b29b      	uxth	r3, r3
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	b29b      	uxth	r3, r3
 8001cfa:	81bb      	strh	r3, [r7, #12]
 8001cfc:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001d00:	887b      	ldrh	r3, [r7, #2]
 8001d02:	429a      	cmp	r2, r3
 8001d04:	ddd5      	ble.n	8001cb2 <LCD_Draw_Circle_Fill+0x32>
    for(int16_t y=-radius; y<=radius; y++)
 8001d06:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	b29b      	uxth	r3, r3
 8001d10:	81fb      	strh	r3, [r7, #14]
 8001d12:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001d16:	887b      	ldrh	r3, [r7, #2]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	ddc5      	ble.n	8001ca8 <LCD_Draw_Circle_Fill+0x28>
            }
        }
    }
}
 8001d1c:	bf00      	nop
 8001d1e:	bf00      	nop
 8001d20:	3714      	adds	r7, #20
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd90      	pop	{r4, r7, pc}
	...

08001d28 <LCD_Clear>:
	  LCD_Draw_Pixel(x, i+y, color);
  }
}

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b085      	sub	sp, #20
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	4603      	mov	r3, r0
 8001d30:	460a      	mov	r2, r1
 8001d32:	71fb      	strb	r3, [r7, #7]
 8001d34:	4613      	mov	r3, r2
 8001d36:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 8001d38:	79fb      	ldrb	r3, [r7, #7]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d10e      	bne.n	8001d5c <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8001d3e:	2300      	movs	r3, #0
 8001d40:	60fb      	str	r3, [r7, #12]
 8001d42:	e007      	b.n	8001d54 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 8001d44:	4908      	ldr	r1, [pc, #32]	@ (8001d68 <LCD_Clear+0x40>)
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	88ba      	ldrh	r2, [r7, #4]
 8001d4a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	3301      	adds	r3, #1
 8001d52:	60fb      	str	r3, [r7, #12]
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8001d5a:	d3f3      	bcc.n	8001d44 <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 8001d5c:	bf00      	nop
 8001d5e:	3714      	adds	r7, #20
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr
 8001d68:	200001bc 	.word	0x200001bc

08001d6c <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	4603      	mov	r3, r0
 8001d74:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 8001d76:	4a04      	ldr	r2, [pc, #16]	@ (8001d88 <LCD_SetTextColor+0x1c>)
 8001d78:	88fb      	ldrh	r3, [r7, #6]
 8001d7a:	8013      	strh	r3, [r2, #0]
}
 8001d7c:	bf00      	nop
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr
 8001d88:	20000002 	.word	0x20000002

08001d8c <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8001d94:	4a04      	ldr	r2, [pc, #16]	@ (8001da8 <LCD_SetFont+0x1c>)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6013      	str	r3, [r2, #0]
}
 8001d9a:	bf00      	nop
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	200001b8 	.word	0x200001b8

08001dac <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	4603      	mov	r3, r0
 8001db4:	603a      	str	r2, [r7, #0]
 8001db6:	80fb      	strh	r3, [r7, #6]
 8001db8:	460b      	mov	r3, r1
 8001dba:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	60fb      	str	r3, [r7, #12]
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	60fb      	str	r3, [r7, #12]
 8001dc8:	e04c      	b.n	8001e64 <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8001dca:	2300      	movs	r3, #0
 8001dcc:	60bb      	str	r3, [r7, #8]
 8001dce:	e03f      	b.n	8001e50 <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	005b      	lsls	r3, r3, #1
 8001dd4:	683a      	ldr	r2, [r7, #0]
 8001dd6:	4413      	add	r3, r2
 8001dd8:	881b      	ldrh	r3, [r3, #0]
 8001dda:	4619      	mov	r1, r3
 8001ddc:	4b27      	ldr	r3, [pc, #156]	@ (8001e7c <LCD_Draw_Char+0xd0>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	889b      	ldrh	r3, [r3, #4]
 8001de2:	4a27      	ldr	r2, [pc, #156]	@ (8001e80 <LCD_Draw_Char+0xd4>)
 8001de4:	fba2 2303 	umull	r2, r3, r2, r3
 8001de8:	08db      	lsrs	r3, r3, #3
 8001dea:	b29b      	uxth	r3, r3
 8001dec:	00db      	lsls	r3, r3, #3
 8001dee:	2280      	movs	r2, #128	@ 0x80
 8001df0:	409a      	lsls	r2, r3
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	fa42 f303 	asr.w	r3, r2, r3
 8001df8:	400b      	ands	r3, r1
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d104      	bne.n	8001e08 <LCD_Draw_Char+0x5c>
 8001dfe:	4b1f      	ldr	r3, [pc, #124]	@ (8001e7c <LCD_Draw_Char+0xd0>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	889b      	ldrh	r3, [r3, #4]
 8001e04:	2b0c      	cmp	r3, #12
 8001e06:	d920      	bls.n	8001e4a <LCD_Draw_Char+0x9e>
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	005b      	lsls	r3, r3, #1
 8001e0c:	683a      	ldr	r2, [r7, #0]
 8001e0e:	4413      	add	r3, r2
 8001e10:	881b      	ldrh	r3, [r3, #0]
 8001e12:	461a      	mov	r2, r3
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	fa42 f303 	asr.w	r3, r2, r3
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d104      	bne.n	8001e2c <LCD_Draw_Char+0x80>
 8001e22:	4b16      	ldr	r3, [pc, #88]	@ (8001e7c <LCD_Draw_Char+0xd0>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	889b      	ldrh	r3, [r3, #4]
 8001e28:	2b0c      	cmp	r3, #12
 8001e2a:	d80e      	bhi.n	8001e4a <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	b29a      	uxth	r2, r3
 8001e30:	88fb      	ldrh	r3, [r7, #6]
 8001e32:	4413      	add	r3, r2
 8001e34:	b298      	uxth	r0, r3
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	b29a      	uxth	r2, r3
 8001e3a:	88bb      	ldrh	r3, [r7, #4]
 8001e3c:	4413      	add	r3, r2
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	4a10      	ldr	r2, [pc, #64]	@ (8001e84 <LCD_Draw_Char+0xd8>)
 8001e42:	8812      	ldrh	r2, [r2, #0]
 8001e44:	4619      	mov	r1, r3
 8001e46:	f7ff fefd 	bl	8001c44 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	60bb      	str	r3, [r7, #8]
 8001e50:	4b0a      	ldr	r3, [pc, #40]	@ (8001e7c <LCD_Draw_Char+0xd0>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	889b      	ldrh	r3, [r3, #4]
 8001e56:	461a      	mov	r2, r3
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d3b8      	bcc.n	8001dd0 <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	3301      	adds	r3, #1
 8001e62:	60fb      	str	r3, [r7, #12]
 8001e64:	4b05      	ldr	r3, [pc, #20]	@ (8001e7c <LCD_Draw_Char+0xd0>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	88db      	ldrh	r3, [r3, #6]
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d3ab      	bcc.n	8001dca <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 8001e72:	bf00      	nop
 8001e74:	bf00      	nop
 8001e76:	3710      	adds	r7, #16
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	200001b8 	.word	0x200001b8
 8001e80:	aaaaaaab 	.word	0xaaaaaaab
 8001e84:	20000002 	.word	0x20000002

08001e88 <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	4603      	mov	r3, r0
 8001e90:	80fb      	strh	r3, [r7, #6]
 8001e92:	460b      	mov	r3, r1
 8001e94:	80bb      	strh	r3, [r7, #4]
 8001e96:	4613      	mov	r3, r2
 8001e98:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8001e9a:	78fb      	ldrb	r3, [r7, #3]
 8001e9c:	3b20      	subs	r3, #32
 8001e9e:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8001ea0:	4b09      	ldr	r3, [pc, #36]	@ (8001ec8 <LCD_DisplayChar+0x40>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	78fb      	ldrb	r3, [r7, #3]
 8001ea8:	4907      	ldr	r1, [pc, #28]	@ (8001ec8 <LCD_DisplayChar+0x40>)
 8001eaa:	6809      	ldr	r1, [r1, #0]
 8001eac:	88c9      	ldrh	r1, [r1, #6]
 8001eae:	fb01 f303 	mul.w	r3, r1, r3
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	441a      	add	r2, r3
 8001eb6:	88b9      	ldrh	r1, [r7, #4]
 8001eb8:	88fb      	ldrh	r3, [r7, #6]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7ff ff76 	bl	8001dac <LCD_Draw_Char>
}
 8001ec0:	bf00      	nop
 8001ec2:	3708      	adds	r7, #8
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	200001b8 	.word	0x200001b8

08001ecc <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ed0:	b672      	cpsid	i
}
 8001ed2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ed4:	bf00      	nop
 8001ed6:	e7fd      	b.n	8001ed4 <LCD_Error_Handler+0x8>

08001ed8 <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 8001edc:	f001 f92d 	bl	800313a <STMPE811_Init>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d001      	beq.n	8001eea <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialzation
 8001ee6:	bf00      	nop
 8001ee8:	e7fd      	b.n	8001ee6 <InitializeLCDTouch+0xe>
  }
}
 8001eea:	bf00      	nop
 8001eec:	bd80      	pop	{r7, pc}

08001eee <returnTouchStateAndLocation>:

STMPE811_State_t returnTouchStateAndLocation(STMPE811_TouchData * touchStruct)
{
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b082      	sub	sp, #8
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
	return STMPE811_ReadTouch(touchStruct);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f001 f9d7 	bl	80032aa <STMPE811_ReadTouch>
 8001efc:	4603      	mov	r3, r0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001f0a:	f000 f9ff 	bl	800230c <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 8001f0e:	20ca      	movs	r0, #202	@ 0xca
 8001f10:	f000 f943 	bl	800219a <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 8001f14:	20c3      	movs	r0, #195	@ 0xc3
 8001f16:	f000 f94d 	bl	80021b4 <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 8001f1a:	2008      	movs	r0, #8
 8001f1c:	f000 f94a 	bl	80021b4 <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 8001f20:	2050      	movs	r0, #80	@ 0x50
 8001f22:	f000 f947 	bl	80021b4 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 8001f26:	20cf      	movs	r0, #207	@ 0xcf
 8001f28:	f000 f937 	bl	800219a <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 8001f2c:	2000      	movs	r0, #0
 8001f2e:	f000 f941 	bl	80021b4 <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8001f32:	20c1      	movs	r0, #193	@ 0xc1
 8001f34:	f000 f93e 	bl	80021b4 <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 8001f38:	2030      	movs	r0, #48	@ 0x30
 8001f3a:	f000 f93b 	bl	80021b4 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 8001f3e:	20ed      	movs	r0, #237	@ 0xed
 8001f40:	f000 f92b 	bl	800219a <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 8001f44:	2064      	movs	r0, #100	@ 0x64
 8001f46:	f000 f935 	bl	80021b4 <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 8001f4a:	2003      	movs	r0, #3
 8001f4c:	f000 f932 	bl	80021b4 <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 8001f50:	2012      	movs	r0, #18
 8001f52:	f000 f92f 	bl	80021b4 <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8001f56:	2081      	movs	r0, #129	@ 0x81
 8001f58:	f000 f92c 	bl	80021b4 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 8001f5c:	20e8      	movs	r0, #232	@ 0xe8
 8001f5e:	f000 f91c 	bl	800219a <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8001f62:	2085      	movs	r0, #133	@ 0x85
 8001f64:	f000 f926 	bl	80021b4 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001f68:	2000      	movs	r0, #0
 8001f6a:	f000 f923 	bl	80021b4 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001f6e:	2078      	movs	r0, #120	@ 0x78
 8001f70:	f000 f920 	bl	80021b4 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8001f74:	20cb      	movs	r0, #203	@ 0xcb
 8001f76:	f000 f910 	bl	800219a <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 8001f7a:	2039      	movs	r0, #57	@ 0x39
 8001f7c:	f000 f91a 	bl	80021b4 <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 8001f80:	202c      	movs	r0, #44	@ 0x2c
 8001f82:	f000 f917 	bl	80021b4 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001f86:	2000      	movs	r0, #0
 8001f88:	f000 f914 	bl	80021b4 <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 8001f8c:	2034      	movs	r0, #52	@ 0x34
 8001f8e:	f000 f911 	bl	80021b4 <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8001f92:	2002      	movs	r0, #2
 8001f94:	f000 f90e 	bl	80021b4 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 8001f98:	20f7      	movs	r0, #247	@ 0xf7
 8001f9a:	f000 f8fe 	bl	800219a <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 8001f9e:	2020      	movs	r0, #32
 8001fa0:	f000 f908 	bl	80021b4 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8001fa4:	20ea      	movs	r0, #234	@ 0xea
 8001fa6:	f000 f8f8 	bl	800219a <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001faa:	2000      	movs	r0, #0
 8001fac:	f000 f902 	bl	80021b4 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001fb0:	2000      	movs	r0, #0
 8001fb2:	f000 f8ff 	bl	80021b4 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 8001fb6:	20b1      	movs	r0, #177	@ 0xb1
 8001fb8:	f000 f8ef 	bl	800219a <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001fbc:	2000      	movs	r0, #0
 8001fbe:	f000 f8f9 	bl	80021b4 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8001fc2:	201b      	movs	r0, #27
 8001fc4:	f000 f8f6 	bl	80021b4 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8001fc8:	20b6      	movs	r0, #182	@ 0xb6
 8001fca:	f000 f8e6 	bl	800219a <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8001fce:	200a      	movs	r0, #10
 8001fd0:	f000 f8f0 	bl	80021b4 <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 8001fd4:	20a2      	movs	r0, #162	@ 0xa2
 8001fd6:	f000 f8ed 	bl	80021b4 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 8001fda:	20c0      	movs	r0, #192	@ 0xc0
 8001fdc:	f000 f8dd 	bl	800219a <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001fe0:	2010      	movs	r0, #16
 8001fe2:	f000 f8e7 	bl	80021b4 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 8001fe6:	20c1      	movs	r0, #193	@ 0xc1
 8001fe8:	f000 f8d7 	bl	800219a <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001fec:	2010      	movs	r0, #16
 8001fee:	f000 f8e1 	bl	80021b4 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 8001ff2:	20c5      	movs	r0, #197	@ 0xc5
 8001ff4:	f000 f8d1 	bl	800219a <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 8001ff8:	2045      	movs	r0, #69	@ 0x45
 8001ffa:	f000 f8db 	bl	80021b4 <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 8001ffe:	2015      	movs	r0, #21
 8002000:	f000 f8d8 	bl	80021b4 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 8002004:	20c7      	movs	r0, #199	@ 0xc7
 8002006:	f000 f8c8 	bl	800219a <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 800200a:	2090      	movs	r0, #144	@ 0x90
 800200c:	f000 f8d2 	bl	80021b4 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 8002010:	2036      	movs	r0, #54	@ 0x36
 8002012:	f000 f8c2 	bl	800219a <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 8002016:	20c8      	movs	r0, #200	@ 0xc8
 8002018:	f000 f8cc 	bl	80021b4 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 800201c:	20f2      	movs	r0, #242	@ 0xf2
 800201e:	f000 f8bc 	bl	800219a <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8002022:	2000      	movs	r0, #0
 8002024:	f000 f8c6 	bl	80021b4 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 8002028:	20b0      	movs	r0, #176	@ 0xb0
 800202a:	f000 f8b6 	bl	800219a <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 800202e:	20c2      	movs	r0, #194	@ 0xc2
 8002030:	f000 f8c0 	bl	80021b4 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8002034:	20b6      	movs	r0, #182	@ 0xb6
 8002036:	f000 f8b0 	bl	800219a <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 800203a:	200a      	movs	r0, #10
 800203c:	f000 f8ba 	bl	80021b4 <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 8002040:	20a7      	movs	r0, #167	@ 0xa7
 8002042:	f000 f8b7 	bl	80021b4 <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 8002046:	2027      	movs	r0, #39	@ 0x27
 8002048:	f000 f8b4 	bl	80021b4 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 800204c:	2004      	movs	r0, #4
 800204e:	f000 f8b1 	bl	80021b4 <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 8002052:	202a      	movs	r0, #42	@ 0x2a
 8002054:	f000 f8a1 	bl	800219a <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8002058:	2000      	movs	r0, #0
 800205a:	f000 f8ab 	bl	80021b4 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800205e:	2000      	movs	r0, #0
 8002060:	f000 f8a8 	bl	80021b4 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002064:	2000      	movs	r0, #0
 8002066:	f000 f8a5 	bl	80021b4 <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 800206a:	20ef      	movs	r0, #239	@ 0xef
 800206c:	f000 f8a2 	bl	80021b4 <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 8002070:	202b      	movs	r0, #43	@ 0x2b
 8002072:	f000 f892 	bl	800219a <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8002076:	2000      	movs	r0, #0
 8002078:	f000 f89c 	bl	80021b4 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800207c:	2000      	movs	r0, #0
 800207e:	f000 f899 	bl	80021b4 <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 8002082:	2001      	movs	r0, #1
 8002084:	f000 f896 	bl	80021b4 <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 8002088:	203f      	movs	r0, #63	@ 0x3f
 800208a:	f000 f893 	bl	80021b4 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 800208e:	20f6      	movs	r0, #246	@ 0xf6
 8002090:	f000 f883 	bl	800219a <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8002094:	2001      	movs	r0, #1
 8002096:	f000 f88d 	bl	80021b4 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800209a:	2000      	movs	r0, #0
 800209c:	f000 f88a 	bl	80021b4 <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 80020a0:	2006      	movs	r0, #6
 80020a2:	f000 f887 	bl	80021b4 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 80020a6:	202c      	movs	r0, #44	@ 0x2c
 80020a8:	f000 f877 	bl	800219a <ili9341_Write_Reg>
  LCD_Delay(200);
 80020ac:	20c8      	movs	r0, #200	@ 0xc8
 80020ae:	f000 f9e9 	bl	8002484 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 80020b2:	2026      	movs	r0, #38	@ 0x26
 80020b4:	f000 f871 	bl	800219a <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 80020b8:	2001      	movs	r0, #1
 80020ba:	f000 f87b 	bl	80021b4 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 80020be:	20e0      	movs	r0, #224	@ 0xe0
 80020c0:	f000 f86b 	bl	800219a <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 80020c4:	200f      	movs	r0, #15
 80020c6:	f000 f875 	bl	80021b4 <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 80020ca:	2029      	movs	r0, #41	@ 0x29
 80020cc:	f000 f872 	bl	80021b4 <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 80020d0:	2024      	movs	r0, #36	@ 0x24
 80020d2:	f000 f86f 	bl	80021b4 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 80020d6:	200c      	movs	r0, #12
 80020d8:	f000 f86c 	bl	80021b4 <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 80020dc:	200e      	movs	r0, #14
 80020de:	f000 f869 	bl	80021b4 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 80020e2:	2009      	movs	r0, #9
 80020e4:	f000 f866 	bl	80021b4 <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 80020e8:	204e      	movs	r0, #78	@ 0x4e
 80020ea:	f000 f863 	bl	80021b4 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 80020ee:	2078      	movs	r0, #120	@ 0x78
 80020f0:	f000 f860 	bl	80021b4 <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 80020f4:	203c      	movs	r0, #60	@ 0x3c
 80020f6:	f000 f85d 	bl	80021b4 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 80020fa:	2009      	movs	r0, #9
 80020fc:	f000 f85a 	bl	80021b4 <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 8002100:	2013      	movs	r0, #19
 8002102:	f000 f857 	bl	80021b4 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8002106:	2005      	movs	r0, #5
 8002108:	f000 f854 	bl	80021b4 <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 800210c:	2017      	movs	r0, #23
 800210e:	f000 f851 	bl	80021b4 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8002112:	2011      	movs	r0, #17
 8002114:	f000 f84e 	bl	80021b4 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002118:	2000      	movs	r0, #0
 800211a:	f000 f84b 	bl	80021b4 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 800211e:	20e1      	movs	r0, #225	@ 0xe1
 8002120:	f000 f83b 	bl	800219a <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8002124:	2000      	movs	r0, #0
 8002126:	f000 f845 	bl	80021b4 <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 800212a:	2016      	movs	r0, #22
 800212c:	f000 f842 	bl	80021b4 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8002130:	201b      	movs	r0, #27
 8002132:	f000 f83f 	bl	80021b4 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8002136:	2004      	movs	r0, #4
 8002138:	f000 f83c 	bl	80021b4 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 800213c:	2011      	movs	r0, #17
 800213e:	f000 f839 	bl	80021b4 <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 8002142:	2007      	movs	r0, #7
 8002144:	f000 f836 	bl	80021b4 <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 8002148:	2031      	movs	r0, #49	@ 0x31
 800214a:	f000 f833 	bl	80021b4 <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 800214e:	2033      	movs	r0, #51	@ 0x33
 8002150:	f000 f830 	bl	80021b4 <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 8002154:	2042      	movs	r0, #66	@ 0x42
 8002156:	f000 f82d 	bl	80021b4 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 800215a:	2005      	movs	r0, #5
 800215c:	f000 f82a 	bl	80021b4 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8002160:	200c      	movs	r0, #12
 8002162:	f000 f827 	bl	80021b4 <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8002166:	200a      	movs	r0, #10
 8002168:	f000 f824 	bl	80021b4 <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 800216c:	2028      	movs	r0, #40	@ 0x28
 800216e:	f000 f821 	bl	80021b4 <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 8002172:	202f      	movs	r0, #47	@ 0x2f
 8002174:	f000 f81e 	bl	80021b4 <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 8002178:	200f      	movs	r0, #15
 800217a:	f000 f81b 	bl	80021b4 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 800217e:	2011      	movs	r0, #17
 8002180:	f000 f80b 	bl	800219a <ili9341_Write_Reg>
  LCD_Delay(200);
 8002184:	20c8      	movs	r0, #200	@ 0xc8
 8002186:	f000 f97d 	bl	8002484 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 800218a:	2029      	movs	r0, #41	@ 0x29
 800218c:	f000 f805 	bl	800219a <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 8002190:	202c      	movs	r0, #44	@ 0x2c
 8002192:	f000 f802 	bl	800219a <ili9341_Write_Reg>
}
 8002196:	bf00      	nop
 8002198:	bd80      	pop	{r7, pc}

0800219a <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 800219a:	b580      	push	{r7, lr}
 800219c:	b082      	sub	sp, #8
 800219e:	af00      	add	r7, sp, #0
 80021a0:	4603      	mov	r3, r0
 80021a2:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 80021a4:	79fb      	ldrb	r3, [r7, #7]
 80021a6:	4618      	mov	r0, r3
 80021a8:	f000 f94a 	bl	8002440 <LCD_IO_WriteReg>
}
 80021ac:	bf00      	nop
 80021ae:	3708      	adds	r7, #8
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	4603      	mov	r3, r0
 80021bc:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 80021be:	88fb      	ldrh	r3, [r7, #6]
 80021c0:	4618      	mov	r0, r3
 80021c2:	f000 f91b 	bl	80023fc <LCD_IO_WriteData>
}
 80021c6:	bf00      	nop
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
	...

080021d0 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80021d4:	4819      	ldr	r0, [pc, #100]	@ (800223c <SPI_Init+0x6c>)
 80021d6:	f004 fd55 	bl	8006c84 <HAL_SPI_GetState>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d12b      	bne.n	8002238 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 80021e0:	4b16      	ldr	r3, [pc, #88]	@ (800223c <SPI_Init+0x6c>)
 80021e2:	4a17      	ldr	r2, [pc, #92]	@ (8002240 <SPI_Init+0x70>)
 80021e4:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80021e6:	4b15      	ldr	r3, [pc, #84]	@ (800223c <SPI_Init+0x6c>)
 80021e8:	2218      	movs	r2, #24
 80021ea:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80021ec:	4b13      	ldr	r3, [pc, #76]	@ (800223c <SPI_Init+0x6c>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80021f2:	4b12      	ldr	r3, [pc, #72]	@ (800223c <SPI_Init+0x6c>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80021f8:	4b10      	ldr	r3, [pc, #64]	@ (800223c <SPI_Init+0x6c>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80021fe:	4b0f      	ldr	r3, [pc, #60]	@ (800223c <SPI_Init+0x6c>)
 8002200:	2200      	movs	r2, #0
 8002202:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8002204:	4b0d      	ldr	r3, [pc, #52]	@ (800223c <SPI_Init+0x6c>)
 8002206:	2207      	movs	r2, #7
 8002208:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 800220a:	4b0c      	ldr	r3, [pc, #48]	@ (800223c <SPI_Init+0x6c>)
 800220c:	2200      	movs	r2, #0
 800220e:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8002210:	4b0a      	ldr	r3, [pc, #40]	@ (800223c <SPI_Init+0x6c>)
 8002212:	2200      	movs	r2, #0
 8002214:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8002216:	4b09      	ldr	r3, [pc, #36]	@ (800223c <SPI_Init+0x6c>)
 8002218:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800221c:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 800221e:	4b07      	ldr	r3, [pc, #28]	@ (800223c <SPI_Init+0x6c>)
 8002220:	2200      	movs	r2, #0
 8002222:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8002224:	4b05      	ldr	r3, [pc, #20]	@ (800223c <SPI_Init+0x6c>)
 8002226:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800222a:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 800222c:	4803      	ldr	r0, [pc, #12]	@ (800223c <SPI_Init+0x6c>)
 800222e:	f000 f833 	bl	8002298 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8002232:	4802      	ldr	r0, [pc, #8]	@ (800223c <SPI_Init+0x6c>)
 8002234:	f004 f988 	bl	8006548 <HAL_SPI_Init>
  }
}
 8002238:	bf00      	nop
 800223a:	bd80      	pop	{r7, pc}
 800223c:	200259bc 	.word	0x200259bc
 8002240:	40015000 	.word	0x40015000

08002244 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	4603      	mov	r3, r0
 800224c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800224e:	2300      	movs	r3, #0
 8002250:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 8002252:	4b09      	ldr	r3, [pc, #36]	@ (8002278 <SPI_Write+0x34>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	1db9      	adds	r1, r7, #6
 8002258:	2201      	movs	r2, #1
 800225a:	4808      	ldr	r0, [pc, #32]	@ (800227c <SPI_Write+0x38>)
 800225c:	f004 fa25 	bl	80066aa <HAL_SPI_Transmit>
 8002260:	4603      	mov	r3, r0
 8002262:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8002264:	7bfb      	ldrb	r3, [r7, #15]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 800226a:	f000 f809 	bl	8002280 <SPI_Error>
  }
}
 800226e:	bf00      	nop
 8002270:	3710      	adds	r7, #16
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	20000014 	.word	0x20000014
 800227c:	200259bc 	.word	0x200259bc

08002280 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8002284:	4803      	ldr	r0, [pc, #12]	@ (8002294 <SPI_Error+0x14>)
 8002286:	f004 f9e8 	bl	800665a <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 800228a:	f7ff ffa1 	bl	80021d0 <SPI_Init>
}
 800228e:	bf00      	nop
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	200259bc 	.word	0x200259bc

08002298 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b08a      	sub	sp, #40	@ 0x28
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 80022a0:	2300      	movs	r3, #0
 80022a2:	613b      	str	r3, [r7, #16]
 80022a4:	4b17      	ldr	r3, [pc, #92]	@ (8002304 <SPI_MspInit+0x6c>)
 80022a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022a8:	4a16      	ldr	r2, [pc, #88]	@ (8002304 <SPI_MspInit+0x6c>)
 80022aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022ae:	6453      	str	r3, [r2, #68]	@ 0x44
 80022b0:	4b14      	ldr	r3, [pc, #80]	@ (8002304 <SPI_MspInit+0x6c>)
 80022b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022b8:	613b      	str	r3, [r7, #16]
 80022ba:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 80022bc:	2300      	movs	r3, #0
 80022be:	60fb      	str	r3, [r7, #12]
 80022c0:	4b10      	ldr	r3, [pc, #64]	@ (8002304 <SPI_MspInit+0x6c>)
 80022c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c4:	4a0f      	ldr	r2, [pc, #60]	@ (8002304 <SPI_MspInit+0x6c>)
 80022c6:	f043 0320 	orr.w	r3, r3, #32
 80022ca:	6313      	str	r3, [r2, #48]	@ 0x30
 80022cc:	4b0d      	ldr	r3, [pc, #52]	@ (8002304 <SPI_MspInit+0x6c>)
 80022ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022d0:	f003 0320 	and.w	r3, r3, #32
 80022d4:	60fb      	str	r3, [r7, #12]
 80022d6:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 80022d8:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80022dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 80022de:	2302      	movs	r3, #2
 80022e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 80022e2:	2302      	movs	r3, #2
 80022e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 80022e6:	2301      	movs	r3, #1
 80022e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 80022ea:	2305      	movs	r3, #5
 80022ec:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 80022ee:	f107 0314 	add.w	r3, r7, #20
 80022f2:	4619      	mov	r1, r3
 80022f4:	4804      	ldr	r0, [pc, #16]	@ (8002308 <SPI_MspInit+0x70>)
 80022f6:	f001 fc89 	bl	8003c0c <HAL_GPIO_Init>
}
 80022fa:	bf00      	nop
 80022fc:	3728      	adds	r7, #40	@ 0x28
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	40023800 	.word	0x40023800
 8002308:	40021400 	.word	0x40021400

0800230c <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b088      	sub	sp, #32
 8002310:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 8002312:	4b36      	ldr	r3, [pc, #216]	@ (80023ec <LCD_IO_Init+0xe0>)
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d164      	bne.n	80023e4 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 800231a:	4b34      	ldr	r3, [pc, #208]	@ (80023ec <LCD_IO_Init+0xe0>)
 800231c:	2201      	movs	r2, #1
 800231e:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8002320:	2300      	movs	r3, #0
 8002322:	60bb      	str	r3, [r7, #8]
 8002324:	4b32      	ldr	r3, [pc, #200]	@ (80023f0 <LCD_IO_Init+0xe4>)
 8002326:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002328:	4a31      	ldr	r2, [pc, #196]	@ (80023f0 <LCD_IO_Init+0xe4>)
 800232a:	f043 0308 	orr.w	r3, r3, #8
 800232e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002330:	4b2f      	ldr	r3, [pc, #188]	@ (80023f0 <LCD_IO_Init+0xe4>)
 8002332:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002334:	f003 0308 	and.w	r3, r3, #8
 8002338:	60bb      	str	r3, [r7, #8]
 800233a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 800233c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002340:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002342:	2301      	movs	r3, #1
 8002344:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002346:	2300      	movs	r3, #0
 8002348:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800234a:	2302      	movs	r3, #2
 800234c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 800234e:	f107 030c 	add.w	r3, r7, #12
 8002352:	4619      	mov	r1, r3
 8002354:	4827      	ldr	r0, [pc, #156]	@ (80023f4 <LCD_IO_Init+0xe8>)
 8002356:	f001 fc59 	bl	8003c0c <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 800235a:	2300      	movs	r3, #0
 800235c:	607b      	str	r3, [r7, #4]
 800235e:	4b24      	ldr	r3, [pc, #144]	@ (80023f0 <LCD_IO_Init+0xe4>)
 8002360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002362:	4a23      	ldr	r2, [pc, #140]	@ (80023f0 <LCD_IO_Init+0xe4>)
 8002364:	f043 0308 	orr.w	r3, r3, #8
 8002368:	6313      	str	r3, [r2, #48]	@ 0x30
 800236a:	4b21      	ldr	r3, [pc, #132]	@ (80023f0 <LCD_IO_Init+0xe4>)
 800236c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800236e:	f003 0308 	and.w	r3, r3, #8
 8002372:	607b      	str	r3, [r7, #4]
 8002374:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8002376:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800237a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800237c:	2301      	movs	r3, #1
 800237e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002380:	2300      	movs	r3, #0
 8002382:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002384:	2302      	movs	r3, #2
 8002386:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8002388:	f107 030c 	add.w	r3, r7, #12
 800238c:	4619      	mov	r1, r3
 800238e:	4819      	ldr	r0, [pc, #100]	@ (80023f4 <LCD_IO_Init+0xe8>)
 8002390:	f001 fc3c 	bl	8003c0c <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8002394:	2300      	movs	r3, #0
 8002396:	603b      	str	r3, [r7, #0]
 8002398:	4b15      	ldr	r3, [pc, #84]	@ (80023f0 <LCD_IO_Init+0xe4>)
 800239a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800239c:	4a14      	ldr	r2, [pc, #80]	@ (80023f0 <LCD_IO_Init+0xe4>)
 800239e:	f043 0304 	orr.w	r3, r3, #4
 80023a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80023a4:	4b12      	ldr	r3, [pc, #72]	@ (80023f0 <LCD_IO_Init+0xe4>)
 80023a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023a8:	f003 0304 	and.w	r3, r3, #4
 80023ac:	603b      	str	r3, [r7, #0]
 80023ae:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 80023b0:	2304      	movs	r3, #4
 80023b2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80023b4:	2301      	movs	r3, #1
 80023b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80023b8:	2300      	movs	r3, #0
 80023ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80023bc:	2302      	movs	r3, #2
 80023be:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80023c0:	f107 030c 	add.w	r3, r7, #12
 80023c4:	4619      	mov	r1, r3
 80023c6:	480c      	ldr	r0, [pc, #48]	@ (80023f8 <LCD_IO_Init+0xec>)
 80023c8:	f001 fc20 	bl	8003c0c <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 80023cc:	2200      	movs	r2, #0
 80023ce:	2104      	movs	r1, #4
 80023d0:	4809      	ldr	r0, [pc, #36]	@ (80023f8 <LCD_IO_Init+0xec>)
 80023d2:	f001 feeb 	bl	80041ac <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 80023d6:	2201      	movs	r2, #1
 80023d8:	2104      	movs	r1, #4
 80023da:	4807      	ldr	r0, [pc, #28]	@ (80023f8 <LCD_IO_Init+0xec>)
 80023dc:	f001 fee6 	bl	80041ac <HAL_GPIO_WritePin>

    SPI_Init();
 80023e0:	f7ff fef6 	bl	80021d0 <SPI_Init>
  }
}
 80023e4:	bf00      	nop
 80023e6:	3720      	adds	r7, #32
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	20025a14 	.word	0x20025a14
 80023f0:	40023800 	.word	0x40023800
 80023f4:	40020c00 	.word	0x40020c00
 80023f8:	40020800 	.word	0x40020800

080023fc <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	4603      	mov	r3, r0
 8002404:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8002406:	2201      	movs	r2, #1
 8002408:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800240c:	480a      	ldr	r0, [pc, #40]	@ (8002438 <LCD_IO_WriteData+0x3c>)
 800240e:	f001 fecd 	bl	80041ac <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 8002412:	2200      	movs	r2, #0
 8002414:	2104      	movs	r1, #4
 8002416:	4809      	ldr	r0, [pc, #36]	@ (800243c <LCD_IO_WriteData+0x40>)
 8002418:	f001 fec8 	bl	80041ac <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 800241c:	88fb      	ldrh	r3, [r7, #6]
 800241e:	4618      	mov	r0, r3
 8002420:	f7ff ff10 	bl	8002244 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002424:	2201      	movs	r2, #1
 8002426:	2104      	movs	r1, #4
 8002428:	4804      	ldr	r0, [pc, #16]	@ (800243c <LCD_IO_WriteData+0x40>)
 800242a:	f001 febf 	bl	80041ac <HAL_GPIO_WritePin>
}
 800242e:	bf00      	nop
 8002430:	3708      	adds	r7, #8
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	40020c00 	.word	0x40020c00
 800243c:	40020800 	.word	0x40020800

08002440 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	4603      	mov	r3, r0
 8002448:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800244a:	2200      	movs	r2, #0
 800244c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002450:	480a      	ldr	r0, [pc, #40]	@ (800247c <LCD_IO_WriteReg+0x3c>)
 8002452:	f001 feab 	bl	80041ac <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8002456:	2200      	movs	r2, #0
 8002458:	2104      	movs	r1, #4
 800245a:	4809      	ldr	r0, [pc, #36]	@ (8002480 <LCD_IO_WriteReg+0x40>)
 800245c:	f001 fea6 	bl	80041ac <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 8002460:	79fb      	ldrb	r3, [r7, #7]
 8002462:	b29b      	uxth	r3, r3
 8002464:	4618      	mov	r0, r3
 8002466:	f7ff feed 	bl	8002244 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800246a:	2201      	movs	r2, #1
 800246c:	2104      	movs	r1, #4
 800246e:	4804      	ldr	r0, [pc, #16]	@ (8002480 <LCD_IO_WriteReg+0x40>)
 8002470:	f001 fe9c 	bl	80041ac <HAL_GPIO_WritePin>
}
 8002474:	bf00      	nop
 8002476:	3708      	adds	r7, #8
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	40020c00 	.word	0x40020c00
 8002480:	40020800 	.word	0x40020800

08002484 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f001 fa55 	bl	800393c <HAL_Delay>
}
 8002492:	bf00      	nop
 8002494:	3708      	adds	r7, #8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}

0800249a <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800249a:	b580      	push	{r7, lr}
 800249c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/
	initialise_monitor_handles();
 800249e:	f001 f997 	bl	80037d0 <initialise_monitor_handles>
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80024a2:	f001 f9d9 	bl	8003858 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80024a6:	f000 f811 	bl	80024cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80024aa:	f000 fa01 	bl	80028b0 <MX_GPIO_Init>
  MX_LTDC_Init();
 80024ae:	f000 f8b7 	bl	8002620 <MX_LTDC_Init>
  MX_RNG_Init();
 80024b2:	f000 f967 	bl	8002784 <MX_RNG_Init>
  MX_TIM2_Init();
 80024b6:	f000 f9af 	bl	8002818 <MX_TIM2_Init>
  MX_SPI5_Init();
 80024ba:	f000 f977 	bl	80027ac <MX_SPI5_Init>
  MX_I2C3_Init();
 80024be:	f000 f86f 	bl	80025a0 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  ApplicationInit();
 80024c2:	f7fe faaa 	bl	8000a1a <ApplicationInit>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  playGame();
 80024c6:	f7fe facf 	bl	8000a68 <playGame>
 80024ca:	e7fc      	b.n	80024c6 <main+0x2c>

080024cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b094      	sub	sp, #80	@ 0x50
 80024d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024d2:	f107 0320 	add.w	r3, r7, #32
 80024d6:	2230      	movs	r2, #48	@ 0x30
 80024d8:	2100      	movs	r1, #0
 80024da:	4618      	mov	r0, r3
 80024dc:	f004 ff94 	bl	8007408 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024e0:	f107 030c 	add.w	r3, r7, #12
 80024e4:	2200      	movs	r2, #0
 80024e6:	601a      	str	r2, [r3, #0]
 80024e8:	605a      	str	r2, [r3, #4]
 80024ea:	609a      	str	r2, [r3, #8]
 80024ec:	60da      	str	r2, [r3, #12]
 80024ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80024f0:	2300      	movs	r3, #0
 80024f2:	60bb      	str	r3, [r7, #8]
 80024f4:	4b28      	ldr	r3, [pc, #160]	@ (8002598 <SystemClock_Config+0xcc>)
 80024f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f8:	4a27      	ldr	r2, [pc, #156]	@ (8002598 <SystemClock_Config+0xcc>)
 80024fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8002500:	4b25      	ldr	r3, [pc, #148]	@ (8002598 <SystemClock_Config+0xcc>)
 8002502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002504:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002508:	60bb      	str	r3, [r7, #8]
 800250a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800250c:	2300      	movs	r3, #0
 800250e:	607b      	str	r3, [r7, #4]
 8002510:	4b22      	ldr	r3, [pc, #136]	@ (800259c <SystemClock_Config+0xd0>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a21      	ldr	r2, [pc, #132]	@ (800259c <SystemClock_Config+0xd0>)
 8002516:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800251a:	6013      	str	r3, [r2, #0]
 800251c:	4b1f      	ldr	r3, [pc, #124]	@ (800259c <SystemClock_Config+0xd0>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002524:	607b      	str	r3, [r7, #4]
 8002526:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002528:	2301      	movs	r3, #1
 800252a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800252c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002530:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002532:	2302      	movs	r3, #2
 8002534:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002536:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800253a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800253c:	2308      	movs	r3, #8
 800253e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002540:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8002544:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002546:	2302      	movs	r3, #2
 8002548:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800254a:	2307      	movs	r3, #7
 800254c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800254e:	f107 0320 	add.w	r3, r7, #32
 8002552:	4618      	mov	r0, r3
 8002554:	f003 f98a 	bl	800586c <HAL_RCC_OscConfig>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800255e:	f000 fb55 	bl	8002c0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002562:	230f      	movs	r3, #15
 8002564:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002566:	2302      	movs	r3, #2
 8002568:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800256a:	2300      	movs	r3, #0
 800256c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800256e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002572:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002574:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002578:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800257a:	f107 030c 	add.w	r3, r7, #12
 800257e:	2105      	movs	r1, #5
 8002580:	4618      	mov	r0, r3
 8002582:	f003 fbeb 	bl	8005d5c <HAL_RCC_ClockConfig>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d001      	beq.n	8002590 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800258c:	f000 fb3e 	bl	8002c0c <Error_Handler>
  }
}
 8002590:	bf00      	nop
 8002592:	3750      	adds	r7, #80	@ 0x50
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	40023800 	.word	0x40023800
 800259c:	40007000 	.word	0x40007000

080025a0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80025a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002614 <MX_I2C3_Init+0x74>)
 80025a6:	4a1c      	ldr	r2, [pc, #112]	@ (8002618 <MX_I2C3_Init+0x78>)
 80025a8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80025aa:	4b1a      	ldr	r3, [pc, #104]	@ (8002614 <MX_I2C3_Init+0x74>)
 80025ac:	4a1b      	ldr	r2, [pc, #108]	@ (800261c <MX_I2C3_Init+0x7c>)
 80025ae:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80025b0:	4b18      	ldr	r3, [pc, #96]	@ (8002614 <MX_I2C3_Init+0x74>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80025b6:	4b17      	ldr	r3, [pc, #92]	@ (8002614 <MX_I2C3_Init+0x74>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80025bc:	4b15      	ldr	r3, [pc, #84]	@ (8002614 <MX_I2C3_Init+0x74>)
 80025be:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80025c2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80025c4:	4b13      	ldr	r3, [pc, #76]	@ (8002614 <MX_I2C3_Init+0x74>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80025ca:	4b12      	ldr	r3, [pc, #72]	@ (8002614 <MX_I2C3_Init+0x74>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80025d0:	4b10      	ldr	r3, [pc, #64]	@ (8002614 <MX_I2C3_Init+0x74>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80025d6:	4b0f      	ldr	r3, [pc, #60]	@ (8002614 <MX_I2C3_Init+0x74>)
 80025d8:	2200      	movs	r2, #0
 80025da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80025dc:	480d      	ldr	r0, [pc, #52]	@ (8002614 <MX_I2C3_Init+0x74>)
 80025de:	f001 fdff 	bl	80041e0 <HAL_I2C_Init>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d001      	beq.n	80025ec <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80025e8:	f000 fb10 	bl	8002c0c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80025ec:	2100      	movs	r1, #0
 80025ee:	4809      	ldr	r0, [pc, #36]	@ (8002614 <MX_I2C3_Init+0x74>)
 80025f0:	f002 fe1a 	bl	8005228 <HAL_I2CEx_ConfigAnalogFilter>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80025fa:	f000 fb07 	bl	8002c0c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80025fe:	2100      	movs	r1, #0
 8002600:	4804      	ldr	r0, [pc, #16]	@ (8002614 <MX_I2C3_Init+0x74>)
 8002602:	f002 fe4d 	bl	80052a0 <HAL_I2CEx_ConfigDigitalFilter>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d001      	beq.n	8002610 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 800260c:	f000 fafe 	bl	8002c0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002610:	bf00      	nop
 8002612:	bd80      	pop	{r7, pc}
 8002614:	20025a18 	.word	0x20025a18
 8002618:	40005c00 	.word	0x40005c00
 800261c:	000186a0 	.word	0x000186a0

08002620 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b09a      	sub	sp, #104	@ 0x68
 8002624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8002626:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800262a:	2234      	movs	r2, #52	@ 0x34
 800262c:	2100      	movs	r1, #0
 800262e:	4618      	mov	r0, r3
 8002630:	f004 feea 	bl	8007408 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8002634:	463b      	mov	r3, r7
 8002636:	2234      	movs	r2, #52	@ 0x34
 8002638:	2100      	movs	r1, #0
 800263a:	4618      	mov	r0, r3
 800263c:	f004 fee4 	bl	8007408 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8002640:	4b4e      	ldr	r3, [pc, #312]	@ (800277c <MX_LTDC_Init+0x15c>)
 8002642:	4a4f      	ldr	r2, [pc, #316]	@ (8002780 <MX_LTDC_Init+0x160>)
 8002644:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002646:	4b4d      	ldr	r3, [pc, #308]	@ (800277c <MX_LTDC_Init+0x15c>)
 8002648:	2200      	movs	r2, #0
 800264a:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800264c:	4b4b      	ldr	r3, [pc, #300]	@ (800277c <MX_LTDC_Init+0x15c>)
 800264e:	2200      	movs	r2, #0
 8002650:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002652:	4b4a      	ldr	r3, [pc, #296]	@ (800277c <MX_LTDC_Init+0x15c>)
 8002654:	2200      	movs	r2, #0
 8002656:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002658:	4b48      	ldr	r3, [pc, #288]	@ (800277c <MX_LTDC_Init+0x15c>)
 800265a:	2200      	movs	r2, #0
 800265c:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 800265e:	4b47      	ldr	r3, [pc, #284]	@ (800277c <MX_LTDC_Init+0x15c>)
 8002660:	2207      	movs	r2, #7
 8002662:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8002664:	4b45      	ldr	r3, [pc, #276]	@ (800277c <MX_LTDC_Init+0x15c>)
 8002666:	2203      	movs	r2, #3
 8002668:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 800266a:	4b44      	ldr	r3, [pc, #272]	@ (800277c <MX_LTDC_Init+0x15c>)
 800266c:	220e      	movs	r2, #14
 800266e:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8002670:	4b42      	ldr	r3, [pc, #264]	@ (800277c <MX_LTDC_Init+0x15c>)
 8002672:	2205      	movs	r2, #5
 8002674:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8002676:	4b41      	ldr	r3, [pc, #260]	@ (800277c <MX_LTDC_Init+0x15c>)
 8002678:	f240 228e 	movw	r2, #654	@ 0x28e
 800267c:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 800267e:	4b3f      	ldr	r3, [pc, #252]	@ (800277c <MX_LTDC_Init+0x15c>)
 8002680:	f240 12e5 	movw	r2, #485	@ 0x1e5
 8002684:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 8002686:	4b3d      	ldr	r3, [pc, #244]	@ (800277c <MX_LTDC_Init+0x15c>)
 8002688:	f44f 7225 	mov.w	r2, #660	@ 0x294
 800268c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 800268e:	4b3b      	ldr	r3, [pc, #236]	@ (800277c <MX_LTDC_Init+0x15c>)
 8002690:	f240 12e7 	movw	r2, #487	@ 0x1e7
 8002694:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8002696:	4b39      	ldr	r3, [pc, #228]	@ (800277c <MX_LTDC_Init+0x15c>)
 8002698:	2200      	movs	r2, #0
 800269a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 800269e:	4b37      	ldr	r3, [pc, #220]	@ (800277c <MX_LTDC_Init+0x15c>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 80026a6:	4b35      	ldr	r3, [pc, #212]	@ (800277c <MX_LTDC_Init+0x15c>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80026ae:	4833      	ldr	r0, [pc, #204]	@ (800277c <MX_LTDC_Init+0x15c>)
 80026b0:	f002 fe36 	bl	8005320 <HAL_LTDC_Init>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 80026ba:	f000 faa7 	bl	8002c0c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80026be:	2300      	movs	r3, #0
 80026c0:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 80026c2:	2300      	movs	r3, #0
 80026c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 80026c6:	2300      	movs	r3, #0
 80026c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 80026ca:	2300      	movs	r3, #0
 80026cc:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80026ce:	2300      	movs	r3, #0
 80026d0:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 80026d2:	2300      	movs	r3, #0
 80026d4:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 80026d6:	2300      	movs	r3, #0
 80026d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80026da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80026de:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80026e0:	2305      	movs	r3, #5
 80026e2:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 80026e4:	2300      	movs	r3, #0
 80026e6:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 80026e8:	2300      	movs	r3, #0
 80026ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 80026ec:	2300      	movs	r3, #0
 80026ee:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 80026f0:	2300      	movs	r3, #0
 80026f2:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 80026f6:	2300      	movs	r3, #0
 80026f8:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 80026fc:	2300      	movs	r3, #0
 80026fe:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8002702:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002706:	2200      	movs	r2, #0
 8002708:	4619      	mov	r1, r3
 800270a:	481c      	ldr	r0, [pc, #112]	@ (800277c <MX_LTDC_Init+0x15c>)
 800270c:	f002 fed8 	bl	80054c0 <HAL_LTDC_ConfigLayer>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8002716:	f000 fa79 	bl	8002c0c <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 800271a:	2300      	movs	r3, #0
 800271c:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 800271e:	2300      	movs	r3, #0
 8002720:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8002722:	2300      	movs	r3, #0
 8002724:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8002726:	2300      	movs	r3, #0
 8002728:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800272a:	2300      	movs	r3, #0
 800272c:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 800272e:	2300      	movs	r3, #0
 8002730:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8002732:	2300      	movs	r3, #0
 8002734:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8002736:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800273a:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800273c:	2305      	movs	r3, #5
 800273e:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8002740:	2300      	movs	r3, #0
 8002742:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 8002744:	2300      	movs	r3, #0
 8002746:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 8002748:	2300      	movs	r3, #0
 800274a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 800274c:	2300      	movs	r3, #0
 800274e:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8002752:	2300      	movs	r3, #0
 8002754:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8002758:	2300      	movs	r3, #0
 800275a:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 800275e:	463b      	mov	r3, r7
 8002760:	2201      	movs	r2, #1
 8002762:	4619      	mov	r1, r3
 8002764:	4805      	ldr	r0, [pc, #20]	@ (800277c <MX_LTDC_Init+0x15c>)
 8002766:	f002 feab 	bl	80054c0 <HAL_LTDC_ConfigLayer>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d001      	beq.n	8002774 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8002770:	f000 fa4c 	bl	8002c0c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8002774:	bf00      	nop
 8002776:	3768      	adds	r7, #104	@ 0x68
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	20025a6c 	.word	0x20025a6c
 8002780:	40016800 	.word	0x40016800

08002784 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8002788:	4b06      	ldr	r3, [pc, #24]	@ (80027a4 <MX_RNG_Init+0x20>)
 800278a:	4a07      	ldr	r2, [pc, #28]	@ (80027a8 <MX_RNG_Init+0x24>)
 800278c:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800278e:	4805      	ldr	r0, [pc, #20]	@ (80027a4 <MX_RNG_Init+0x20>)
 8002790:	f003 feb0 	bl	80064f4 <HAL_RNG_Init>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800279a:	f000 fa37 	bl	8002c0c <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800279e:	bf00      	nop
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	20025b14 	.word	0x20025b14
 80027a8:	50060800 	.word	0x50060800

080027ac <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80027b0:	4b17      	ldr	r3, [pc, #92]	@ (8002810 <MX_SPI5_Init+0x64>)
 80027b2:	4a18      	ldr	r2, [pc, #96]	@ (8002814 <MX_SPI5_Init+0x68>)
 80027b4:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80027b6:	4b16      	ldr	r3, [pc, #88]	@ (8002810 <MX_SPI5_Init+0x64>)
 80027b8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80027bc:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80027be:	4b14      	ldr	r3, [pc, #80]	@ (8002810 <MX_SPI5_Init+0x64>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80027c4:	4b12      	ldr	r3, [pc, #72]	@ (8002810 <MX_SPI5_Init+0x64>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80027ca:	4b11      	ldr	r3, [pc, #68]	@ (8002810 <MX_SPI5_Init+0x64>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80027d0:	4b0f      	ldr	r3, [pc, #60]	@ (8002810 <MX_SPI5_Init+0x64>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80027d6:	4b0e      	ldr	r3, [pc, #56]	@ (8002810 <MX_SPI5_Init+0x64>)
 80027d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80027dc:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80027de:	4b0c      	ldr	r3, [pc, #48]	@ (8002810 <MX_SPI5_Init+0x64>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80027e4:	4b0a      	ldr	r3, [pc, #40]	@ (8002810 <MX_SPI5_Init+0x64>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80027ea:	4b09      	ldr	r3, [pc, #36]	@ (8002810 <MX_SPI5_Init+0x64>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027f0:	4b07      	ldr	r3, [pc, #28]	@ (8002810 <MX_SPI5_Init+0x64>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 80027f6:	4b06      	ldr	r3, [pc, #24]	@ (8002810 <MX_SPI5_Init+0x64>)
 80027f8:	220a      	movs	r2, #10
 80027fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80027fc:	4804      	ldr	r0, [pc, #16]	@ (8002810 <MX_SPI5_Init+0x64>)
 80027fe:	f003 fea3 	bl	8006548 <HAL_SPI_Init>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d001      	beq.n	800280c <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8002808:	f000 fa00 	bl	8002c0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 800280c:	bf00      	nop
 800280e:	bd80      	pop	{r7, pc}
 8002810:	20025b24 	.word	0x20025b24
 8002814:	40015000 	.word	0x40015000

08002818 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b086      	sub	sp, #24
 800281c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800281e:	f107 0308 	add.w	r3, r7, #8
 8002822:	2200      	movs	r2, #0
 8002824:	601a      	str	r2, [r3, #0]
 8002826:	605a      	str	r2, [r3, #4]
 8002828:	609a      	str	r2, [r3, #8]
 800282a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800282c:	463b      	mov	r3, r7
 800282e:	2200      	movs	r2, #0
 8002830:	601a      	str	r2, [r3, #0]
 8002832:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002834:	4b1d      	ldr	r3, [pc, #116]	@ (80028ac <MX_TIM2_Init+0x94>)
 8002836:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800283a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800283c:	4b1b      	ldr	r3, [pc, #108]	@ (80028ac <MX_TIM2_Init+0x94>)
 800283e:	2200      	movs	r2, #0
 8002840:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002842:	4b1a      	ldr	r3, [pc, #104]	@ (80028ac <MX_TIM2_Init+0x94>)
 8002844:	2200      	movs	r2, #0
 8002846:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002848:	4b18      	ldr	r3, [pc, #96]	@ (80028ac <MX_TIM2_Init+0x94>)
 800284a:	f04f 32ff 	mov.w	r2, #4294967295
 800284e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002850:	4b16      	ldr	r3, [pc, #88]	@ (80028ac <MX_TIM2_Init+0x94>)
 8002852:	2200      	movs	r2, #0
 8002854:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002856:	4b15      	ldr	r3, [pc, #84]	@ (80028ac <MX_TIM2_Init+0x94>)
 8002858:	2200      	movs	r2, #0
 800285a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800285c:	4813      	ldr	r0, [pc, #76]	@ (80028ac <MX_TIM2_Init+0x94>)
 800285e:	f004 fafb 	bl	8006e58 <HAL_TIM_Base_Init>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d001      	beq.n	800286c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002868:	f000 f9d0 	bl	8002c0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800286c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002870:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002872:	f107 0308 	add.w	r3, r7, #8
 8002876:	4619      	mov	r1, r3
 8002878:	480c      	ldr	r0, [pc, #48]	@ (80028ac <MX_TIM2_Init+0x94>)
 800287a:	f004 fb3c 	bl	8006ef6 <HAL_TIM_ConfigClockSource>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d001      	beq.n	8002888 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002884:	f000 f9c2 	bl	8002c0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002888:	2300      	movs	r3, #0
 800288a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800288c:	2300      	movs	r3, #0
 800288e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002890:	463b      	mov	r3, r7
 8002892:	4619      	mov	r1, r3
 8002894:	4805      	ldr	r0, [pc, #20]	@ (80028ac <MX_TIM2_Init+0x94>)
 8002896:	f004 fd3b 	bl	8007310 <HAL_TIMEx_MasterConfigSynchronization>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d001      	beq.n	80028a4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80028a0:	f000 f9b4 	bl	8002c0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80028a4:	bf00      	nop
 80028a6:	3718      	adds	r7, #24
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	20025b7c 	.word	0x20025b7c

080028b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b08e      	sub	sp, #56	@ 0x38
 80028b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028ba:	2200      	movs	r2, #0
 80028bc:	601a      	str	r2, [r3, #0]
 80028be:	605a      	str	r2, [r3, #4]
 80028c0:	609a      	str	r2, [r3, #8]
 80028c2:	60da      	str	r2, [r3, #12]
 80028c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028c6:	2300      	movs	r3, #0
 80028c8:	623b      	str	r3, [r7, #32]
 80028ca:	4bb2      	ldr	r3, [pc, #712]	@ (8002b94 <MX_GPIO_Init+0x2e4>)
 80028cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ce:	4ab1      	ldr	r2, [pc, #708]	@ (8002b94 <MX_GPIO_Init+0x2e4>)
 80028d0:	f043 0304 	orr.w	r3, r3, #4
 80028d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80028d6:	4baf      	ldr	r3, [pc, #700]	@ (8002b94 <MX_GPIO_Init+0x2e4>)
 80028d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028da:	f003 0304 	and.w	r3, r3, #4
 80028de:	623b      	str	r3, [r7, #32]
 80028e0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80028e2:	2300      	movs	r3, #0
 80028e4:	61fb      	str	r3, [r7, #28]
 80028e6:	4bab      	ldr	r3, [pc, #684]	@ (8002b94 <MX_GPIO_Init+0x2e4>)
 80028e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ea:	4aaa      	ldr	r2, [pc, #680]	@ (8002b94 <MX_GPIO_Init+0x2e4>)
 80028ec:	f043 0320 	orr.w	r3, r3, #32
 80028f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80028f2:	4ba8      	ldr	r3, [pc, #672]	@ (8002b94 <MX_GPIO_Init+0x2e4>)
 80028f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f6:	f003 0320 	and.w	r3, r3, #32
 80028fa:	61fb      	str	r3, [r7, #28]
 80028fc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80028fe:	2300      	movs	r3, #0
 8002900:	61bb      	str	r3, [r7, #24]
 8002902:	4ba4      	ldr	r3, [pc, #656]	@ (8002b94 <MX_GPIO_Init+0x2e4>)
 8002904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002906:	4aa3      	ldr	r2, [pc, #652]	@ (8002b94 <MX_GPIO_Init+0x2e4>)
 8002908:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800290c:	6313      	str	r3, [r2, #48]	@ 0x30
 800290e:	4ba1      	ldr	r3, [pc, #644]	@ (8002b94 <MX_GPIO_Init+0x2e4>)
 8002910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002912:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002916:	61bb      	str	r3, [r7, #24]
 8002918:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800291a:	2300      	movs	r3, #0
 800291c:	617b      	str	r3, [r7, #20]
 800291e:	4b9d      	ldr	r3, [pc, #628]	@ (8002b94 <MX_GPIO_Init+0x2e4>)
 8002920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002922:	4a9c      	ldr	r2, [pc, #624]	@ (8002b94 <MX_GPIO_Init+0x2e4>)
 8002924:	f043 0301 	orr.w	r3, r3, #1
 8002928:	6313      	str	r3, [r2, #48]	@ 0x30
 800292a:	4b9a      	ldr	r3, [pc, #616]	@ (8002b94 <MX_GPIO_Init+0x2e4>)
 800292c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800292e:	f003 0301 	and.w	r3, r3, #1
 8002932:	617b      	str	r3, [r7, #20]
 8002934:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002936:	2300      	movs	r3, #0
 8002938:	613b      	str	r3, [r7, #16]
 800293a:	4b96      	ldr	r3, [pc, #600]	@ (8002b94 <MX_GPIO_Init+0x2e4>)
 800293c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800293e:	4a95      	ldr	r2, [pc, #596]	@ (8002b94 <MX_GPIO_Init+0x2e4>)
 8002940:	f043 0302 	orr.w	r3, r3, #2
 8002944:	6313      	str	r3, [r2, #48]	@ 0x30
 8002946:	4b93      	ldr	r3, [pc, #588]	@ (8002b94 <MX_GPIO_Init+0x2e4>)
 8002948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	613b      	str	r3, [r7, #16]
 8002950:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002952:	2300      	movs	r3, #0
 8002954:	60fb      	str	r3, [r7, #12]
 8002956:	4b8f      	ldr	r3, [pc, #572]	@ (8002b94 <MX_GPIO_Init+0x2e4>)
 8002958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800295a:	4a8e      	ldr	r2, [pc, #568]	@ (8002b94 <MX_GPIO_Init+0x2e4>)
 800295c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002960:	6313      	str	r3, [r2, #48]	@ 0x30
 8002962:	4b8c      	ldr	r3, [pc, #560]	@ (8002b94 <MX_GPIO_Init+0x2e4>)
 8002964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002966:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800296a:	60fb      	str	r3, [r7, #12]
 800296c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800296e:	2300      	movs	r3, #0
 8002970:	60bb      	str	r3, [r7, #8]
 8002972:	4b88      	ldr	r3, [pc, #544]	@ (8002b94 <MX_GPIO_Init+0x2e4>)
 8002974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002976:	4a87      	ldr	r2, [pc, #540]	@ (8002b94 <MX_GPIO_Init+0x2e4>)
 8002978:	f043 0310 	orr.w	r3, r3, #16
 800297c:	6313      	str	r3, [r2, #48]	@ 0x30
 800297e:	4b85      	ldr	r3, [pc, #532]	@ (8002b94 <MX_GPIO_Init+0x2e4>)
 8002980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002982:	f003 0310 	and.w	r3, r3, #16
 8002986:	60bb      	str	r3, [r7, #8]
 8002988:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800298a:	2300      	movs	r3, #0
 800298c:	607b      	str	r3, [r7, #4]
 800298e:	4b81      	ldr	r3, [pc, #516]	@ (8002b94 <MX_GPIO_Init+0x2e4>)
 8002990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002992:	4a80      	ldr	r2, [pc, #512]	@ (8002b94 <MX_GPIO_Init+0x2e4>)
 8002994:	f043 0308 	orr.w	r3, r3, #8
 8002998:	6313      	str	r3, [r2, #48]	@ 0x30
 800299a:	4b7e      	ldr	r3, [pc, #504]	@ (8002b94 <MX_GPIO_Init+0x2e4>)
 800299c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800299e:	f003 0308 	and.w	r3, r3, #8
 80029a2:	607b      	str	r3, [r7, #4]
 80029a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80029a6:	2200      	movs	r2, #0
 80029a8:	2116      	movs	r1, #22
 80029aa:	487b      	ldr	r0, [pc, #492]	@ (8002b98 <MX_GPIO_Init+0x2e8>)
 80029ac:	f001 fbfe 	bl	80041ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 80029b0:	2200      	movs	r2, #0
 80029b2:	2180      	movs	r1, #128	@ 0x80
 80029b4:	4879      	ldr	r0, [pc, #484]	@ (8002b9c <MX_GPIO_Init+0x2ec>)
 80029b6:	f001 fbf9 	bl	80041ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 80029ba:	2200      	movs	r2, #0
 80029bc:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 80029c0:	4877      	ldr	r0, [pc, #476]	@ (8002ba0 <MX_GPIO_Init+0x2f0>)
 80029c2:	f001 fbf3 	bl	80041ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80029c6:	2200      	movs	r2, #0
 80029c8:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 80029cc:	4875      	ldr	r0, [pc, #468]	@ (8002ba4 <MX_GPIO_Init+0x2f4>)
 80029ce:	f001 fbed 	bl	80041ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80029d2:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80029d6:	627b      	str	r3, [r7, #36]	@ 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d8:	2302      	movs	r3, #2
 80029da:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029dc:	2300      	movs	r3, #0
 80029de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029e0:	2303      	movs	r3, #3
 80029e2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80029e4:	230c      	movs	r3, #12
 80029e6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80029e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029ec:	4619      	mov	r1, r3
 80029ee:	486e      	ldr	r0, [pc, #440]	@ (8002ba8 <MX_GPIO_Init+0x2f8>)
 80029f0:	f001 f90c 	bl	8003c0c <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 80029f4:	2301      	movs	r3, #1
 80029f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f8:	2302      	movs	r3, #2
 80029fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029fc:	2300      	movs	r3, #0
 80029fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a00:	2303      	movs	r3, #3
 8002a02:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002a04:	230c      	movs	r3, #12
 8002a06:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8002a08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	4862      	ldr	r0, [pc, #392]	@ (8002b98 <MX_GPIO_Init+0x2e8>)
 8002a10:	f001 f8fc 	bl	8003c0c <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8002a14:	2316      	movs	r3, #22
 8002a16:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a20:	2300      	movs	r3, #0
 8002a22:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a28:	4619      	mov	r1, r3
 8002a2a:	485b      	ldr	r0, [pc, #364]	@ (8002b98 <MX_GPIO_Init+0x2e8>)
 8002a2c:	f001 f8ee 	bl	8003c0c <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8002a30:	f248 0307 	movw	r3, #32775	@ 0x8007
 8002a34:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002a36:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002a3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a44:	4619      	mov	r1, r3
 8002a46:	4855      	ldr	r0, [pc, #340]	@ (8002b9c <MX_GPIO_Init+0x2ec>)
 8002a48:	f001 f8e0 	bl	8003c0c <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8002a4c:	2380      	movs	r3, #128	@ 0x80
 8002a4e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a50:	2301      	movs	r3, #1
 8002a52:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a54:	2300      	movs	r3, #0
 8002a56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8002a5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a60:	4619      	mov	r1, r3
 8002a62:	484e      	ldr	r0, [pc, #312]	@ (8002b9c <MX_GPIO_Init+0x2ec>)
 8002a64:	f001 f8d2 	bl	8003c0c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8002a68:	2320      	movs	r3, #32
 8002a6a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002a6c:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002a70:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a72:	2300      	movs	r3, #0
 8002a74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8002a76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	4846      	ldr	r0, [pc, #280]	@ (8002b98 <MX_GPIO_Init+0x2e8>)
 8002a7e:	f001 f8c5 	bl	8003c0c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8002a82:	2304      	movs	r3, #4
 8002a84:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a86:	2300      	movs	r3, #0
 8002a88:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8002a8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a92:	4619      	mov	r1, r3
 8002a94:	4845      	ldr	r0, [pc, #276]	@ (8002bac <MX_GPIO_Init+0x2fc>)
 8002a96:	f001 f8b9 	bl	8003c0c <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8002a9a:	f248 1333 	movw	r3, #33075	@ 0x8133
 8002a9e:	627b      	str	r3, [r7, #36]	@ 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002aac:	230c      	movs	r3, #12
 8002aae:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002ab0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	483b      	ldr	r0, [pc, #236]	@ (8002ba4 <MX_GPIO_Init+0x2f4>)
 8002ab8:	f001 f8a8 	bl	8003c0c <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8002abc:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8002ac0:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac2:	2302      	movs	r3, #2
 8002ac4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aca:	2303      	movs	r3, #3
 8002acc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002ace:	230c      	movs	r3, #12
 8002ad0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ad2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	4835      	ldr	r0, [pc, #212]	@ (8002bb0 <MX_GPIO_Init+0x300>)
 8002ada:	f001 f897 	bl	8003c0c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8002ade:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8002ae2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ae4:	2302      	movs	r3, #2
 8002ae6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aec:	2300      	movs	r3, #0
 8002aee:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8002af0:	230c      	movs	r3, #12
 8002af2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002af4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002af8:	4619      	mov	r1, r3
 8002afa:	482c      	ldr	r0, [pc, #176]	@ (8002bac <MX_GPIO_Init+0x2fc>)
 8002afc:	f001 f886 	bl	8003c0c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8002b00:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002b04:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b06:	2300      	movs	r3, #0
 8002b08:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8002b0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b12:	4619      	mov	r1, r3
 8002b14:	4825      	ldr	r0, [pc, #148]	@ (8002bac <MX_GPIO_Init+0x2fc>)
 8002b16:	f001 f879 	bl	8003c0c <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8002b1a:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8002b1e:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b20:	2302      	movs	r3, #2
 8002b22:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b24:	2300      	movs	r3, #0
 8002b26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002b2c:	230c      	movs	r3, #12
 8002b2e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b34:	4619      	mov	r1, r3
 8002b36:	481a      	ldr	r0, [pc, #104]	@ (8002ba0 <MX_GPIO_Init+0x2f0>)
 8002b38:	f001 f868 	bl	8003c0c <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8002b3c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002b40:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b42:	2300      	movs	r3, #0
 8002b44:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b46:	2300      	movs	r3, #0
 8002b48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8002b4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b4e:	4619      	mov	r1, r3
 8002b50:	4813      	ldr	r0, [pc, #76]	@ (8002ba0 <MX_GPIO_Init+0x2f0>)
 8002b52:	f001 f85b 	bl	8003c0c <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8002b56:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002b5a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b60:	2300      	movs	r3, #0
 8002b62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b64:	2300      	movs	r3, #0
 8002b66:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	480c      	ldr	r0, [pc, #48]	@ (8002ba0 <MX_GPIO_Init+0x2f0>)
 8002b70:	f001 f84c 	bl	8003c0c <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002b74:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002b78:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b7a:	2302      	movs	r3, #2
 8002b7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b82:	2303      	movs	r3, #3
 8002b84:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002b86:	2307      	movs	r3, #7
 8002b88:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b8e:	4619      	mov	r1, r3
 8002b90:	e010      	b.n	8002bb4 <MX_GPIO_Init+0x304>
 8002b92:	bf00      	nop
 8002b94:	40023800 	.word	0x40023800
 8002b98:	40020800 	.word	0x40020800
 8002b9c:	40020000 	.word	0x40020000
 8002ba0:	40020c00 	.word	0x40020c00
 8002ba4:	40021800 	.word	0x40021800
 8002ba8:	40021400 	.word	0x40021400
 8002bac:	40020400 	.word	0x40020400
 8002bb0:	40021000 	.word	0x40021000
 8002bb4:	4812      	ldr	r0, [pc, #72]	@ (8002c00 <MX_GPIO_Init+0x350>)
 8002bb6:	f001 f829 	bl	8003c0c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8002bba:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8002bbe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002bcc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	480c      	ldr	r0, [pc, #48]	@ (8002c04 <MX_GPIO_Init+0x354>)
 8002bd4:	f001 f81a 	bl	8003c0c <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8002bd8:	2360      	movs	r3, #96	@ 0x60
 8002bda:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bdc:	2302      	movs	r3, #2
 8002bde:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be0:	2300      	movs	r3, #0
 8002be2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002be4:	2303      	movs	r3, #3
 8002be6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002be8:	230c      	movs	r3, #12
 8002bea:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	4805      	ldr	r0, [pc, #20]	@ (8002c08 <MX_GPIO_Init+0x358>)
 8002bf4:	f001 f80a 	bl	8003c0c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002bf8:	bf00      	nop
 8002bfa:	3738      	adds	r7, #56	@ 0x38
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	40020000 	.word	0x40020000
 8002c04:	40021800 	.word	0x40021800
 8002c08:	40020400 	.word	0x40020400

08002c0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002c10:	b672      	cpsid	i
}
 8002c12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c14:	bf00      	nop
 8002c16:	e7fd      	b.n	8002c14 <Error_Handler+0x8>

08002c18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c1e:	2300      	movs	r3, #0
 8002c20:	607b      	str	r3, [r7, #4]
 8002c22:	4b10      	ldr	r3, [pc, #64]	@ (8002c64 <HAL_MspInit+0x4c>)
 8002c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c26:	4a0f      	ldr	r2, [pc, #60]	@ (8002c64 <HAL_MspInit+0x4c>)
 8002c28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c2e:	4b0d      	ldr	r3, [pc, #52]	@ (8002c64 <HAL_MspInit+0x4c>)
 8002c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c36:	607b      	str	r3, [r7, #4]
 8002c38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	603b      	str	r3, [r7, #0]
 8002c3e:	4b09      	ldr	r3, [pc, #36]	@ (8002c64 <HAL_MspInit+0x4c>)
 8002c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c42:	4a08      	ldr	r2, [pc, #32]	@ (8002c64 <HAL_MspInit+0x4c>)
 8002c44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c48:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c4a:	4b06      	ldr	r3, [pc, #24]	@ (8002c64 <HAL_MspInit+0x4c>)
 8002c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c52:	603b      	str	r3, [r7, #0]
 8002c54:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002c56:	2007      	movs	r0, #7
 8002c58:	f000 ff88 	bl	8003b6c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c5c:	bf00      	nop
 8002c5e:	3708      	adds	r7, #8
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	40023800 	.word	0x40023800

08002c68 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b08a      	sub	sp, #40	@ 0x28
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c70:	f107 0314 	add.w	r3, r7, #20
 8002c74:	2200      	movs	r2, #0
 8002c76:	601a      	str	r2, [r3, #0]
 8002c78:	605a      	str	r2, [r3, #4]
 8002c7a:	609a      	str	r2, [r3, #8]
 8002c7c:	60da      	str	r2, [r3, #12]
 8002c7e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a29      	ldr	r2, [pc, #164]	@ (8002d2c <HAL_I2C_MspInit+0xc4>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d14b      	bne.n	8002d22 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	613b      	str	r3, [r7, #16]
 8002c8e:	4b28      	ldr	r3, [pc, #160]	@ (8002d30 <HAL_I2C_MspInit+0xc8>)
 8002c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c92:	4a27      	ldr	r2, [pc, #156]	@ (8002d30 <HAL_I2C_MspInit+0xc8>)
 8002c94:	f043 0304 	orr.w	r3, r3, #4
 8002c98:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c9a:	4b25      	ldr	r3, [pc, #148]	@ (8002d30 <HAL_I2C_MspInit+0xc8>)
 8002c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c9e:	f003 0304 	and.w	r3, r3, #4
 8002ca2:	613b      	str	r3, [r7, #16]
 8002ca4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	60fb      	str	r3, [r7, #12]
 8002caa:	4b21      	ldr	r3, [pc, #132]	@ (8002d30 <HAL_I2C_MspInit+0xc8>)
 8002cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cae:	4a20      	ldr	r2, [pc, #128]	@ (8002d30 <HAL_I2C_MspInit+0xc8>)
 8002cb0:	f043 0301 	orr.w	r3, r3, #1
 8002cb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cb6:	4b1e      	ldr	r3, [pc, #120]	@ (8002d30 <HAL_I2C_MspInit+0xc8>)
 8002cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cba:	f003 0301 	and.w	r3, r3, #1
 8002cbe:	60fb      	str	r3, [r7, #12]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8002cc2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002cc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002cc8:	2312      	movs	r3, #18
 8002cca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002cd4:	2304      	movs	r3, #4
 8002cd6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8002cd8:	f107 0314 	add.w	r3, r7, #20
 8002cdc:	4619      	mov	r1, r3
 8002cde:	4815      	ldr	r0, [pc, #84]	@ (8002d34 <HAL_I2C_MspInit+0xcc>)
 8002ce0:	f000 ff94 	bl	8003c0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8002ce4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002ce8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002cea:	2312      	movs	r3, #18
 8002cec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002cf6:	2304      	movs	r3, #4
 8002cf8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8002cfa:	f107 0314 	add.w	r3, r7, #20
 8002cfe:	4619      	mov	r1, r3
 8002d00:	480d      	ldr	r0, [pc, #52]	@ (8002d38 <HAL_I2C_MspInit+0xd0>)
 8002d02:	f000 ff83 	bl	8003c0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002d06:	2300      	movs	r3, #0
 8002d08:	60bb      	str	r3, [r7, #8]
 8002d0a:	4b09      	ldr	r3, [pc, #36]	@ (8002d30 <HAL_I2C_MspInit+0xc8>)
 8002d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d0e:	4a08      	ldr	r2, [pc, #32]	@ (8002d30 <HAL_I2C_MspInit+0xc8>)
 8002d10:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002d14:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d16:	4b06      	ldr	r3, [pc, #24]	@ (8002d30 <HAL_I2C_MspInit+0xc8>)
 8002d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d1a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002d1e:	60bb      	str	r3, [r7, #8]
 8002d20:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8002d22:	bf00      	nop
 8002d24:	3728      	adds	r7, #40	@ 0x28
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	40005c00 	.word	0x40005c00
 8002d30:	40023800 	.word	0x40023800
 8002d34:	40020800 	.word	0x40020800
 8002d38:	40020000 	.word	0x40020000

08002d3c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b09a      	sub	sp, #104	@ 0x68
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d44:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002d48:	2200      	movs	r2, #0
 8002d4a:	601a      	str	r2, [r3, #0]
 8002d4c:	605a      	str	r2, [r3, #4]
 8002d4e:	609a      	str	r2, [r3, #8]
 8002d50:	60da      	str	r2, [r3, #12]
 8002d52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d58:	2230      	movs	r2, #48	@ 0x30
 8002d5a:	2100      	movs	r1, #0
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f004 fb53 	bl	8007408 <memset>
  if(hltdc->Instance==LTDC)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a81      	ldr	r2, [pc, #516]	@ (8002f6c <HAL_LTDC_MspInit+0x230>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	f040 80fb 	bne.w	8002f64 <HAL_LTDC_MspInit+0x228>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002d6e:	2308      	movs	r3, #8
 8002d70:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 200;
 8002d72:	23c8      	movs	r3, #200	@ 0xc8
 8002d74:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8002d76:	2302      	movs	r3, #2
 8002d78:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_16;
 8002d7a:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8002d7e:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d84:	4618      	mov	r0, r3
 8002d86:	f003 f9f5 	bl	8006174 <HAL_RCCEx_PeriphCLKConfig>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d001      	beq.n	8002d94 <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 8002d90:	f7ff ff3c 	bl	8002c0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002d94:	2300      	movs	r3, #0
 8002d96:	623b      	str	r3, [r7, #32]
 8002d98:	4b75      	ldr	r3, [pc, #468]	@ (8002f70 <HAL_LTDC_MspInit+0x234>)
 8002d9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d9c:	4a74      	ldr	r2, [pc, #464]	@ (8002f70 <HAL_LTDC_MspInit+0x234>)
 8002d9e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002da2:	6453      	str	r3, [r2, #68]	@ 0x44
 8002da4:	4b72      	ldr	r3, [pc, #456]	@ (8002f70 <HAL_LTDC_MspInit+0x234>)
 8002da6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002da8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002dac:	623b      	str	r3, [r7, #32]
 8002dae:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002db0:	2300      	movs	r3, #0
 8002db2:	61fb      	str	r3, [r7, #28]
 8002db4:	4b6e      	ldr	r3, [pc, #440]	@ (8002f70 <HAL_LTDC_MspInit+0x234>)
 8002db6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002db8:	4a6d      	ldr	r2, [pc, #436]	@ (8002f70 <HAL_LTDC_MspInit+0x234>)
 8002dba:	f043 0320 	orr.w	r3, r3, #32
 8002dbe:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dc0:	4b6b      	ldr	r3, [pc, #428]	@ (8002f70 <HAL_LTDC_MspInit+0x234>)
 8002dc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dc4:	f003 0320 	and.w	r3, r3, #32
 8002dc8:	61fb      	str	r3, [r7, #28]
 8002dca:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dcc:	2300      	movs	r3, #0
 8002dce:	61bb      	str	r3, [r7, #24]
 8002dd0:	4b67      	ldr	r3, [pc, #412]	@ (8002f70 <HAL_LTDC_MspInit+0x234>)
 8002dd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dd4:	4a66      	ldr	r2, [pc, #408]	@ (8002f70 <HAL_LTDC_MspInit+0x234>)
 8002dd6:	f043 0301 	orr.w	r3, r3, #1
 8002dda:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ddc:	4b64      	ldr	r3, [pc, #400]	@ (8002f70 <HAL_LTDC_MspInit+0x234>)
 8002dde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002de0:	f003 0301 	and.w	r3, r3, #1
 8002de4:	61bb      	str	r3, [r7, #24]
 8002de6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002de8:	2300      	movs	r3, #0
 8002dea:	617b      	str	r3, [r7, #20]
 8002dec:	4b60      	ldr	r3, [pc, #384]	@ (8002f70 <HAL_LTDC_MspInit+0x234>)
 8002dee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002df0:	4a5f      	ldr	r2, [pc, #380]	@ (8002f70 <HAL_LTDC_MspInit+0x234>)
 8002df2:	f043 0302 	orr.w	r3, r3, #2
 8002df6:	6313      	str	r3, [r2, #48]	@ 0x30
 8002df8:	4b5d      	ldr	r3, [pc, #372]	@ (8002f70 <HAL_LTDC_MspInit+0x234>)
 8002dfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dfc:	f003 0302 	and.w	r3, r3, #2
 8002e00:	617b      	str	r3, [r7, #20]
 8002e02:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002e04:	2300      	movs	r3, #0
 8002e06:	613b      	str	r3, [r7, #16]
 8002e08:	4b59      	ldr	r3, [pc, #356]	@ (8002f70 <HAL_LTDC_MspInit+0x234>)
 8002e0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e0c:	4a58      	ldr	r2, [pc, #352]	@ (8002f70 <HAL_LTDC_MspInit+0x234>)
 8002e0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002e12:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e14:	4b56      	ldr	r3, [pc, #344]	@ (8002f70 <HAL_LTDC_MspInit+0x234>)
 8002e16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e1c:	613b      	str	r3, [r7, #16]
 8002e1e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e20:	2300      	movs	r3, #0
 8002e22:	60fb      	str	r3, [r7, #12]
 8002e24:	4b52      	ldr	r3, [pc, #328]	@ (8002f70 <HAL_LTDC_MspInit+0x234>)
 8002e26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e28:	4a51      	ldr	r2, [pc, #324]	@ (8002f70 <HAL_LTDC_MspInit+0x234>)
 8002e2a:	f043 0304 	orr.w	r3, r3, #4
 8002e2e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e30:	4b4f      	ldr	r3, [pc, #316]	@ (8002f70 <HAL_LTDC_MspInit+0x234>)
 8002e32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e34:	f003 0304 	and.w	r3, r3, #4
 8002e38:	60fb      	str	r3, [r7, #12]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	60bb      	str	r3, [r7, #8]
 8002e40:	4b4b      	ldr	r3, [pc, #300]	@ (8002f70 <HAL_LTDC_MspInit+0x234>)
 8002e42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e44:	4a4a      	ldr	r2, [pc, #296]	@ (8002f70 <HAL_LTDC_MspInit+0x234>)
 8002e46:	f043 0308 	orr.w	r3, r3, #8
 8002e4a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e4c:	4b48      	ldr	r3, [pc, #288]	@ (8002f70 <HAL_LTDC_MspInit+0x234>)
 8002e4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e50:	f003 0308 	and.w	r3, r3, #8
 8002e54:	60bb      	str	r3, [r7, #8]
 8002e56:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8002e58:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002e5c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e5e:	2302      	movs	r3, #2
 8002e60:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e62:	2300      	movs	r3, #0
 8002e64:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e66:	2300      	movs	r3, #0
 8002e68:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002e6a:	230e      	movs	r3, #14
 8002e6c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8002e6e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002e72:	4619      	mov	r1, r3
 8002e74:	483f      	ldr	r0, [pc, #252]	@ (8002f74 <HAL_LTDC_MspInit+0x238>)
 8002e76:	f000 fec9 	bl	8003c0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8002e7a:	f641 0358 	movw	r3, #6232	@ 0x1858
 8002e7e:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e80:	2302      	movs	r3, #2
 8002e82:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e84:	2300      	movs	r3, #0
 8002e86:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002e8c:	230e      	movs	r3, #14
 8002e8e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e90:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002e94:	4619      	mov	r1, r3
 8002e96:	4838      	ldr	r0, [pc, #224]	@ (8002f78 <HAL_LTDC_MspInit+0x23c>)
 8002e98:	f000 feb8 	bl	8003c0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ea0:	2302      	movs	r3, #2
 8002ea2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002eac:	2309      	movs	r3, #9
 8002eae:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002eb0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	4831      	ldr	r0, [pc, #196]	@ (8002f7c <HAL_LTDC_MspInit+0x240>)
 8002eb8:	f000 fea8 	bl	8003c0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8002ebc:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8002ec0:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ec2:	2302      	movs	r3, #2
 8002ec4:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002ece:	230e      	movs	r3, #14
 8002ed0:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ed2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	4828      	ldr	r0, [pc, #160]	@ (8002f7c <HAL_LTDC_MspInit+0x240>)
 8002eda:	f000 fe97 	bl	8003c0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8002ede:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8002ee2:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ee4:	2302      	movs	r3, #2
 8002ee6:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eec:	2300      	movs	r3, #0
 8002eee:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002ef0:	230e      	movs	r3, #14
 8002ef2:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002ef4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002ef8:	4619      	mov	r1, r3
 8002efa:	4821      	ldr	r0, [pc, #132]	@ (8002f80 <HAL_LTDC_MspInit+0x244>)
 8002efc:	f000 fe86 	bl	8003c0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8002f00:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8002f04:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f06:	2302      	movs	r3, #2
 8002f08:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002f12:	230e      	movs	r3, #14
 8002f14:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f16:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	4819      	ldr	r0, [pc, #100]	@ (8002f84 <HAL_LTDC_MspInit+0x248>)
 8002f1e:	f000 fe75 	bl	8003c0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8002f22:	2348      	movs	r3, #72	@ 0x48
 8002f24:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f26:	2302      	movs	r3, #2
 8002f28:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002f32:	230e      	movs	r3, #14
 8002f34:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f36:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	4812      	ldr	r0, [pc, #72]	@ (8002f88 <HAL_LTDC_MspInit+0x24c>)
 8002f3e:	f000 fe65 	bl	8003c0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8002f42:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002f46:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f48:	2302      	movs	r3, #2
 8002f4a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f50:	2300      	movs	r3, #0
 8002f52:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002f54:	2309      	movs	r3, #9
 8002f56:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002f58:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	4808      	ldr	r0, [pc, #32]	@ (8002f80 <HAL_LTDC_MspInit+0x244>)
 8002f60:	f000 fe54 	bl	8003c0c <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8002f64:	bf00      	nop
 8002f66:	3768      	adds	r7, #104	@ 0x68
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	40016800 	.word	0x40016800
 8002f70:	40023800 	.word	0x40023800
 8002f74:	40021400 	.word	0x40021400
 8002f78:	40020000 	.word	0x40020000
 8002f7c:	40020400 	.word	0x40020400
 8002f80:	40021800 	.word	0x40021800
 8002f84:	40020800 	.word	0x40020800
 8002f88:	40020c00 	.word	0x40020c00

08002f8c <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b085      	sub	sp, #20
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a0b      	ldr	r2, [pc, #44]	@ (8002fc8 <HAL_RNG_MspInit+0x3c>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d10d      	bne.n	8002fba <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	60fb      	str	r3, [r7, #12]
 8002fa2:	4b0a      	ldr	r3, [pc, #40]	@ (8002fcc <HAL_RNG_MspInit+0x40>)
 8002fa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fa6:	4a09      	ldr	r2, [pc, #36]	@ (8002fcc <HAL_RNG_MspInit+0x40>)
 8002fa8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002fac:	6353      	str	r3, [r2, #52]	@ 0x34
 8002fae:	4b07      	ldr	r3, [pc, #28]	@ (8002fcc <HAL_RNG_MspInit+0x40>)
 8002fb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fb6:	60fb      	str	r3, [r7, #12]
 8002fb8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8002fba:	bf00      	nop
 8002fbc:	3714      	adds	r7, #20
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop
 8002fc8:	50060800 	.word	0x50060800
 8002fcc:	40023800 	.word	0x40023800

08002fd0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b08a      	sub	sp, #40	@ 0x28
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fd8:	f107 0314 	add.w	r3, r7, #20
 8002fdc:	2200      	movs	r2, #0
 8002fde:	601a      	str	r2, [r3, #0]
 8002fe0:	605a      	str	r2, [r3, #4]
 8002fe2:	609a      	str	r2, [r3, #8]
 8002fe4:	60da      	str	r2, [r3, #12]
 8002fe6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a19      	ldr	r2, [pc, #100]	@ (8003054 <HAL_SPI_MspInit+0x84>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d12c      	bne.n	800304c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	613b      	str	r3, [r7, #16]
 8002ff6:	4b18      	ldr	r3, [pc, #96]	@ (8003058 <HAL_SPI_MspInit+0x88>)
 8002ff8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ffa:	4a17      	ldr	r2, [pc, #92]	@ (8003058 <HAL_SPI_MspInit+0x88>)
 8002ffc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003000:	6453      	str	r3, [r2, #68]	@ 0x44
 8003002:	4b15      	ldr	r3, [pc, #84]	@ (8003058 <HAL_SPI_MspInit+0x88>)
 8003004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003006:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800300a:	613b      	str	r3, [r7, #16]
 800300c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800300e:	2300      	movs	r3, #0
 8003010:	60fb      	str	r3, [r7, #12]
 8003012:	4b11      	ldr	r3, [pc, #68]	@ (8003058 <HAL_SPI_MspInit+0x88>)
 8003014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003016:	4a10      	ldr	r2, [pc, #64]	@ (8003058 <HAL_SPI_MspInit+0x88>)
 8003018:	f043 0320 	orr.w	r3, r3, #32
 800301c:	6313      	str	r3, [r2, #48]	@ 0x30
 800301e:	4b0e      	ldr	r3, [pc, #56]	@ (8003058 <HAL_SPI_MspInit+0x88>)
 8003020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003022:	f003 0320 	and.w	r3, r3, #32
 8003026:	60fb      	str	r3, [r7, #12]
 8003028:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800302a:	f44f 7360 	mov.w	r3, #896	@ 0x380
 800302e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003030:	2302      	movs	r3, #2
 8003032:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003034:	2300      	movs	r3, #0
 8003036:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003038:	2300      	movs	r3, #0
 800303a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800303c:	2305      	movs	r3, #5
 800303e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003040:	f107 0314 	add.w	r3, r7, #20
 8003044:	4619      	mov	r1, r3
 8003046:	4805      	ldr	r0, [pc, #20]	@ (800305c <HAL_SPI_MspInit+0x8c>)
 8003048:	f000 fde0 	bl	8003c0c <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 800304c:	bf00      	nop
 800304e:	3728      	adds	r7, #40	@ 0x28
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}
 8003054:	40015000 	.word	0x40015000
 8003058:	40023800 	.word	0x40023800
 800305c:	40021400 	.word	0x40021400

08003060 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a08      	ldr	r2, [pc, #32]	@ (8003090 <HAL_SPI_MspDeInit+0x30>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d10a      	bne.n	8003088 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8003072:	4b08      	ldr	r3, [pc, #32]	@ (8003094 <HAL_SPI_MspDeInit+0x34>)
 8003074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003076:	4a07      	ldr	r2, [pc, #28]	@ (8003094 <HAL_SPI_MspDeInit+0x34>)
 8003078:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800307c:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 800307e:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8003082:	4805      	ldr	r0, [pc, #20]	@ (8003098 <HAL_SPI_MspDeInit+0x38>)
 8003084:	f000 ff6e 	bl	8003f64 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8003088:	bf00      	nop
 800308a:	3708      	adds	r7, #8
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}
 8003090:	40015000 	.word	0x40015000
 8003094:	40023800 	.word	0x40023800
 8003098:	40021400 	.word	0x40021400

0800309c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800309c:	b480      	push	{r7}
 800309e:	b085      	sub	sp, #20
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030ac:	d10d      	bne.n	80030ca <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80030ae:	2300      	movs	r3, #0
 80030b0:	60fb      	str	r3, [r7, #12]
 80030b2:	4b09      	ldr	r3, [pc, #36]	@ (80030d8 <HAL_TIM_Base_MspInit+0x3c>)
 80030b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b6:	4a08      	ldr	r2, [pc, #32]	@ (80030d8 <HAL_TIM_Base_MspInit+0x3c>)
 80030b8:	f043 0301 	orr.w	r3, r3, #1
 80030bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80030be:	4b06      	ldr	r3, [pc, #24]	@ (80030d8 <HAL_TIM_Base_MspInit+0x3c>)
 80030c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	60fb      	str	r3, [r7, #12]
 80030c8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80030ca:	bf00      	nop
 80030cc:	3714      	adds	r7, #20
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	40023800 	.word	0x40023800

080030dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030dc:	b480      	push	{r7}
 80030de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80030e0:	bf00      	nop
 80030e2:	e7fd      	b.n	80030e0 <NMI_Handler+0x4>

080030e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030e4:	b480      	push	{r7}
 80030e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030e8:	bf00      	nop
 80030ea:	e7fd      	b.n	80030e8 <HardFault_Handler+0x4>

080030ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030ec:	b480      	push	{r7}
 80030ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030f0:	bf00      	nop
 80030f2:	e7fd      	b.n	80030f0 <MemManage_Handler+0x4>

080030f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030f4:	b480      	push	{r7}
 80030f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030f8:	bf00      	nop
 80030fa:	e7fd      	b.n	80030f8 <BusFault_Handler+0x4>

080030fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030fc:	b480      	push	{r7}
 80030fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003100:	bf00      	nop
 8003102:	e7fd      	b.n	8003100 <UsageFault_Handler+0x4>

08003104 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003104:	b480      	push	{r7}
 8003106:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003108:	bf00      	nop
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr

08003112 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003112:	b480      	push	{r7}
 8003114:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003116:	bf00      	nop
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr

08003120 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003120:	b480      	push	{r7}
 8003122:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003124:	bf00      	nop
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr

0800312e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800312e:	b580      	push	{r7, lr}
 8003130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003132:	f000 fbe3 	bl	80038fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003136:	bf00      	nop
 8003138:	bd80      	pop	{r7, pc}

0800313a <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 800313a:	b580      	push	{r7, lr}
 800313c:	b082      	sub	sp, #8
 800313e:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports 
    I2C3_MspInit();
 8003140:	f000 f9ce 	bl	80034e0 <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 8003144:	f000 f98e 	bl	8003464 <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8003148:	2202      	movs	r2, #2
 800314a:	2103      	movs	r1, #3
 800314c:	2082      	movs	r0, #130	@ 0x82
 800314e:	f000 fa1b 	bl	8003588 <I2C3_Write>
    HAL_Delay(5);
 8003152:	2005      	movs	r0, #5
 8003154:	f000 fbf2 	bl	800393c <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8003158:	2200      	movs	r2, #0
 800315a:	2103      	movs	r1, #3
 800315c:	2082      	movs	r0, #130	@ 0x82
 800315e:	f000 fa13 	bl	8003588 <I2C3_Write>
    HAL_Delay(2);
 8003162:	2002      	movs	r0, #2
 8003164:	f000 fbea 	bl	800393c <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 8003168:	1cba      	adds	r2, r7, #2
 800316a:	2302      	movs	r3, #2
 800316c:	2100      	movs	r1, #0
 800316e:	2082      	movs	r0, #130	@ 0x82
 8003170:	f000 fa5a 	bl	8003628 <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 8003174:	887b      	ldrh	r3, [r7, #2]
 8003176:	021b      	lsls	r3, r3, #8
 8003178:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 800317a:	887b      	ldrh	r3, [r7, #2]
 800317c:	0a1b      	lsrs	r3, r3, #8
 800317e:	b29a      	uxth	r2, r3
 8003180:	88fb      	ldrh	r3, [r7, #6]
 8003182:	4313      	orrs	r3, r2
 8003184:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 8003186:	88fb      	ldrh	r3, [r7, #6]
 8003188:	f640 0211 	movw	r2, #2065	@ 0x811
 800318c:	4293      	cmp	r3, r2
 800318e:	d001      	beq.n	8003194 <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 8003190:	2303      	movs	r3, #3
 8003192:	e075      	b.n	8003280 <STMPE811_Init+0x146>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8003194:	2202      	movs	r2, #2
 8003196:	2103      	movs	r1, #3
 8003198:	2082      	movs	r0, #130	@ 0x82
 800319a:	f000 f9f5 	bl	8003588 <I2C3_Write>
    HAL_Delay(5);
 800319e:	2005      	movs	r0, #5
 80031a0:	f000 fbcc 	bl	800393c <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 80031a4:	2200      	movs	r2, #0
 80031a6:	2103      	movs	r1, #3
 80031a8:	2082      	movs	r0, #130	@ 0x82
 80031aa:	f000 f9ed 	bl	8003588 <I2C3_Write>
    HAL_Delay(2);
 80031ae:	2002      	movs	r0, #2
 80031b0:	f000 fbc4 	bl	800393c <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 80031b4:	2004      	movs	r0, #4
 80031b6:	f000 f867 	bl	8003288 <STMPE811_Read>
 80031ba:	4603      	mov	r3, r0
 80031bc:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 80031be:	797b      	ldrb	r3, [r7, #5]
 80031c0:	f023 0301 	bic.w	r3, r3, #1
 80031c4:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 80031c6:	797b      	ldrb	r3, [r7, #5]
 80031c8:	461a      	mov	r2, r3
 80031ca:	2104      	movs	r1, #4
 80031cc:	2082      	movs	r0, #130	@ 0x82
 80031ce:	f000 f9db 	bl	8003588 <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 80031d2:	2004      	movs	r0, #4
 80031d4:	f000 f858 	bl	8003288 <STMPE811_Read>
 80031d8:	4603      	mov	r3, r0
 80031da:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 80031dc:	797b      	ldrb	r3, [r7, #5]
 80031de:	f023 0302 	bic.w	r3, r3, #2
 80031e2:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 80031e4:	797b      	ldrb	r3, [r7, #5]
 80031e6:	461a      	mov	r2, r3
 80031e8:	2104      	movs	r1, #4
 80031ea:	2082      	movs	r0, #130	@ 0x82
 80031ec:	f000 f9cc 	bl	8003588 <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 80031f0:	2249      	movs	r2, #73	@ 0x49
 80031f2:	2120      	movs	r1, #32
 80031f4:	2082      	movs	r0, #130	@ 0x82
 80031f6:	f000 f9c7 	bl	8003588 <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 80031fa:	2002      	movs	r0, #2
 80031fc:	f000 fb9e 	bl	800393c <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 8003200:	2201      	movs	r2, #1
 8003202:	2121      	movs	r1, #33	@ 0x21
 8003204:	2082      	movs	r0, #130	@ 0x82
 8003206:	f000 f9bf 	bl	8003588 <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 800320a:	2017      	movs	r0, #23
 800320c:	f000 f83c 	bl	8003288 <STMPE811_Read>
 8003210:	4603      	mov	r3, r0
 8003212:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 8003214:	797b      	ldrb	r3, [r7, #5]
 8003216:	f043 031e 	orr.w	r3, r3, #30
 800321a:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 800321c:	797b      	ldrb	r3, [r7, #5]
 800321e:	461a      	mov	r2, r3
 8003220:	2117      	movs	r1, #23
 8003222:	2082      	movs	r0, #130	@ 0x82
 8003224:	f000 f9b0 	bl	8003588 <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 8003228:	229a      	movs	r2, #154	@ 0x9a
 800322a:	2141      	movs	r1, #65	@ 0x41
 800322c:	2082      	movs	r0, #130	@ 0x82
 800322e:	f000 f9ab 	bl	8003588 <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 8003232:	2201      	movs	r2, #1
 8003234:	214a      	movs	r1, #74	@ 0x4a
 8003236:	2082      	movs	r0, #130	@ 0x82
 8003238:	f000 f9a6 	bl	8003588 <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 800323c:	2201      	movs	r2, #1
 800323e:	214b      	movs	r1, #75	@ 0x4b
 8003240:	2082      	movs	r0, #130	@ 0x82
 8003242:	f000 f9a1 	bl	8003588 <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8003246:	2200      	movs	r2, #0
 8003248:	214b      	movs	r1, #75	@ 0x4b
 800324a:	2082      	movs	r0, #130	@ 0x82
 800324c:	f000 f99c 	bl	8003588 <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 8003250:	2201      	movs	r2, #1
 8003252:	2156      	movs	r1, #86	@ 0x56
 8003254:	2082      	movs	r0, #130	@ 0x82
 8003256:	f000 f997 	bl	8003588 <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 800325a:	2201      	movs	r2, #1
 800325c:	2158      	movs	r1, #88	@ 0x58
 800325e:	2082      	movs	r0, #130	@ 0x82
 8003260:	f000 f992 	bl	8003588 <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 8003264:	2203      	movs	r2, #3
 8003266:	2140      	movs	r1, #64	@ 0x40
 8003268:	2082      	movs	r0, #130	@ 0x82
 800326a:	f000 f98d 	bl	8003588 <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 800326e:	22ff      	movs	r2, #255	@ 0xff
 8003270:	210b      	movs	r1, #11
 8003272:	2082      	movs	r0, #130	@ 0x82
 8003274:	f000 f988 	bl	8003588 <I2C3_Write>
    
    /* Wait for 2 ms delay */
    HAL_Delay(200);
 8003278:	20c8      	movs	r0, #200	@ 0xc8
 800327a:	f000 fb5f 	bl	800393c <HAL_Delay>

    return STMPE811_State_Ok;
 800327e:	2302      	movs	r3, #2

}
 8003280:	4618      	mov	r0, r3
 8003282:	3708      	adds	r7, #8
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}

08003288 <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	4603      	mov	r3, r0
 8003290:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 8003292:	f107 020f 	add.w	r2, r7, #15
 8003296:	79fb      	ldrb	r3, [r7, #7]
 8003298:	4619      	mov	r1, r3
 800329a:	2082      	movs	r0, #130	@ 0x82
 800329c:	f000 f99e 	bl	80035dc <I2C3_Read>

    return readData;
 80032a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3710      	adds	r7, #16
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}

080032aa <STMPE811_ReadTouch>:
}

/* The below function was created by Tilen MAJERLE but modified by Xavion */

STMPE811_State_t STMPE811_ReadTouch(STMPE811_TouchData *structdata)  //TM Function
{
 80032aa:	b580      	push	{r7, lr}
 80032ac:	b084      	sub	sp, #16
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	6078      	str	r0, [r7, #4]
    uint8_t val;

    /* Save state */
    structdata->last_pressed = structdata->pressed;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	791a      	ldrb	r2, [r3, #4]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	715a      	strb	r2, [r3, #5]

    /* Read */
    val = STMPE811_Read(STMPE811_TSC_CTRL);
 80032ba:	2040      	movs	r0, #64	@ 0x40
 80032bc:	f7ff ffe4 	bl	8003288 <STMPE811_Read>
 80032c0:	4603      	mov	r3, r0
 80032c2:	73fb      	strb	r3, [r7, #15]
    if ((val & 0x80) == 0) {
 80032c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	db0e      	blt.n	80032ea <STMPE811_ReadTouch+0x40>
        //Not pressed
        structdata->pressed = STMPE811_State_Released;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2201      	movs	r2, #1
 80032d0:	711a      	strb	r2, [r3, #4]

        //Reset Fifo
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 80032d2:	2201      	movs	r2, #1
 80032d4:	214b      	movs	r1, #75	@ 0x4b
 80032d6:	2082      	movs	r0, #130	@ 0x82
 80032d8:	f000 f956 	bl	8003588 <I2C3_Write>
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 80032dc:	2200      	movs	r2, #0
 80032de:	214b      	movs	r1, #75	@ 0x4b
 80032e0:	2082      	movs	r0, #130	@ 0x82
 80032e2:	f000 f951 	bl	8003588 <I2C3_Write>

        return STMPE811_State_Released;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e0a7      	b.n	800343a <STMPE811_ReadTouch+0x190>

    /* Clear all the status pending bits if any */
    //TM_I2C_Write(STMPE811_I2C, STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);

    //Pressed
    if (structdata->orientation == STMPE811_Orientation_Portrait_1) {
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	799b      	ldrb	r3, [r3, #6]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d117      	bne.n	8003322 <STMPE811_ReadTouch+0x78>
        structdata->x = 239 - TM_STMPE811_ReadX(structdata->x);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	881b      	ldrh	r3, [r3, #0]
 80032f6:	4618      	mov	r0, r3
 80032f8:	f000 f9b8 	bl	800366c <TM_STMPE811_ReadX>
 80032fc:	4603      	mov	r3, r0
 80032fe:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8003302:	b29a      	uxth	r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	801a      	strh	r2, [r3, #0]
        structdata->y = 319 - TM_STMPE811_ReadY(structdata->y);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	885b      	ldrh	r3, [r3, #2]
 800330c:	4618      	mov	r0, r3
 800330e:	f000 fa0d 	bl	800372c <TM_STMPE811_ReadY>
 8003312:	4603      	mov	r3, r0
 8003314:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8003318:	3301      	adds	r3, #1
 800331a:	b29a      	uxth	r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	805a      	strh	r2, [r3, #2]
 8003320:	e048      	b.n	80033b4 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Portrait_2) {
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	799b      	ldrb	r3, [r3, #6]
 8003326:	2b01      	cmp	r3, #1
 8003328:	d112      	bne.n	8003350 <STMPE811_ReadTouch+0xa6>
        structdata->x = TM_STMPE811_ReadX(structdata->x);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	881b      	ldrh	r3, [r3, #0]
 800332e:	4618      	mov	r0, r3
 8003330:	f000 f99c 	bl	800366c <TM_STMPE811_ReadX>
 8003334:	4603      	mov	r3, r0
 8003336:	461a      	mov	r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	801a      	strh	r2, [r3, #0]
        structdata->y = TM_STMPE811_ReadY(structdata->y);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	885b      	ldrh	r3, [r3, #2]
 8003340:	4618      	mov	r0, r3
 8003342:	f000 f9f3 	bl	800372c <TM_STMPE811_ReadY>
 8003346:	4603      	mov	r3, r0
 8003348:	461a      	mov	r2, r3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	805a      	strh	r2, [r3, #2]
 800334e:	e031      	b.n	80033b4 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_1) {
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	799b      	ldrb	r3, [r3, #6]
 8003354:	2b02      	cmp	r3, #2
 8003356:	d115      	bne.n	8003384 <STMPE811_ReadTouch+0xda>
        structdata->y = TM_STMPE811_ReadX(structdata->y);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	885b      	ldrh	r3, [r3, #2]
 800335c:	4618      	mov	r0, r3
 800335e:	f000 f985 	bl	800366c <TM_STMPE811_ReadX>
 8003362:	4603      	mov	r3, r0
 8003364:	461a      	mov	r2, r3
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	805a      	strh	r2, [r3, #2]
        structdata->x = 319 - TM_STMPE811_ReadY(structdata->x);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	881b      	ldrh	r3, [r3, #0]
 800336e:	4618      	mov	r0, r3
 8003370:	f000 f9dc 	bl	800372c <TM_STMPE811_ReadY>
 8003374:	4603      	mov	r3, r0
 8003376:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 800337a:	3301      	adds	r3, #1
 800337c:	b29a      	uxth	r2, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	801a      	strh	r2, [r3, #0]
 8003382:	e017      	b.n	80033b4 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_2) {
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	799b      	ldrb	r3, [r3, #6]
 8003388:	2b03      	cmp	r3, #3
 800338a:	d113      	bne.n	80033b4 <STMPE811_ReadTouch+0x10a>
        structdata->y = 239 - TM_STMPE811_ReadX(structdata->x);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	881b      	ldrh	r3, [r3, #0]
 8003390:	4618      	mov	r0, r3
 8003392:	f000 f96b 	bl	800366c <TM_STMPE811_ReadX>
 8003396:	4603      	mov	r3, r0
 8003398:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 800339c:	b29a      	uxth	r2, r3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	805a      	strh	r2, [r3, #2]
        structdata->x = TM_STMPE811_ReadY(structdata->x);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	881b      	ldrh	r3, [r3, #0]
 80033a6:	4618      	mov	r0, r3
 80033a8:	f000 f9c0 	bl	800372c <TM_STMPE811_ReadY>
 80033ac:	4603      	mov	r3, r0
 80033ae:	461a      	mov	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 80033b4:	2201      	movs	r2, #1
 80033b6:	214b      	movs	r1, #75	@ 0x4b
 80033b8:	2082      	movs	r0, #130	@ 0x82
 80033ba:	f000 f8e5 	bl	8003588 <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 80033be:	2200      	movs	r2, #0
 80033c0:	214b      	movs	r1, #75	@ 0x4b
 80033c2:	2082      	movs	r0, #130	@ 0x82
 80033c4:	f000 f8e0 	bl	8003588 <I2C3_Write>

    //Check for valid data
    if (structdata->orientation == STMPE811_Orientation_Portrait_1 || structdata->orientation == STMPE811_Orientation_Portrait_2) {
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	799b      	ldrb	r3, [r3, #6]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d003      	beq.n	80033d8 <STMPE811_ReadTouch+0x12e>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	799b      	ldrb	r3, [r3, #6]
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d115      	bne.n	8003404 <STMPE811_ReadTouch+0x15a>
        //Portrait
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	881b      	ldrh	r3, [r3, #0]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d027      	beq.n	8003430 <STMPE811_ReadTouch+0x186>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	881b      	ldrh	r3, [r3, #0]
 80033e4:	2bee      	cmp	r3, #238	@ 0xee
 80033e6:	d823      	bhi.n	8003430 <STMPE811_ReadTouch+0x186>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	885b      	ldrh	r3, [r3, #2]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d01f      	beq.n	8003430 <STMPE811_ReadTouch+0x186>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	885b      	ldrh	r3, [r3, #2]
 80033f4:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 80033f8:	d81a      	bhi.n	8003430 <STMPE811_ReadTouch+0x186>
            structdata->pressed = STMPE811_State_Pressed;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 8003400:	2300      	movs	r3, #0
 8003402:	e01a      	b.n	800343a <STMPE811_ReadTouch+0x190>
        }
    } else {
        //Landscape
        if (structdata->x > 0 && structdata->x < 319 && structdata->y > 0 && structdata->y < 239) {
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	881b      	ldrh	r3, [r3, #0]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d012      	beq.n	8003432 <STMPE811_ReadTouch+0x188>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	881b      	ldrh	r3, [r3, #0]
 8003410:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 8003414:	d80d      	bhi.n	8003432 <STMPE811_ReadTouch+0x188>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	885b      	ldrh	r3, [r3, #2]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d009      	beq.n	8003432 <STMPE811_ReadTouch+0x188>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	885b      	ldrh	r3, [r3, #2]
 8003422:	2bee      	cmp	r3, #238	@ 0xee
 8003424:	d805      	bhi.n	8003432 <STMPE811_ReadTouch+0x188>
            structdata->pressed = STMPE811_State_Pressed;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 800342c:	2300      	movs	r3, #0
 800342e:	e004      	b.n	800343a <STMPE811_ReadTouch+0x190>
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 8003430:	bf00      	nop
        }
    }

    structdata->pressed = STMPE811_State_Released;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2201      	movs	r2, #1
 8003436:	711a      	strb	r2, [r3, #4]

    return STMPE811_State_Released;
 8003438:	2301      	movs	r3, #1
}
 800343a:	4618      	mov	r0, r3
 800343c:	3710      	adds	r7, #16
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
	...

08003444 <verifyHAL_I2C_IS_OKAY>:
    }
    return true;
}

//  ******************************** I2C Functions ********************************//
void verifyHAL_I2C_IS_OKAY(){
 8003444:	b480      	push	{r7}
 8003446:	af00      	add	r7, sp, #0
    if (HAL_status != HAL_OK)
 8003448:	4b05      	ldr	r3, [pc, #20]	@ (8003460 <verifyHAL_I2C_IS_OKAY+0x1c>)
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d001      	beq.n	8003454 <verifyHAL_I2C_IS_OKAY+0x10>
    {
        while(1);
 8003450:	bf00      	nop
 8003452:	e7fd      	b.n	8003450 <verifyHAL_I2C_IS_OKAY+0xc>
    }
}
 8003454:	bf00      	nop
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr
 800345e:	bf00      	nop
 8003460:	20025c18 	.word	0x20025c18

08003464 <I2C3_Init>:

static void I2C3_Init()
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 800346a:	2300      	movs	r3, #0
 800346c:	603b      	str	r3, [r7, #0]
 800346e:	4b18      	ldr	r3, [pc, #96]	@ (80034d0 <I2C3_Init+0x6c>)
 8003470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003472:	4a17      	ldr	r2, [pc, #92]	@ (80034d0 <I2C3_Init+0x6c>)
 8003474:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003478:	6413      	str	r3, [r2, #64]	@ 0x40
 800347a:	4b15      	ldr	r3, [pc, #84]	@ (80034d0 <I2C3_Init+0x6c>)
 800347c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800347e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003482:	603b      	str	r3, [r7, #0]
 8003484:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 8003486:	4b13      	ldr	r3, [pc, #76]	@ (80034d4 <I2C3_Init+0x70>)
 8003488:	4a13      	ldr	r2, [pc, #76]	@ (80034d8 <I2C3_Init+0x74>)
 800348a:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 800348c:	4b11      	ldr	r3, [pc, #68]	@ (80034d4 <I2C3_Init+0x70>)
 800348e:	4a13      	ldr	r2, [pc, #76]	@ (80034dc <I2C3_Init+0x78>)
 8003490:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003492:	4b10      	ldr	r3, [pc, #64]	@ (80034d4 <I2C3_Init+0x70>)
 8003494:	2200      	movs	r2, #0
 8003496:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 8003498:	4b0e      	ldr	r3, [pc, #56]	@ (80034d4 <I2C3_Init+0x70>)
 800349a:	2200      	movs	r2, #0
 800349c:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800349e:	4b0d      	ldr	r3, [pc, #52]	@ (80034d4 <I2C3_Init+0x70>)
 80034a0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80034a4:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 80034a6:	4b0b      	ldr	r3, [pc, #44]	@ (80034d4 <I2C3_Init+0x70>)
 80034a8:	2200      	movs	r2, #0
 80034aa:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80034ac:	4b09      	ldr	r3, [pc, #36]	@ (80034d4 <I2C3_Init+0x70>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode? 

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 80034b2:	4808      	ldr	r0, [pc, #32]	@ (80034d4 <I2C3_Init+0x70>)
 80034b4:	f000 fe94 	bl	80041e0 <HAL_I2C_Init>
 80034b8:	4603      	mov	r3, r0
 80034ba:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 80034bc:	79fb      	ldrb	r3, [r7, #7]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d001      	beq.n	80034c6 <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 80034c2:	bf00      	nop
 80034c4:	e7fd      	b.n	80034c2 <I2C3_Init+0x5e>
    }
    return;
 80034c6:	bf00      	nop
}
 80034c8:	3708      	adds	r7, #8
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	40023800 	.word	0x40023800
 80034d4:	20025bc4 	.word	0x20025bc4
 80034d8:	40005c00 	.word	0x40005c00
 80034dc:	000186a0 	.word	0x000186a0

080034e0 <I2C3_MspInit>:

// GPIO Initializations 
static void I2C3_MspInit(void)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b088      	sub	sp, #32
 80034e4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034e6:	f107 030c 	add.w	r3, r7, #12
 80034ea:	2200      	movs	r2, #0
 80034ec:	601a      	str	r2, [r3, #0]
 80034ee:	605a      	str	r2, [r3, #4]
 80034f0:	609a      	str	r2, [r3, #8]
 80034f2:	60da      	str	r2, [r3, #12]
 80034f4:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80034f6:	2300      	movs	r3, #0
 80034f8:	60bb      	str	r3, [r7, #8]
 80034fa:	4b20      	ldr	r3, [pc, #128]	@ (800357c <I2C3_MspInit+0x9c>)
 80034fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034fe:	4a1f      	ldr	r2, [pc, #124]	@ (800357c <I2C3_MspInit+0x9c>)
 8003500:	f043 0304 	orr.w	r3, r3, #4
 8003504:	6313      	str	r3, [r2, #48]	@ 0x30
 8003506:	4b1d      	ldr	r3, [pc, #116]	@ (800357c <I2C3_MspInit+0x9c>)
 8003508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800350a:	f003 0304 	and.w	r3, r3, #4
 800350e:	60bb      	str	r3, [r7, #8]
 8003510:	68bb      	ldr	r3, [r7, #8]

    // GPIOA 
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003512:	2300      	movs	r3, #0
 8003514:	607b      	str	r3, [r7, #4]
 8003516:	4b19      	ldr	r3, [pc, #100]	@ (800357c <I2C3_MspInit+0x9c>)
 8003518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800351a:	4a18      	ldr	r2, [pc, #96]	@ (800357c <I2C3_MspInit+0x9c>)
 800351c:	f043 0301 	orr.w	r3, r3, #1
 8003520:	6313      	str	r3, [r2, #48]	@ 0x30
 8003522:	4b16      	ldr	r3, [pc, #88]	@ (800357c <I2C3_MspInit+0x9c>)
 8003524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003526:	f003 0301 	and.w	r3, r3, #1
 800352a:	607b      	str	r3, [r7, #4]
 800352c:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 800352e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003532:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003534:	2312      	movs	r3, #18
 8003536:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003538:	2300      	movs	r3, #0
 800353a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800353c:	2300      	movs	r3, #0
 800353e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003540:	2304      	movs	r3, #4
 8003542:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8003544:	f107 030c 	add.w	r3, r7, #12
 8003548:	4619      	mov	r1, r3
 800354a:	480d      	ldr	r0, [pc, #52]	@ (8003580 <I2C3_MspInit+0xa0>)
 800354c:	f000 fb5e 	bl	8003c0c <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8003550:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003554:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003556:	2312      	movs	r3, #18
 8003558:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800355a:	2300      	movs	r3, #0
 800355c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800355e:	2300      	movs	r3, #0
 8003560:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003562:	2304      	movs	r3, #4
 8003564:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8003566:	f107 030c 	add.w	r3, r7, #12
 800356a:	4619      	mov	r1, r3
 800356c:	4805      	ldr	r0, [pc, #20]	@ (8003584 <I2C3_MspInit+0xa4>)
 800356e:	f000 fb4d 	bl	8003c0c <HAL_GPIO_Init>
    
}
 8003572:	bf00      	nop
 8003574:	3720      	adds	r7, #32
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	40023800 	.word	0x40023800
 8003580:	40020800 	.word	0x40020800
 8003584:	40020000 	.word	0x40020000

08003588 <I2C3_Write>:

// This function should only be used for single BYTE transfers 
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b088      	sub	sp, #32
 800358c:	af04      	add	r7, sp, #16
 800358e:	4603      	mov	r3, r0
 8003590:	80fb      	strh	r3, [r7, #6]
 8003592:	460b      	mov	r3, r1
 8003594:	717b      	strb	r3, [r7, #5]
 8003596:	4613      	mov	r3, r2
 8003598:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 800359a:	793b      	ldrb	r3, [r7, #4]
 800359c:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call? 
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 800359e:	797b      	ldrb	r3, [r7, #5]
 80035a0:	b29a      	uxth	r2, r3
 80035a2:	88f9      	ldrh	r1, [r7, #6]
 80035a4:	4b0a      	ldr	r3, [pc, #40]	@ (80035d0 <I2C3_Write+0x48>)
 80035a6:	9302      	str	r3, [sp, #8]
 80035a8:	2301      	movs	r3, #1
 80035aa:	9301      	str	r3, [sp, #4]
 80035ac:	f107 030f 	add.w	r3, r7, #15
 80035b0:	9300      	str	r3, [sp, #0]
 80035b2:	2301      	movs	r3, #1
 80035b4:	4807      	ldr	r0, [pc, #28]	@ (80035d4 <I2C3_Write+0x4c>)
 80035b6:	f000 ff57 	bl	8004468 <HAL_I2C_Mem_Write>
 80035ba:	4603      	mov	r3, r0
 80035bc:	461a      	mov	r2, r3
 80035be:	4b06      	ldr	r3, [pc, #24]	@ (80035d8 <I2C3_Write+0x50>)
 80035c0:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 80035c2:	f7ff ff3f 	bl	8003444 <verifyHAL_I2C_IS_OKAY>
}
 80035c6:	bf00      	nop
 80035c8:	3710      	adds	r7, #16
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	0003d090 	.word	0x0003d090
 80035d4:	20025bc4 	.word	0x20025bc4
 80035d8:	20025c18 	.word	0x20025c18

080035dc <I2C3_Read>:

// This function should only be used for single BYTE transfers 
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b086      	sub	sp, #24
 80035e0:	af04      	add	r7, sp, #16
 80035e2:	4603      	mov	r3, r0
 80035e4:	603a      	str	r2, [r7, #0]
 80035e6:	71fb      	strb	r3, [r7, #7]
 80035e8:	460b      	mov	r3, r1
 80035ea:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 80035ec:	79fb      	ldrb	r3, [r7, #7]
 80035ee:	b299      	uxth	r1, r3
 80035f0:	79bb      	ldrb	r3, [r7, #6]
 80035f2:	b29a      	uxth	r2, r3
 80035f4:	4b09      	ldr	r3, [pc, #36]	@ (800361c <I2C3_Read+0x40>)
 80035f6:	9302      	str	r3, [sp, #8]
 80035f8:	2301      	movs	r3, #1
 80035fa:	9301      	str	r3, [sp, #4]
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	9300      	str	r3, [sp, #0]
 8003600:	2301      	movs	r3, #1
 8003602:	4807      	ldr	r0, [pc, #28]	@ (8003620 <I2C3_Read+0x44>)
 8003604:	f001 f82a 	bl	800465c <HAL_I2C_Mem_Read>
 8003608:	4603      	mov	r3, r0
 800360a:	461a      	mov	r2, r3
 800360c:	4b05      	ldr	r3, [pc, #20]	@ (8003624 <I2C3_Read+0x48>)
 800360e:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8003610:	f7ff ff18 	bl	8003444 <verifyHAL_I2C_IS_OKAY>
}
 8003614:	bf00      	nop
 8003616:	3708      	adds	r7, #8
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}
 800361c:	0003d090 	.word	0x0003d090
 8003620:	20025bc4 	.word	0x20025bc4
 8003624:	20025c18 	.word	0x20025c18

08003628 <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b086      	sub	sp, #24
 800362c:	af04      	add	r7, sp, #16
 800362e:	603a      	str	r2, [r7, #0]
 8003630:	461a      	mov	r2, r3
 8003632:	4603      	mov	r3, r0
 8003634:	71fb      	strb	r3, [r7, #7]
 8003636:	460b      	mov	r3, r1
 8003638:	71bb      	strb	r3, [r7, #6]
 800363a:	4613      	mov	r3, r2
 800363c:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 800363e:	79fb      	ldrb	r3, [r7, #7]
 8003640:	b299      	uxth	r1, r3
 8003642:	79bb      	ldrb	r3, [r7, #6]
 8003644:	b29a      	uxth	r2, r3
 8003646:	4b07      	ldr	r3, [pc, #28]	@ (8003664 <I2C3_MulitByteRead+0x3c>)
 8003648:	9302      	str	r3, [sp, #8]
 800364a:	88bb      	ldrh	r3, [r7, #4]
 800364c:	9301      	str	r3, [sp, #4]
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	9300      	str	r3, [sp, #0]
 8003652:	2301      	movs	r3, #1
 8003654:	4804      	ldr	r0, [pc, #16]	@ (8003668 <I2C3_MulitByteRead+0x40>)
 8003656:	f001 f801 	bl	800465c <HAL_I2C_Mem_Read>
}
 800365a:	bf00      	nop
 800365c:	3708      	adds	r7, #8
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	0003d090 	.word	0x0003d090
 8003668:	20025bc4 	.word	0x20025bc4

0800366c <TM_STMPE811_ReadX>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x) { // TM FUNCTION 
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	4603      	mov	r3, r0
 8003674:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 8003676:	204d      	movs	r0, #77	@ 0x4d
 8003678:	f7ff fe06 	bl	8003288 <STMPE811_Read>
 800367c:	4603      	mov	r3, r0
 800367e:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 8003680:	204e      	movs	r0, #78	@ 0x4e
 8003682:	f7ff fe01 	bl	8003288 <STMPE811_Read>
 8003686:	4603      	mov	r3, r0
 8003688:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 800368a:	7a7b      	ldrb	r3, [r7, #9]
 800368c:	b21b      	sxth	r3, r3
 800368e:	021b      	lsls	r3, r3, #8
 8003690:	b21a      	sxth	r2, r3
 8003692:	7a3b      	ldrb	r3, [r7, #8]
 8003694:	b21b      	sxth	r3, r3
 8003696:	4313      	orrs	r3, r2
 8003698:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000) {
 800369a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800369e:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80036a2:	4293      	cmp	r3, r2
 80036a4:	dc06      	bgt.n	80036b4 <TM_STMPE811_ReadX+0x48>
        val = 3900 - val;
 80036a6:	89fb      	ldrh	r3, [r7, #14]
 80036a8:	f5c3 6373 	rsb	r3, r3, #3888	@ 0xf30
 80036ac:	330c      	adds	r3, #12
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	81fb      	strh	r3, [r7, #14]
 80036b2:	e005      	b.n	80036c0 <TM_STMPE811_ReadX+0x54>
    } else {
        val = 3800 - val;
 80036b4:	89fb      	ldrh	r3, [r7, #14]
 80036b6:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 80036ba:	3308      	adds	r3, #8
 80036bc:	b29b      	uxth	r3, r3
 80036be:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 80036c0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80036c4:	4a18      	ldr	r2, [pc, #96]	@ (8003728 <TM_STMPE811_ReadX+0xbc>)
 80036c6:	fb82 1203 	smull	r1, r2, r2, r3
 80036ca:	441a      	add	r2, r3
 80036cc:	10d2      	asrs	r2, r2, #3
 80036ce:	17db      	asrs	r3, r3, #31
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	81fb      	strh	r3, [r7, #14]

    if (val > 239) {
 80036d4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80036d8:	2bef      	cmp	r3, #239	@ 0xef
 80036da:	dd02      	ble.n	80036e2 <TM_STMPE811_ReadX+0x76>
        val = 239;
 80036dc:	23ef      	movs	r3, #239	@ 0xef
 80036de:	81fb      	strh	r3, [r7, #14]
 80036e0:	e005      	b.n	80036ee <TM_STMPE811_ReadX+0x82>
    } else if (val < 0) {
 80036e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	da01      	bge.n	80036ee <TM_STMPE811_ReadX+0x82>
        val = 0;
 80036ea:	2300      	movs	r3, #0
 80036ec:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 80036ee:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80036f2:	88fb      	ldrh	r3, [r7, #6]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	dd05      	ble.n	8003704 <TM_STMPE811_ReadX+0x98>
 80036f8:	89fa      	ldrh	r2, [r7, #14]
 80036fa:	88fb      	ldrh	r3, [r7, #6]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	b29b      	uxth	r3, r3
 8003700:	b21b      	sxth	r3, r3
 8003702:	e004      	b.n	800370e <TM_STMPE811_ReadX+0xa2>
 8003704:	89fb      	ldrh	r3, [r7, #14]
 8003706:	88fa      	ldrh	r2, [r7, #6]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	b29b      	uxth	r3, r3
 800370c:	b21b      	sxth	r3, r3
 800370e:	81bb      	strh	r3, [r7, #12]
    if (dx > 4) {
 8003710:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003714:	2b04      	cmp	r3, #4
 8003716:	dd01      	ble.n	800371c <TM_STMPE811_ReadX+0xb0>
        return val;
 8003718:	89fb      	ldrh	r3, [r7, #14]
 800371a:	e000      	b.n	800371e <TM_STMPE811_ReadX+0xb2>
    }
    return x;
 800371c:	88fb      	ldrh	r3, [r7, #6]
}
 800371e:	4618      	mov	r0, r3
 8003720:	3710      	adds	r7, #16
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	88888889 	.word	0x88888889

0800372c <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y) { // TM FUNCTION 
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
 8003732:	4603      	mov	r3, r0
 8003734:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 8003736:	204f      	movs	r0, #79	@ 0x4f
 8003738:	f7ff fda6 	bl	8003288 <STMPE811_Read>
 800373c:	4603      	mov	r3, r0
 800373e:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 8003740:	2050      	movs	r0, #80	@ 0x50
 8003742:	f7ff fda1 	bl	8003288 <STMPE811_Read>
 8003746:	4603      	mov	r3, r0
 8003748:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 800374a:	7a7b      	ldrb	r3, [r7, #9]
 800374c:	b21b      	sxth	r3, r3
 800374e:	021b      	lsls	r3, r3, #8
 8003750:	b21a      	sxth	r2, r3
 8003752:	7a3b      	ldrb	r3, [r7, #8]
 8003754:	b21b      	sxth	r3, r3
 8003756:	4313      	orrs	r3, r2
 8003758:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 800375a:	89fb      	ldrh	r3, [r7, #14]
 800375c:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003760:	b29b      	uxth	r3, r3
 8003762:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 8003764:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003768:	4a18      	ldr	r2, [pc, #96]	@ (80037cc <TM_STMPE811_ReadY+0xa0>)
 800376a:	fb82 1203 	smull	r1, r2, r2, r3
 800376e:	1052      	asrs	r2, r2, #1
 8003770:	17db      	asrs	r3, r3, #31
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	81fb      	strh	r3, [r7, #14]

    if (val <= 0) {
 8003776:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800377a:	2b00      	cmp	r3, #0
 800377c:	dc02      	bgt.n	8003784 <TM_STMPE811_ReadY+0x58>
        val = 0;
 800377e:	2300      	movs	r3, #0
 8003780:	81fb      	strh	r3, [r7, #14]
 8003782:	e007      	b.n	8003794 <TM_STMPE811_ReadY+0x68>
    } else if (val >= 320) {
 8003784:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003788:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800378c:	db02      	blt.n	8003794 <TM_STMPE811_ReadY+0x68>
        val = 319;
 800378e:	f240 133f 	movw	r3, #319	@ 0x13f
 8003792:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 8003794:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003798:	88fb      	ldrh	r3, [r7, #6]
 800379a:	429a      	cmp	r2, r3
 800379c:	dd05      	ble.n	80037aa <TM_STMPE811_ReadY+0x7e>
 800379e:	89fa      	ldrh	r2, [r7, #14]
 80037a0:	88fb      	ldrh	r3, [r7, #6]
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	b21b      	sxth	r3, r3
 80037a8:	e004      	b.n	80037b4 <TM_STMPE811_ReadY+0x88>
 80037aa:	89fb      	ldrh	r3, [r7, #14]
 80037ac:	88fa      	ldrh	r2, [r7, #6]
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	b21b      	sxth	r3, r3
 80037b4:	81bb      	strh	r3, [r7, #12]
    if (dy > 4) {
 80037b6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80037ba:	2b04      	cmp	r3, #4
 80037bc:	dd01      	ble.n	80037c2 <TM_STMPE811_ReadY+0x96>
        return val;
 80037be:	89fb      	ldrh	r3, [r7, #14]
 80037c0:	e000      	b.n	80037c4 <TM_STMPE811_ReadY+0x98>
    }
    return y;
 80037c2:	88fb      	ldrh	r3, [r7, #6]
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3710      	adds	r7, #16
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	2e8ba2e9 	.word	0x2e8ba2e9

080037d0 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 80037d0:	b480      	push	{r7}
 80037d2:	af00      	add	r7, sp, #0
}
 80037d4:	bf00      	nop
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr
	...

080037e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80037e0:	b480      	push	{r7}
 80037e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80037e4:	4b06      	ldr	r3, [pc, #24]	@ (8003800 <SystemInit+0x20>)
 80037e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037ea:	4a05      	ldr	r2, [pc, #20]	@ (8003800 <SystemInit+0x20>)
 80037ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80037f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80037f4:	bf00      	nop
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	e000ed00 	.word	0xe000ed00

08003804 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003804:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800383c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003808:	f7ff ffea 	bl	80037e0 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800380c:	480c      	ldr	r0, [pc, #48]	@ (8003840 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800380e:	490d      	ldr	r1, [pc, #52]	@ (8003844 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003810:	4a0d      	ldr	r2, [pc, #52]	@ (8003848 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003812:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003814:	e002      	b.n	800381c <LoopCopyDataInit>

08003816 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003816:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003818:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800381a:	3304      	adds	r3, #4

0800381c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800381c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800381e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003820:	d3f9      	bcc.n	8003816 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003822:	4a0a      	ldr	r2, [pc, #40]	@ (800384c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003824:	4c0a      	ldr	r4, [pc, #40]	@ (8003850 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003826:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003828:	e001      	b.n	800382e <LoopFillZerobss>

0800382a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800382a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800382c:	3204      	adds	r2, #4

0800382e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800382e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003830:	d3fb      	bcc.n	800382a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003832:	f003 fdf1 	bl	8007418 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003836:	f7fe fe30 	bl	800249a <main>
  bx  lr    
 800383a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800383c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8003840:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003844:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8003848:	08008f70 	.word	0x08008f70
  ldr r2, =_sbss
 800384c:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8003850:	20025c20 	.word	0x20025c20

08003854 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003854:	e7fe      	b.n	8003854 <ADC_IRQHandler>
	...

08003858 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800385c:	4b0e      	ldr	r3, [pc, #56]	@ (8003898 <HAL_Init+0x40>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a0d      	ldr	r2, [pc, #52]	@ (8003898 <HAL_Init+0x40>)
 8003862:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003866:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003868:	4b0b      	ldr	r3, [pc, #44]	@ (8003898 <HAL_Init+0x40>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a0a      	ldr	r2, [pc, #40]	@ (8003898 <HAL_Init+0x40>)
 800386e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003872:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003874:	4b08      	ldr	r3, [pc, #32]	@ (8003898 <HAL_Init+0x40>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a07      	ldr	r2, [pc, #28]	@ (8003898 <HAL_Init+0x40>)
 800387a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800387e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003880:	2003      	movs	r0, #3
 8003882:	f000 f973 	bl	8003b6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003886:	2000      	movs	r0, #0
 8003888:	f000 f808 	bl	800389c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800388c:	f7ff f9c4 	bl	8002c18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003890:	2300      	movs	r3, #0
}
 8003892:	4618      	mov	r0, r3
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	40023c00 	.word	0x40023c00

0800389c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80038a4:	4b12      	ldr	r3, [pc, #72]	@ (80038f0 <HAL_InitTick+0x54>)
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	4b12      	ldr	r3, [pc, #72]	@ (80038f4 <HAL_InitTick+0x58>)
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	4619      	mov	r1, r3
 80038ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80038b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80038b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ba:	4618      	mov	r0, r3
 80038bc:	f000 f999 	bl	8003bf2 <HAL_SYSTICK_Config>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d001      	beq.n	80038ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e00e      	b.n	80038e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2b0f      	cmp	r3, #15
 80038ce:	d80a      	bhi.n	80038e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80038d0:	2200      	movs	r2, #0
 80038d2:	6879      	ldr	r1, [r7, #4]
 80038d4:	f04f 30ff 	mov.w	r0, #4294967295
 80038d8:	f000 f953 	bl	8003b82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80038dc:	4a06      	ldr	r2, [pc, #24]	@ (80038f8 <HAL_InitTick+0x5c>)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80038e2:	2300      	movs	r3, #0
 80038e4:	e000      	b.n	80038e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3708      	adds	r7, #8
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	20000018 	.word	0x20000018
 80038f4:	20000020 	.word	0x20000020
 80038f8:	2000001c 	.word	0x2000001c

080038fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80038fc:	b480      	push	{r7}
 80038fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003900:	4b06      	ldr	r3, [pc, #24]	@ (800391c <HAL_IncTick+0x20>)
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	461a      	mov	r2, r3
 8003906:	4b06      	ldr	r3, [pc, #24]	@ (8003920 <HAL_IncTick+0x24>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4413      	add	r3, r2
 800390c:	4a04      	ldr	r2, [pc, #16]	@ (8003920 <HAL_IncTick+0x24>)
 800390e:	6013      	str	r3, [r2, #0]
}
 8003910:	bf00      	nop
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr
 800391a:	bf00      	nop
 800391c:	20000020 	.word	0x20000020
 8003920:	20025c1c 	.word	0x20025c1c

08003924 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003924:	b480      	push	{r7}
 8003926:	af00      	add	r7, sp, #0
  return uwTick;
 8003928:	4b03      	ldr	r3, [pc, #12]	@ (8003938 <HAL_GetTick+0x14>)
 800392a:	681b      	ldr	r3, [r3, #0]
}
 800392c:	4618      	mov	r0, r3
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr
 8003936:	bf00      	nop
 8003938:	20025c1c 	.word	0x20025c1c

0800393c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003944:	f7ff ffee 	bl	8003924 <HAL_GetTick>
 8003948:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003954:	d005      	beq.n	8003962 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003956:	4b0a      	ldr	r3, [pc, #40]	@ (8003980 <HAL_Delay+0x44>)
 8003958:	781b      	ldrb	r3, [r3, #0]
 800395a:	461a      	mov	r2, r3
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	4413      	add	r3, r2
 8003960:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003962:	bf00      	nop
 8003964:	f7ff ffde 	bl	8003924 <HAL_GetTick>
 8003968:	4602      	mov	r2, r0
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	68fa      	ldr	r2, [r7, #12]
 8003970:	429a      	cmp	r2, r3
 8003972:	d8f7      	bhi.n	8003964 <HAL_Delay+0x28>
  {
  }
}
 8003974:	bf00      	nop
 8003976:	bf00      	nop
 8003978:	3710      	adds	r7, #16
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	20000020 	.word	0x20000020

08003984 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003984:	b480      	push	{r7}
 8003986:	b085      	sub	sp, #20
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f003 0307 	and.w	r3, r3, #7
 8003992:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003994:	4b0c      	ldr	r3, [pc, #48]	@ (80039c8 <__NVIC_SetPriorityGrouping+0x44>)
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800399a:	68ba      	ldr	r2, [r7, #8]
 800399c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80039a0:	4013      	ands	r3, r2
 80039a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80039b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039b6:	4a04      	ldr	r2, [pc, #16]	@ (80039c8 <__NVIC_SetPriorityGrouping+0x44>)
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	60d3      	str	r3, [r2, #12]
}
 80039bc:	bf00      	nop
 80039be:	3714      	adds	r7, #20
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr
 80039c8:	e000ed00 	.word	0xe000ed00

080039cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039cc:	b480      	push	{r7}
 80039ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039d0:	4b04      	ldr	r3, [pc, #16]	@ (80039e4 <__NVIC_GetPriorityGrouping+0x18>)
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	0a1b      	lsrs	r3, r3, #8
 80039d6:	f003 0307 	and.w	r3, r3, #7
}
 80039da:	4618      	mov	r0, r3
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr
 80039e4:	e000ed00 	.word	0xe000ed00

080039e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	4603      	mov	r3, r0
 80039f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	db0b      	blt.n	8003a12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039fa:	79fb      	ldrb	r3, [r7, #7]
 80039fc:	f003 021f 	and.w	r2, r3, #31
 8003a00:	4907      	ldr	r1, [pc, #28]	@ (8003a20 <__NVIC_EnableIRQ+0x38>)
 8003a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a06:	095b      	lsrs	r3, r3, #5
 8003a08:	2001      	movs	r0, #1
 8003a0a:	fa00 f202 	lsl.w	r2, r0, r2
 8003a0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003a12:	bf00      	nop
 8003a14:	370c      	adds	r7, #12
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop
 8003a20:	e000e100 	.word	0xe000e100

08003a24 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	db12      	blt.n	8003a5c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a36:	79fb      	ldrb	r3, [r7, #7]
 8003a38:	f003 021f 	and.w	r2, r3, #31
 8003a3c:	490a      	ldr	r1, [pc, #40]	@ (8003a68 <__NVIC_DisableIRQ+0x44>)
 8003a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a42:	095b      	lsrs	r3, r3, #5
 8003a44:	2001      	movs	r0, #1
 8003a46:	fa00 f202 	lsl.w	r2, r0, r2
 8003a4a:	3320      	adds	r3, #32
 8003a4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003a50:	f3bf 8f4f 	dsb	sy
}
 8003a54:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003a56:	f3bf 8f6f 	isb	sy
}
 8003a5a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003a5c:	bf00      	nop
 8003a5e:	370c      	adds	r7, #12
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr
 8003a68:	e000e100 	.word	0xe000e100

08003a6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	4603      	mov	r3, r0
 8003a74:	6039      	str	r1, [r7, #0]
 8003a76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	db0a      	blt.n	8003a96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	b2da      	uxtb	r2, r3
 8003a84:	490c      	ldr	r1, [pc, #48]	@ (8003ab8 <__NVIC_SetPriority+0x4c>)
 8003a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a8a:	0112      	lsls	r2, r2, #4
 8003a8c:	b2d2      	uxtb	r2, r2
 8003a8e:	440b      	add	r3, r1
 8003a90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a94:	e00a      	b.n	8003aac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	b2da      	uxtb	r2, r3
 8003a9a:	4908      	ldr	r1, [pc, #32]	@ (8003abc <__NVIC_SetPriority+0x50>)
 8003a9c:	79fb      	ldrb	r3, [r7, #7]
 8003a9e:	f003 030f 	and.w	r3, r3, #15
 8003aa2:	3b04      	subs	r3, #4
 8003aa4:	0112      	lsls	r2, r2, #4
 8003aa6:	b2d2      	uxtb	r2, r2
 8003aa8:	440b      	add	r3, r1
 8003aaa:	761a      	strb	r2, [r3, #24]
}
 8003aac:	bf00      	nop
 8003aae:	370c      	adds	r7, #12
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr
 8003ab8:	e000e100 	.word	0xe000e100
 8003abc:	e000ed00 	.word	0xe000ed00

08003ac0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b089      	sub	sp, #36	@ 0x24
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	60b9      	str	r1, [r7, #8]
 8003aca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f003 0307 	and.w	r3, r3, #7
 8003ad2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	f1c3 0307 	rsb	r3, r3, #7
 8003ada:	2b04      	cmp	r3, #4
 8003adc:	bf28      	it	cs
 8003ade:	2304      	movcs	r3, #4
 8003ae0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	3304      	adds	r3, #4
 8003ae6:	2b06      	cmp	r3, #6
 8003ae8:	d902      	bls.n	8003af0 <NVIC_EncodePriority+0x30>
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	3b03      	subs	r3, #3
 8003aee:	e000      	b.n	8003af2 <NVIC_EncodePriority+0x32>
 8003af0:	2300      	movs	r3, #0
 8003af2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003af4:	f04f 32ff 	mov.w	r2, #4294967295
 8003af8:	69bb      	ldr	r3, [r7, #24]
 8003afa:	fa02 f303 	lsl.w	r3, r2, r3
 8003afe:	43da      	mvns	r2, r3
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	401a      	ands	r2, r3
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b08:	f04f 31ff 	mov.w	r1, #4294967295
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b12:	43d9      	mvns	r1, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b18:	4313      	orrs	r3, r2
         );
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3724      	adds	r7, #36	@ 0x24
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr
	...

08003b28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	3b01      	subs	r3, #1
 8003b34:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003b38:	d301      	bcc.n	8003b3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e00f      	b.n	8003b5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b3e:	4a0a      	ldr	r2, [pc, #40]	@ (8003b68 <SysTick_Config+0x40>)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	3b01      	subs	r3, #1
 8003b44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b46:	210f      	movs	r1, #15
 8003b48:	f04f 30ff 	mov.w	r0, #4294967295
 8003b4c:	f7ff ff8e 	bl	8003a6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b50:	4b05      	ldr	r3, [pc, #20]	@ (8003b68 <SysTick_Config+0x40>)
 8003b52:	2200      	movs	r2, #0
 8003b54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b56:	4b04      	ldr	r3, [pc, #16]	@ (8003b68 <SysTick_Config+0x40>)
 8003b58:	2207      	movs	r2, #7
 8003b5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3708      	adds	r7, #8
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	e000e010 	.word	0xe000e010

08003b6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b082      	sub	sp, #8
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f7ff ff05 	bl	8003984 <__NVIC_SetPriorityGrouping>
}
 8003b7a:	bf00      	nop
 8003b7c:	3708      	adds	r7, #8
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}

08003b82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b82:	b580      	push	{r7, lr}
 8003b84:	b086      	sub	sp, #24
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	4603      	mov	r3, r0
 8003b8a:	60b9      	str	r1, [r7, #8]
 8003b8c:	607a      	str	r2, [r7, #4]
 8003b8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b90:	2300      	movs	r3, #0
 8003b92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b94:	f7ff ff1a 	bl	80039cc <__NVIC_GetPriorityGrouping>
 8003b98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	68b9      	ldr	r1, [r7, #8]
 8003b9e:	6978      	ldr	r0, [r7, #20]
 8003ba0:	f7ff ff8e 	bl	8003ac0 <NVIC_EncodePriority>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003baa:	4611      	mov	r1, r2
 8003bac:	4618      	mov	r0, r3
 8003bae:	f7ff ff5d 	bl	8003a6c <__NVIC_SetPriority>
}
 8003bb2:	bf00      	nop
 8003bb4:	3718      	adds	r7, #24
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}

08003bba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bba:	b580      	push	{r7, lr}
 8003bbc:	b082      	sub	sp, #8
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003bc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f7ff ff0d 	bl	80039e8 <__NVIC_EnableIRQ>
}
 8003bce:	bf00      	nop
 8003bd0:	3708      	adds	r7, #8
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}

08003bd6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003bd6:	b580      	push	{r7, lr}
 8003bd8:	b082      	sub	sp, #8
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	4603      	mov	r3, r0
 8003bde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003be4:	4618      	mov	r0, r3
 8003be6:	f7ff ff1d 	bl	8003a24 <__NVIC_DisableIRQ>
}
 8003bea:	bf00      	nop
 8003bec:	3708      	adds	r7, #8
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}

08003bf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003bf2:	b580      	push	{r7, lr}
 8003bf4:	b082      	sub	sp, #8
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f7ff ff94 	bl	8003b28 <SysTick_Config>
 8003c00:	4603      	mov	r3, r0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3708      	adds	r7, #8
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
	...

08003c0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b089      	sub	sp, #36	@ 0x24
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003c16:	2300      	movs	r3, #0
 8003c18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c22:	2300      	movs	r3, #0
 8003c24:	61fb      	str	r3, [r7, #28]
 8003c26:	e177      	b.n	8003f18 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003c28:	2201      	movs	r2, #1
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	697a      	ldr	r2, [r7, #20]
 8003c38:	4013      	ands	r3, r2
 8003c3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c3c:	693a      	ldr	r2, [r7, #16]
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	f040 8166 	bne.w	8003f12 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	f003 0303 	and.w	r3, r3, #3
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d005      	beq.n	8003c5e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c5a:	2b02      	cmp	r3, #2
 8003c5c:	d130      	bne.n	8003cc0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	005b      	lsls	r3, r3, #1
 8003c68:	2203      	movs	r2, #3
 8003c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6e:	43db      	mvns	r3, r3
 8003c70:	69ba      	ldr	r2, [r7, #24]
 8003c72:	4013      	ands	r3, r2
 8003c74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	68da      	ldr	r2, [r3, #12]
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	005b      	lsls	r3, r3, #1
 8003c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c82:	69ba      	ldr	r2, [r7, #24]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	69ba      	ldr	r2, [r7, #24]
 8003c8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c94:	2201      	movs	r2, #1
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9c:	43db      	mvns	r3, r3
 8003c9e:	69ba      	ldr	r2, [r7, #24]
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	091b      	lsrs	r3, r3, #4
 8003caa:	f003 0201 	and.w	r2, r3, #1
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb4:	69ba      	ldr	r2, [r7, #24]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	69ba      	ldr	r2, [r7, #24]
 8003cbe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	f003 0303 	and.w	r3, r3, #3
 8003cc8:	2b03      	cmp	r3, #3
 8003cca:	d017      	beq.n	8003cfc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	005b      	lsls	r3, r3, #1
 8003cd6:	2203      	movs	r2, #3
 8003cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cdc:	43db      	mvns	r3, r3
 8003cde:	69ba      	ldr	r2, [r7, #24]
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	689a      	ldr	r2, [r3, #8]
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	005b      	lsls	r3, r3, #1
 8003cec:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf0:	69ba      	ldr	r2, [r7, #24]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	69ba      	ldr	r2, [r7, #24]
 8003cfa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	f003 0303 	and.w	r3, r3, #3
 8003d04:	2b02      	cmp	r3, #2
 8003d06:	d123      	bne.n	8003d50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	08da      	lsrs	r2, r3, #3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	3208      	adds	r2, #8
 8003d10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	f003 0307 	and.w	r3, r3, #7
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	220f      	movs	r2, #15
 8003d20:	fa02 f303 	lsl.w	r3, r2, r3
 8003d24:	43db      	mvns	r3, r3
 8003d26:	69ba      	ldr	r2, [r7, #24]
 8003d28:	4013      	ands	r3, r2
 8003d2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	691a      	ldr	r2, [r3, #16]
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	f003 0307 	and.w	r3, r3, #7
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3c:	69ba      	ldr	r2, [r7, #24]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	08da      	lsrs	r2, r3, #3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	3208      	adds	r2, #8
 8003d4a:	69b9      	ldr	r1, [r7, #24]
 8003d4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	005b      	lsls	r3, r3, #1
 8003d5a:	2203      	movs	r2, #3
 8003d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d60:	43db      	mvns	r3, r3
 8003d62:	69ba      	ldr	r2, [r7, #24]
 8003d64:	4013      	ands	r3, r2
 8003d66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	f003 0203 	and.w	r2, r3, #3
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	005b      	lsls	r3, r3, #1
 8003d74:	fa02 f303 	lsl.w	r3, r2, r3
 8003d78:	69ba      	ldr	r2, [r7, #24]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	69ba      	ldr	r2, [r7, #24]
 8003d82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	f000 80c0 	beq.w	8003f12 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d92:	2300      	movs	r3, #0
 8003d94:	60fb      	str	r3, [r7, #12]
 8003d96:	4b66      	ldr	r3, [pc, #408]	@ (8003f30 <HAL_GPIO_Init+0x324>)
 8003d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d9a:	4a65      	ldr	r2, [pc, #404]	@ (8003f30 <HAL_GPIO_Init+0x324>)
 8003d9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003da0:	6453      	str	r3, [r2, #68]	@ 0x44
 8003da2:	4b63      	ldr	r3, [pc, #396]	@ (8003f30 <HAL_GPIO_Init+0x324>)
 8003da4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003da6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003daa:	60fb      	str	r3, [r7, #12]
 8003dac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003dae:	4a61      	ldr	r2, [pc, #388]	@ (8003f34 <HAL_GPIO_Init+0x328>)
 8003db0:	69fb      	ldr	r3, [r7, #28]
 8003db2:	089b      	lsrs	r3, r3, #2
 8003db4:	3302      	adds	r3, #2
 8003db6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	f003 0303 	and.w	r3, r3, #3
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	220f      	movs	r2, #15
 8003dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dca:	43db      	mvns	r3, r3
 8003dcc:	69ba      	ldr	r2, [r7, #24]
 8003dce:	4013      	ands	r3, r2
 8003dd0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a58      	ldr	r2, [pc, #352]	@ (8003f38 <HAL_GPIO_Init+0x32c>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d037      	beq.n	8003e4a <HAL_GPIO_Init+0x23e>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a57      	ldr	r2, [pc, #348]	@ (8003f3c <HAL_GPIO_Init+0x330>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d031      	beq.n	8003e46 <HAL_GPIO_Init+0x23a>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4a56      	ldr	r2, [pc, #344]	@ (8003f40 <HAL_GPIO_Init+0x334>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d02b      	beq.n	8003e42 <HAL_GPIO_Init+0x236>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a55      	ldr	r2, [pc, #340]	@ (8003f44 <HAL_GPIO_Init+0x338>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d025      	beq.n	8003e3e <HAL_GPIO_Init+0x232>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a54      	ldr	r2, [pc, #336]	@ (8003f48 <HAL_GPIO_Init+0x33c>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d01f      	beq.n	8003e3a <HAL_GPIO_Init+0x22e>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4a53      	ldr	r2, [pc, #332]	@ (8003f4c <HAL_GPIO_Init+0x340>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d019      	beq.n	8003e36 <HAL_GPIO_Init+0x22a>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4a52      	ldr	r2, [pc, #328]	@ (8003f50 <HAL_GPIO_Init+0x344>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d013      	beq.n	8003e32 <HAL_GPIO_Init+0x226>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4a51      	ldr	r2, [pc, #324]	@ (8003f54 <HAL_GPIO_Init+0x348>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d00d      	beq.n	8003e2e <HAL_GPIO_Init+0x222>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	4a50      	ldr	r2, [pc, #320]	@ (8003f58 <HAL_GPIO_Init+0x34c>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d007      	beq.n	8003e2a <HAL_GPIO_Init+0x21e>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4a4f      	ldr	r2, [pc, #316]	@ (8003f5c <HAL_GPIO_Init+0x350>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d101      	bne.n	8003e26 <HAL_GPIO_Init+0x21a>
 8003e22:	2309      	movs	r3, #9
 8003e24:	e012      	b.n	8003e4c <HAL_GPIO_Init+0x240>
 8003e26:	230a      	movs	r3, #10
 8003e28:	e010      	b.n	8003e4c <HAL_GPIO_Init+0x240>
 8003e2a:	2308      	movs	r3, #8
 8003e2c:	e00e      	b.n	8003e4c <HAL_GPIO_Init+0x240>
 8003e2e:	2307      	movs	r3, #7
 8003e30:	e00c      	b.n	8003e4c <HAL_GPIO_Init+0x240>
 8003e32:	2306      	movs	r3, #6
 8003e34:	e00a      	b.n	8003e4c <HAL_GPIO_Init+0x240>
 8003e36:	2305      	movs	r3, #5
 8003e38:	e008      	b.n	8003e4c <HAL_GPIO_Init+0x240>
 8003e3a:	2304      	movs	r3, #4
 8003e3c:	e006      	b.n	8003e4c <HAL_GPIO_Init+0x240>
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e004      	b.n	8003e4c <HAL_GPIO_Init+0x240>
 8003e42:	2302      	movs	r3, #2
 8003e44:	e002      	b.n	8003e4c <HAL_GPIO_Init+0x240>
 8003e46:	2301      	movs	r3, #1
 8003e48:	e000      	b.n	8003e4c <HAL_GPIO_Init+0x240>
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	69fa      	ldr	r2, [r7, #28]
 8003e4e:	f002 0203 	and.w	r2, r2, #3
 8003e52:	0092      	lsls	r2, r2, #2
 8003e54:	4093      	lsls	r3, r2
 8003e56:	69ba      	ldr	r2, [r7, #24]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e5c:	4935      	ldr	r1, [pc, #212]	@ (8003f34 <HAL_GPIO_Init+0x328>)
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	089b      	lsrs	r3, r3, #2
 8003e62:	3302      	adds	r3, #2
 8003e64:	69ba      	ldr	r2, [r7, #24]
 8003e66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e6a:	4b3d      	ldr	r3, [pc, #244]	@ (8003f60 <HAL_GPIO_Init+0x354>)
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	43db      	mvns	r3, r3
 8003e74:	69ba      	ldr	r2, [r7, #24]
 8003e76:	4013      	ands	r3, r2
 8003e78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d003      	beq.n	8003e8e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003e86:	69ba      	ldr	r2, [r7, #24]
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e8e:	4a34      	ldr	r2, [pc, #208]	@ (8003f60 <HAL_GPIO_Init+0x354>)
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e94:	4b32      	ldr	r3, [pc, #200]	@ (8003f60 <HAL_GPIO_Init+0x354>)
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	43db      	mvns	r3, r3
 8003e9e:	69ba      	ldr	r2, [r7, #24]
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d003      	beq.n	8003eb8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003eb0:	69ba      	ldr	r2, [r7, #24]
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003eb8:	4a29      	ldr	r2, [pc, #164]	@ (8003f60 <HAL_GPIO_Init+0x354>)
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003ebe:	4b28      	ldr	r3, [pc, #160]	@ (8003f60 <HAL_GPIO_Init+0x354>)
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	43db      	mvns	r3, r3
 8003ec8:	69ba      	ldr	r2, [r7, #24]
 8003eca:	4013      	ands	r3, r2
 8003ecc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d003      	beq.n	8003ee2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003eda:	69ba      	ldr	r2, [r7, #24]
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ee2:	4a1f      	ldr	r2, [pc, #124]	@ (8003f60 <HAL_GPIO_Init+0x354>)
 8003ee4:	69bb      	ldr	r3, [r7, #24]
 8003ee6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ee8:	4b1d      	ldr	r3, [pc, #116]	@ (8003f60 <HAL_GPIO_Init+0x354>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	43db      	mvns	r3, r3
 8003ef2:	69ba      	ldr	r2, [r7, #24]
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d003      	beq.n	8003f0c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003f04:	69ba      	ldr	r2, [r7, #24]
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f0c:	4a14      	ldr	r2, [pc, #80]	@ (8003f60 <HAL_GPIO_Init+0x354>)
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	3301      	adds	r3, #1
 8003f16:	61fb      	str	r3, [r7, #28]
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	2b0f      	cmp	r3, #15
 8003f1c:	f67f ae84 	bls.w	8003c28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003f20:	bf00      	nop
 8003f22:	bf00      	nop
 8003f24:	3724      	adds	r7, #36	@ 0x24
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	40023800 	.word	0x40023800
 8003f34:	40013800 	.word	0x40013800
 8003f38:	40020000 	.word	0x40020000
 8003f3c:	40020400 	.word	0x40020400
 8003f40:	40020800 	.word	0x40020800
 8003f44:	40020c00 	.word	0x40020c00
 8003f48:	40021000 	.word	0x40021000
 8003f4c:	40021400 	.word	0x40021400
 8003f50:	40021800 	.word	0x40021800
 8003f54:	40021c00 	.word	0x40021c00
 8003f58:	40022000 	.word	0x40022000
 8003f5c:	40022400 	.word	0x40022400
 8003f60:	40013c00 	.word	0x40013c00

08003f64 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b087      	sub	sp, #28
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003f72:	2300      	movs	r3, #0
 8003f74:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003f76:	2300      	movs	r3, #0
 8003f78:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	617b      	str	r3, [r7, #20]
 8003f7e:	e0d9      	b.n	8004134 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003f80:	2201      	movs	r2, #1
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	fa02 f303 	lsl.w	r3, r2, r3
 8003f88:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003f8a:	683a      	ldr	r2, [r7, #0]
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	4013      	ands	r3, r2
 8003f90:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003f92:	68fa      	ldr	r2, [r7, #12]
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	429a      	cmp	r2, r3
 8003f98:	f040 80c9 	bne.w	800412e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003f9c:	4a6b      	ldr	r2, [pc, #428]	@ (800414c <HAL_GPIO_DeInit+0x1e8>)
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	089b      	lsrs	r3, r3, #2
 8003fa2:	3302      	adds	r3, #2
 8003fa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fa8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	f003 0303 	and.w	r3, r3, #3
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	220f      	movs	r2, #15
 8003fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb8:	68ba      	ldr	r2, [r7, #8]
 8003fba:	4013      	ands	r3, r2
 8003fbc:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4a63      	ldr	r2, [pc, #396]	@ (8004150 <HAL_GPIO_DeInit+0x1ec>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d037      	beq.n	8004036 <HAL_GPIO_DeInit+0xd2>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4a62      	ldr	r2, [pc, #392]	@ (8004154 <HAL_GPIO_DeInit+0x1f0>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d031      	beq.n	8004032 <HAL_GPIO_DeInit+0xce>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4a61      	ldr	r2, [pc, #388]	@ (8004158 <HAL_GPIO_DeInit+0x1f4>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d02b      	beq.n	800402e <HAL_GPIO_DeInit+0xca>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a60      	ldr	r2, [pc, #384]	@ (800415c <HAL_GPIO_DeInit+0x1f8>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d025      	beq.n	800402a <HAL_GPIO_DeInit+0xc6>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a5f      	ldr	r2, [pc, #380]	@ (8004160 <HAL_GPIO_DeInit+0x1fc>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d01f      	beq.n	8004026 <HAL_GPIO_DeInit+0xc2>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a5e      	ldr	r2, [pc, #376]	@ (8004164 <HAL_GPIO_DeInit+0x200>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d019      	beq.n	8004022 <HAL_GPIO_DeInit+0xbe>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a5d      	ldr	r2, [pc, #372]	@ (8004168 <HAL_GPIO_DeInit+0x204>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d013      	beq.n	800401e <HAL_GPIO_DeInit+0xba>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a5c      	ldr	r2, [pc, #368]	@ (800416c <HAL_GPIO_DeInit+0x208>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d00d      	beq.n	800401a <HAL_GPIO_DeInit+0xb6>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a5b      	ldr	r2, [pc, #364]	@ (8004170 <HAL_GPIO_DeInit+0x20c>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d007      	beq.n	8004016 <HAL_GPIO_DeInit+0xb2>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a5a      	ldr	r2, [pc, #360]	@ (8004174 <HAL_GPIO_DeInit+0x210>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d101      	bne.n	8004012 <HAL_GPIO_DeInit+0xae>
 800400e:	2309      	movs	r3, #9
 8004010:	e012      	b.n	8004038 <HAL_GPIO_DeInit+0xd4>
 8004012:	230a      	movs	r3, #10
 8004014:	e010      	b.n	8004038 <HAL_GPIO_DeInit+0xd4>
 8004016:	2308      	movs	r3, #8
 8004018:	e00e      	b.n	8004038 <HAL_GPIO_DeInit+0xd4>
 800401a:	2307      	movs	r3, #7
 800401c:	e00c      	b.n	8004038 <HAL_GPIO_DeInit+0xd4>
 800401e:	2306      	movs	r3, #6
 8004020:	e00a      	b.n	8004038 <HAL_GPIO_DeInit+0xd4>
 8004022:	2305      	movs	r3, #5
 8004024:	e008      	b.n	8004038 <HAL_GPIO_DeInit+0xd4>
 8004026:	2304      	movs	r3, #4
 8004028:	e006      	b.n	8004038 <HAL_GPIO_DeInit+0xd4>
 800402a:	2303      	movs	r3, #3
 800402c:	e004      	b.n	8004038 <HAL_GPIO_DeInit+0xd4>
 800402e:	2302      	movs	r3, #2
 8004030:	e002      	b.n	8004038 <HAL_GPIO_DeInit+0xd4>
 8004032:	2301      	movs	r3, #1
 8004034:	e000      	b.n	8004038 <HAL_GPIO_DeInit+0xd4>
 8004036:	2300      	movs	r3, #0
 8004038:	697a      	ldr	r2, [r7, #20]
 800403a:	f002 0203 	and.w	r2, r2, #3
 800403e:	0092      	lsls	r2, r2, #2
 8004040:	4093      	lsls	r3, r2
 8004042:	68ba      	ldr	r2, [r7, #8]
 8004044:	429a      	cmp	r2, r3
 8004046:	d132      	bne.n	80040ae <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004048:	4b4b      	ldr	r3, [pc, #300]	@ (8004178 <HAL_GPIO_DeInit+0x214>)
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	43db      	mvns	r3, r3
 8004050:	4949      	ldr	r1, [pc, #292]	@ (8004178 <HAL_GPIO_DeInit+0x214>)
 8004052:	4013      	ands	r3, r2
 8004054:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004056:	4b48      	ldr	r3, [pc, #288]	@ (8004178 <HAL_GPIO_DeInit+0x214>)
 8004058:	685a      	ldr	r2, [r3, #4]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	43db      	mvns	r3, r3
 800405e:	4946      	ldr	r1, [pc, #280]	@ (8004178 <HAL_GPIO_DeInit+0x214>)
 8004060:	4013      	ands	r3, r2
 8004062:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004064:	4b44      	ldr	r3, [pc, #272]	@ (8004178 <HAL_GPIO_DeInit+0x214>)
 8004066:	68da      	ldr	r2, [r3, #12]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	43db      	mvns	r3, r3
 800406c:	4942      	ldr	r1, [pc, #264]	@ (8004178 <HAL_GPIO_DeInit+0x214>)
 800406e:	4013      	ands	r3, r2
 8004070:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004072:	4b41      	ldr	r3, [pc, #260]	@ (8004178 <HAL_GPIO_DeInit+0x214>)
 8004074:	689a      	ldr	r2, [r3, #8]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	43db      	mvns	r3, r3
 800407a:	493f      	ldr	r1, [pc, #252]	@ (8004178 <HAL_GPIO_DeInit+0x214>)
 800407c:	4013      	ands	r3, r2
 800407e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	f003 0303 	and.w	r3, r3, #3
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	220f      	movs	r2, #15
 800408a:	fa02 f303 	lsl.w	r3, r2, r3
 800408e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004090:	4a2e      	ldr	r2, [pc, #184]	@ (800414c <HAL_GPIO_DeInit+0x1e8>)
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	089b      	lsrs	r3, r3, #2
 8004096:	3302      	adds	r3, #2
 8004098:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	43da      	mvns	r2, r3
 80040a0:	482a      	ldr	r0, [pc, #168]	@ (800414c <HAL_GPIO_DeInit+0x1e8>)
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	089b      	lsrs	r3, r3, #2
 80040a6:	400a      	ands	r2, r1
 80040a8:	3302      	adds	r3, #2
 80040aa:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	005b      	lsls	r3, r3, #1
 80040b6:	2103      	movs	r1, #3
 80040b8:	fa01 f303 	lsl.w	r3, r1, r3
 80040bc:	43db      	mvns	r3, r3
 80040be:	401a      	ands	r2, r3
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	08da      	lsrs	r2, r3, #3
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	3208      	adds	r2, #8
 80040cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	f003 0307 	and.w	r3, r3, #7
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	220f      	movs	r2, #15
 80040da:	fa02 f303 	lsl.w	r3, r2, r3
 80040de:	43db      	mvns	r3, r3
 80040e0:	697a      	ldr	r2, [r7, #20]
 80040e2:	08d2      	lsrs	r2, r2, #3
 80040e4:	4019      	ands	r1, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	3208      	adds	r2, #8
 80040ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	68da      	ldr	r2, [r3, #12]
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	005b      	lsls	r3, r3, #1
 80040f6:	2103      	movs	r1, #3
 80040f8:	fa01 f303 	lsl.w	r3, r1, r3
 80040fc:	43db      	mvns	r3, r3
 80040fe:	401a      	ands	r2, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	685a      	ldr	r2, [r3, #4]
 8004108:	2101      	movs	r1, #1
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	fa01 f303 	lsl.w	r3, r1, r3
 8004110:	43db      	mvns	r3, r3
 8004112:	401a      	ands	r2, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	689a      	ldr	r2, [r3, #8]
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	005b      	lsls	r3, r3, #1
 8004120:	2103      	movs	r1, #3
 8004122:	fa01 f303 	lsl.w	r3, r1, r3
 8004126:	43db      	mvns	r3, r3
 8004128:	401a      	ands	r2, r3
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	3301      	adds	r3, #1
 8004132:	617b      	str	r3, [r7, #20]
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	2b0f      	cmp	r3, #15
 8004138:	f67f af22 	bls.w	8003f80 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800413c:	bf00      	nop
 800413e:	bf00      	nop
 8004140:	371c      	adds	r7, #28
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop
 800414c:	40013800 	.word	0x40013800
 8004150:	40020000 	.word	0x40020000
 8004154:	40020400 	.word	0x40020400
 8004158:	40020800 	.word	0x40020800
 800415c:	40020c00 	.word	0x40020c00
 8004160:	40021000 	.word	0x40021000
 8004164:	40021400 	.word	0x40021400
 8004168:	40021800 	.word	0x40021800
 800416c:	40021c00 	.word	0x40021c00
 8004170:	40022000 	.word	0x40022000
 8004174:	40022400 	.word	0x40022400
 8004178:	40013c00 	.word	0x40013c00

0800417c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800417c:	b480      	push	{r7}
 800417e:	b085      	sub	sp, #20
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	460b      	mov	r3, r1
 8004186:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	691a      	ldr	r2, [r3, #16]
 800418c:	887b      	ldrh	r3, [r7, #2]
 800418e:	4013      	ands	r3, r2
 8004190:	2b00      	cmp	r3, #0
 8004192:	d002      	beq.n	800419a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004194:	2301      	movs	r3, #1
 8004196:	73fb      	strb	r3, [r7, #15]
 8004198:	e001      	b.n	800419e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800419a:	2300      	movs	r3, #0
 800419c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800419e:	7bfb      	ldrb	r3, [r7, #15]
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3714      	adds	r7, #20
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	460b      	mov	r3, r1
 80041b6:	807b      	strh	r3, [r7, #2]
 80041b8:	4613      	mov	r3, r2
 80041ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80041bc:	787b      	ldrb	r3, [r7, #1]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d003      	beq.n	80041ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80041c2:	887a      	ldrh	r2, [r7, #2]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80041c8:	e003      	b.n	80041d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80041ca:	887b      	ldrh	r3, [r7, #2]
 80041cc:	041a      	lsls	r2, r3, #16
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	619a      	str	r2, [r3, #24]
}
 80041d2:	bf00      	nop
 80041d4:	370c      	adds	r7, #12
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr
	...

080041e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b084      	sub	sp, #16
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d101      	bne.n	80041f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e12b      	b.n	800444a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d106      	bne.n	800420c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f7fe fd2e 	bl	8002c68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2224      	movs	r2, #36	@ 0x24
 8004210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f022 0201 	bic.w	r2, r2, #1
 8004222:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004232:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004242:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004244:	f001 ff82 	bl	800614c <HAL_RCC_GetPCLK1Freq>
 8004248:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	4a81      	ldr	r2, [pc, #516]	@ (8004454 <HAL_I2C_Init+0x274>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d807      	bhi.n	8004264 <HAL_I2C_Init+0x84>
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	4a80      	ldr	r2, [pc, #512]	@ (8004458 <HAL_I2C_Init+0x278>)
 8004258:	4293      	cmp	r3, r2
 800425a:	bf94      	ite	ls
 800425c:	2301      	movls	r3, #1
 800425e:	2300      	movhi	r3, #0
 8004260:	b2db      	uxtb	r3, r3
 8004262:	e006      	b.n	8004272 <HAL_I2C_Init+0x92>
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	4a7d      	ldr	r2, [pc, #500]	@ (800445c <HAL_I2C_Init+0x27c>)
 8004268:	4293      	cmp	r3, r2
 800426a:	bf94      	ite	ls
 800426c:	2301      	movls	r3, #1
 800426e:	2300      	movhi	r3, #0
 8004270:	b2db      	uxtb	r3, r3
 8004272:	2b00      	cmp	r3, #0
 8004274:	d001      	beq.n	800427a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e0e7      	b.n	800444a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	4a78      	ldr	r2, [pc, #480]	@ (8004460 <HAL_I2C_Init+0x280>)
 800427e:	fba2 2303 	umull	r2, r3, r2, r3
 8004282:	0c9b      	lsrs	r3, r3, #18
 8004284:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	68ba      	ldr	r2, [r7, #8]
 8004296:	430a      	orrs	r2, r1
 8004298:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	6a1b      	ldr	r3, [r3, #32]
 80042a0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	4a6a      	ldr	r2, [pc, #424]	@ (8004454 <HAL_I2C_Init+0x274>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d802      	bhi.n	80042b4 <HAL_I2C_Init+0xd4>
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	3301      	adds	r3, #1
 80042b2:	e009      	b.n	80042c8 <HAL_I2C_Init+0xe8>
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80042ba:	fb02 f303 	mul.w	r3, r2, r3
 80042be:	4a69      	ldr	r2, [pc, #420]	@ (8004464 <HAL_I2C_Init+0x284>)
 80042c0:	fba2 2303 	umull	r2, r3, r2, r3
 80042c4:	099b      	lsrs	r3, r3, #6
 80042c6:	3301      	adds	r3, #1
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	6812      	ldr	r2, [r2, #0]
 80042cc:	430b      	orrs	r3, r1
 80042ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	69db      	ldr	r3, [r3, #28]
 80042d6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80042da:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	495c      	ldr	r1, [pc, #368]	@ (8004454 <HAL_I2C_Init+0x274>)
 80042e4:	428b      	cmp	r3, r1
 80042e6:	d819      	bhi.n	800431c <HAL_I2C_Init+0x13c>
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	1e59      	subs	r1, r3, #1
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	005b      	lsls	r3, r3, #1
 80042f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80042f6:	1c59      	adds	r1, r3, #1
 80042f8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80042fc:	400b      	ands	r3, r1
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d00a      	beq.n	8004318 <HAL_I2C_Init+0x138>
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	1e59      	subs	r1, r3, #1
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	005b      	lsls	r3, r3, #1
 800430c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004310:	3301      	adds	r3, #1
 8004312:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004316:	e051      	b.n	80043bc <HAL_I2C_Init+0x1dc>
 8004318:	2304      	movs	r3, #4
 800431a:	e04f      	b.n	80043bc <HAL_I2C_Init+0x1dc>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d111      	bne.n	8004348 <HAL_I2C_Init+0x168>
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	1e58      	subs	r0, r3, #1
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6859      	ldr	r1, [r3, #4]
 800432c:	460b      	mov	r3, r1
 800432e:	005b      	lsls	r3, r3, #1
 8004330:	440b      	add	r3, r1
 8004332:	fbb0 f3f3 	udiv	r3, r0, r3
 8004336:	3301      	adds	r3, #1
 8004338:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800433c:	2b00      	cmp	r3, #0
 800433e:	bf0c      	ite	eq
 8004340:	2301      	moveq	r3, #1
 8004342:	2300      	movne	r3, #0
 8004344:	b2db      	uxtb	r3, r3
 8004346:	e012      	b.n	800436e <HAL_I2C_Init+0x18e>
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	1e58      	subs	r0, r3, #1
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6859      	ldr	r1, [r3, #4]
 8004350:	460b      	mov	r3, r1
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	440b      	add	r3, r1
 8004356:	0099      	lsls	r1, r3, #2
 8004358:	440b      	add	r3, r1
 800435a:	fbb0 f3f3 	udiv	r3, r0, r3
 800435e:	3301      	adds	r3, #1
 8004360:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004364:	2b00      	cmp	r3, #0
 8004366:	bf0c      	ite	eq
 8004368:	2301      	moveq	r3, #1
 800436a:	2300      	movne	r3, #0
 800436c:	b2db      	uxtb	r3, r3
 800436e:	2b00      	cmp	r3, #0
 8004370:	d001      	beq.n	8004376 <HAL_I2C_Init+0x196>
 8004372:	2301      	movs	r3, #1
 8004374:	e022      	b.n	80043bc <HAL_I2C_Init+0x1dc>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d10e      	bne.n	800439c <HAL_I2C_Init+0x1bc>
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	1e58      	subs	r0, r3, #1
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6859      	ldr	r1, [r3, #4]
 8004386:	460b      	mov	r3, r1
 8004388:	005b      	lsls	r3, r3, #1
 800438a:	440b      	add	r3, r1
 800438c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004390:	3301      	adds	r3, #1
 8004392:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004396:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800439a:	e00f      	b.n	80043bc <HAL_I2C_Init+0x1dc>
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	1e58      	subs	r0, r3, #1
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6859      	ldr	r1, [r3, #4]
 80043a4:	460b      	mov	r3, r1
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	440b      	add	r3, r1
 80043aa:	0099      	lsls	r1, r3, #2
 80043ac:	440b      	add	r3, r1
 80043ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80043b2:	3301      	adds	r3, #1
 80043b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043b8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80043bc:	6879      	ldr	r1, [r7, #4]
 80043be:	6809      	ldr	r1, [r1, #0]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	69da      	ldr	r2, [r3, #28]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6a1b      	ldr	r3, [r3, #32]
 80043d6:	431a      	orrs	r2, r3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	430a      	orrs	r2, r1
 80043de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80043ea:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	6911      	ldr	r1, [r2, #16]
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	68d2      	ldr	r2, [r2, #12]
 80043f6:	4311      	orrs	r1, r2
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	6812      	ldr	r2, [r2, #0]
 80043fc:	430b      	orrs	r3, r1
 80043fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	68db      	ldr	r3, [r3, #12]
 8004406:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	695a      	ldr	r2, [r3, #20]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	699b      	ldr	r3, [r3, #24]
 8004412:	431a      	orrs	r2, r3
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	430a      	orrs	r2, r1
 800441a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f042 0201 	orr.w	r2, r2, #1
 800442a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2220      	movs	r2, #32
 8004436:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004448:	2300      	movs	r3, #0
}
 800444a:	4618      	mov	r0, r3
 800444c:	3710      	adds	r7, #16
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	000186a0 	.word	0x000186a0
 8004458:	001e847f 	.word	0x001e847f
 800445c:	003d08ff 	.word	0x003d08ff
 8004460:	431bde83 	.word	0x431bde83
 8004464:	10624dd3 	.word	0x10624dd3

08004468 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b088      	sub	sp, #32
 800446c:	af02      	add	r7, sp, #8
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	4608      	mov	r0, r1
 8004472:	4611      	mov	r1, r2
 8004474:	461a      	mov	r2, r3
 8004476:	4603      	mov	r3, r0
 8004478:	817b      	strh	r3, [r7, #10]
 800447a:	460b      	mov	r3, r1
 800447c:	813b      	strh	r3, [r7, #8]
 800447e:	4613      	mov	r3, r2
 8004480:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004482:	f7ff fa4f 	bl	8003924 <HAL_GetTick>
 8004486:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800448e:	b2db      	uxtb	r3, r3
 8004490:	2b20      	cmp	r3, #32
 8004492:	f040 80d9 	bne.w	8004648 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	9300      	str	r3, [sp, #0]
 800449a:	2319      	movs	r3, #25
 800449c:	2201      	movs	r2, #1
 800449e:	496d      	ldr	r1, [pc, #436]	@ (8004654 <HAL_I2C_Mem_Write+0x1ec>)
 80044a0:	68f8      	ldr	r0, [r7, #12]
 80044a2:	f000 fc8b 	bl	8004dbc <I2C_WaitOnFlagUntilTimeout>
 80044a6:	4603      	mov	r3, r0
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d001      	beq.n	80044b0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80044ac:	2302      	movs	r3, #2
 80044ae:	e0cc      	b.n	800464a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d101      	bne.n	80044be <HAL_I2C_Mem_Write+0x56>
 80044ba:	2302      	movs	r3, #2
 80044bc:	e0c5      	b.n	800464a <HAL_I2C_Mem_Write+0x1e2>
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2201      	movs	r2, #1
 80044c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0301 	and.w	r3, r3, #1
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d007      	beq.n	80044e4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f042 0201 	orr.w	r2, r2, #1
 80044e2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80044f2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2221      	movs	r2, #33	@ 0x21
 80044f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2240      	movs	r2, #64	@ 0x40
 8004500:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2200      	movs	r2, #0
 8004508:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6a3a      	ldr	r2, [r7, #32]
 800450e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004514:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800451a:	b29a      	uxth	r2, r3
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	4a4d      	ldr	r2, [pc, #308]	@ (8004658 <HAL_I2C_Mem_Write+0x1f0>)
 8004524:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004526:	88f8      	ldrh	r0, [r7, #6]
 8004528:	893a      	ldrh	r2, [r7, #8]
 800452a:	8979      	ldrh	r1, [r7, #10]
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	9301      	str	r3, [sp, #4]
 8004530:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004532:	9300      	str	r3, [sp, #0]
 8004534:	4603      	mov	r3, r0
 8004536:	68f8      	ldr	r0, [r7, #12]
 8004538:	f000 fac2 	bl	8004ac0 <I2C_RequestMemoryWrite>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d052      	beq.n	80045e8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e081      	b.n	800464a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004546:	697a      	ldr	r2, [r7, #20]
 8004548:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800454a:	68f8      	ldr	r0, [r7, #12]
 800454c:	f000 fd50 	bl	8004ff0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004550:	4603      	mov	r3, r0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d00d      	beq.n	8004572 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800455a:	2b04      	cmp	r3, #4
 800455c:	d107      	bne.n	800456e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800456c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e06b      	b.n	800464a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004576:	781a      	ldrb	r2, [r3, #0]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004582:	1c5a      	adds	r2, r3, #1
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800458c:	3b01      	subs	r3, #1
 800458e:	b29a      	uxth	r2, r3
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004598:	b29b      	uxth	r3, r3
 800459a:	3b01      	subs	r3, #1
 800459c:	b29a      	uxth	r2, r3
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	695b      	ldr	r3, [r3, #20]
 80045a8:	f003 0304 	and.w	r3, r3, #4
 80045ac:	2b04      	cmp	r3, #4
 80045ae:	d11b      	bne.n	80045e8 <HAL_I2C_Mem_Write+0x180>
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d017      	beq.n	80045e8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045bc:	781a      	ldrb	r2, [r3, #0]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045c8:	1c5a      	adds	r2, r3, #1
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045d2:	3b01      	subs	r3, #1
 80045d4:	b29a      	uxth	r2, r3
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045de:	b29b      	uxth	r3, r3
 80045e0:	3b01      	subs	r3, #1
 80045e2:	b29a      	uxth	r2, r3
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d1aa      	bne.n	8004546 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045f0:	697a      	ldr	r2, [r7, #20]
 80045f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80045f4:	68f8      	ldr	r0, [r7, #12]
 80045f6:	f000 fd43 	bl	8005080 <I2C_WaitOnBTFFlagUntilTimeout>
 80045fa:	4603      	mov	r3, r0
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d00d      	beq.n	800461c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004604:	2b04      	cmp	r3, #4
 8004606:	d107      	bne.n	8004618 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004616:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e016      	b.n	800464a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800462a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2220      	movs	r2, #32
 8004630:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2200      	movs	r2, #0
 8004638:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2200      	movs	r2, #0
 8004640:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004644:	2300      	movs	r3, #0
 8004646:	e000      	b.n	800464a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004648:	2302      	movs	r3, #2
  }
}
 800464a:	4618      	mov	r0, r3
 800464c:	3718      	adds	r7, #24
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}
 8004652:	bf00      	nop
 8004654:	00100002 	.word	0x00100002
 8004658:	ffff0000 	.word	0xffff0000

0800465c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b08c      	sub	sp, #48	@ 0x30
 8004660:	af02      	add	r7, sp, #8
 8004662:	60f8      	str	r0, [r7, #12]
 8004664:	4608      	mov	r0, r1
 8004666:	4611      	mov	r1, r2
 8004668:	461a      	mov	r2, r3
 800466a:	4603      	mov	r3, r0
 800466c:	817b      	strh	r3, [r7, #10]
 800466e:	460b      	mov	r3, r1
 8004670:	813b      	strh	r3, [r7, #8]
 8004672:	4613      	mov	r3, r2
 8004674:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004676:	f7ff f955 	bl	8003924 <HAL_GetTick>
 800467a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004682:	b2db      	uxtb	r3, r3
 8004684:	2b20      	cmp	r3, #32
 8004686:	f040 8214 	bne.w	8004ab2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800468a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800468c:	9300      	str	r3, [sp, #0]
 800468e:	2319      	movs	r3, #25
 8004690:	2201      	movs	r2, #1
 8004692:	497b      	ldr	r1, [pc, #492]	@ (8004880 <HAL_I2C_Mem_Read+0x224>)
 8004694:	68f8      	ldr	r0, [r7, #12]
 8004696:	f000 fb91 	bl	8004dbc <I2C_WaitOnFlagUntilTimeout>
 800469a:	4603      	mov	r3, r0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d001      	beq.n	80046a4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80046a0:	2302      	movs	r3, #2
 80046a2:	e207      	b.n	8004ab4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d101      	bne.n	80046b2 <HAL_I2C_Mem_Read+0x56>
 80046ae:	2302      	movs	r3, #2
 80046b0:	e200      	b.n	8004ab4 <HAL_I2C_Mem_Read+0x458>
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2201      	movs	r2, #1
 80046b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 0301 	and.w	r3, r3, #1
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d007      	beq.n	80046d8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f042 0201 	orr.w	r2, r2, #1
 80046d6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80046e6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2222      	movs	r2, #34	@ 0x22
 80046ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2240      	movs	r2, #64	@ 0x40
 80046f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2200      	movs	r2, #0
 80046fc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004702:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004708:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800470e:	b29a      	uxth	r2, r3
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	4a5b      	ldr	r2, [pc, #364]	@ (8004884 <HAL_I2C_Mem_Read+0x228>)
 8004718:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800471a:	88f8      	ldrh	r0, [r7, #6]
 800471c:	893a      	ldrh	r2, [r7, #8]
 800471e:	8979      	ldrh	r1, [r7, #10]
 8004720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004722:	9301      	str	r3, [sp, #4]
 8004724:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004726:	9300      	str	r3, [sp, #0]
 8004728:	4603      	mov	r3, r0
 800472a:	68f8      	ldr	r0, [r7, #12]
 800472c:	f000 fa5e 	bl	8004bec <I2C_RequestMemoryRead>
 8004730:	4603      	mov	r3, r0
 8004732:	2b00      	cmp	r3, #0
 8004734:	d001      	beq.n	800473a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e1bc      	b.n	8004ab4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800473e:	2b00      	cmp	r3, #0
 8004740:	d113      	bne.n	800476a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004742:	2300      	movs	r3, #0
 8004744:	623b      	str	r3, [r7, #32]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	695b      	ldr	r3, [r3, #20]
 800474c:	623b      	str	r3, [r7, #32]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	699b      	ldr	r3, [r3, #24]
 8004754:	623b      	str	r3, [r7, #32]
 8004756:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004766:	601a      	str	r2, [r3, #0]
 8004768:	e190      	b.n	8004a8c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800476e:	2b01      	cmp	r3, #1
 8004770:	d11b      	bne.n	80047aa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004780:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004782:	2300      	movs	r3, #0
 8004784:	61fb      	str	r3, [r7, #28]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	695b      	ldr	r3, [r3, #20]
 800478c:	61fb      	str	r3, [r7, #28]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	699b      	ldr	r3, [r3, #24]
 8004794:	61fb      	str	r3, [r7, #28]
 8004796:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047a6:	601a      	str	r2, [r3, #0]
 80047a8:	e170      	b.n	8004a8c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	d11b      	bne.n	80047ea <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047c0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80047d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047d2:	2300      	movs	r3, #0
 80047d4:	61bb      	str	r3, [r7, #24]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	695b      	ldr	r3, [r3, #20]
 80047dc:	61bb      	str	r3, [r7, #24]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	699b      	ldr	r3, [r3, #24]
 80047e4:	61bb      	str	r3, [r7, #24]
 80047e6:	69bb      	ldr	r3, [r7, #24]
 80047e8:	e150      	b.n	8004a8c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047ea:	2300      	movs	r3, #0
 80047ec:	617b      	str	r3, [r7, #20]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	695b      	ldr	r3, [r3, #20]
 80047f4:	617b      	str	r3, [r7, #20]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	699b      	ldr	r3, [r3, #24]
 80047fc:	617b      	str	r3, [r7, #20]
 80047fe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004800:	e144      	b.n	8004a8c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004806:	2b03      	cmp	r3, #3
 8004808:	f200 80f1 	bhi.w	80049ee <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004810:	2b01      	cmp	r3, #1
 8004812:	d123      	bne.n	800485c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004814:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004816:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004818:	68f8      	ldr	r0, [r7, #12]
 800481a:	f000 fc79 	bl	8005110 <I2C_WaitOnRXNEFlagUntilTimeout>
 800481e:	4603      	mov	r3, r0
 8004820:	2b00      	cmp	r3, #0
 8004822:	d001      	beq.n	8004828 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	e145      	b.n	8004ab4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	691a      	ldr	r2, [r3, #16]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004832:	b2d2      	uxtb	r2, r2
 8004834:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800483a:	1c5a      	adds	r2, r3, #1
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004844:	3b01      	subs	r3, #1
 8004846:	b29a      	uxth	r2, r3
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004850:	b29b      	uxth	r3, r3
 8004852:	3b01      	subs	r3, #1
 8004854:	b29a      	uxth	r2, r3
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800485a:	e117      	b.n	8004a8c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004860:	2b02      	cmp	r3, #2
 8004862:	d14e      	bne.n	8004902 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004866:	9300      	str	r3, [sp, #0]
 8004868:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800486a:	2200      	movs	r2, #0
 800486c:	4906      	ldr	r1, [pc, #24]	@ (8004888 <HAL_I2C_Mem_Read+0x22c>)
 800486e:	68f8      	ldr	r0, [r7, #12]
 8004870:	f000 faa4 	bl	8004dbc <I2C_WaitOnFlagUntilTimeout>
 8004874:	4603      	mov	r3, r0
 8004876:	2b00      	cmp	r3, #0
 8004878:	d008      	beq.n	800488c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e11a      	b.n	8004ab4 <HAL_I2C_Mem_Read+0x458>
 800487e:	bf00      	nop
 8004880:	00100002 	.word	0x00100002
 8004884:	ffff0000 	.word	0xffff0000
 8004888:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800489a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	691a      	ldr	r2, [r3, #16]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048a6:	b2d2      	uxtb	r2, r2
 80048a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ae:	1c5a      	adds	r2, r3, #1
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048b8:	3b01      	subs	r3, #1
 80048ba:	b29a      	uxth	r2, r3
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	3b01      	subs	r3, #1
 80048c8:	b29a      	uxth	r2, r3
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	691a      	ldr	r2, [r3, #16]
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048d8:	b2d2      	uxtb	r2, r2
 80048da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048e0:	1c5a      	adds	r2, r3, #1
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048ea:	3b01      	subs	r3, #1
 80048ec:	b29a      	uxth	r2, r3
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	3b01      	subs	r3, #1
 80048fa:	b29a      	uxth	r2, r3
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004900:	e0c4      	b.n	8004a8c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004904:	9300      	str	r3, [sp, #0]
 8004906:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004908:	2200      	movs	r2, #0
 800490a:	496c      	ldr	r1, [pc, #432]	@ (8004abc <HAL_I2C_Mem_Read+0x460>)
 800490c:	68f8      	ldr	r0, [r7, #12]
 800490e:	f000 fa55 	bl	8004dbc <I2C_WaitOnFlagUntilTimeout>
 8004912:	4603      	mov	r3, r0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d001      	beq.n	800491c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e0cb      	b.n	8004ab4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800492a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	691a      	ldr	r2, [r3, #16]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004936:	b2d2      	uxtb	r2, r2
 8004938:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800493e:	1c5a      	adds	r2, r3, #1
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004948:	3b01      	subs	r3, #1
 800494a:	b29a      	uxth	r2, r3
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004954:	b29b      	uxth	r3, r3
 8004956:	3b01      	subs	r3, #1
 8004958:	b29a      	uxth	r2, r3
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800495e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004960:	9300      	str	r3, [sp, #0]
 8004962:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004964:	2200      	movs	r2, #0
 8004966:	4955      	ldr	r1, [pc, #340]	@ (8004abc <HAL_I2C_Mem_Read+0x460>)
 8004968:	68f8      	ldr	r0, [r7, #12]
 800496a:	f000 fa27 	bl	8004dbc <I2C_WaitOnFlagUntilTimeout>
 800496e:	4603      	mov	r3, r0
 8004970:	2b00      	cmp	r3, #0
 8004972:	d001      	beq.n	8004978 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	e09d      	b.n	8004ab4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004986:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	691a      	ldr	r2, [r3, #16]
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004992:	b2d2      	uxtb	r2, r2
 8004994:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800499a:	1c5a      	adds	r2, r3, #1
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049a4:	3b01      	subs	r3, #1
 80049a6:	b29a      	uxth	r2, r3
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	3b01      	subs	r3, #1
 80049b4:	b29a      	uxth	r2, r3
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	691a      	ldr	r2, [r3, #16]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049c4:	b2d2      	uxtb	r2, r2
 80049c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049cc:	1c5a      	adds	r2, r3, #1
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049d6:	3b01      	subs	r3, #1
 80049d8:	b29a      	uxth	r2, r3
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	3b01      	subs	r3, #1
 80049e6:	b29a      	uxth	r2, r3
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80049ec:	e04e      	b.n	8004a8c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049f0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80049f2:	68f8      	ldr	r0, [r7, #12]
 80049f4:	f000 fb8c 	bl	8005110 <I2C_WaitOnRXNEFlagUntilTimeout>
 80049f8:	4603      	mov	r3, r0
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d001      	beq.n	8004a02 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e058      	b.n	8004ab4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	691a      	ldr	r2, [r3, #16]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a0c:	b2d2      	uxtb	r2, r2
 8004a0e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a14:	1c5a      	adds	r2, r3, #1
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a1e:	3b01      	subs	r3, #1
 8004a20:	b29a      	uxth	r2, r3
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	3b01      	subs	r3, #1
 8004a2e:	b29a      	uxth	r2, r3
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	695b      	ldr	r3, [r3, #20]
 8004a3a:	f003 0304 	and.w	r3, r3, #4
 8004a3e:	2b04      	cmp	r3, #4
 8004a40:	d124      	bne.n	8004a8c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a46:	2b03      	cmp	r3, #3
 8004a48:	d107      	bne.n	8004a5a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a58:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	691a      	ldr	r2, [r3, #16]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a64:	b2d2      	uxtb	r2, r2
 8004a66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a6c:	1c5a      	adds	r2, r3, #1
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a76:	3b01      	subs	r3, #1
 8004a78:	b29a      	uxth	r2, r3
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	3b01      	subs	r3, #1
 8004a86:	b29a      	uxth	r2, r3
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	f47f aeb6 	bne.w	8004802 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2220      	movs	r2, #32
 8004a9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	e000      	b.n	8004ab4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004ab2:	2302      	movs	r3, #2
  }
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3728      	adds	r7, #40	@ 0x28
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}
 8004abc:	00010004 	.word	0x00010004

08004ac0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b088      	sub	sp, #32
 8004ac4:	af02      	add	r7, sp, #8
 8004ac6:	60f8      	str	r0, [r7, #12]
 8004ac8:	4608      	mov	r0, r1
 8004aca:	4611      	mov	r1, r2
 8004acc:	461a      	mov	r2, r3
 8004ace:	4603      	mov	r3, r0
 8004ad0:	817b      	strh	r3, [r7, #10]
 8004ad2:	460b      	mov	r3, r1
 8004ad4:	813b      	strh	r3, [r7, #8]
 8004ad6:	4613      	mov	r3, r2
 8004ad8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ae8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aec:	9300      	str	r3, [sp, #0]
 8004aee:	6a3b      	ldr	r3, [r7, #32]
 8004af0:	2200      	movs	r2, #0
 8004af2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004af6:	68f8      	ldr	r0, [r7, #12]
 8004af8:	f000 f960 	bl	8004dbc <I2C_WaitOnFlagUntilTimeout>
 8004afc:	4603      	mov	r3, r0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d00d      	beq.n	8004b1e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b0c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b10:	d103      	bne.n	8004b1a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b18:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	e05f      	b.n	8004bde <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004b1e:	897b      	ldrh	r3, [r7, #10]
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	461a      	mov	r2, r3
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004b2c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b30:	6a3a      	ldr	r2, [r7, #32]
 8004b32:	492d      	ldr	r1, [pc, #180]	@ (8004be8 <I2C_RequestMemoryWrite+0x128>)
 8004b34:	68f8      	ldr	r0, [r7, #12]
 8004b36:	f000 f9bb 	bl	8004eb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d001      	beq.n	8004b44 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e04c      	b.n	8004bde <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b44:	2300      	movs	r3, #0
 8004b46:	617b      	str	r3, [r7, #20]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	695b      	ldr	r3, [r3, #20]
 8004b4e:	617b      	str	r3, [r7, #20]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	699b      	ldr	r3, [r3, #24]
 8004b56:	617b      	str	r3, [r7, #20]
 8004b58:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b5c:	6a39      	ldr	r1, [r7, #32]
 8004b5e:	68f8      	ldr	r0, [r7, #12]
 8004b60:	f000 fa46 	bl	8004ff0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d00d      	beq.n	8004b86 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b6e:	2b04      	cmp	r3, #4
 8004b70:	d107      	bne.n	8004b82 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b80:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e02b      	b.n	8004bde <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004b86:	88fb      	ldrh	r3, [r7, #6]
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d105      	bne.n	8004b98 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b8c:	893b      	ldrh	r3, [r7, #8]
 8004b8e:	b2da      	uxtb	r2, r3
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	611a      	str	r2, [r3, #16]
 8004b96:	e021      	b.n	8004bdc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004b98:	893b      	ldrh	r3, [r7, #8]
 8004b9a:	0a1b      	lsrs	r3, r3, #8
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	b2da      	uxtb	r2, r3
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ba6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ba8:	6a39      	ldr	r1, [r7, #32]
 8004baa:	68f8      	ldr	r0, [r7, #12]
 8004bac:	f000 fa20 	bl	8004ff0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d00d      	beq.n	8004bd2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bba:	2b04      	cmp	r3, #4
 8004bbc:	d107      	bne.n	8004bce <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004bcc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e005      	b.n	8004bde <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004bd2:	893b      	ldrh	r3, [r7, #8]
 8004bd4:	b2da      	uxtb	r2, r3
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004bdc:	2300      	movs	r3, #0
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3718      	adds	r7, #24
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}
 8004be6:	bf00      	nop
 8004be8:	00010002 	.word	0x00010002

08004bec <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b088      	sub	sp, #32
 8004bf0:	af02      	add	r7, sp, #8
 8004bf2:	60f8      	str	r0, [r7, #12]
 8004bf4:	4608      	mov	r0, r1
 8004bf6:	4611      	mov	r1, r2
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	817b      	strh	r3, [r7, #10]
 8004bfe:	460b      	mov	r3, r1
 8004c00:	813b      	strh	r3, [r7, #8]
 8004c02:	4613      	mov	r3, r2
 8004c04:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004c14:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004c24:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c28:	9300      	str	r3, [sp, #0]
 8004c2a:	6a3b      	ldr	r3, [r7, #32]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004c32:	68f8      	ldr	r0, [r7, #12]
 8004c34:	f000 f8c2 	bl	8004dbc <I2C_WaitOnFlagUntilTimeout>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d00d      	beq.n	8004c5a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c4c:	d103      	bne.n	8004c56 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c54:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004c56:	2303      	movs	r3, #3
 8004c58:	e0aa      	b.n	8004db0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004c5a:	897b      	ldrh	r3, [r7, #10]
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	461a      	mov	r2, r3
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004c68:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c6c:	6a3a      	ldr	r2, [r7, #32]
 8004c6e:	4952      	ldr	r1, [pc, #328]	@ (8004db8 <I2C_RequestMemoryRead+0x1cc>)
 8004c70:	68f8      	ldr	r0, [r7, #12]
 8004c72:	f000 f91d 	bl	8004eb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c76:	4603      	mov	r3, r0
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d001      	beq.n	8004c80 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e097      	b.n	8004db0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c80:	2300      	movs	r3, #0
 8004c82:	617b      	str	r3, [r7, #20]
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	695b      	ldr	r3, [r3, #20]
 8004c8a:	617b      	str	r3, [r7, #20]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	699b      	ldr	r3, [r3, #24]
 8004c92:	617b      	str	r3, [r7, #20]
 8004c94:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c98:	6a39      	ldr	r1, [r7, #32]
 8004c9a:	68f8      	ldr	r0, [r7, #12]
 8004c9c:	f000 f9a8 	bl	8004ff0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d00d      	beq.n	8004cc2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004caa:	2b04      	cmp	r3, #4
 8004cac:	d107      	bne.n	8004cbe <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004cbc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e076      	b.n	8004db0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004cc2:	88fb      	ldrh	r3, [r7, #6]
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d105      	bne.n	8004cd4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004cc8:	893b      	ldrh	r3, [r7, #8]
 8004cca:	b2da      	uxtb	r2, r3
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	611a      	str	r2, [r3, #16]
 8004cd2:	e021      	b.n	8004d18 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004cd4:	893b      	ldrh	r3, [r7, #8]
 8004cd6:	0a1b      	lsrs	r3, r3, #8
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	b2da      	uxtb	r2, r3
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ce2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ce4:	6a39      	ldr	r1, [r7, #32]
 8004ce6:	68f8      	ldr	r0, [r7, #12]
 8004ce8:	f000 f982 	bl	8004ff0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004cec:	4603      	mov	r3, r0
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d00d      	beq.n	8004d0e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cf6:	2b04      	cmp	r3, #4
 8004cf8:	d107      	bne.n	8004d0a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d08:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e050      	b.n	8004db0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004d0e:	893b      	ldrh	r3, [r7, #8]
 8004d10:	b2da      	uxtb	r2, r3
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d1a:	6a39      	ldr	r1, [r7, #32]
 8004d1c:	68f8      	ldr	r0, [r7, #12]
 8004d1e:	f000 f967 	bl	8004ff0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d22:	4603      	mov	r3, r0
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d00d      	beq.n	8004d44 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d2c:	2b04      	cmp	r3, #4
 8004d2e:	d107      	bne.n	8004d40 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d3e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	e035      	b.n	8004db0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004d52:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d56:	9300      	str	r3, [sp, #0]
 8004d58:	6a3b      	ldr	r3, [r7, #32]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004d60:	68f8      	ldr	r0, [r7, #12]
 8004d62:	f000 f82b 	bl	8004dbc <I2C_WaitOnFlagUntilTimeout>
 8004d66:	4603      	mov	r3, r0
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d00d      	beq.n	8004d88 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d7a:	d103      	bne.n	8004d84 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d82:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004d84:	2303      	movs	r3, #3
 8004d86:	e013      	b.n	8004db0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004d88:	897b      	ldrh	r3, [r7, #10]
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	f043 0301 	orr.w	r3, r3, #1
 8004d90:	b2da      	uxtb	r2, r3
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d9a:	6a3a      	ldr	r2, [r7, #32]
 8004d9c:	4906      	ldr	r1, [pc, #24]	@ (8004db8 <I2C_RequestMemoryRead+0x1cc>)
 8004d9e:	68f8      	ldr	r0, [r7, #12]
 8004da0:	f000 f886 	bl	8004eb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004da4:	4603      	mov	r3, r0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d001      	beq.n	8004dae <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e000      	b.n	8004db0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004dae:	2300      	movs	r3, #0
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3718      	adds	r7, #24
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}
 8004db8:	00010002 	.word	0x00010002

08004dbc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b084      	sub	sp, #16
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	60f8      	str	r0, [r7, #12]
 8004dc4:	60b9      	str	r1, [r7, #8]
 8004dc6:	603b      	str	r3, [r7, #0]
 8004dc8:	4613      	mov	r3, r2
 8004dca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004dcc:	e048      	b.n	8004e60 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dd4:	d044      	beq.n	8004e60 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dd6:	f7fe fda5 	bl	8003924 <HAL_GetTick>
 8004dda:	4602      	mov	r2, r0
 8004ddc:	69bb      	ldr	r3, [r7, #24]
 8004dde:	1ad3      	subs	r3, r2, r3
 8004de0:	683a      	ldr	r2, [r7, #0]
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d302      	bcc.n	8004dec <I2C_WaitOnFlagUntilTimeout+0x30>
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d139      	bne.n	8004e60 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	0c1b      	lsrs	r3, r3, #16
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d10d      	bne.n	8004e12 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	695b      	ldr	r3, [r3, #20]
 8004dfc:	43da      	mvns	r2, r3
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	4013      	ands	r3, r2
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	bf0c      	ite	eq
 8004e08:	2301      	moveq	r3, #1
 8004e0a:	2300      	movne	r3, #0
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	461a      	mov	r2, r3
 8004e10:	e00c      	b.n	8004e2c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	699b      	ldr	r3, [r3, #24]
 8004e18:	43da      	mvns	r2, r3
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	bf0c      	ite	eq
 8004e24:	2301      	moveq	r3, #1
 8004e26:	2300      	movne	r3, #0
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	79fb      	ldrb	r3, [r7, #7]
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d116      	bne.n	8004e60 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2200      	movs	r2, #0
 8004e36:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2220      	movs	r2, #32
 8004e3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2200      	movs	r2, #0
 8004e44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e4c:	f043 0220 	orr.w	r2, r3, #32
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2200      	movs	r2, #0
 8004e58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e023      	b.n	8004ea8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	0c1b      	lsrs	r3, r3, #16
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d10d      	bne.n	8004e86 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	695b      	ldr	r3, [r3, #20]
 8004e70:	43da      	mvns	r2, r3
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	4013      	ands	r3, r2
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	bf0c      	ite	eq
 8004e7c:	2301      	moveq	r3, #1
 8004e7e:	2300      	movne	r3, #0
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	461a      	mov	r2, r3
 8004e84:	e00c      	b.n	8004ea0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	699b      	ldr	r3, [r3, #24]
 8004e8c:	43da      	mvns	r2, r3
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	4013      	ands	r3, r2
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	bf0c      	ite	eq
 8004e98:	2301      	moveq	r3, #1
 8004e9a:	2300      	movne	r3, #0
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	79fb      	ldrb	r3, [r7, #7]
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d093      	beq.n	8004dce <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ea6:	2300      	movs	r3, #0
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3710      	adds	r7, #16
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}

08004eb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b084      	sub	sp, #16
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	60f8      	str	r0, [r7, #12]
 8004eb8:	60b9      	str	r1, [r7, #8]
 8004eba:	607a      	str	r2, [r7, #4]
 8004ebc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ebe:	e071      	b.n	8004fa4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	695b      	ldr	r3, [r3, #20]
 8004ec6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004eca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ece:	d123      	bne.n	8004f18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ede:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004ee8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2200      	movs	r2, #0
 8004eee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2220      	movs	r2, #32
 8004ef4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2200      	movs	r2, #0
 8004efc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f04:	f043 0204 	orr.w	r2, r3, #4
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	e067      	b.n	8004fe8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f1e:	d041      	beq.n	8004fa4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f20:	f7fe fd00 	bl	8003924 <HAL_GetTick>
 8004f24:	4602      	mov	r2, r0
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d302      	bcc.n	8004f36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d136      	bne.n	8004fa4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	0c1b      	lsrs	r3, r3, #16
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d10c      	bne.n	8004f5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	695b      	ldr	r3, [r3, #20]
 8004f46:	43da      	mvns	r2, r3
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	4013      	ands	r3, r2
 8004f4c:	b29b      	uxth	r3, r3
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	bf14      	ite	ne
 8004f52:	2301      	movne	r3, #1
 8004f54:	2300      	moveq	r3, #0
 8004f56:	b2db      	uxtb	r3, r3
 8004f58:	e00b      	b.n	8004f72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	699b      	ldr	r3, [r3, #24]
 8004f60:	43da      	mvns	r2, r3
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	4013      	ands	r3, r2
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	bf14      	ite	ne
 8004f6c:	2301      	movne	r3, #1
 8004f6e:	2300      	moveq	r3, #0
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d016      	beq.n	8004fa4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2220      	movs	r2, #32
 8004f80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2200      	movs	r2, #0
 8004f88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f90:	f043 0220 	orr.w	r2, r3, #32
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	e021      	b.n	8004fe8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	0c1b      	lsrs	r3, r3, #16
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	2b01      	cmp	r3, #1
 8004fac:	d10c      	bne.n	8004fc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	695b      	ldr	r3, [r3, #20]
 8004fb4:	43da      	mvns	r2, r3
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	4013      	ands	r3, r2
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	bf14      	ite	ne
 8004fc0:	2301      	movne	r3, #1
 8004fc2:	2300      	moveq	r3, #0
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	e00b      	b.n	8004fe0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	699b      	ldr	r3, [r3, #24]
 8004fce:	43da      	mvns	r2, r3
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	b29b      	uxth	r3, r3
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	bf14      	ite	ne
 8004fda:	2301      	movne	r3, #1
 8004fdc:	2300      	moveq	r3, #0
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	f47f af6d 	bne.w	8004ec0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004fe6:	2300      	movs	r3, #0
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3710      	adds	r7, #16
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b084      	sub	sp, #16
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	60f8      	str	r0, [r7, #12]
 8004ff8:	60b9      	str	r1, [r7, #8]
 8004ffa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ffc:	e034      	b.n	8005068 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004ffe:	68f8      	ldr	r0, [r7, #12]
 8005000:	f000 f8e3 	bl	80051ca <I2C_IsAcknowledgeFailed>
 8005004:	4603      	mov	r3, r0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d001      	beq.n	800500e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e034      	b.n	8005078 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005014:	d028      	beq.n	8005068 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005016:	f7fe fc85 	bl	8003924 <HAL_GetTick>
 800501a:	4602      	mov	r2, r0
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	1ad3      	subs	r3, r2, r3
 8005020:	68ba      	ldr	r2, [r7, #8]
 8005022:	429a      	cmp	r2, r3
 8005024:	d302      	bcc.n	800502c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d11d      	bne.n	8005068 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	695b      	ldr	r3, [r3, #20]
 8005032:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005036:	2b80      	cmp	r3, #128	@ 0x80
 8005038:	d016      	beq.n	8005068 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2200      	movs	r2, #0
 800503e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2220      	movs	r2, #32
 8005044:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2200      	movs	r2, #0
 800504c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005054:	f043 0220 	orr.w	r2, r3, #32
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2200      	movs	r2, #0
 8005060:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	e007      	b.n	8005078 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	695b      	ldr	r3, [r3, #20]
 800506e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005072:	2b80      	cmp	r3, #128	@ 0x80
 8005074:	d1c3      	bne.n	8004ffe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005076:	2300      	movs	r3, #0
}
 8005078:	4618      	mov	r0, r3
 800507a:	3710      	adds	r7, #16
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}

08005080 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b084      	sub	sp, #16
 8005084:	af00      	add	r7, sp, #0
 8005086:	60f8      	str	r0, [r7, #12]
 8005088:	60b9      	str	r1, [r7, #8]
 800508a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800508c:	e034      	b.n	80050f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800508e:	68f8      	ldr	r0, [r7, #12]
 8005090:	f000 f89b 	bl	80051ca <I2C_IsAcknowledgeFailed>
 8005094:	4603      	mov	r3, r0
 8005096:	2b00      	cmp	r3, #0
 8005098:	d001      	beq.n	800509e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e034      	b.n	8005108 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050a4:	d028      	beq.n	80050f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050a6:	f7fe fc3d 	bl	8003924 <HAL_GetTick>
 80050aa:	4602      	mov	r2, r0
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	1ad3      	subs	r3, r2, r3
 80050b0:	68ba      	ldr	r2, [r7, #8]
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d302      	bcc.n	80050bc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d11d      	bne.n	80050f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	695b      	ldr	r3, [r3, #20]
 80050c2:	f003 0304 	and.w	r3, r3, #4
 80050c6:	2b04      	cmp	r3, #4
 80050c8:	d016      	beq.n	80050f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2200      	movs	r2, #0
 80050ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2220      	movs	r2, #32
 80050d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2200      	movs	r2, #0
 80050dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050e4:	f043 0220 	orr.w	r2, r3, #32
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2200      	movs	r2, #0
 80050f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	e007      	b.n	8005108 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	695b      	ldr	r3, [r3, #20]
 80050fe:	f003 0304 	and.w	r3, r3, #4
 8005102:	2b04      	cmp	r3, #4
 8005104:	d1c3      	bne.n	800508e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005106:	2300      	movs	r3, #0
}
 8005108:	4618      	mov	r0, r3
 800510a:	3710      	adds	r7, #16
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}

08005110 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b084      	sub	sp, #16
 8005114:	af00      	add	r7, sp, #0
 8005116:	60f8      	str	r0, [r7, #12]
 8005118:	60b9      	str	r1, [r7, #8]
 800511a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800511c:	e049      	b.n	80051b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	695b      	ldr	r3, [r3, #20]
 8005124:	f003 0310 	and.w	r3, r3, #16
 8005128:	2b10      	cmp	r3, #16
 800512a:	d119      	bne.n	8005160 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f06f 0210 	mvn.w	r2, #16
 8005134:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2200      	movs	r2, #0
 800513a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2220      	movs	r2, #32
 8005140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2200      	movs	r2, #0
 8005148:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2200      	movs	r2, #0
 8005158:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800515c:	2301      	movs	r3, #1
 800515e:	e030      	b.n	80051c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005160:	f7fe fbe0 	bl	8003924 <HAL_GetTick>
 8005164:	4602      	mov	r2, r0
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	1ad3      	subs	r3, r2, r3
 800516a:	68ba      	ldr	r2, [r7, #8]
 800516c:	429a      	cmp	r2, r3
 800516e:	d302      	bcc.n	8005176 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d11d      	bne.n	80051b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	695b      	ldr	r3, [r3, #20]
 800517c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005180:	2b40      	cmp	r3, #64	@ 0x40
 8005182:	d016      	beq.n	80051b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2200      	movs	r2, #0
 8005188:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2220      	movs	r2, #32
 800518e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2200      	movs	r2, #0
 8005196:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800519e:	f043 0220 	orr.w	r2, r3, #32
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2200      	movs	r2, #0
 80051aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	e007      	b.n	80051c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	695b      	ldr	r3, [r3, #20]
 80051b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051bc:	2b40      	cmp	r3, #64	@ 0x40
 80051be:	d1ae      	bne.n	800511e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80051c0:	2300      	movs	r3, #0
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3710      	adds	r7, #16
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}

080051ca <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80051ca:	b480      	push	{r7}
 80051cc:	b083      	sub	sp, #12
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	695b      	ldr	r3, [r3, #20]
 80051d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051e0:	d11b      	bne.n	800521a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80051ea:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2220      	movs	r2, #32
 80051f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2200      	movs	r2, #0
 80051fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005206:	f043 0204 	orr.w	r2, r3, #4
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	e000      	b.n	800521c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800521a:	2300      	movs	r3, #0
}
 800521c:	4618      	mov	r0, r3
 800521e:	370c      	adds	r7, #12
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005228:	b480      	push	{r7}
 800522a:	b083      	sub	sp, #12
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005238:	b2db      	uxtb	r3, r3
 800523a:	2b20      	cmp	r3, #32
 800523c:	d129      	bne.n	8005292 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2224      	movs	r2, #36	@ 0x24
 8005242:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f022 0201 	bic.w	r2, r2, #1
 8005254:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f022 0210 	bic.w	r2, r2, #16
 8005264:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	683a      	ldr	r2, [r7, #0]
 8005272:	430a      	orrs	r2, r1
 8005274:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f042 0201 	orr.w	r2, r2, #1
 8005284:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2220      	movs	r2, #32
 800528a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800528e:	2300      	movs	r3, #0
 8005290:	e000      	b.n	8005294 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8005292:	2302      	movs	r3, #2
  }
}
 8005294:	4618      	mov	r0, r3
 8005296:	370c      	adds	r7, #12
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr

080052a0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b085      	sub	sp, #20
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80052aa:	2300      	movs	r3, #0
 80052ac:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	2b20      	cmp	r3, #32
 80052b8:	d12a      	bne.n	8005310 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2224      	movs	r2, #36	@ 0x24
 80052be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f022 0201 	bic.w	r2, r2, #1
 80052d0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052d8:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80052da:	89fb      	ldrh	r3, [r7, #14]
 80052dc:	f023 030f 	bic.w	r3, r3, #15
 80052e0:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	b29a      	uxth	r2, r3
 80052e6:	89fb      	ldrh	r3, [r7, #14]
 80052e8:	4313      	orrs	r3, r2
 80052ea:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	89fa      	ldrh	r2, [r7, #14]
 80052f2:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f042 0201 	orr.w	r2, r2, #1
 8005302:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2220      	movs	r2, #32
 8005308:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800530c:	2300      	movs	r3, #0
 800530e:	e000      	b.n	8005312 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005310:	2302      	movs	r3, #2
  }
}
 8005312:	4618      	mov	r0, r3
 8005314:	3714      	adds	r7, #20
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr
	...

08005320 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b084      	sub	sp, #16
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d101      	bne.n	8005332 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e0bf      	b.n	80054b2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8005338:	b2db      	uxtb	r3, r3
 800533a:	2b00      	cmp	r3, #0
 800533c:	d106      	bne.n	800534c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2200      	movs	r2, #0
 8005342:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f7fd fcf8 	bl	8002d3c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2202      	movs	r2, #2
 8005350:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	699a      	ldr	r2, [r3, #24]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8005362:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	6999      	ldr	r1, [r3, #24]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	685a      	ldr	r2, [r3, #4]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005378:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	691b      	ldr	r3, [r3, #16]
 800537e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	430a      	orrs	r2, r1
 8005386:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	6899      	ldr	r1, [r3, #8]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	4b4a      	ldr	r3, [pc, #296]	@ (80054bc <HAL_LTDC_Init+0x19c>)
 8005394:	400b      	ands	r3, r1
 8005396:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	695b      	ldr	r3, [r3, #20]
 800539c:	041b      	lsls	r3, r3, #16
 800539e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	6899      	ldr	r1, [r3, #8]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	699a      	ldr	r2, [r3, #24]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	431a      	orrs	r2, r3
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	430a      	orrs	r2, r1
 80053b4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	68d9      	ldr	r1, [r3, #12]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	4b3e      	ldr	r3, [pc, #248]	@ (80054bc <HAL_LTDC_Init+0x19c>)
 80053c2:	400b      	ands	r3, r1
 80053c4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	69db      	ldr	r3, [r3, #28]
 80053ca:	041b      	lsls	r3, r3, #16
 80053cc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	68d9      	ldr	r1, [r3, #12]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6a1a      	ldr	r2, [r3, #32]
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	431a      	orrs	r2, r3
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	430a      	orrs	r2, r1
 80053e2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	6919      	ldr	r1, [r3, #16]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	4b33      	ldr	r3, [pc, #204]	@ (80054bc <HAL_LTDC_Init+0x19c>)
 80053f0:	400b      	ands	r3, r1
 80053f2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053f8:	041b      	lsls	r3, r3, #16
 80053fa:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	6919      	ldr	r1, [r3, #16]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	431a      	orrs	r2, r3
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	430a      	orrs	r2, r1
 8005410:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	6959      	ldr	r1, [r3, #20]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	4b27      	ldr	r3, [pc, #156]	@ (80054bc <HAL_LTDC_Init+0x19c>)
 800541e:	400b      	ands	r3, r1
 8005420:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005426:	041b      	lsls	r3, r3, #16
 8005428:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	6959      	ldr	r1, [r3, #20]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	431a      	orrs	r2, r3
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	430a      	orrs	r2, r1
 800543e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005446:	021b      	lsls	r3, r3, #8
 8005448:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8005450:	041b      	lsls	r3, r3, #16
 8005452:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8005462:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800546a:	68ba      	ldr	r2, [r7, #8]
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	4313      	orrs	r3, r2
 8005470:	687a      	ldr	r2, [r7, #4]
 8005472:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8005476:	431a      	orrs	r2, r3
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	430a      	orrs	r2, r1
 800547e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f042 0206 	orr.w	r2, r2, #6
 800548e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	699a      	ldr	r2, [r3, #24]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f042 0201 	orr.w	r2, r2, #1
 800549e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2201      	movs	r2, #1
 80054ac:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 80054b0:	2300      	movs	r3, #0
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3710      	adds	r7, #16
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}
 80054ba:	bf00      	nop
 80054bc:	f000f800 	.word	0xf000f800

080054c0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80054c0:	b5b0      	push	{r4, r5, r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	60f8      	str	r0, [r7, #12]
 80054c8:	60b9      	str	r1, [r7, #8]
 80054ca:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	d101      	bne.n	80054da <HAL_LTDC_ConfigLayer+0x1a>
 80054d6:	2302      	movs	r3, #2
 80054d8:	e02c      	b.n	8005534 <HAL_LTDC_ConfigLayer+0x74>
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2201      	movs	r2, #1
 80054de:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2202      	movs	r2, #2
 80054e6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80054ea:	68fa      	ldr	r2, [r7, #12]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2134      	movs	r1, #52	@ 0x34
 80054f0:	fb01 f303 	mul.w	r3, r1, r3
 80054f4:	4413      	add	r3, r2
 80054f6:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	4614      	mov	r4, r2
 80054fe:	461d      	mov	r5, r3
 8005500:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005502:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005504:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005506:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005508:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800550a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800550c:	682b      	ldr	r3, [r5, #0]
 800550e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005510:	687a      	ldr	r2, [r7, #4]
 8005512:	68b9      	ldr	r1, [r7, #8]
 8005514:	68f8      	ldr	r0, [r7, #12]
 8005516:	f000 f811 	bl	800553c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	2201      	movs	r2, #1
 8005520:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2201      	movs	r2, #1
 8005526:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2200      	movs	r2, #0
 800552e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8005532:	2300      	movs	r3, #0
}
 8005534:	4618      	mov	r0, r3
 8005536:	3710      	adds	r7, #16
 8005538:	46bd      	mov	sp, r7
 800553a:	bdb0      	pop	{r4, r5, r7, pc}

0800553c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800553c:	b480      	push	{r7}
 800553e:	b089      	sub	sp, #36	@ 0x24
 8005540:	af00      	add	r7, sp, #0
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	60b9      	str	r1, [r7, #8]
 8005546:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	685a      	ldr	r2, [r3, #4]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	0c1b      	lsrs	r3, r3, #16
 8005554:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005558:	4413      	add	r3, r2
 800555a:	041b      	lsls	r3, r3, #16
 800555c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	461a      	mov	r2, r3
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	01db      	lsls	r3, r3, #7
 8005568:	4413      	add	r3, r2
 800556a:	3384      	adds	r3, #132	@ 0x84
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	68fa      	ldr	r2, [r7, #12]
 8005570:	6812      	ldr	r2, [r2, #0]
 8005572:	4611      	mov	r1, r2
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	01d2      	lsls	r2, r2, #7
 8005578:	440a      	add	r2, r1
 800557a:	3284      	adds	r2, #132	@ 0x84
 800557c:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8005580:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	68db      	ldr	r3, [r3, #12]
 800558c:	0c1b      	lsrs	r3, r3, #16
 800558e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005592:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005594:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4619      	mov	r1, r3
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	01db      	lsls	r3, r3, #7
 80055a0:	440b      	add	r3, r1
 80055a2:	3384      	adds	r3, #132	@ 0x84
 80055a4:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80055a6:	69fb      	ldr	r3, [r7, #28]
 80055a8:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80055aa:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	68da      	ldr	r2, [r3, #12]
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	68db      	ldr	r3, [r3, #12]
 80055b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80055ba:	4413      	add	r3, r2
 80055bc:	041b      	lsls	r3, r3, #16
 80055be:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	461a      	mov	r2, r3
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	01db      	lsls	r3, r3, #7
 80055ca:	4413      	add	r3, r2
 80055cc:	3384      	adds	r3, #132	@ 0x84
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	68fa      	ldr	r2, [r7, #12]
 80055d2:	6812      	ldr	r2, [r2, #0]
 80055d4:	4611      	mov	r1, r2
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	01d2      	lsls	r2, r2, #7
 80055da:	440a      	add	r2, r1
 80055dc:	3284      	adds	r2, #132	@ 0x84
 80055de:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80055e2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	689a      	ldr	r2, [r3, #8]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	68db      	ldr	r3, [r3, #12]
 80055ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80055f2:	4413      	add	r3, r2
 80055f4:	1c5a      	adds	r2, r3, #1
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4619      	mov	r1, r3
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	01db      	lsls	r3, r3, #7
 8005600:	440b      	add	r3, r1
 8005602:	3384      	adds	r3, #132	@ 0x84
 8005604:	4619      	mov	r1, r3
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	4313      	orrs	r3, r2
 800560a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	461a      	mov	r2, r3
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	01db      	lsls	r3, r3, #7
 8005616:	4413      	add	r3, r2
 8005618:	3384      	adds	r3, #132	@ 0x84
 800561a:	691b      	ldr	r3, [r3, #16]
 800561c:	68fa      	ldr	r2, [r7, #12]
 800561e:	6812      	ldr	r2, [r2, #0]
 8005620:	4611      	mov	r1, r2
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	01d2      	lsls	r2, r2, #7
 8005626:	440a      	add	r2, r1
 8005628:	3284      	adds	r2, #132	@ 0x84
 800562a:	f023 0307 	bic.w	r3, r3, #7
 800562e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	461a      	mov	r2, r3
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	01db      	lsls	r3, r3, #7
 800563a:	4413      	add	r3, r2
 800563c:	3384      	adds	r3, #132	@ 0x84
 800563e:	461a      	mov	r2, r3
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	691b      	ldr	r3, [r3, #16]
 8005644:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800564c:	021b      	lsls	r3, r3, #8
 800564e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8005656:	041b      	lsls	r3, r3, #16
 8005658:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	699b      	ldr	r3, [r3, #24]
 800565e:	061b      	lsls	r3, r3, #24
 8005660:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	461a      	mov	r2, r3
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	01db      	lsls	r3, r3, #7
 800566c:	4413      	add	r3, r2
 800566e:	3384      	adds	r3, #132	@ 0x84
 8005670:	699b      	ldr	r3, [r3, #24]
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	461a      	mov	r2, r3
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	01db      	lsls	r3, r3, #7
 800567c:	4413      	add	r3, r2
 800567e:	3384      	adds	r3, #132	@ 0x84
 8005680:	461a      	mov	r2, r3
 8005682:	2300      	movs	r3, #0
 8005684:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800568c:	461a      	mov	r2, r3
 800568e:	69fb      	ldr	r3, [r7, #28]
 8005690:	431a      	orrs	r2, r3
 8005692:	69bb      	ldr	r3, [r7, #24]
 8005694:	431a      	orrs	r2, r3
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4619      	mov	r1, r3
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	01db      	lsls	r3, r3, #7
 80056a0:	440b      	add	r3, r1
 80056a2:	3384      	adds	r3, #132	@ 0x84
 80056a4:	4619      	mov	r1, r3
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	461a      	mov	r2, r3
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	01db      	lsls	r3, r3, #7
 80056b6:	4413      	add	r3, r2
 80056b8:	3384      	adds	r3, #132	@ 0x84
 80056ba:	695b      	ldr	r3, [r3, #20]
 80056bc:	68fa      	ldr	r2, [r7, #12]
 80056be:	6812      	ldr	r2, [r2, #0]
 80056c0:	4611      	mov	r1, r2
 80056c2:	687a      	ldr	r2, [r7, #4]
 80056c4:	01d2      	lsls	r2, r2, #7
 80056c6:	440a      	add	r2, r1
 80056c8:	3284      	adds	r2, #132	@ 0x84
 80056ca:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80056ce:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	461a      	mov	r2, r3
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	01db      	lsls	r3, r3, #7
 80056da:	4413      	add	r3, r2
 80056dc:	3384      	adds	r3, #132	@ 0x84
 80056de:	461a      	mov	r2, r3
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	695b      	ldr	r3, [r3, #20]
 80056e4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	461a      	mov	r2, r3
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	01db      	lsls	r3, r3, #7
 80056f0:	4413      	add	r3, r2
 80056f2:	3384      	adds	r3, #132	@ 0x84
 80056f4:	69db      	ldr	r3, [r3, #28]
 80056f6:	68fa      	ldr	r2, [r7, #12]
 80056f8:	6812      	ldr	r2, [r2, #0]
 80056fa:	4611      	mov	r1, r2
 80056fc:	687a      	ldr	r2, [r7, #4]
 80056fe:	01d2      	lsls	r2, r2, #7
 8005700:	440a      	add	r2, r1
 8005702:	3284      	adds	r2, #132	@ 0x84
 8005704:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8005708:	f023 0307 	bic.w	r3, r3, #7
 800570c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	69da      	ldr	r2, [r3, #28]
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	6a1b      	ldr	r3, [r3, #32]
 8005716:	68f9      	ldr	r1, [r7, #12]
 8005718:	6809      	ldr	r1, [r1, #0]
 800571a:	4608      	mov	r0, r1
 800571c:	6879      	ldr	r1, [r7, #4]
 800571e:	01c9      	lsls	r1, r1, #7
 8005720:	4401      	add	r1, r0
 8005722:	3184      	adds	r1, #132	@ 0x84
 8005724:	4313      	orrs	r3, r2
 8005726:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	461a      	mov	r2, r3
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	01db      	lsls	r3, r3, #7
 8005732:	4413      	add	r3, r2
 8005734:	3384      	adds	r3, #132	@ 0x84
 8005736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	461a      	mov	r2, r3
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	01db      	lsls	r3, r3, #7
 8005742:	4413      	add	r3, r2
 8005744:	3384      	adds	r3, #132	@ 0x84
 8005746:	461a      	mov	r2, r3
 8005748:	2300      	movs	r3, #0
 800574a:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	461a      	mov	r2, r3
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	01db      	lsls	r3, r3, #7
 8005756:	4413      	add	r3, r2
 8005758:	3384      	adds	r3, #132	@ 0x84
 800575a:	461a      	mov	r2, r3
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005760:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d102      	bne.n	8005770 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800576a:	2304      	movs	r3, #4
 800576c:	61fb      	str	r3, [r7, #28]
 800576e:	e01b      	b.n	80057a8 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	691b      	ldr	r3, [r3, #16]
 8005774:	2b01      	cmp	r3, #1
 8005776:	d102      	bne.n	800577e <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8005778:	2303      	movs	r3, #3
 800577a:	61fb      	str	r3, [r7, #28]
 800577c:	e014      	b.n	80057a8 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	691b      	ldr	r3, [r3, #16]
 8005782:	2b04      	cmp	r3, #4
 8005784:	d00b      	beq.n	800579e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800578a:	2b02      	cmp	r3, #2
 800578c:	d007      	beq.n	800579e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005792:	2b03      	cmp	r3, #3
 8005794:	d003      	beq.n	800579e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800579a:	2b07      	cmp	r3, #7
 800579c:	d102      	bne.n	80057a4 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800579e:	2302      	movs	r3, #2
 80057a0:	61fb      	str	r3, [r7, #28]
 80057a2:	e001      	b.n	80057a8 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80057a4:	2301      	movs	r3, #1
 80057a6:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	461a      	mov	r2, r3
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	01db      	lsls	r3, r3, #7
 80057b2:	4413      	add	r3, r2
 80057b4:	3384      	adds	r3, #132	@ 0x84
 80057b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057b8:	68fa      	ldr	r2, [r7, #12]
 80057ba:	6812      	ldr	r2, [r2, #0]
 80057bc:	4611      	mov	r1, r2
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	01d2      	lsls	r2, r2, #7
 80057c2:	440a      	add	r2, r1
 80057c4:	3284      	adds	r2, #132	@ 0x84
 80057c6:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 80057ca:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057d0:	69fa      	ldr	r2, [r7, #28]
 80057d2:	fb02 f303 	mul.w	r3, r2, r3
 80057d6:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	6859      	ldr	r1, [r3, #4]
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	1acb      	subs	r3, r1, r3
 80057e2:	69f9      	ldr	r1, [r7, #28]
 80057e4:	fb01 f303 	mul.w	r3, r1, r3
 80057e8:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80057ea:	68f9      	ldr	r1, [r7, #12]
 80057ec:	6809      	ldr	r1, [r1, #0]
 80057ee:	4608      	mov	r0, r1
 80057f0:	6879      	ldr	r1, [r7, #4]
 80057f2:	01c9      	lsls	r1, r1, #7
 80057f4:	4401      	add	r1, r0
 80057f6:	3184      	adds	r1, #132	@ 0x84
 80057f8:	4313      	orrs	r3, r2
 80057fa:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	461a      	mov	r2, r3
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	01db      	lsls	r3, r3, #7
 8005806:	4413      	add	r3, r2
 8005808:	3384      	adds	r3, #132	@ 0x84
 800580a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800580c:	68fa      	ldr	r2, [r7, #12]
 800580e:	6812      	ldr	r2, [r2, #0]
 8005810:	4611      	mov	r1, r2
 8005812:	687a      	ldr	r2, [r7, #4]
 8005814:	01d2      	lsls	r2, r2, #7
 8005816:	440a      	add	r2, r1
 8005818:	3284      	adds	r2, #132	@ 0x84
 800581a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800581e:	f023 0307 	bic.w	r3, r3, #7
 8005822:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	461a      	mov	r2, r3
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	01db      	lsls	r3, r3, #7
 800582e:	4413      	add	r3, r2
 8005830:	3384      	adds	r3, #132	@ 0x84
 8005832:	461a      	mov	r2, r3
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005838:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	461a      	mov	r2, r3
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	01db      	lsls	r3, r3, #7
 8005844:	4413      	add	r3, r2
 8005846:	3384      	adds	r3, #132	@ 0x84
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	68fa      	ldr	r2, [r7, #12]
 800584c:	6812      	ldr	r2, [r2, #0]
 800584e:	4611      	mov	r1, r2
 8005850:	687a      	ldr	r2, [r7, #4]
 8005852:	01d2      	lsls	r2, r2, #7
 8005854:	440a      	add	r2, r1
 8005856:	3284      	adds	r2, #132	@ 0x84
 8005858:	f043 0301 	orr.w	r3, r3, #1
 800585c:	6013      	str	r3, [r2, #0]
}
 800585e:	bf00      	nop
 8005860:	3724      	adds	r7, #36	@ 0x24
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr
	...

0800586c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b086      	sub	sp, #24
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d101      	bne.n	800587e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	e267      	b.n	8005d4e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f003 0301 	and.w	r3, r3, #1
 8005886:	2b00      	cmp	r3, #0
 8005888:	d075      	beq.n	8005976 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800588a:	4b88      	ldr	r3, [pc, #544]	@ (8005aac <HAL_RCC_OscConfig+0x240>)
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	f003 030c 	and.w	r3, r3, #12
 8005892:	2b04      	cmp	r3, #4
 8005894:	d00c      	beq.n	80058b0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005896:	4b85      	ldr	r3, [pc, #532]	@ (8005aac <HAL_RCC_OscConfig+0x240>)
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800589e:	2b08      	cmp	r3, #8
 80058a0:	d112      	bne.n	80058c8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80058a2:	4b82      	ldr	r3, [pc, #520]	@ (8005aac <HAL_RCC_OscConfig+0x240>)
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80058aa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80058ae:	d10b      	bne.n	80058c8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058b0:	4b7e      	ldr	r3, [pc, #504]	@ (8005aac <HAL_RCC_OscConfig+0x240>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d05b      	beq.n	8005974 <HAL_RCC_OscConfig+0x108>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d157      	bne.n	8005974 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80058c4:	2301      	movs	r3, #1
 80058c6:	e242      	b.n	8005d4e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80058d0:	d106      	bne.n	80058e0 <HAL_RCC_OscConfig+0x74>
 80058d2:	4b76      	ldr	r3, [pc, #472]	@ (8005aac <HAL_RCC_OscConfig+0x240>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a75      	ldr	r2, [pc, #468]	@ (8005aac <HAL_RCC_OscConfig+0x240>)
 80058d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80058dc:	6013      	str	r3, [r2, #0]
 80058de:	e01d      	b.n	800591c <HAL_RCC_OscConfig+0xb0>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80058e8:	d10c      	bne.n	8005904 <HAL_RCC_OscConfig+0x98>
 80058ea:	4b70      	ldr	r3, [pc, #448]	@ (8005aac <HAL_RCC_OscConfig+0x240>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a6f      	ldr	r2, [pc, #444]	@ (8005aac <HAL_RCC_OscConfig+0x240>)
 80058f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80058f4:	6013      	str	r3, [r2, #0]
 80058f6:	4b6d      	ldr	r3, [pc, #436]	@ (8005aac <HAL_RCC_OscConfig+0x240>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a6c      	ldr	r2, [pc, #432]	@ (8005aac <HAL_RCC_OscConfig+0x240>)
 80058fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005900:	6013      	str	r3, [r2, #0]
 8005902:	e00b      	b.n	800591c <HAL_RCC_OscConfig+0xb0>
 8005904:	4b69      	ldr	r3, [pc, #420]	@ (8005aac <HAL_RCC_OscConfig+0x240>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a68      	ldr	r2, [pc, #416]	@ (8005aac <HAL_RCC_OscConfig+0x240>)
 800590a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800590e:	6013      	str	r3, [r2, #0]
 8005910:	4b66      	ldr	r3, [pc, #408]	@ (8005aac <HAL_RCC_OscConfig+0x240>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a65      	ldr	r2, [pc, #404]	@ (8005aac <HAL_RCC_OscConfig+0x240>)
 8005916:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800591a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d013      	beq.n	800594c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005924:	f7fd fffe 	bl	8003924 <HAL_GetTick>
 8005928:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800592a:	e008      	b.n	800593e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800592c:	f7fd fffa 	bl	8003924 <HAL_GetTick>
 8005930:	4602      	mov	r2, r0
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	1ad3      	subs	r3, r2, r3
 8005936:	2b64      	cmp	r3, #100	@ 0x64
 8005938:	d901      	bls.n	800593e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800593a:	2303      	movs	r3, #3
 800593c:	e207      	b.n	8005d4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800593e:	4b5b      	ldr	r3, [pc, #364]	@ (8005aac <HAL_RCC_OscConfig+0x240>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005946:	2b00      	cmp	r3, #0
 8005948:	d0f0      	beq.n	800592c <HAL_RCC_OscConfig+0xc0>
 800594a:	e014      	b.n	8005976 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800594c:	f7fd ffea 	bl	8003924 <HAL_GetTick>
 8005950:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005952:	e008      	b.n	8005966 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005954:	f7fd ffe6 	bl	8003924 <HAL_GetTick>
 8005958:	4602      	mov	r2, r0
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	1ad3      	subs	r3, r2, r3
 800595e:	2b64      	cmp	r3, #100	@ 0x64
 8005960:	d901      	bls.n	8005966 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005962:	2303      	movs	r3, #3
 8005964:	e1f3      	b.n	8005d4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005966:	4b51      	ldr	r3, [pc, #324]	@ (8005aac <HAL_RCC_OscConfig+0x240>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800596e:	2b00      	cmp	r3, #0
 8005970:	d1f0      	bne.n	8005954 <HAL_RCC_OscConfig+0xe8>
 8005972:	e000      	b.n	8005976 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005974:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f003 0302 	and.w	r3, r3, #2
 800597e:	2b00      	cmp	r3, #0
 8005980:	d063      	beq.n	8005a4a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005982:	4b4a      	ldr	r3, [pc, #296]	@ (8005aac <HAL_RCC_OscConfig+0x240>)
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	f003 030c 	and.w	r3, r3, #12
 800598a:	2b00      	cmp	r3, #0
 800598c:	d00b      	beq.n	80059a6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800598e:	4b47      	ldr	r3, [pc, #284]	@ (8005aac <HAL_RCC_OscConfig+0x240>)
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005996:	2b08      	cmp	r3, #8
 8005998:	d11c      	bne.n	80059d4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800599a:	4b44      	ldr	r3, [pc, #272]	@ (8005aac <HAL_RCC_OscConfig+0x240>)
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d116      	bne.n	80059d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80059a6:	4b41      	ldr	r3, [pc, #260]	@ (8005aac <HAL_RCC_OscConfig+0x240>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f003 0302 	and.w	r3, r3, #2
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d005      	beq.n	80059be <HAL_RCC_OscConfig+0x152>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	68db      	ldr	r3, [r3, #12]
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	d001      	beq.n	80059be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	e1c7      	b.n	8005d4e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059be:	4b3b      	ldr	r3, [pc, #236]	@ (8005aac <HAL_RCC_OscConfig+0x240>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	691b      	ldr	r3, [r3, #16]
 80059ca:	00db      	lsls	r3, r3, #3
 80059cc:	4937      	ldr	r1, [pc, #220]	@ (8005aac <HAL_RCC_OscConfig+0x240>)
 80059ce:	4313      	orrs	r3, r2
 80059d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80059d2:	e03a      	b.n	8005a4a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	68db      	ldr	r3, [r3, #12]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d020      	beq.n	8005a1e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80059dc:	4b34      	ldr	r3, [pc, #208]	@ (8005ab0 <HAL_RCC_OscConfig+0x244>)
 80059de:	2201      	movs	r2, #1
 80059e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059e2:	f7fd ff9f 	bl	8003924 <HAL_GetTick>
 80059e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059e8:	e008      	b.n	80059fc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80059ea:	f7fd ff9b 	bl	8003924 <HAL_GetTick>
 80059ee:	4602      	mov	r2, r0
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	1ad3      	subs	r3, r2, r3
 80059f4:	2b02      	cmp	r3, #2
 80059f6:	d901      	bls.n	80059fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80059f8:	2303      	movs	r3, #3
 80059fa:	e1a8      	b.n	8005d4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059fc:	4b2b      	ldr	r3, [pc, #172]	@ (8005aac <HAL_RCC_OscConfig+0x240>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f003 0302 	and.w	r3, r3, #2
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d0f0      	beq.n	80059ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a08:	4b28      	ldr	r3, [pc, #160]	@ (8005aac <HAL_RCC_OscConfig+0x240>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	691b      	ldr	r3, [r3, #16]
 8005a14:	00db      	lsls	r3, r3, #3
 8005a16:	4925      	ldr	r1, [pc, #148]	@ (8005aac <HAL_RCC_OscConfig+0x240>)
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	600b      	str	r3, [r1, #0]
 8005a1c:	e015      	b.n	8005a4a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a1e:	4b24      	ldr	r3, [pc, #144]	@ (8005ab0 <HAL_RCC_OscConfig+0x244>)
 8005a20:	2200      	movs	r2, #0
 8005a22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a24:	f7fd ff7e 	bl	8003924 <HAL_GetTick>
 8005a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a2a:	e008      	b.n	8005a3e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a2c:	f7fd ff7a 	bl	8003924 <HAL_GetTick>
 8005a30:	4602      	mov	r2, r0
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	1ad3      	subs	r3, r2, r3
 8005a36:	2b02      	cmp	r3, #2
 8005a38:	d901      	bls.n	8005a3e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005a3a:	2303      	movs	r3, #3
 8005a3c:	e187      	b.n	8005d4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a3e:	4b1b      	ldr	r3, [pc, #108]	@ (8005aac <HAL_RCC_OscConfig+0x240>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f003 0302 	and.w	r3, r3, #2
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d1f0      	bne.n	8005a2c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f003 0308 	and.w	r3, r3, #8
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d036      	beq.n	8005ac4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	695b      	ldr	r3, [r3, #20]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d016      	beq.n	8005a8c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a5e:	4b15      	ldr	r3, [pc, #84]	@ (8005ab4 <HAL_RCC_OscConfig+0x248>)
 8005a60:	2201      	movs	r2, #1
 8005a62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a64:	f7fd ff5e 	bl	8003924 <HAL_GetTick>
 8005a68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a6a:	e008      	b.n	8005a7e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a6c:	f7fd ff5a 	bl	8003924 <HAL_GetTick>
 8005a70:	4602      	mov	r2, r0
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	1ad3      	subs	r3, r2, r3
 8005a76:	2b02      	cmp	r3, #2
 8005a78:	d901      	bls.n	8005a7e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005a7a:	2303      	movs	r3, #3
 8005a7c:	e167      	b.n	8005d4e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a7e:	4b0b      	ldr	r3, [pc, #44]	@ (8005aac <HAL_RCC_OscConfig+0x240>)
 8005a80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a82:	f003 0302 	and.w	r3, r3, #2
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d0f0      	beq.n	8005a6c <HAL_RCC_OscConfig+0x200>
 8005a8a:	e01b      	b.n	8005ac4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a8c:	4b09      	ldr	r3, [pc, #36]	@ (8005ab4 <HAL_RCC_OscConfig+0x248>)
 8005a8e:	2200      	movs	r2, #0
 8005a90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a92:	f7fd ff47 	bl	8003924 <HAL_GetTick>
 8005a96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a98:	e00e      	b.n	8005ab8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a9a:	f7fd ff43 	bl	8003924 <HAL_GetTick>
 8005a9e:	4602      	mov	r2, r0
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	1ad3      	subs	r3, r2, r3
 8005aa4:	2b02      	cmp	r3, #2
 8005aa6:	d907      	bls.n	8005ab8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005aa8:	2303      	movs	r3, #3
 8005aaa:	e150      	b.n	8005d4e <HAL_RCC_OscConfig+0x4e2>
 8005aac:	40023800 	.word	0x40023800
 8005ab0:	42470000 	.word	0x42470000
 8005ab4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ab8:	4b88      	ldr	r3, [pc, #544]	@ (8005cdc <HAL_RCC_OscConfig+0x470>)
 8005aba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005abc:	f003 0302 	and.w	r3, r3, #2
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d1ea      	bne.n	8005a9a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f003 0304 	and.w	r3, r3, #4
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	f000 8097 	beq.w	8005c00 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ad6:	4b81      	ldr	r3, [pc, #516]	@ (8005cdc <HAL_RCC_OscConfig+0x470>)
 8005ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ada:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d10f      	bne.n	8005b02 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	60bb      	str	r3, [r7, #8]
 8005ae6:	4b7d      	ldr	r3, [pc, #500]	@ (8005cdc <HAL_RCC_OscConfig+0x470>)
 8005ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aea:	4a7c      	ldr	r2, [pc, #496]	@ (8005cdc <HAL_RCC_OscConfig+0x470>)
 8005aec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005af0:	6413      	str	r3, [r2, #64]	@ 0x40
 8005af2:	4b7a      	ldr	r3, [pc, #488]	@ (8005cdc <HAL_RCC_OscConfig+0x470>)
 8005af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005af6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005afa:	60bb      	str	r3, [r7, #8]
 8005afc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005afe:	2301      	movs	r3, #1
 8005b00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b02:	4b77      	ldr	r3, [pc, #476]	@ (8005ce0 <HAL_RCC_OscConfig+0x474>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d118      	bne.n	8005b40 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b0e:	4b74      	ldr	r3, [pc, #464]	@ (8005ce0 <HAL_RCC_OscConfig+0x474>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a73      	ldr	r2, [pc, #460]	@ (8005ce0 <HAL_RCC_OscConfig+0x474>)
 8005b14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b1a:	f7fd ff03 	bl	8003924 <HAL_GetTick>
 8005b1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b20:	e008      	b.n	8005b34 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b22:	f7fd feff 	bl	8003924 <HAL_GetTick>
 8005b26:	4602      	mov	r2, r0
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	1ad3      	subs	r3, r2, r3
 8005b2c:	2b02      	cmp	r3, #2
 8005b2e:	d901      	bls.n	8005b34 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005b30:	2303      	movs	r3, #3
 8005b32:	e10c      	b.n	8005d4e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b34:	4b6a      	ldr	r3, [pc, #424]	@ (8005ce0 <HAL_RCC_OscConfig+0x474>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d0f0      	beq.n	8005b22 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d106      	bne.n	8005b56 <HAL_RCC_OscConfig+0x2ea>
 8005b48:	4b64      	ldr	r3, [pc, #400]	@ (8005cdc <HAL_RCC_OscConfig+0x470>)
 8005b4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b4c:	4a63      	ldr	r2, [pc, #396]	@ (8005cdc <HAL_RCC_OscConfig+0x470>)
 8005b4e:	f043 0301 	orr.w	r3, r3, #1
 8005b52:	6713      	str	r3, [r2, #112]	@ 0x70
 8005b54:	e01c      	b.n	8005b90 <HAL_RCC_OscConfig+0x324>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	2b05      	cmp	r3, #5
 8005b5c:	d10c      	bne.n	8005b78 <HAL_RCC_OscConfig+0x30c>
 8005b5e:	4b5f      	ldr	r3, [pc, #380]	@ (8005cdc <HAL_RCC_OscConfig+0x470>)
 8005b60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b62:	4a5e      	ldr	r2, [pc, #376]	@ (8005cdc <HAL_RCC_OscConfig+0x470>)
 8005b64:	f043 0304 	orr.w	r3, r3, #4
 8005b68:	6713      	str	r3, [r2, #112]	@ 0x70
 8005b6a:	4b5c      	ldr	r3, [pc, #368]	@ (8005cdc <HAL_RCC_OscConfig+0x470>)
 8005b6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b6e:	4a5b      	ldr	r2, [pc, #364]	@ (8005cdc <HAL_RCC_OscConfig+0x470>)
 8005b70:	f043 0301 	orr.w	r3, r3, #1
 8005b74:	6713      	str	r3, [r2, #112]	@ 0x70
 8005b76:	e00b      	b.n	8005b90 <HAL_RCC_OscConfig+0x324>
 8005b78:	4b58      	ldr	r3, [pc, #352]	@ (8005cdc <HAL_RCC_OscConfig+0x470>)
 8005b7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b7c:	4a57      	ldr	r2, [pc, #348]	@ (8005cdc <HAL_RCC_OscConfig+0x470>)
 8005b7e:	f023 0301 	bic.w	r3, r3, #1
 8005b82:	6713      	str	r3, [r2, #112]	@ 0x70
 8005b84:	4b55      	ldr	r3, [pc, #340]	@ (8005cdc <HAL_RCC_OscConfig+0x470>)
 8005b86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b88:	4a54      	ldr	r2, [pc, #336]	@ (8005cdc <HAL_RCC_OscConfig+0x470>)
 8005b8a:	f023 0304 	bic.w	r3, r3, #4
 8005b8e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d015      	beq.n	8005bc4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b98:	f7fd fec4 	bl	8003924 <HAL_GetTick>
 8005b9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b9e:	e00a      	b.n	8005bb6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ba0:	f7fd fec0 	bl	8003924 <HAL_GetTick>
 8005ba4:	4602      	mov	r2, r0
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	1ad3      	subs	r3, r2, r3
 8005baa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d901      	bls.n	8005bb6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005bb2:	2303      	movs	r3, #3
 8005bb4:	e0cb      	b.n	8005d4e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bb6:	4b49      	ldr	r3, [pc, #292]	@ (8005cdc <HAL_RCC_OscConfig+0x470>)
 8005bb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bba:	f003 0302 	and.w	r3, r3, #2
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d0ee      	beq.n	8005ba0 <HAL_RCC_OscConfig+0x334>
 8005bc2:	e014      	b.n	8005bee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005bc4:	f7fd feae 	bl	8003924 <HAL_GetTick>
 8005bc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005bca:	e00a      	b.n	8005be2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bcc:	f7fd feaa 	bl	8003924 <HAL_GetTick>
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	1ad3      	subs	r3, r2, r3
 8005bd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d901      	bls.n	8005be2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005bde:	2303      	movs	r3, #3
 8005be0:	e0b5      	b.n	8005d4e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005be2:	4b3e      	ldr	r3, [pc, #248]	@ (8005cdc <HAL_RCC_OscConfig+0x470>)
 8005be4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005be6:	f003 0302 	and.w	r3, r3, #2
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d1ee      	bne.n	8005bcc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005bee:	7dfb      	ldrb	r3, [r7, #23]
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d105      	bne.n	8005c00 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bf4:	4b39      	ldr	r3, [pc, #228]	@ (8005cdc <HAL_RCC_OscConfig+0x470>)
 8005bf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bf8:	4a38      	ldr	r2, [pc, #224]	@ (8005cdc <HAL_RCC_OscConfig+0x470>)
 8005bfa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005bfe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	699b      	ldr	r3, [r3, #24]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	f000 80a1 	beq.w	8005d4c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005c0a:	4b34      	ldr	r3, [pc, #208]	@ (8005cdc <HAL_RCC_OscConfig+0x470>)
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	f003 030c 	and.w	r3, r3, #12
 8005c12:	2b08      	cmp	r3, #8
 8005c14:	d05c      	beq.n	8005cd0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	699b      	ldr	r3, [r3, #24]
 8005c1a:	2b02      	cmp	r3, #2
 8005c1c:	d141      	bne.n	8005ca2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c1e:	4b31      	ldr	r3, [pc, #196]	@ (8005ce4 <HAL_RCC_OscConfig+0x478>)
 8005c20:	2200      	movs	r2, #0
 8005c22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c24:	f7fd fe7e 	bl	8003924 <HAL_GetTick>
 8005c28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c2a:	e008      	b.n	8005c3e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c2c:	f7fd fe7a 	bl	8003924 <HAL_GetTick>
 8005c30:	4602      	mov	r2, r0
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	1ad3      	subs	r3, r2, r3
 8005c36:	2b02      	cmp	r3, #2
 8005c38:	d901      	bls.n	8005c3e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005c3a:	2303      	movs	r3, #3
 8005c3c:	e087      	b.n	8005d4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c3e:	4b27      	ldr	r3, [pc, #156]	@ (8005cdc <HAL_RCC_OscConfig+0x470>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d1f0      	bne.n	8005c2c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	69da      	ldr	r2, [r3, #28]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6a1b      	ldr	r3, [r3, #32]
 8005c52:	431a      	orrs	r2, r3
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c58:	019b      	lsls	r3, r3, #6
 8005c5a:	431a      	orrs	r2, r3
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c60:	085b      	lsrs	r3, r3, #1
 8005c62:	3b01      	subs	r3, #1
 8005c64:	041b      	lsls	r3, r3, #16
 8005c66:	431a      	orrs	r2, r3
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c6c:	061b      	lsls	r3, r3, #24
 8005c6e:	491b      	ldr	r1, [pc, #108]	@ (8005cdc <HAL_RCC_OscConfig+0x470>)
 8005c70:	4313      	orrs	r3, r2
 8005c72:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c74:	4b1b      	ldr	r3, [pc, #108]	@ (8005ce4 <HAL_RCC_OscConfig+0x478>)
 8005c76:	2201      	movs	r2, #1
 8005c78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c7a:	f7fd fe53 	bl	8003924 <HAL_GetTick>
 8005c7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c80:	e008      	b.n	8005c94 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c82:	f7fd fe4f 	bl	8003924 <HAL_GetTick>
 8005c86:	4602      	mov	r2, r0
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	1ad3      	subs	r3, r2, r3
 8005c8c:	2b02      	cmp	r3, #2
 8005c8e:	d901      	bls.n	8005c94 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005c90:	2303      	movs	r3, #3
 8005c92:	e05c      	b.n	8005d4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c94:	4b11      	ldr	r3, [pc, #68]	@ (8005cdc <HAL_RCC_OscConfig+0x470>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d0f0      	beq.n	8005c82 <HAL_RCC_OscConfig+0x416>
 8005ca0:	e054      	b.n	8005d4c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ca2:	4b10      	ldr	r3, [pc, #64]	@ (8005ce4 <HAL_RCC_OscConfig+0x478>)
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ca8:	f7fd fe3c 	bl	8003924 <HAL_GetTick>
 8005cac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cae:	e008      	b.n	8005cc2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cb0:	f7fd fe38 	bl	8003924 <HAL_GetTick>
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	1ad3      	subs	r3, r2, r3
 8005cba:	2b02      	cmp	r3, #2
 8005cbc:	d901      	bls.n	8005cc2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005cbe:	2303      	movs	r3, #3
 8005cc0:	e045      	b.n	8005d4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cc2:	4b06      	ldr	r3, [pc, #24]	@ (8005cdc <HAL_RCC_OscConfig+0x470>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d1f0      	bne.n	8005cb0 <HAL_RCC_OscConfig+0x444>
 8005cce:	e03d      	b.n	8005d4c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	699b      	ldr	r3, [r3, #24]
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	d107      	bne.n	8005ce8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e038      	b.n	8005d4e <HAL_RCC_OscConfig+0x4e2>
 8005cdc:	40023800 	.word	0x40023800
 8005ce0:	40007000 	.word	0x40007000
 8005ce4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005ce8:	4b1b      	ldr	r3, [pc, #108]	@ (8005d58 <HAL_RCC_OscConfig+0x4ec>)
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	699b      	ldr	r3, [r3, #24]
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	d028      	beq.n	8005d48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d121      	bne.n	8005d48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	d11a      	bne.n	8005d48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005d12:	68fa      	ldr	r2, [r7, #12]
 8005d14:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005d18:	4013      	ands	r3, r2
 8005d1a:	687a      	ldr	r2, [r7, #4]
 8005d1c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005d1e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d111      	bne.n	8005d48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d2e:	085b      	lsrs	r3, r3, #1
 8005d30:	3b01      	subs	r3, #1
 8005d32:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d107      	bne.n	8005d48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d42:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d001      	beq.n	8005d4c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	e000      	b.n	8005d4e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005d4c:	2300      	movs	r3, #0
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3718      	adds	r7, #24
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
 8005d56:	bf00      	nop
 8005d58:	40023800 	.word	0x40023800

08005d5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b084      	sub	sp, #16
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
 8005d64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d101      	bne.n	8005d70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	e0cc      	b.n	8005f0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005d70:	4b68      	ldr	r3, [pc, #416]	@ (8005f14 <HAL_RCC_ClockConfig+0x1b8>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f003 030f 	and.w	r3, r3, #15
 8005d78:	683a      	ldr	r2, [r7, #0]
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	d90c      	bls.n	8005d98 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d7e:	4b65      	ldr	r3, [pc, #404]	@ (8005f14 <HAL_RCC_ClockConfig+0x1b8>)
 8005d80:	683a      	ldr	r2, [r7, #0]
 8005d82:	b2d2      	uxtb	r2, r2
 8005d84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d86:	4b63      	ldr	r3, [pc, #396]	@ (8005f14 <HAL_RCC_ClockConfig+0x1b8>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f003 030f 	and.w	r3, r3, #15
 8005d8e:	683a      	ldr	r2, [r7, #0]
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d001      	beq.n	8005d98 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	e0b8      	b.n	8005f0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f003 0302 	and.w	r3, r3, #2
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d020      	beq.n	8005de6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f003 0304 	and.w	r3, r3, #4
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d005      	beq.n	8005dbc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005db0:	4b59      	ldr	r3, [pc, #356]	@ (8005f18 <HAL_RCC_ClockConfig+0x1bc>)
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	4a58      	ldr	r2, [pc, #352]	@ (8005f18 <HAL_RCC_ClockConfig+0x1bc>)
 8005db6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005dba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f003 0308 	and.w	r3, r3, #8
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d005      	beq.n	8005dd4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005dc8:	4b53      	ldr	r3, [pc, #332]	@ (8005f18 <HAL_RCC_ClockConfig+0x1bc>)
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	4a52      	ldr	r2, [pc, #328]	@ (8005f18 <HAL_RCC_ClockConfig+0x1bc>)
 8005dce:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005dd2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005dd4:	4b50      	ldr	r3, [pc, #320]	@ (8005f18 <HAL_RCC_ClockConfig+0x1bc>)
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	494d      	ldr	r1, [pc, #308]	@ (8005f18 <HAL_RCC_ClockConfig+0x1bc>)
 8005de2:	4313      	orrs	r3, r2
 8005de4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f003 0301 	and.w	r3, r3, #1
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d044      	beq.n	8005e7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d107      	bne.n	8005e0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005dfa:	4b47      	ldr	r3, [pc, #284]	@ (8005f18 <HAL_RCC_ClockConfig+0x1bc>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d119      	bne.n	8005e3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	e07f      	b.n	8005f0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	2b02      	cmp	r3, #2
 8005e10:	d003      	beq.n	8005e1a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e16:	2b03      	cmp	r3, #3
 8005e18:	d107      	bne.n	8005e2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e1a:	4b3f      	ldr	r3, [pc, #252]	@ (8005f18 <HAL_RCC_ClockConfig+0x1bc>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d109      	bne.n	8005e3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	e06f      	b.n	8005f0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e2a:	4b3b      	ldr	r3, [pc, #236]	@ (8005f18 <HAL_RCC_ClockConfig+0x1bc>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f003 0302 	and.w	r3, r3, #2
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d101      	bne.n	8005e3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e36:	2301      	movs	r3, #1
 8005e38:	e067      	b.n	8005f0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e3a:	4b37      	ldr	r3, [pc, #220]	@ (8005f18 <HAL_RCC_ClockConfig+0x1bc>)
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	f023 0203 	bic.w	r2, r3, #3
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	4934      	ldr	r1, [pc, #208]	@ (8005f18 <HAL_RCC_ClockConfig+0x1bc>)
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005e4c:	f7fd fd6a 	bl	8003924 <HAL_GetTick>
 8005e50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e52:	e00a      	b.n	8005e6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e54:	f7fd fd66 	bl	8003924 <HAL_GetTick>
 8005e58:	4602      	mov	r2, r0
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	1ad3      	subs	r3, r2, r3
 8005e5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d901      	bls.n	8005e6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005e66:	2303      	movs	r3, #3
 8005e68:	e04f      	b.n	8005f0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e6a:	4b2b      	ldr	r3, [pc, #172]	@ (8005f18 <HAL_RCC_ClockConfig+0x1bc>)
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	f003 020c 	and.w	r2, r3, #12
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	009b      	lsls	r3, r3, #2
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d1eb      	bne.n	8005e54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005e7c:	4b25      	ldr	r3, [pc, #148]	@ (8005f14 <HAL_RCC_ClockConfig+0x1b8>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f003 030f 	and.w	r3, r3, #15
 8005e84:	683a      	ldr	r2, [r7, #0]
 8005e86:	429a      	cmp	r2, r3
 8005e88:	d20c      	bcs.n	8005ea4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e8a:	4b22      	ldr	r3, [pc, #136]	@ (8005f14 <HAL_RCC_ClockConfig+0x1b8>)
 8005e8c:	683a      	ldr	r2, [r7, #0]
 8005e8e:	b2d2      	uxtb	r2, r2
 8005e90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e92:	4b20      	ldr	r3, [pc, #128]	@ (8005f14 <HAL_RCC_ClockConfig+0x1b8>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f003 030f 	and.w	r3, r3, #15
 8005e9a:	683a      	ldr	r2, [r7, #0]
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d001      	beq.n	8005ea4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	e032      	b.n	8005f0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f003 0304 	and.w	r3, r3, #4
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d008      	beq.n	8005ec2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005eb0:	4b19      	ldr	r3, [pc, #100]	@ (8005f18 <HAL_RCC_ClockConfig+0x1bc>)
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	68db      	ldr	r3, [r3, #12]
 8005ebc:	4916      	ldr	r1, [pc, #88]	@ (8005f18 <HAL_RCC_ClockConfig+0x1bc>)
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f003 0308 	and.w	r3, r3, #8
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d009      	beq.n	8005ee2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005ece:	4b12      	ldr	r3, [pc, #72]	@ (8005f18 <HAL_RCC_ClockConfig+0x1bc>)
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	691b      	ldr	r3, [r3, #16]
 8005eda:	00db      	lsls	r3, r3, #3
 8005edc:	490e      	ldr	r1, [pc, #56]	@ (8005f18 <HAL_RCC_ClockConfig+0x1bc>)
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005ee2:	f000 f821 	bl	8005f28 <HAL_RCC_GetSysClockFreq>
 8005ee6:	4602      	mov	r2, r0
 8005ee8:	4b0b      	ldr	r3, [pc, #44]	@ (8005f18 <HAL_RCC_ClockConfig+0x1bc>)
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	091b      	lsrs	r3, r3, #4
 8005eee:	f003 030f 	and.w	r3, r3, #15
 8005ef2:	490a      	ldr	r1, [pc, #40]	@ (8005f1c <HAL_RCC_ClockConfig+0x1c0>)
 8005ef4:	5ccb      	ldrb	r3, [r1, r3]
 8005ef6:	fa22 f303 	lsr.w	r3, r2, r3
 8005efa:	4a09      	ldr	r2, [pc, #36]	@ (8005f20 <HAL_RCC_ClockConfig+0x1c4>)
 8005efc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005efe:	4b09      	ldr	r3, [pc, #36]	@ (8005f24 <HAL_RCC_ClockConfig+0x1c8>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4618      	mov	r0, r3
 8005f04:	f7fd fcca 	bl	800389c <HAL_InitTick>

  return HAL_OK;
 8005f08:	2300      	movs	r3, #0
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3710      	adds	r7, #16
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
 8005f12:	bf00      	nop
 8005f14:	40023c00 	.word	0x40023c00
 8005f18:	40023800 	.word	0x40023800
 8005f1c:	08008f48 	.word	0x08008f48
 8005f20:	20000018 	.word	0x20000018
 8005f24:	2000001c 	.word	0x2000001c

08005f28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f2c:	b094      	sub	sp, #80	@ 0x50
 8005f2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005f30:	2300      	movs	r3, #0
 8005f32:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005f34:	2300      	movs	r3, #0
 8005f36:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005f40:	4b79      	ldr	r3, [pc, #484]	@ (8006128 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	f003 030c 	and.w	r3, r3, #12
 8005f48:	2b08      	cmp	r3, #8
 8005f4a:	d00d      	beq.n	8005f68 <HAL_RCC_GetSysClockFreq+0x40>
 8005f4c:	2b08      	cmp	r3, #8
 8005f4e:	f200 80e1 	bhi.w	8006114 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d002      	beq.n	8005f5c <HAL_RCC_GetSysClockFreq+0x34>
 8005f56:	2b04      	cmp	r3, #4
 8005f58:	d003      	beq.n	8005f62 <HAL_RCC_GetSysClockFreq+0x3a>
 8005f5a:	e0db      	b.n	8006114 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005f5c:	4b73      	ldr	r3, [pc, #460]	@ (800612c <HAL_RCC_GetSysClockFreq+0x204>)
 8005f5e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005f60:	e0db      	b.n	800611a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005f62:	4b73      	ldr	r3, [pc, #460]	@ (8006130 <HAL_RCC_GetSysClockFreq+0x208>)
 8005f64:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005f66:	e0d8      	b.n	800611a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005f68:	4b6f      	ldr	r3, [pc, #444]	@ (8006128 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005f70:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005f72:	4b6d      	ldr	r3, [pc, #436]	@ (8006128 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d063      	beq.n	8006046 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f7e:	4b6a      	ldr	r3, [pc, #424]	@ (8006128 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	099b      	lsrs	r3, r3, #6
 8005f84:	2200      	movs	r2, #0
 8005f86:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005f88:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005f8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f90:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f92:	2300      	movs	r3, #0
 8005f94:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f96:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005f9a:	4622      	mov	r2, r4
 8005f9c:	462b      	mov	r3, r5
 8005f9e:	f04f 0000 	mov.w	r0, #0
 8005fa2:	f04f 0100 	mov.w	r1, #0
 8005fa6:	0159      	lsls	r1, r3, #5
 8005fa8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005fac:	0150      	lsls	r0, r2, #5
 8005fae:	4602      	mov	r2, r0
 8005fb0:	460b      	mov	r3, r1
 8005fb2:	4621      	mov	r1, r4
 8005fb4:	1a51      	subs	r1, r2, r1
 8005fb6:	6139      	str	r1, [r7, #16]
 8005fb8:	4629      	mov	r1, r5
 8005fba:	eb63 0301 	sbc.w	r3, r3, r1
 8005fbe:	617b      	str	r3, [r7, #20]
 8005fc0:	f04f 0200 	mov.w	r2, #0
 8005fc4:	f04f 0300 	mov.w	r3, #0
 8005fc8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005fcc:	4659      	mov	r1, fp
 8005fce:	018b      	lsls	r3, r1, #6
 8005fd0:	4651      	mov	r1, sl
 8005fd2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005fd6:	4651      	mov	r1, sl
 8005fd8:	018a      	lsls	r2, r1, #6
 8005fda:	4651      	mov	r1, sl
 8005fdc:	ebb2 0801 	subs.w	r8, r2, r1
 8005fe0:	4659      	mov	r1, fp
 8005fe2:	eb63 0901 	sbc.w	r9, r3, r1
 8005fe6:	f04f 0200 	mov.w	r2, #0
 8005fea:	f04f 0300 	mov.w	r3, #0
 8005fee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005ff2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005ff6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005ffa:	4690      	mov	r8, r2
 8005ffc:	4699      	mov	r9, r3
 8005ffe:	4623      	mov	r3, r4
 8006000:	eb18 0303 	adds.w	r3, r8, r3
 8006004:	60bb      	str	r3, [r7, #8]
 8006006:	462b      	mov	r3, r5
 8006008:	eb49 0303 	adc.w	r3, r9, r3
 800600c:	60fb      	str	r3, [r7, #12]
 800600e:	f04f 0200 	mov.w	r2, #0
 8006012:	f04f 0300 	mov.w	r3, #0
 8006016:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800601a:	4629      	mov	r1, r5
 800601c:	024b      	lsls	r3, r1, #9
 800601e:	4621      	mov	r1, r4
 8006020:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006024:	4621      	mov	r1, r4
 8006026:	024a      	lsls	r2, r1, #9
 8006028:	4610      	mov	r0, r2
 800602a:	4619      	mov	r1, r3
 800602c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800602e:	2200      	movs	r2, #0
 8006030:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006032:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006034:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006038:	f7fa f8d8 	bl	80001ec <__aeabi_uldivmod>
 800603c:	4602      	mov	r2, r0
 800603e:	460b      	mov	r3, r1
 8006040:	4613      	mov	r3, r2
 8006042:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006044:	e058      	b.n	80060f8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006046:	4b38      	ldr	r3, [pc, #224]	@ (8006128 <HAL_RCC_GetSysClockFreq+0x200>)
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	099b      	lsrs	r3, r3, #6
 800604c:	2200      	movs	r2, #0
 800604e:	4618      	mov	r0, r3
 8006050:	4611      	mov	r1, r2
 8006052:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006056:	623b      	str	r3, [r7, #32]
 8006058:	2300      	movs	r3, #0
 800605a:	627b      	str	r3, [r7, #36]	@ 0x24
 800605c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006060:	4642      	mov	r2, r8
 8006062:	464b      	mov	r3, r9
 8006064:	f04f 0000 	mov.w	r0, #0
 8006068:	f04f 0100 	mov.w	r1, #0
 800606c:	0159      	lsls	r1, r3, #5
 800606e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006072:	0150      	lsls	r0, r2, #5
 8006074:	4602      	mov	r2, r0
 8006076:	460b      	mov	r3, r1
 8006078:	4641      	mov	r1, r8
 800607a:	ebb2 0a01 	subs.w	sl, r2, r1
 800607e:	4649      	mov	r1, r9
 8006080:	eb63 0b01 	sbc.w	fp, r3, r1
 8006084:	f04f 0200 	mov.w	r2, #0
 8006088:	f04f 0300 	mov.w	r3, #0
 800608c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006090:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006094:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006098:	ebb2 040a 	subs.w	r4, r2, sl
 800609c:	eb63 050b 	sbc.w	r5, r3, fp
 80060a0:	f04f 0200 	mov.w	r2, #0
 80060a4:	f04f 0300 	mov.w	r3, #0
 80060a8:	00eb      	lsls	r3, r5, #3
 80060aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80060ae:	00e2      	lsls	r2, r4, #3
 80060b0:	4614      	mov	r4, r2
 80060b2:	461d      	mov	r5, r3
 80060b4:	4643      	mov	r3, r8
 80060b6:	18e3      	adds	r3, r4, r3
 80060b8:	603b      	str	r3, [r7, #0]
 80060ba:	464b      	mov	r3, r9
 80060bc:	eb45 0303 	adc.w	r3, r5, r3
 80060c0:	607b      	str	r3, [r7, #4]
 80060c2:	f04f 0200 	mov.w	r2, #0
 80060c6:	f04f 0300 	mov.w	r3, #0
 80060ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80060ce:	4629      	mov	r1, r5
 80060d0:	028b      	lsls	r3, r1, #10
 80060d2:	4621      	mov	r1, r4
 80060d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80060d8:	4621      	mov	r1, r4
 80060da:	028a      	lsls	r2, r1, #10
 80060dc:	4610      	mov	r0, r2
 80060de:	4619      	mov	r1, r3
 80060e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80060e2:	2200      	movs	r2, #0
 80060e4:	61bb      	str	r3, [r7, #24]
 80060e6:	61fa      	str	r2, [r7, #28]
 80060e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80060ec:	f7fa f87e 	bl	80001ec <__aeabi_uldivmod>
 80060f0:	4602      	mov	r2, r0
 80060f2:	460b      	mov	r3, r1
 80060f4:	4613      	mov	r3, r2
 80060f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80060f8:	4b0b      	ldr	r3, [pc, #44]	@ (8006128 <HAL_RCC_GetSysClockFreq+0x200>)
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	0c1b      	lsrs	r3, r3, #16
 80060fe:	f003 0303 	and.w	r3, r3, #3
 8006102:	3301      	adds	r3, #1
 8006104:	005b      	lsls	r3, r3, #1
 8006106:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006108:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800610a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800610c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006110:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006112:	e002      	b.n	800611a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006114:	4b05      	ldr	r3, [pc, #20]	@ (800612c <HAL_RCC_GetSysClockFreq+0x204>)
 8006116:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006118:	bf00      	nop
    }
  }
  return sysclockfreq;
 800611a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800611c:	4618      	mov	r0, r3
 800611e:	3750      	adds	r7, #80	@ 0x50
 8006120:	46bd      	mov	sp, r7
 8006122:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006126:	bf00      	nop
 8006128:	40023800 	.word	0x40023800
 800612c:	00f42400 	.word	0x00f42400
 8006130:	007a1200 	.word	0x007a1200

08006134 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006134:	b480      	push	{r7}
 8006136:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006138:	4b03      	ldr	r3, [pc, #12]	@ (8006148 <HAL_RCC_GetHCLKFreq+0x14>)
 800613a:	681b      	ldr	r3, [r3, #0]
}
 800613c:	4618      	mov	r0, r3
 800613e:	46bd      	mov	sp, r7
 8006140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006144:	4770      	bx	lr
 8006146:	bf00      	nop
 8006148:	20000018 	.word	0x20000018

0800614c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006150:	f7ff fff0 	bl	8006134 <HAL_RCC_GetHCLKFreq>
 8006154:	4602      	mov	r2, r0
 8006156:	4b05      	ldr	r3, [pc, #20]	@ (800616c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	0a9b      	lsrs	r3, r3, #10
 800615c:	f003 0307 	and.w	r3, r3, #7
 8006160:	4903      	ldr	r1, [pc, #12]	@ (8006170 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006162:	5ccb      	ldrb	r3, [r1, r3]
 8006164:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006168:	4618      	mov	r0, r3
 800616a:	bd80      	pop	{r7, pc}
 800616c:	40023800 	.word	0x40023800
 8006170:	08008f58 	.word	0x08008f58

08006174 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b086      	sub	sp, #24
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800617c:	2300      	movs	r3, #0
 800617e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006180:	2300      	movs	r3, #0
 8006182:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f003 0301 	and.w	r3, r3, #1
 800618c:	2b00      	cmp	r3, #0
 800618e:	d10b      	bne.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006198:	2b00      	cmp	r3, #0
 800619a:	d105      	bne.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d075      	beq.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80061a8:	4b91      	ldr	r3, [pc, #580]	@ (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80061aa:	2200      	movs	r2, #0
 80061ac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80061ae:	f7fd fbb9 	bl	8003924 <HAL_GetTick>
 80061b2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80061b4:	e008      	b.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80061b6:	f7fd fbb5 	bl	8003924 <HAL_GetTick>
 80061ba:	4602      	mov	r2, r0
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	1ad3      	subs	r3, r2, r3
 80061c0:	2b02      	cmp	r3, #2
 80061c2:	d901      	bls.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80061c4:	2303      	movs	r3, #3
 80061c6:	e189      	b.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80061c8:	4b8a      	ldr	r3, [pc, #552]	@ (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d1f0      	bne.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f003 0301 	and.w	r3, r3, #1
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d009      	beq.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	019a      	lsls	r2, r3, #6
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	689b      	ldr	r3, [r3, #8]
 80061ea:	071b      	lsls	r3, r3, #28
 80061ec:	4981      	ldr	r1, [pc, #516]	@ (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80061ee:	4313      	orrs	r3, r2
 80061f0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f003 0302 	and.w	r3, r3, #2
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d01f      	beq.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006200:	4b7c      	ldr	r3, [pc, #496]	@ (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006202:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006206:	0f1b      	lsrs	r3, r3, #28
 8006208:	f003 0307 	and.w	r3, r3, #7
 800620c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	019a      	lsls	r2, r3, #6
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	68db      	ldr	r3, [r3, #12]
 8006218:	061b      	lsls	r3, r3, #24
 800621a:	431a      	orrs	r2, r3
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	071b      	lsls	r3, r3, #28
 8006220:	4974      	ldr	r1, [pc, #464]	@ (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006222:	4313      	orrs	r3, r2
 8006224:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006228:	4b72      	ldr	r3, [pc, #456]	@ (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800622a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800622e:	f023 021f 	bic.w	r2, r3, #31
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	69db      	ldr	r3, [r3, #28]
 8006236:	3b01      	subs	r3, #1
 8006238:	496e      	ldr	r1, [pc, #440]	@ (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800623a:	4313      	orrs	r3, r2
 800623c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006248:	2b00      	cmp	r3, #0
 800624a:	d00d      	beq.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	019a      	lsls	r2, r3, #6
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	68db      	ldr	r3, [r3, #12]
 8006256:	061b      	lsls	r3, r3, #24
 8006258:	431a      	orrs	r2, r3
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	071b      	lsls	r3, r3, #28
 8006260:	4964      	ldr	r1, [pc, #400]	@ (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006262:	4313      	orrs	r3, r2
 8006264:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006268:	4b61      	ldr	r3, [pc, #388]	@ (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800626a:	2201      	movs	r2, #1
 800626c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800626e:	f7fd fb59 	bl	8003924 <HAL_GetTick>
 8006272:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006274:	e008      	b.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006276:	f7fd fb55 	bl	8003924 <HAL_GetTick>
 800627a:	4602      	mov	r2, r0
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	1ad3      	subs	r3, r2, r3
 8006280:	2b02      	cmp	r3, #2
 8006282:	d901      	bls.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006284:	2303      	movs	r3, #3
 8006286:	e129      	b.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006288:	4b5a      	ldr	r3, [pc, #360]	@ (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006290:	2b00      	cmp	r3, #0
 8006292:	d0f0      	beq.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f003 0304 	and.w	r3, r3, #4
 800629c:	2b00      	cmp	r3, #0
 800629e:	d105      	bne.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d079      	beq.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80062ac:	4b52      	ldr	r3, [pc, #328]	@ (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80062ae:	2200      	movs	r2, #0
 80062b0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80062b2:	f7fd fb37 	bl	8003924 <HAL_GetTick>
 80062b6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80062b8:	e008      	b.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80062ba:	f7fd fb33 	bl	8003924 <HAL_GetTick>
 80062be:	4602      	mov	r2, r0
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	1ad3      	subs	r3, r2, r3
 80062c4:	2b02      	cmp	r3, #2
 80062c6:	d901      	bls.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80062c8:	2303      	movs	r3, #3
 80062ca:	e107      	b.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80062cc:	4b49      	ldr	r3, [pc, #292]	@ (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80062d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80062d8:	d0ef      	beq.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f003 0304 	and.w	r3, r3, #4
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d020      	beq.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80062e6:	4b43      	ldr	r3, [pc, #268]	@ (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80062e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062ec:	0f1b      	lsrs	r3, r3, #28
 80062ee:	f003 0307 	and.w	r3, r3, #7
 80062f2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	691b      	ldr	r3, [r3, #16]
 80062f8:	019a      	lsls	r2, r3, #6
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	695b      	ldr	r3, [r3, #20]
 80062fe:	061b      	lsls	r3, r3, #24
 8006300:	431a      	orrs	r2, r3
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	071b      	lsls	r3, r3, #28
 8006306:	493b      	ldr	r1, [pc, #236]	@ (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006308:	4313      	orrs	r3, r2
 800630a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800630e:	4b39      	ldr	r3, [pc, #228]	@ (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006310:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006314:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6a1b      	ldr	r3, [r3, #32]
 800631c:	3b01      	subs	r3, #1
 800631e:	021b      	lsls	r3, r3, #8
 8006320:	4934      	ldr	r1, [pc, #208]	@ (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006322:	4313      	orrs	r3, r2
 8006324:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f003 0308 	and.w	r3, r3, #8
 8006330:	2b00      	cmp	r3, #0
 8006332:	d01e      	beq.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006334:	4b2f      	ldr	r3, [pc, #188]	@ (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006336:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800633a:	0e1b      	lsrs	r3, r3, #24
 800633c:	f003 030f 	and.w	r3, r3, #15
 8006340:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	691b      	ldr	r3, [r3, #16]
 8006346:	019a      	lsls	r2, r3, #6
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	061b      	lsls	r3, r3, #24
 800634c:	431a      	orrs	r2, r3
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	699b      	ldr	r3, [r3, #24]
 8006352:	071b      	lsls	r3, r3, #28
 8006354:	4927      	ldr	r1, [pc, #156]	@ (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006356:	4313      	orrs	r3, r2
 8006358:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800635c:	4b25      	ldr	r3, [pc, #148]	@ (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800635e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006362:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800636a:	4922      	ldr	r1, [pc, #136]	@ (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800636c:	4313      	orrs	r3, r2
 800636e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006372:	4b21      	ldr	r3, [pc, #132]	@ (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006374:	2201      	movs	r2, #1
 8006376:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006378:	f7fd fad4 	bl	8003924 <HAL_GetTick>
 800637c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800637e:	e008      	b.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006380:	f7fd fad0 	bl	8003924 <HAL_GetTick>
 8006384:	4602      	mov	r2, r0
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	1ad3      	subs	r3, r2, r3
 800638a:	2b02      	cmp	r3, #2
 800638c:	d901      	bls.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800638e:	2303      	movs	r3, #3
 8006390:	e0a4      	b.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006392:	4b18      	ldr	r3, [pc, #96]	@ (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800639a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800639e:	d1ef      	bne.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f003 0320 	and.w	r3, r3, #32
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	f000 808b 	beq.w	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80063ae:	2300      	movs	r3, #0
 80063b0:	60fb      	str	r3, [r7, #12]
 80063b2:	4b10      	ldr	r3, [pc, #64]	@ (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80063b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063b6:	4a0f      	ldr	r2, [pc, #60]	@ (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80063b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80063bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80063be:	4b0d      	ldr	r3, [pc, #52]	@ (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80063c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80063c6:	60fb      	str	r3, [r7, #12]
 80063c8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80063ca:	4b0c      	ldr	r3, [pc, #48]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a0b      	ldr	r2, [pc, #44]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80063d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80063d4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80063d6:	f7fd faa5 	bl	8003924 <HAL_GetTick>
 80063da:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80063dc:	e010      	b.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063de:	f7fd faa1 	bl	8003924 <HAL_GetTick>
 80063e2:	4602      	mov	r2, r0
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	1ad3      	subs	r3, r2, r3
 80063e8:	2b02      	cmp	r3, #2
 80063ea:	d909      	bls.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80063ec:	2303      	movs	r3, #3
 80063ee:	e075      	b.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x368>
 80063f0:	42470068 	.word	0x42470068
 80063f4:	40023800 	.word	0x40023800
 80063f8:	42470070 	.word	0x42470070
 80063fc:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006400:	4b38      	ldr	r3, [pc, #224]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006408:	2b00      	cmp	r3, #0
 800640a:	d0e8      	beq.n	80063de <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800640c:	4b36      	ldr	r3, [pc, #216]	@ (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800640e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006410:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006414:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d02f      	beq.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x308>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006420:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006424:	693a      	ldr	r2, [r7, #16]
 8006426:	429a      	cmp	r2, r3
 8006428:	d028      	beq.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800642a:	4b2f      	ldr	r3, [pc, #188]	@ (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800642c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800642e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006432:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006434:	4b2d      	ldr	r3, [pc, #180]	@ (80064ec <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006436:	2201      	movs	r2, #1
 8006438:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800643a:	4b2c      	ldr	r3, [pc, #176]	@ (80064ec <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800643c:	2200      	movs	r2, #0
 800643e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006440:	4a29      	ldr	r2, [pc, #164]	@ (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006446:	4b28      	ldr	r3, [pc, #160]	@ (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006448:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800644a:	f003 0301 	and.w	r3, r3, #1
 800644e:	2b01      	cmp	r3, #1
 8006450:	d114      	bne.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006452:	f7fd fa67 	bl	8003924 <HAL_GetTick>
 8006456:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006458:	e00a      	b.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800645a:	f7fd fa63 	bl	8003924 <HAL_GetTick>
 800645e:	4602      	mov	r2, r0
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	1ad3      	subs	r3, r2, r3
 8006464:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006468:	4293      	cmp	r3, r2
 800646a:	d901      	bls.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 800646c:	2303      	movs	r3, #3
 800646e:	e035      	b.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006470:	4b1d      	ldr	r3, [pc, #116]	@ (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006472:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006474:	f003 0302 	and.w	r3, r3, #2
 8006478:	2b00      	cmp	r3, #0
 800647a:	d0ee      	beq.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006480:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006484:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006488:	d10d      	bne.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800648a:	4b17      	ldr	r3, [pc, #92]	@ (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006496:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800649a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800649e:	4912      	ldr	r1, [pc, #72]	@ (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80064a0:	4313      	orrs	r3, r2
 80064a2:	608b      	str	r3, [r1, #8]
 80064a4:	e005      	b.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80064a6:	4b10      	ldr	r3, [pc, #64]	@ (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80064a8:	689b      	ldr	r3, [r3, #8]
 80064aa:	4a0f      	ldr	r2, [pc, #60]	@ (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80064ac:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80064b0:	6093      	str	r3, [r2, #8]
 80064b2:	4b0d      	ldr	r3, [pc, #52]	@ (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80064b4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064be:	490a      	ldr	r1, [pc, #40]	@ (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80064c0:	4313      	orrs	r3, r2
 80064c2:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f003 0310 	and.w	r3, r3, #16
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d004      	beq.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80064d6:	4b06      	ldr	r3, [pc, #24]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80064d8:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80064da:	2300      	movs	r3, #0
}
 80064dc:	4618      	mov	r0, r3
 80064de:	3718      	adds	r7, #24
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}
 80064e4:	40007000 	.word	0x40007000
 80064e8:	40023800 	.word	0x40023800
 80064ec:	42470e40 	.word	0x42470e40
 80064f0:	424711e0 	.word	0x424711e0

080064f4 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b082      	sub	sp, #8
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d101      	bne.n	8006506 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8006502:	2301      	movs	r3, #1
 8006504:	e01c      	b.n	8006540 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	795b      	ldrb	r3, [r3, #5]
 800650a:	b2db      	uxtb	r3, r3
 800650c:	2b00      	cmp	r3, #0
 800650e:	d105      	bne.n	800651c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2200      	movs	r2, #0
 8006514:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f7fc fd38 	bl	8002f8c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2202      	movs	r2, #2
 8006520:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	681a      	ldr	r2, [r3, #0]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f042 0204 	orr.w	r2, r2, #4
 8006530:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2201      	movs	r2, #1
 8006536:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2200      	movs	r2, #0
 800653c:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800653e:	2300      	movs	r3, #0
}
 8006540:	4618      	mov	r0, r3
 8006542:	3708      	adds	r7, #8
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}

08006548 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b082      	sub	sp, #8
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d101      	bne.n	800655a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006556:	2301      	movs	r3, #1
 8006558:	e07b      	b.n	8006652 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800655e:	2b00      	cmp	r3, #0
 8006560:	d108      	bne.n	8006574 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800656a:	d009      	beq.n	8006580 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2200      	movs	r2, #0
 8006570:	61da      	str	r2, [r3, #28]
 8006572:	e005      	b.n	8006580 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2200      	movs	r2, #0
 8006578:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2200      	movs	r2, #0
 800657e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2200      	movs	r2, #0
 8006584:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800658c:	b2db      	uxtb	r3, r3
 800658e:	2b00      	cmp	r3, #0
 8006590:	d106      	bne.n	80065a0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2200      	movs	r2, #0
 8006596:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f7fc fd18 	bl	8002fd0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2202      	movs	r2, #2
 80065a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	681a      	ldr	r2, [r3, #0]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80065b6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	689b      	ldr	r3, [r3, #8]
 80065c4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80065c8:	431a      	orrs	r2, r3
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	68db      	ldr	r3, [r3, #12]
 80065ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80065d2:	431a      	orrs	r2, r3
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	691b      	ldr	r3, [r3, #16]
 80065d8:	f003 0302 	and.w	r3, r3, #2
 80065dc:	431a      	orrs	r2, r3
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	695b      	ldr	r3, [r3, #20]
 80065e2:	f003 0301 	and.w	r3, r3, #1
 80065e6:	431a      	orrs	r2, r3
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	699b      	ldr	r3, [r3, #24]
 80065ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80065f0:	431a      	orrs	r2, r3
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	69db      	ldr	r3, [r3, #28]
 80065f6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80065fa:	431a      	orrs	r2, r3
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6a1b      	ldr	r3, [r3, #32]
 8006600:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006604:	ea42 0103 	orr.w	r1, r2, r3
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800660c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	430a      	orrs	r2, r1
 8006616:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	699b      	ldr	r3, [r3, #24]
 800661c:	0c1b      	lsrs	r3, r3, #16
 800661e:	f003 0104 	and.w	r1, r3, #4
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006626:	f003 0210 	and.w	r2, r3, #16
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	430a      	orrs	r2, r1
 8006630:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	69da      	ldr	r2, [r3, #28]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006640:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2200      	movs	r2, #0
 8006646:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2201      	movs	r2, #1
 800664c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006650:	2300      	movs	r3, #0
}
 8006652:	4618      	mov	r0, r3
 8006654:	3708      	adds	r7, #8
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}

0800665a <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800665a:	b580      	push	{r7, lr}
 800665c:	b082      	sub	sp, #8
 800665e:	af00      	add	r7, sp, #0
 8006660:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d101      	bne.n	800666c <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006668:	2301      	movs	r3, #1
 800666a:	e01a      	b.n	80066a2 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2202      	movs	r2, #2
 8006670:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006682:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f7fc fceb 	bl	8003060 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2200      	movs	r2, #0
 800668e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2200      	movs	r2, #0
 8006694:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2200      	movs	r2, #0
 800669c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80066a0:	2300      	movs	r3, #0
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3708      	adds	r7, #8
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}

080066aa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066aa:	b580      	push	{r7, lr}
 80066ac:	b088      	sub	sp, #32
 80066ae:	af00      	add	r7, sp, #0
 80066b0:	60f8      	str	r0, [r7, #12]
 80066b2:	60b9      	str	r1, [r7, #8]
 80066b4:	603b      	str	r3, [r7, #0]
 80066b6:	4613      	mov	r3, r2
 80066b8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80066ba:	f7fd f933 	bl	8003924 <HAL_GetTick>
 80066be:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80066c0:	88fb      	ldrh	r3, [r7, #6]
 80066c2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	d001      	beq.n	80066d4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80066d0:	2302      	movs	r3, #2
 80066d2:	e12a      	b.n	800692a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d002      	beq.n	80066e0 <HAL_SPI_Transmit+0x36>
 80066da:	88fb      	ldrh	r3, [r7, #6]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d101      	bne.n	80066e4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80066e0:	2301      	movs	r3, #1
 80066e2:	e122      	b.n	800692a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80066ea:	2b01      	cmp	r3, #1
 80066ec:	d101      	bne.n	80066f2 <HAL_SPI_Transmit+0x48>
 80066ee:	2302      	movs	r3, #2
 80066f0:	e11b      	b.n	800692a <HAL_SPI_Transmit+0x280>
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2201      	movs	r2, #1
 80066f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2203      	movs	r2, #3
 80066fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2200      	movs	r2, #0
 8006706:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	68ba      	ldr	r2, [r7, #8]
 800670c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	88fa      	ldrh	r2, [r7, #6]
 8006712:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	88fa      	ldrh	r2, [r7, #6]
 8006718:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2200      	movs	r2, #0
 800671e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2200      	movs	r2, #0
 8006724:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2200      	movs	r2, #0
 800672a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2200      	movs	r2, #0
 8006730:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2200      	movs	r2, #0
 8006736:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006740:	d10f      	bne.n	8006762 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	681a      	ldr	r2, [r3, #0]
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006750:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	681a      	ldr	r2, [r3, #0]
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006760:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800676c:	2b40      	cmp	r3, #64	@ 0x40
 800676e:	d007      	beq.n	8006780 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800677e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	68db      	ldr	r3, [r3, #12]
 8006784:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006788:	d152      	bne.n	8006830 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d002      	beq.n	8006798 <HAL_SPI_Transmit+0xee>
 8006792:	8b7b      	ldrh	r3, [r7, #26]
 8006794:	2b01      	cmp	r3, #1
 8006796:	d145      	bne.n	8006824 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800679c:	881a      	ldrh	r2, [r3, #0]
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067a8:	1c9a      	adds	r2, r3, #2
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80067b2:	b29b      	uxth	r3, r3
 80067b4:	3b01      	subs	r3, #1
 80067b6:	b29a      	uxth	r2, r3
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80067bc:	e032      	b.n	8006824 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	689b      	ldr	r3, [r3, #8]
 80067c4:	f003 0302 	and.w	r3, r3, #2
 80067c8:	2b02      	cmp	r3, #2
 80067ca:	d112      	bne.n	80067f2 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067d0:	881a      	ldrh	r2, [r3, #0]
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067dc:	1c9a      	adds	r2, r3, #2
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	3b01      	subs	r3, #1
 80067ea:	b29a      	uxth	r2, r3
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	86da      	strh	r2, [r3, #54]	@ 0x36
 80067f0:	e018      	b.n	8006824 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80067f2:	f7fd f897 	bl	8003924 <HAL_GetTick>
 80067f6:	4602      	mov	r2, r0
 80067f8:	69fb      	ldr	r3, [r7, #28]
 80067fa:	1ad3      	subs	r3, r2, r3
 80067fc:	683a      	ldr	r2, [r7, #0]
 80067fe:	429a      	cmp	r2, r3
 8006800:	d803      	bhi.n	800680a <HAL_SPI_Transmit+0x160>
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006808:	d102      	bne.n	8006810 <HAL_SPI_Transmit+0x166>
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d109      	bne.n	8006824 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2201      	movs	r2, #1
 8006814:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2200      	movs	r2, #0
 800681c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006820:	2303      	movs	r3, #3
 8006822:	e082      	b.n	800692a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006828:	b29b      	uxth	r3, r3
 800682a:	2b00      	cmp	r3, #0
 800682c:	d1c7      	bne.n	80067be <HAL_SPI_Transmit+0x114>
 800682e:	e053      	b.n	80068d8 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d002      	beq.n	800683e <HAL_SPI_Transmit+0x194>
 8006838:	8b7b      	ldrh	r3, [r7, #26]
 800683a:	2b01      	cmp	r3, #1
 800683c:	d147      	bne.n	80068ce <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	330c      	adds	r3, #12
 8006848:	7812      	ldrb	r2, [r2, #0]
 800684a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006850:	1c5a      	adds	r2, r3, #1
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800685a:	b29b      	uxth	r3, r3
 800685c:	3b01      	subs	r3, #1
 800685e:	b29a      	uxth	r2, r3
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006864:	e033      	b.n	80068ce <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	689b      	ldr	r3, [r3, #8]
 800686c:	f003 0302 	and.w	r3, r3, #2
 8006870:	2b02      	cmp	r3, #2
 8006872:	d113      	bne.n	800689c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	330c      	adds	r3, #12
 800687e:	7812      	ldrb	r2, [r2, #0]
 8006880:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006886:	1c5a      	adds	r2, r3, #1
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006890:	b29b      	uxth	r3, r3
 8006892:	3b01      	subs	r3, #1
 8006894:	b29a      	uxth	r2, r3
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	86da      	strh	r2, [r3, #54]	@ 0x36
 800689a:	e018      	b.n	80068ce <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800689c:	f7fd f842 	bl	8003924 <HAL_GetTick>
 80068a0:	4602      	mov	r2, r0
 80068a2:	69fb      	ldr	r3, [r7, #28]
 80068a4:	1ad3      	subs	r3, r2, r3
 80068a6:	683a      	ldr	r2, [r7, #0]
 80068a8:	429a      	cmp	r2, r3
 80068aa:	d803      	bhi.n	80068b4 <HAL_SPI_Transmit+0x20a>
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068b2:	d102      	bne.n	80068ba <HAL_SPI_Transmit+0x210>
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d109      	bne.n	80068ce <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2201      	movs	r2, #1
 80068be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2200      	movs	r2, #0
 80068c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80068ca:	2303      	movs	r3, #3
 80068cc:	e02d      	b.n	800692a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80068d2:	b29b      	uxth	r3, r3
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d1c6      	bne.n	8006866 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80068d8:	69fa      	ldr	r2, [r7, #28]
 80068da:	6839      	ldr	r1, [r7, #0]
 80068dc:	68f8      	ldr	r0, [r7, #12]
 80068de:	f000 fa67 	bl	8006db0 <SPI_EndRxTxTransaction>
 80068e2:	4603      	mov	r3, r0
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d002      	beq.n	80068ee <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2220      	movs	r2, #32
 80068ec:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	689b      	ldr	r3, [r3, #8]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d10a      	bne.n	800690c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80068f6:	2300      	movs	r3, #0
 80068f8:	617b      	str	r3, [r7, #20]
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	68db      	ldr	r3, [r3, #12]
 8006900:	617b      	str	r3, [r7, #20]
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	689b      	ldr	r3, [r3, #8]
 8006908:	617b      	str	r3, [r7, #20]
 800690a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2201      	movs	r2, #1
 8006910:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2200      	movs	r2, #0
 8006918:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006920:	2b00      	cmp	r3, #0
 8006922:	d001      	beq.n	8006928 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8006924:	2301      	movs	r3, #1
 8006926:	e000      	b.n	800692a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8006928:	2300      	movs	r3, #0
  }
}
 800692a:	4618      	mov	r0, r3
 800692c:	3720      	adds	r7, #32
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}

08006932 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006932:	b580      	push	{r7, lr}
 8006934:	b08a      	sub	sp, #40	@ 0x28
 8006936:	af00      	add	r7, sp, #0
 8006938:	60f8      	str	r0, [r7, #12]
 800693a:	60b9      	str	r1, [r7, #8]
 800693c:	607a      	str	r2, [r7, #4]
 800693e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006940:	2301      	movs	r3, #1
 8006942:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006944:	f7fc ffee 	bl	8003924 <HAL_GetTick>
 8006948:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006950:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006958:	887b      	ldrh	r3, [r7, #2]
 800695a:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800695c:	7ffb      	ldrb	r3, [r7, #31]
 800695e:	2b01      	cmp	r3, #1
 8006960:	d00c      	beq.n	800697c <HAL_SPI_TransmitReceive+0x4a>
 8006962:	69bb      	ldr	r3, [r7, #24]
 8006964:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006968:	d106      	bne.n	8006978 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	689b      	ldr	r3, [r3, #8]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d102      	bne.n	8006978 <HAL_SPI_TransmitReceive+0x46>
 8006972:	7ffb      	ldrb	r3, [r7, #31]
 8006974:	2b04      	cmp	r3, #4
 8006976:	d001      	beq.n	800697c <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8006978:	2302      	movs	r3, #2
 800697a:	e17f      	b.n	8006c7c <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d005      	beq.n	800698e <HAL_SPI_TransmitReceive+0x5c>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d002      	beq.n	800698e <HAL_SPI_TransmitReceive+0x5c>
 8006988:	887b      	ldrh	r3, [r7, #2]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d101      	bne.n	8006992 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800698e:	2301      	movs	r3, #1
 8006990:	e174      	b.n	8006c7c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006998:	2b01      	cmp	r3, #1
 800699a:	d101      	bne.n	80069a0 <HAL_SPI_TransmitReceive+0x6e>
 800699c:	2302      	movs	r3, #2
 800699e:	e16d      	b.n	8006c7c <HAL_SPI_TransmitReceive+0x34a>
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2201      	movs	r2, #1
 80069a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80069ae:	b2db      	uxtb	r3, r3
 80069b0:	2b04      	cmp	r3, #4
 80069b2:	d003      	beq.n	80069bc <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2205      	movs	r2, #5
 80069b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2200      	movs	r2, #0
 80069c0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	687a      	ldr	r2, [r7, #4]
 80069c6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	887a      	ldrh	r2, [r7, #2]
 80069cc:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	887a      	ldrh	r2, [r7, #2]
 80069d2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	68ba      	ldr	r2, [r7, #8]
 80069d8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	887a      	ldrh	r2, [r7, #2]
 80069de:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	887a      	ldrh	r2, [r7, #2]
 80069e4:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2200      	movs	r2, #0
 80069ea:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2200      	movs	r2, #0
 80069f0:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069fc:	2b40      	cmp	r3, #64	@ 0x40
 80069fe:	d007      	beq.n	8006a10 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	681a      	ldr	r2, [r3, #0]
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006a0e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	68db      	ldr	r3, [r3, #12]
 8006a14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a18:	d17e      	bne.n	8006b18 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d002      	beq.n	8006a28 <HAL_SPI_TransmitReceive+0xf6>
 8006a22:	8afb      	ldrh	r3, [r7, #22]
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d16c      	bne.n	8006b02 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a2c:	881a      	ldrh	r2, [r3, #0]
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a38:	1c9a      	adds	r2, r3, #2
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	3b01      	subs	r3, #1
 8006a46:	b29a      	uxth	r2, r3
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a4c:	e059      	b.n	8006b02 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	689b      	ldr	r3, [r3, #8]
 8006a54:	f003 0302 	and.w	r3, r3, #2
 8006a58:	2b02      	cmp	r3, #2
 8006a5a:	d11b      	bne.n	8006a94 <HAL_SPI_TransmitReceive+0x162>
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006a60:	b29b      	uxth	r3, r3
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d016      	beq.n	8006a94 <HAL_SPI_TransmitReceive+0x162>
 8006a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a68:	2b01      	cmp	r3, #1
 8006a6a:	d113      	bne.n	8006a94 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a70:	881a      	ldrh	r2, [r3, #0]
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a7c:	1c9a      	adds	r2, r3, #2
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	3b01      	subs	r3, #1
 8006a8a:	b29a      	uxth	r2, r3
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006a90:	2300      	movs	r3, #0
 8006a92:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	689b      	ldr	r3, [r3, #8]
 8006a9a:	f003 0301 	and.w	r3, r3, #1
 8006a9e:	2b01      	cmp	r3, #1
 8006aa0:	d119      	bne.n	8006ad6 <HAL_SPI_TransmitReceive+0x1a4>
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d014      	beq.n	8006ad6 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	68da      	ldr	r2, [r3, #12]
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ab6:	b292      	uxth	r2, r2
 8006ab8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006abe:	1c9a      	adds	r2, r3, #2
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ac8:	b29b      	uxth	r3, r3
 8006aca:	3b01      	subs	r3, #1
 8006acc:	b29a      	uxth	r2, r3
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006ad6:	f7fc ff25 	bl	8003924 <HAL_GetTick>
 8006ada:	4602      	mov	r2, r0
 8006adc:	6a3b      	ldr	r3, [r7, #32]
 8006ade:	1ad3      	subs	r3, r2, r3
 8006ae0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ae2:	429a      	cmp	r2, r3
 8006ae4:	d80d      	bhi.n	8006b02 <HAL_SPI_TransmitReceive+0x1d0>
 8006ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aec:	d009      	beq.n	8006b02 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2201      	movs	r2, #1
 8006af2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2200      	movs	r2, #0
 8006afa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006afe:	2303      	movs	r3, #3
 8006b00:	e0bc      	b.n	8006c7c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b06:	b29b      	uxth	r3, r3
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d1a0      	bne.n	8006a4e <HAL_SPI_TransmitReceive+0x11c>
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b10:	b29b      	uxth	r3, r3
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d19b      	bne.n	8006a4e <HAL_SPI_TransmitReceive+0x11c>
 8006b16:	e082      	b.n	8006c1e <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d002      	beq.n	8006b26 <HAL_SPI_TransmitReceive+0x1f4>
 8006b20:	8afb      	ldrh	r3, [r7, #22]
 8006b22:	2b01      	cmp	r3, #1
 8006b24:	d171      	bne.n	8006c0a <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	330c      	adds	r3, #12
 8006b30:	7812      	ldrb	r2, [r2, #0]
 8006b32:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b38:	1c5a      	adds	r2, r3, #1
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	3b01      	subs	r3, #1
 8006b46:	b29a      	uxth	r2, r3
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b4c:	e05d      	b.n	8006c0a <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	689b      	ldr	r3, [r3, #8]
 8006b54:	f003 0302 	and.w	r3, r3, #2
 8006b58:	2b02      	cmp	r3, #2
 8006b5a:	d11c      	bne.n	8006b96 <HAL_SPI_TransmitReceive+0x264>
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b60:	b29b      	uxth	r3, r3
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d017      	beq.n	8006b96 <HAL_SPI_TransmitReceive+0x264>
 8006b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	d114      	bne.n	8006b96 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	330c      	adds	r3, #12
 8006b76:	7812      	ldrb	r2, [r2, #0]
 8006b78:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b7e:	1c5a      	adds	r2, r3, #1
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b88:	b29b      	uxth	r3, r3
 8006b8a:	3b01      	subs	r3, #1
 8006b8c:	b29a      	uxth	r2, r3
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006b92:	2300      	movs	r3, #0
 8006b94:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	689b      	ldr	r3, [r3, #8]
 8006b9c:	f003 0301 	and.w	r3, r3, #1
 8006ba0:	2b01      	cmp	r3, #1
 8006ba2:	d119      	bne.n	8006bd8 <HAL_SPI_TransmitReceive+0x2a6>
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ba8:	b29b      	uxth	r3, r3
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d014      	beq.n	8006bd8 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	68da      	ldr	r2, [r3, #12]
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bb8:	b2d2      	uxtb	r2, r2
 8006bba:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bc0:	1c5a      	adds	r2, r3, #1
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006bca:	b29b      	uxth	r3, r3
 8006bcc:	3b01      	subs	r3, #1
 8006bce:	b29a      	uxth	r2, r3
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006bd8:	f7fc fea4 	bl	8003924 <HAL_GetTick>
 8006bdc:	4602      	mov	r2, r0
 8006bde:	6a3b      	ldr	r3, [r7, #32]
 8006be0:	1ad3      	subs	r3, r2, r3
 8006be2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006be4:	429a      	cmp	r2, r3
 8006be6:	d803      	bhi.n	8006bf0 <HAL_SPI_TransmitReceive+0x2be>
 8006be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bee:	d102      	bne.n	8006bf6 <HAL_SPI_TransmitReceive+0x2c4>
 8006bf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d109      	bne.n	8006c0a <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2201      	movs	r2, #1
 8006bfa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2200      	movs	r2, #0
 8006c02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006c06:	2303      	movs	r3, #3
 8006c08:	e038      	b.n	8006c7c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006c0e:	b29b      	uxth	r3, r3
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d19c      	bne.n	8006b4e <HAL_SPI_TransmitReceive+0x21c>
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c18:	b29b      	uxth	r3, r3
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d197      	bne.n	8006b4e <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006c1e:	6a3a      	ldr	r2, [r7, #32]
 8006c20:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006c22:	68f8      	ldr	r0, [r7, #12]
 8006c24:	f000 f8c4 	bl	8006db0 <SPI_EndRxTxTransaction>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d008      	beq.n	8006c40 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2220      	movs	r2, #32
 8006c32:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2200      	movs	r2, #0
 8006c38:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	e01d      	b.n	8006c7c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	689b      	ldr	r3, [r3, #8]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d10a      	bne.n	8006c5e <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006c48:	2300      	movs	r3, #0
 8006c4a:	613b      	str	r3, [r7, #16]
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	68db      	ldr	r3, [r3, #12]
 8006c52:	613b      	str	r3, [r7, #16]
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	689b      	ldr	r3, [r3, #8]
 8006c5a:	613b      	str	r3, [r7, #16]
 8006c5c:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2201      	movs	r2, #1
 8006c62:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d001      	beq.n	8006c7a <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8006c76:	2301      	movs	r3, #1
 8006c78:	e000      	b.n	8006c7c <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8006c7a:	2300      	movs	r3, #0
  }
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	3728      	adds	r7, #40	@ 0x28
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}

08006c84 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b083      	sub	sp, #12
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006c92:	b2db      	uxtb	r3, r3
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	370c      	adds	r7, #12
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr

08006ca0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b088      	sub	sp, #32
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	60f8      	str	r0, [r7, #12]
 8006ca8:	60b9      	str	r1, [r7, #8]
 8006caa:	603b      	str	r3, [r7, #0]
 8006cac:	4613      	mov	r3, r2
 8006cae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006cb0:	f7fc fe38 	bl	8003924 <HAL_GetTick>
 8006cb4:	4602      	mov	r2, r0
 8006cb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cb8:	1a9b      	subs	r3, r3, r2
 8006cba:	683a      	ldr	r2, [r7, #0]
 8006cbc:	4413      	add	r3, r2
 8006cbe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006cc0:	f7fc fe30 	bl	8003924 <HAL_GetTick>
 8006cc4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006cc6:	4b39      	ldr	r3, [pc, #228]	@ (8006dac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	015b      	lsls	r3, r3, #5
 8006ccc:	0d1b      	lsrs	r3, r3, #20
 8006cce:	69fa      	ldr	r2, [r7, #28]
 8006cd0:	fb02 f303 	mul.w	r3, r2, r3
 8006cd4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006cd6:	e054      	b.n	8006d82 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cde:	d050      	beq.n	8006d82 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006ce0:	f7fc fe20 	bl	8003924 <HAL_GetTick>
 8006ce4:	4602      	mov	r2, r0
 8006ce6:	69bb      	ldr	r3, [r7, #24]
 8006ce8:	1ad3      	subs	r3, r2, r3
 8006cea:	69fa      	ldr	r2, [r7, #28]
 8006cec:	429a      	cmp	r2, r3
 8006cee:	d902      	bls.n	8006cf6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006cf0:	69fb      	ldr	r3, [r7, #28]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d13d      	bne.n	8006d72 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	685a      	ldr	r2, [r3, #4]
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006d04:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006d0e:	d111      	bne.n	8006d34 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	689b      	ldr	r3, [r3, #8]
 8006d14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d18:	d004      	beq.n	8006d24 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	689b      	ldr	r3, [r3, #8]
 8006d1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d22:	d107      	bne.n	8006d34 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006d32:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d3c:	d10f      	bne.n	8006d5e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006d4c:	601a      	str	r2, [r3, #0]
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	681a      	ldr	r2, [r3, #0]
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006d5c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2201      	movs	r2, #1
 8006d62:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006d6e:	2303      	movs	r3, #3
 8006d70:	e017      	b.n	8006da2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d101      	bne.n	8006d7c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	3b01      	subs	r3, #1
 8006d80:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	689a      	ldr	r2, [r3, #8]
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	4013      	ands	r3, r2
 8006d8c:	68ba      	ldr	r2, [r7, #8]
 8006d8e:	429a      	cmp	r2, r3
 8006d90:	bf0c      	ite	eq
 8006d92:	2301      	moveq	r3, #1
 8006d94:	2300      	movne	r3, #0
 8006d96:	b2db      	uxtb	r3, r3
 8006d98:	461a      	mov	r2, r3
 8006d9a:	79fb      	ldrb	r3, [r7, #7]
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	d19b      	bne.n	8006cd8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006da0:	2300      	movs	r3, #0
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	3720      	adds	r7, #32
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}
 8006daa:	bf00      	nop
 8006dac:	20000018 	.word	0x20000018

08006db0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b088      	sub	sp, #32
 8006db4:	af02      	add	r7, sp, #8
 8006db6:	60f8      	str	r0, [r7, #12]
 8006db8:	60b9      	str	r1, [r7, #8]
 8006dba:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	9300      	str	r3, [sp, #0]
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	2102      	movs	r1, #2
 8006dc6:	68f8      	ldr	r0, [r7, #12]
 8006dc8:	f7ff ff6a 	bl	8006ca0 <SPI_WaitFlagStateUntilTimeout>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d007      	beq.n	8006de2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006dd6:	f043 0220 	orr.w	r2, r3, #32
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006dde:	2303      	movs	r3, #3
 8006de0:	e032      	b.n	8006e48 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006de2:	4b1b      	ldr	r3, [pc, #108]	@ (8006e50 <SPI_EndRxTxTransaction+0xa0>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a1b      	ldr	r2, [pc, #108]	@ (8006e54 <SPI_EndRxTxTransaction+0xa4>)
 8006de8:	fba2 2303 	umull	r2, r3, r2, r3
 8006dec:	0d5b      	lsrs	r3, r3, #21
 8006dee:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006df2:	fb02 f303 	mul.w	r3, r2, r3
 8006df6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	685b      	ldr	r3, [r3, #4]
 8006dfc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006e00:	d112      	bne.n	8006e28 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	9300      	str	r3, [sp, #0]
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	2180      	movs	r1, #128	@ 0x80
 8006e0c:	68f8      	ldr	r0, [r7, #12]
 8006e0e:	f7ff ff47 	bl	8006ca0 <SPI_WaitFlagStateUntilTimeout>
 8006e12:	4603      	mov	r3, r0
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d016      	beq.n	8006e46 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e1c:	f043 0220 	orr.w	r2, r3, #32
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006e24:	2303      	movs	r3, #3
 8006e26:	e00f      	b.n	8006e48 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d00a      	beq.n	8006e44 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	3b01      	subs	r3, #1
 8006e32:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	689b      	ldr	r3, [r3, #8]
 8006e3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e3e:	2b80      	cmp	r3, #128	@ 0x80
 8006e40:	d0f2      	beq.n	8006e28 <SPI_EndRxTxTransaction+0x78>
 8006e42:	e000      	b.n	8006e46 <SPI_EndRxTxTransaction+0x96>
        break;
 8006e44:	bf00      	nop
  }

  return HAL_OK;
 8006e46:	2300      	movs	r3, #0
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3718      	adds	r7, #24
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}
 8006e50:	20000018 	.word	0x20000018
 8006e54:	165e9f81 	.word	0x165e9f81

08006e58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b082      	sub	sp, #8
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d101      	bne.n	8006e6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006e66:	2301      	movs	r3, #1
 8006e68:	e041      	b.n	8006eee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e70:	b2db      	uxtb	r3, r3
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d106      	bne.n	8006e84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f7fc f90c 	bl	800309c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2202      	movs	r2, #2
 8006e88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681a      	ldr	r2, [r3, #0]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	3304      	adds	r3, #4
 8006e94:	4619      	mov	r1, r3
 8006e96:	4610      	mov	r0, r2
 8006e98:	f000 f8f4 	bl	8007084 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2201      	movs	r2, #1
 8006eb0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2201      	movs	r2, #1
 8006ec0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2201      	movs	r2, #1
 8006ed0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2201      	movs	r2, #1
 8006ee0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006eec:	2300      	movs	r3, #0
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3708      	adds	r7, #8
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}

08006ef6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006ef6:	b580      	push	{r7, lr}
 8006ef8:	b084      	sub	sp, #16
 8006efa:	af00      	add	r7, sp, #0
 8006efc:	6078      	str	r0, [r7, #4]
 8006efe:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f00:	2300      	movs	r3, #0
 8006f02:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006f0a:	2b01      	cmp	r3, #1
 8006f0c:	d101      	bne.n	8006f12 <HAL_TIM_ConfigClockSource+0x1c>
 8006f0e:	2302      	movs	r3, #2
 8006f10:	e0b4      	b.n	800707c <HAL_TIM_ConfigClockSource+0x186>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2201      	movs	r2, #1
 8006f16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2202      	movs	r2, #2
 8006f1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	689b      	ldr	r3, [r3, #8]
 8006f28:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006f30:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006f38:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	68ba      	ldr	r2, [r7, #8]
 8006f40:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f4a:	d03e      	beq.n	8006fca <HAL_TIM_ConfigClockSource+0xd4>
 8006f4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f50:	f200 8087 	bhi.w	8007062 <HAL_TIM_ConfigClockSource+0x16c>
 8006f54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f58:	f000 8086 	beq.w	8007068 <HAL_TIM_ConfigClockSource+0x172>
 8006f5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f60:	d87f      	bhi.n	8007062 <HAL_TIM_ConfigClockSource+0x16c>
 8006f62:	2b70      	cmp	r3, #112	@ 0x70
 8006f64:	d01a      	beq.n	8006f9c <HAL_TIM_ConfigClockSource+0xa6>
 8006f66:	2b70      	cmp	r3, #112	@ 0x70
 8006f68:	d87b      	bhi.n	8007062 <HAL_TIM_ConfigClockSource+0x16c>
 8006f6a:	2b60      	cmp	r3, #96	@ 0x60
 8006f6c:	d050      	beq.n	8007010 <HAL_TIM_ConfigClockSource+0x11a>
 8006f6e:	2b60      	cmp	r3, #96	@ 0x60
 8006f70:	d877      	bhi.n	8007062 <HAL_TIM_ConfigClockSource+0x16c>
 8006f72:	2b50      	cmp	r3, #80	@ 0x50
 8006f74:	d03c      	beq.n	8006ff0 <HAL_TIM_ConfigClockSource+0xfa>
 8006f76:	2b50      	cmp	r3, #80	@ 0x50
 8006f78:	d873      	bhi.n	8007062 <HAL_TIM_ConfigClockSource+0x16c>
 8006f7a:	2b40      	cmp	r3, #64	@ 0x40
 8006f7c:	d058      	beq.n	8007030 <HAL_TIM_ConfigClockSource+0x13a>
 8006f7e:	2b40      	cmp	r3, #64	@ 0x40
 8006f80:	d86f      	bhi.n	8007062 <HAL_TIM_ConfigClockSource+0x16c>
 8006f82:	2b30      	cmp	r3, #48	@ 0x30
 8006f84:	d064      	beq.n	8007050 <HAL_TIM_ConfigClockSource+0x15a>
 8006f86:	2b30      	cmp	r3, #48	@ 0x30
 8006f88:	d86b      	bhi.n	8007062 <HAL_TIM_ConfigClockSource+0x16c>
 8006f8a:	2b20      	cmp	r3, #32
 8006f8c:	d060      	beq.n	8007050 <HAL_TIM_ConfigClockSource+0x15a>
 8006f8e:	2b20      	cmp	r3, #32
 8006f90:	d867      	bhi.n	8007062 <HAL_TIM_ConfigClockSource+0x16c>
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d05c      	beq.n	8007050 <HAL_TIM_ConfigClockSource+0x15a>
 8006f96:	2b10      	cmp	r3, #16
 8006f98:	d05a      	beq.n	8007050 <HAL_TIM_ConfigClockSource+0x15a>
 8006f9a:	e062      	b.n	8007062 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006fac:	f000 f990 	bl	80072d0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	689b      	ldr	r3, [r3, #8]
 8006fb6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006fbe:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	68ba      	ldr	r2, [r7, #8]
 8006fc6:	609a      	str	r2, [r3, #8]
      break;
 8006fc8:	e04f      	b.n	800706a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006fda:	f000 f979 	bl	80072d0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	689a      	ldr	r2, [r3, #8]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006fec:	609a      	str	r2, [r3, #8]
      break;
 8006fee:	e03c      	b.n	800706a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ffc:	461a      	mov	r2, r3
 8006ffe:	f000 f8ed 	bl	80071dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	2150      	movs	r1, #80	@ 0x50
 8007008:	4618      	mov	r0, r3
 800700a:	f000 f946 	bl	800729a <TIM_ITRx_SetConfig>
      break;
 800700e:	e02c      	b.n	800706a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800701c:	461a      	mov	r2, r3
 800701e:	f000 f90c 	bl	800723a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	2160      	movs	r1, #96	@ 0x60
 8007028:	4618      	mov	r0, r3
 800702a:	f000 f936 	bl	800729a <TIM_ITRx_SetConfig>
      break;
 800702e:	e01c      	b.n	800706a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800703c:	461a      	mov	r2, r3
 800703e:	f000 f8cd 	bl	80071dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	2140      	movs	r1, #64	@ 0x40
 8007048:	4618      	mov	r0, r3
 800704a:	f000 f926 	bl	800729a <TIM_ITRx_SetConfig>
      break;
 800704e:	e00c      	b.n	800706a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681a      	ldr	r2, [r3, #0]
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4619      	mov	r1, r3
 800705a:	4610      	mov	r0, r2
 800705c:	f000 f91d 	bl	800729a <TIM_ITRx_SetConfig>
      break;
 8007060:	e003      	b.n	800706a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007062:	2301      	movs	r3, #1
 8007064:	73fb      	strb	r3, [r7, #15]
      break;
 8007066:	e000      	b.n	800706a <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007068:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2201      	movs	r2, #1
 800706e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2200      	movs	r2, #0
 8007076:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800707a:	7bfb      	ldrb	r3, [r7, #15]
}
 800707c:	4618      	mov	r0, r3
 800707e:	3710      	adds	r7, #16
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}

08007084 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007084:	b480      	push	{r7}
 8007086:	b085      	sub	sp, #20
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
 800708c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	4a46      	ldr	r2, [pc, #280]	@ (80071b0 <TIM_Base_SetConfig+0x12c>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d013      	beq.n	80070c4 <TIM_Base_SetConfig+0x40>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070a2:	d00f      	beq.n	80070c4 <TIM_Base_SetConfig+0x40>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	4a43      	ldr	r2, [pc, #268]	@ (80071b4 <TIM_Base_SetConfig+0x130>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d00b      	beq.n	80070c4 <TIM_Base_SetConfig+0x40>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	4a42      	ldr	r2, [pc, #264]	@ (80071b8 <TIM_Base_SetConfig+0x134>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d007      	beq.n	80070c4 <TIM_Base_SetConfig+0x40>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	4a41      	ldr	r2, [pc, #260]	@ (80071bc <TIM_Base_SetConfig+0x138>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d003      	beq.n	80070c4 <TIM_Base_SetConfig+0x40>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	4a40      	ldr	r2, [pc, #256]	@ (80071c0 <TIM_Base_SetConfig+0x13c>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d108      	bne.n	80070d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	68fa      	ldr	r2, [r7, #12]
 80070d2:	4313      	orrs	r3, r2
 80070d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	4a35      	ldr	r2, [pc, #212]	@ (80071b0 <TIM_Base_SetConfig+0x12c>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d02b      	beq.n	8007136 <TIM_Base_SetConfig+0xb2>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070e4:	d027      	beq.n	8007136 <TIM_Base_SetConfig+0xb2>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	4a32      	ldr	r2, [pc, #200]	@ (80071b4 <TIM_Base_SetConfig+0x130>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d023      	beq.n	8007136 <TIM_Base_SetConfig+0xb2>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	4a31      	ldr	r2, [pc, #196]	@ (80071b8 <TIM_Base_SetConfig+0x134>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d01f      	beq.n	8007136 <TIM_Base_SetConfig+0xb2>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	4a30      	ldr	r2, [pc, #192]	@ (80071bc <TIM_Base_SetConfig+0x138>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d01b      	beq.n	8007136 <TIM_Base_SetConfig+0xb2>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	4a2f      	ldr	r2, [pc, #188]	@ (80071c0 <TIM_Base_SetConfig+0x13c>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d017      	beq.n	8007136 <TIM_Base_SetConfig+0xb2>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	4a2e      	ldr	r2, [pc, #184]	@ (80071c4 <TIM_Base_SetConfig+0x140>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d013      	beq.n	8007136 <TIM_Base_SetConfig+0xb2>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	4a2d      	ldr	r2, [pc, #180]	@ (80071c8 <TIM_Base_SetConfig+0x144>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d00f      	beq.n	8007136 <TIM_Base_SetConfig+0xb2>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	4a2c      	ldr	r2, [pc, #176]	@ (80071cc <TIM_Base_SetConfig+0x148>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d00b      	beq.n	8007136 <TIM_Base_SetConfig+0xb2>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	4a2b      	ldr	r2, [pc, #172]	@ (80071d0 <TIM_Base_SetConfig+0x14c>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d007      	beq.n	8007136 <TIM_Base_SetConfig+0xb2>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	4a2a      	ldr	r2, [pc, #168]	@ (80071d4 <TIM_Base_SetConfig+0x150>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d003      	beq.n	8007136 <TIM_Base_SetConfig+0xb2>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	4a29      	ldr	r2, [pc, #164]	@ (80071d8 <TIM_Base_SetConfig+0x154>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d108      	bne.n	8007148 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800713c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	68db      	ldr	r3, [r3, #12]
 8007142:	68fa      	ldr	r2, [r7, #12]
 8007144:	4313      	orrs	r3, r2
 8007146:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	695b      	ldr	r3, [r3, #20]
 8007152:	4313      	orrs	r3, r2
 8007154:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	68fa      	ldr	r2, [r7, #12]
 800715a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	689a      	ldr	r2, [r3, #8]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	681a      	ldr	r2, [r3, #0]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	4a10      	ldr	r2, [pc, #64]	@ (80071b0 <TIM_Base_SetConfig+0x12c>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d003      	beq.n	800717c <TIM_Base_SetConfig+0xf8>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	4a12      	ldr	r2, [pc, #72]	@ (80071c0 <TIM_Base_SetConfig+0x13c>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d103      	bne.n	8007184 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	691a      	ldr	r2, [r3, #16]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2201      	movs	r2, #1
 8007188:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	691b      	ldr	r3, [r3, #16]
 800718e:	f003 0301 	and.w	r3, r3, #1
 8007192:	2b01      	cmp	r3, #1
 8007194:	d105      	bne.n	80071a2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	691b      	ldr	r3, [r3, #16]
 800719a:	f023 0201 	bic.w	r2, r3, #1
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	611a      	str	r2, [r3, #16]
  }
}
 80071a2:	bf00      	nop
 80071a4:	3714      	adds	r7, #20
 80071a6:	46bd      	mov	sp, r7
 80071a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ac:	4770      	bx	lr
 80071ae:	bf00      	nop
 80071b0:	40010000 	.word	0x40010000
 80071b4:	40000400 	.word	0x40000400
 80071b8:	40000800 	.word	0x40000800
 80071bc:	40000c00 	.word	0x40000c00
 80071c0:	40010400 	.word	0x40010400
 80071c4:	40014000 	.word	0x40014000
 80071c8:	40014400 	.word	0x40014400
 80071cc:	40014800 	.word	0x40014800
 80071d0:	40001800 	.word	0x40001800
 80071d4:	40001c00 	.word	0x40001c00
 80071d8:	40002000 	.word	0x40002000

080071dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071dc:	b480      	push	{r7}
 80071de:	b087      	sub	sp, #28
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	60f8      	str	r0, [r7, #12]
 80071e4:	60b9      	str	r1, [r7, #8]
 80071e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	6a1b      	ldr	r3, [r3, #32]
 80071ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	6a1b      	ldr	r3, [r3, #32]
 80071f2:	f023 0201 	bic.w	r2, r3, #1
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	699b      	ldr	r3, [r3, #24]
 80071fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007206:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	011b      	lsls	r3, r3, #4
 800720c:	693a      	ldr	r2, [r7, #16]
 800720e:	4313      	orrs	r3, r2
 8007210:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	f023 030a 	bic.w	r3, r3, #10
 8007218:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800721a:	697a      	ldr	r2, [r7, #20]
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	4313      	orrs	r3, r2
 8007220:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	693a      	ldr	r2, [r7, #16]
 8007226:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	697a      	ldr	r2, [r7, #20]
 800722c:	621a      	str	r2, [r3, #32]
}
 800722e:	bf00      	nop
 8007230:	371c      	adds	r7, #28
 8007232:	46bd      	mov	sp, r7
 8007234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007238:	4770      	bx	lr

0800723a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800723a:	b480      	push	{r7}
 800723c:	b087      	sub	sp, #28
 800723e:	af00      	add	r7, sp, #0
 8007240:	60f8      	str	r0, [r7, #12]
 8007242:	60b9      	str	r1, [r7, #8]
 8007244:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	6a1b      	ldr	r3, [r3, #32]
 800724a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	6a1b      	ldr	r3, [r3, #32]
 8007250:	f023 0210 	bic.w	r2, r3, #16
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	699b      	ldr	r3, [r3, #24]
 800725c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007264:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	031b      	lsls	r3, r3, #12
 800726a:	693a      	ldr	r2, [r7, #16]
 800726c:	4313      	orrs	r3, r2
 800726e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007276:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	011b      	lsls	r3, r3, #4
 800727c:	697a      	ldr	r2, [r7, #20]
 800727e:	4313      	orrs	r3, r2
 8007280:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	693a      	ldr	r2, [r7, #16]
 8007286:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	697a      	ldr	r2, [r7, #20]
 800728c:	621a      	str	r2, [r3, #32]
}
 800728e:	bf00      	nop
 8007290:	371c      	adds	r7, #28
 8007292:	46bd      	mov	sp, r7
 8007294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007298:	4770      	bx	lr

0800729a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800729a:	b480      	push	{r7}
 800729c:	b085      	sub	sp, #20
 800729e:	af00      	add	r7, sp, #0
 80072a0:	6078      	str	r0, [r7, #4]
 80072a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	689b      	ldr	r3, [r3, #8]
 80072a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80072b2:	683a      	ldr	r2, [r7, #0]
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	4313      	orrs	r3, r2
 80072b8:	f043 0307 	orr.w	r3, r3, #7
 80072bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	68fa      	ldr	r2, [r7, #12]
 80072c2:	609a      	str	r2, [r3, #8]
}
 80072c4:	bf00      	nop
 80072c6:	3714      	adds	r7, #20
 80072c8:	46bd      	mov	sp, r7
 80072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ce:	4770      	bx	lr

080072d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b087      	sub	sp, #28
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	60f8      	str	r0, [r7, #12]
 80072d8:	60b9      	str	r1, [r7, #8]
 80072da:	607a      	str	r2, [r7, #4]
 80072dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	689b      	ldr	r3, [r3, #8]
 80072e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80072ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	021a      	lsls	r2, r3, #8
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	431a      	orrs	r2, r3
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	4313      	orrs	r3, r2
 80072f8:	697a      	ldr	r2, [r7, #20]
 80072fa:	4313      	orrs	r3, r2
 80072fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	697a      	ldr	r2, [r7, #20]
 8007302:	609a      	str	r2, [r3, #8]
}
 8007304:	bf00      	nop
 8007306:	371c      	adds	r7, #28
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr

08007310 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007310:	b480      	push	{r7}
 8007312:	b085      	sub	sp, #20
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007320:	2b01      	cmp	r3, #1
 8007322:	d101      	bne.n	8007328 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007324:	2302      	movs	r3, #2
 8007326:	e05a      	b.n	80073de <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2201      	movs	r2, #1
 800732c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2202      	movs	r2, #2
 8007334:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	685b      	ldr	r3, [r3, #4]
 800733e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	689b      	ldr	r3, [r3, #8]
 8007346:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800734e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	68fa      	ldr	r2, [r7, #12]
 8007356:	4313      	orrs	r3, r2
 8007358:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	68fa      	ldr	r2, [r7, #12]
 8007360:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4a21      	ldr	r2, [pc, #132]	@ (80073ec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d022      	beq.n	80073b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007374:	d01d      	beq.n	80073b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a1d      	ldr	r2, [pc, #116]	@ (80073f0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d018      	beq.n	80073b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a1b      	ldr	r2, [pc, #108]	@ (80073f4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d013      	beq.n	80073b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a1a      	ldr	r2, [pc, #104]	@ (80073f8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d00e      	beq.n	80073b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a18      	ldr	r2, [pc, #96]	@ (80073fc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d009      	beq.n	80073b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a17      	ldr	r2, [pc, #92]	@ (8007400 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d004      	beq.n	80073b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a15      	ldr	r2, [pc, #84]	@ (8007404 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d10c      	bne.n	80073cc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80073b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	685b      	ldr	r3, [r3, #4]
 80073be:	68ba      	ldr	r2, [r7, #8]
 80073c0:	4313      	orrs	r3, r2
 80073c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	68ba      	ldr	r2, [r7, #8]
 80073ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2201      	movs	r2, #1
 80073d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2200      	movs	r2, #0
 80073d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80073dc:	2300      	movs	r3, #0
}
 80073de:	4618      	mov	r0, r3
 80073e0:	3714      	adds	r7, #20
 80073e2:	46bd      	mov	sp, r7
 80073e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e8:	4770      	bx	lr
 80073ea:	bf00      	nop
 80073ec:	40010000 	.word	0x40010000
 80073f0:	40000400 	.word	0x40000400
 80073f4:	40000800 	.word	0x40000800
 80073f8:	40000c00 	.word	0x40000c00
 80073fc:	40010400 	.word	0x40010400
 8007400:	40014000 	.word	0x40014000
 8007404:	40001800 	.word	0x40001800

08007408 <memset>:
 8007408:	4402      	add	r2, r0
 800740a:	4603      	mov	r3, r0
 800740c:	4293      	cmp	r3, r2
 800740e:	d100      	bne.n	8007412 <memset+0xa>
 8007410:	4770      	bx	lr
 8007412:	f803 1b01 	strb.w	r1, [r3], #1
 8007416:	e7f9      	b.n	800740c <memset+0x4>

08007418 <__libc_init_array>:
 8007418:	b570      	push	{r4, r5, r6, lr}
 800741a:	4d0d      	ldr	r5, [pc, #52]	@ (8007450 <__libc_init_array+0x38>)
 800741c:	4c0d      	ldr	r4, [pc, #52]	@ (8007454 <__libc_init_array+0x3c>)
 800741e:	1b64      	subs	r4, r4, r5
 8007420:	10a4      	asrs	r4, r4, #2
 8007422:	2600      	movs	r6, #0
 8007424:	42a6      	cmp	r6, r4
 8007426:	d109      	bne.n	800743c <__libc_init_array+0x24>
 8007428:	4d0b      	ldr	r5, [pc, #44]	@ (8007458 <__libc_init_array+0x40>)
 800742a:	4c0c      	ldr	r4, [pc, #48]	@ (800745c <__libc_init_array+0x44>)
 800742c:	f000 f818 	bl	8007460 <_init>
 8007430:	1b64      	subs	r4, r4, r5
 8007432:	10a4      	asrs	r4, r4, #2
 8007434:	2600      	movs	r6, #0
 8007436:	42a6      	cmp	r6, r4
 8007438:	d105      	bne.n	8007446 <__libc_init_array+0x2e>
 800743a:	bd70      	pop	{r4, r5, r6, pc}
 800743c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007440:	4798      	blx	r3
 8007442:	3601      	adds	r6, #1
 8007444:	e7ee      	b.n	8007424 <__libc_init_array+0xc>
 8007446:	f855 3b04 	ldr.w	r3, [r5], #4
 800744a:	4798      	blx	r3
 800744c:	3601      	adds	r6, #1
 800744e:	e7f2      	b.n	8007436 <__libc_init_array+0x1e>
 8007450:	08008f68 	.word	0x08008f68
 8007454:	08008f68 	.word	0x08008f68
 8007458:	08008f68 	.word	0x08008f68
 800745c:	08008f6c 	.word	0x08008f6c

08007460 <_init>:
 8007460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007462:	bf00      	nop
 8007464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007466:	bc08      	pop	{r3}
 8007468:	469e      	mov	lr, r3
 800746a:	4770      	bx	lr

0800746c <_fini>:
 800746c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800746e:	bf00      	nop
 8007470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007472:	bc08      	pop	{r3}
 8007474:	469e      	mov	lr, r3
 8007476:	4770      	bx	lr
