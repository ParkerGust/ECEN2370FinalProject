
ECEN2370_StarterCode_SP25.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064b0  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ae8  0800665c  0800665c  0000765c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008144  08008144  0000a028  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008144  08008144  00009144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800814c  0800814c  0000a028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800814c  0800814c  0000914c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008150  08008150  00009150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000028  20000000  08008154  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a028  2**0
                  CONTENTS
 10 .bss          00025a4c  20000028  20000028  0000a028  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20025a74  20025a74  0000a028  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a028  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f9f3  00000000  00000000  0000a058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c07  00000000  00000000  00019a4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e70  00000000  00000000  0001c658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000af7  00000000  00000000  0001d4c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026bf2  00000000  00000000  0001dfbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012609  00000000  00000000  00044bb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1bc0  00000000  00000000  000571ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00138d7a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003a70  00000000  00000000  00138dc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  0013c830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000028 	.word	0x20000028
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08006644 	.word	0x08006644

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000002c 	.word	0x2000002c
 80001e8:	08006644 	.word	0x08006644

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b988 	b.w	8000514 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	468e      	mov	lr, r1
 8000224:	4604      	mov	r4, r0
 8000226:	4688      	mov	r8, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d962      	bls.n	80002f8 <__udivmoddi4+0xdc>
 8000232:	fab2 f682 	clz	r6, r2
 8000236:	b14e      	cbz	r6, 800024c <__udivmoddi4+0x30>
 8000238:	f1c6 0320 	rsb	r3, r6, #32
 800023c:	fa01 f806 	lsl.w	r8, r1, r6
 8000240:	fa20 f303 	lsr.w	r3, r0, r3
 8000244:	40b7      	lsls	r7, r6
 8000246:	ea43 0808 	orr.w	r8, r3, r8
 800024a:	40b4      	lsls	r4, r6
 800024c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000250:	fa1f fc87 	uxth.w	ip, r7
 8000254:	fbb8 f1fe 	udiv	r1, r8, lr
 8000258:	0c23      	lsrs	r3, r4, #16
 800025a:	fb0e 8811 	mls	r8, lr, r1, r8
 800025e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000262:	fb01 f20c 	mul.w	r2, r1, ip
 8000266:	429a      	cmp	r2, r3
 8000268:	d909      	bls.n	800027e <__udivmoddi4+0x62>
 800026a:	18fb      	adds	r3, r7, r3
 800026c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000270:	f080 80ea 	bcs.w	8000448 <__udivmoddi4+0x22c>
 8000274:	429a      	cmp	r2, r3
 8000276:	f240 80e7 	bls.w	8000448 <__udivmoddi4+0x22c>
 800027a:	3902      	subs	r1, #2
 800027c:	443b      	add	r3, r7
 800027e:	1a9a      	subs	r2, r3, r2
 8000280:	b2a3      	uxth	r3, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800028e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000292:	459c      	cmp	ip, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x8e>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f100 32ff 	add.w	r2, r0, #4294967295
 800029c:	f080 80d6 	bcs.w	800044c <__udivmoddi4+0x230>
 80002a0:	459c      	cmp	ip, r3
 80002a2:	f240 80d3 	bls.w	800044c <__udivmoddi4+0x230>
 80002a6:	443b      	add	r3, r7
 80002a8:	3802      	subs	r0, #2
 80002aa:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002ae:	eba3 030c 	sub.w	r3, r3, ip
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11d      	cbz	r5, 80002be <__udivmoddi4+0xa2>
 80002b6:	40f3      	lsrs	r3, r6
 80002b8:	2200      	movs	r2, #0
 80002ba:	e9c5 3200 	strd	r3, r2, [r5]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d905      	bls.n	80002d2 <__udivmoddi4+0xb6>
 80002c6:	b10d      	cbz	r5, 80002cc <__udivmoddi4+0xb0>
 80002c8:	e9c5 0100 	strd	r0, r1, [r5]
 80002cc:	2100      	movs	r1, #0
 80002ce:	4608      	mov	r0, r1
 80002d0:	e7f5      	b.n	80002be <__udivmoddi4+0xa2>
 80002d2:	fab3 f183 	clz	r1, r3
 80002d6:	2900      	cmp	r1, #0
 80002d8:	d146      	bne.n	8000368 <__udivmoddi4+0x14c>
 80002da:	4573      	cmp	r3, lr
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xc8>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 8105 	bhi.w	80004ee <__udivmoddi4+0x2d2>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	4690      	mov	r8, r2
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e5      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f2:	e9c5 4800 	strd	r4, r8, [r5]
 80002f6:	e7e2      	b.n	80002be <__udivmoddi4+0xa2>
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f000 8090 	beq.w	800041e <__udivmoddi4+0x202>
 80002fe:	fab2 f682 	clz	r6, r2
 8000302:	2e00      	cmp	r6, #0
 8000304:	f040 80a4 	bne.w	8000450 <__udivmoddi4+0x234>
 8000308:	1a8a      	subs	r2, r1, r2
 800030a:	0c03      	lsrs	r3, r0, #16
 800030c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000310:	b280      	uxth	r0, r0
 8000312:	b2bc      	uxth	r4, r7
 8000314:	2101      	movs	r1, #1
 8000316:	fbb2 fcfe 	udiv	ip, r2, lr
 800031a:	fb0e 221c 	mls	r2, lr, ip, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb04 f20c 	mul.w	r2, r4, ip
 8000326:	429a      	cmp	r2, r3
 8000328:	d907      	bls.n	800033a <__udivmoddi4+0x11e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000330:	d202      	bcs.n	8000338 <__udivmoddi4+0x11c>
 8000332:	429a      	cmp	r2, r3
 8000334:	f200 80e0 	bhi.w	80004f8 <__udivmoddi4+0x2dc>
 8000338:	46c4      	mov	ip, r8
 800033a:	1a9b      	subs	r3, r3, r2
 800033c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000340:	fb0e 3312 	mls	r3, lr, r2, r3
 8000344:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000348:	fb02 f404 	mul.w	r4, r2, r4
 800034c:	429c      	cmp	r4, r3
 800034e:	d907      	bls.n	8000360 <__udivmoddi4+0x144>
 8000350:	18fb      	adds	r3, r7, r3
 8000352:	f102 30ff 	add.w	r0, r2, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x142>
 8000358:	429c      	cmp	r4, r3
 800035a:	f200 80ca 	bhi.w	80004f2 <__udivmoddi4+0x2d6>
 800035e:	4602      	mov	r2, r0
 8000360:	1b1b      	subs	r3, r3, r4
 8000362:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000366:	e7a5      	b.n	80002b4 <__udivmoddi4+0x98>
 8000368:	f1c1 0620 	rsb	r6, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 f706 	lsr.w	r7, r2, r6
 8000372:	431f      	orrs	r7, r3
 8000374:	fa0e f401 	lsl.w	r4, lr, r1
 8000378:	fa20 f306 	lsr.w	r3, r0, r6
 800037c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000380:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	fa1f fc87 	uxth.w	ip, r7
 800038e:	fbbe f0f9 	udiv	r0, lr, r9
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	fb09 ee10 	mls	lr, r9, r0, lr
 8000398:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800039c:	fb00 fe0c 	mul.w	lr, r0, ip
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	fa02 f201 	lsl.w	r2, r2, r1
 80003a6:	d909      	bls.n	80003bc <__udivmoddi4+0x1a0>
 80003a8:	193c      	adds	r4, r7, r4
 80003aa:	f100 3aff 	add.w	sl, r0, #4294967295
 80003ae:	f080 809c 	bcs.w	80004ea <__udivmoddi4+0x2ce>
 80003b2:	45a6      	cmp	lr, r4
 80003b4:	f240 8099 	bls.w	80004ea <__udivmoddi4+0x2ce>
 80003b8:	3802      	subs	r0, #2
 80003ba:	443c      	add	r4, r7
 80003bc:	eba4 040e 	sub.w	r4, r4, lr
 80003c0:	fa1f fe83 	uxth.w	lr, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003d0:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d4:	45a4      	cmp	ip, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1ce>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f103 3eff 	add.w	lr, r3, #4294967295
 80003de:	f080 8082 	bcs.w	80004e6 <__udivmoddi4+0x2ca>
 80003e2:	45a4      	cmp	ip, r4
 80003e4:	d97f      	bls.n	80004e6 <__udivmoddi4+0x2ca>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	443c      	add	r4, r7
 80003ea:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ee:	eba4 040c 	sub.w	r4, r4, ip
 80003f2:	fba0 ec02 	umull	lr, ip, r0, r2
 80003f6:	4564      	cmp	r4, ip
 80003f8:	4673      	mov	r3, lr
 80003fa:	46e1      	mov	r9, ip
 80003fc:	d362      	bcc.n	80004c4 <__udivmoddi4+0x2a8>
 80003fe:	d05f      	beq.n	80004c0 <__udivmoddi4+0x2a4>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x1fe>
 8000402:	ebb8 0203 	subs.w	r2, r8, r3
 8000406:	eb64 0409 	sbc.w	r4, r4, r9
 800040a:	fa04 f606 	lsl.w	r6, r4, r6
 800040e:	fa22 f301 	lsr.w	r3, r2, r1
 8000412:	431e      	orrs	r6, r3
 8000414:	40cc      	lsrs	r4, r1
 8000416:	e9c5 6400 	strd	r6, r4, [r5]
 800041a:	2100      	movs	r1, #0
 800041c:	e74f      	b.n	80002be <__udivmoddi4+0xa2>
 800041e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000422:	0c01      	lsrs	r1, r0, #16
 8000424:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000428:	b280      	uxth	r0, r0
 800042a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800042e:	463b      	mov	r3, r7
 8000430:	4638      	mov	r0, r7
 8000432:	463c      	mov	r4, r7
 8000434:	46b8      	mov	r8, r7
 8000436:	46be      	mov	lr, r7
 8000438:	2620      	movs	r6, #32
 800043a:	fbb1 f1f7 	udiv	r1, r1, r7
 800043e:	eba2 0208 	sub.w	r2, r2, r8
 8000442:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000446:	e766      	b.n	8000316 <__udivmoddi4+0xfa>
 8000448:	4601      	mov	r1, r0
 800044a:	e718      	b.n	800027e <__udivmoddi4+0x62>
 800044c:	4610      	mov	r0, r2
 800044e:	e72c      	b.n	80002aa <__udivmoddi4+0x8e>
 8000450:	f1c6 0220 	rsb	r2, r6, #32
 8000454:	fa2e f302 	lsr.w	r3, lr, r2
 8000458:	40b7      	lsls	r7, r6
 800045a:	40b1      	lsls	r1, r6
 800045c:	fa20 f202 	lsr.w	r2, r0, r2
 8000460:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000464:	430a      	orrs	r2, r1
 8000466:	fbb3 f8fe 	udiv	r8, r3, lr
 800046a:	b2bc      	uxth	r4, r7
 800046c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000470:	0c11      	lsrs	r1, r2, #16
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb08 f904 	mul.w	r9, r8, r4
 800047a:	40b0      	lsls	r0, r6
 800047c:	4589      	cmp	r9, r1
 800047e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000482:	b280      	uxth	r0, r0
 8000484:	d93e      	bls.n	8000504 <__udivmoddi4+0x2e8>
 8000486:	1879      	adds	r1, r7, r1
 8000488:	f108 3cff 	add.w	ip, r8, #4294967295
 800048c:	d201      	bcs.n	8000492 <__udivmoddi4+0x276>
 800048e:	4589      	cmp	r9, r1
 8000490:	d81f      	bhi.n	80004d2 <__udivmoddi4+0x2b6>
 8000492:	eba1 0109 	sub.w	r1, r1, r9
 8000496:	fbb1 f9fe 	udiv	r9, r1, lr
 800049a:	fb09 f804 	mul.w	r8, r9, r4
 800049e:	fb0e 1119 	mls	r1, lr, r9, r1
 80004a2:	b292      	uxth	r2, r2
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	4542      	cmp	r2, r8
 80004aa:	d229      	bcs.n	8000500 <__udivmoddi4+0x2e4>
 80004ac:	18ba      	adds	r2, r7, r2
 80004ae:	f109 31ff 	add.w	r1, r9, #4294967295
 80004b2:	d2c4      	bcs.n	800043e <__udivmoddi4+0x222>
 80004b4:	4542      	cmp	r2, r8
 80004b6:	d2c2      	bcs.n	800043e <__udivmoddi4+0x222>
 80004b8:	f1a9 0102 	sub.w	r1, r9, #2
 80004bc:	443a      	add	r2, r7
 80004be:	e7be      	b.n	800043e <__udivmoddi4+0x222>
 80004c0:	45f0      	cmp	r8, lr
 80004c2:	d29d      	bcs.n	8000400 <__udivmoddi4+0x1e4>
 80004c4:	ebbe 0302 	subs.w	r3, lr, r2
 80004c8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004cc:	3801      	subs	r0, #1
 80004ce:	46e1      	mov	r9, ip
 80004d0:	e796      	b.n	8000400 <__udivmoddi4+0x1e4>
 80004d2:	eba7 0909 	sub.w	r9, r7, r9
 80004d6:	4449      	add	r1, r9
 80004d8:	f1a8 0c02 	sub.w	ip, r8, #2
 80004dc:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e0:	fb09 f804 	mul.w	r8, r9, r4
 80004e4:	e7db      	b.n	800049e <__udivmoddi4+0x282>
 80004e6:	4673      	mov	r3, lr
 80004e8:	e77f      	b.n	80003ea <__udivmoddi4+0x1ce>
 80004ea:	4650      	mov	r0, sl
 80004ec:	e766      	b.n	80003bc <__udivmoddi4+0x1a0>
 80004ee:	4608      	mov	r0, r1
 80004f0:	e6fd      	b.n	80002ee <__udivmoddi4+0xd2>
 80004f2:	443b      	add	r3, r7
 80004f4:	3a02      	subs	r2, #2
 80004f6:	e733      	b.n	8000360 <__udivmoddi4+0x144>
 80004f8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004fc:	443b      	add	r3, r7
 80004fe:	e71c      	b.n	800033a <__udivmoddi4+0x11e>
 8000500:	4649      	mov	r1, r9
 8000502:	e79c      	b.n	800043e <__udivmoddi4+0x222>
 8000504:	eba1 0109 	sub.w	r1, r1, r9
 8000508:	46c4      	mov	ip, r8
 800050a:	fbb1 f9fe 	udiv	r9, r1, lr
 800050e:	fb09 f804 	mul.w	r8, r9, r4
 8000512:	e7c4      	b.n	800049e <__udivmoddi4+0x282>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <ApplicationInit>:
#define FIRST_NAME_LENGTH 6

extern void initialise_monitor_handles(void); 

void ApplicationInit(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 800051c:	f002 fdc8 	bl	80030b0 <initialise_monitor_handles>
    LTCD__Init();
 8000520:	f001 fb22 	bl	8001b68 <LTCD__Init>
    LTCD_Layer_Init(0);
 8000524:	2000      	movs	r0, #0
 8000526:	f001 fadf 	bl	8001ae8 <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_WHITE);
 800052a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800052e:	2000      	movs	r0, #0
 8000530:	f001 fbea 	bl	8001d08 <LCD_Clear>
	InitializeLCDTouch();
 8000534:	f001 fcc0 	bl	8001eb8 <InitializeLCDTouch>
	Gyro_Init();
 8000538:	f001 f876 	bl	8001628 <Gyro_Init>
	Button_Init_Interrupt();
 800053c:	f001 f84a 	bl	80015d4 <Button_Init_Interrupt>
	initialGyroLoc = Gyro_GetYLoc();
 8000540:	f001 f94e 	bl	80017e0 <Gyro_GetYLoc>
 8000544:	4603      	mov	r3, r0
 8000546:	461a      	mov	r2, r3
 8000548:	4b02      	ldr	r3, [pc, #8]	@ (8000554 <ApplicationInit+0x3c>)
 800054a:	801a      	strh	r2, [r3, #0]
	startGame();
 800054c:	f000 f804 	bl	8000558 <startGame>
}
 8000550:	bf00      	nop
 8000552:	bd80      	pop	{r7, pc}
 8000554:	20000082 	.word	0x20000082

08000558 <startGame>:

void startGame(void){
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
	Screen1_Display();
 800055c:	f000 fa56 	bl	8000a0c <Screen1_Display>
	checkPlayerMode();
 8000560:	f000 f85c 	bl	800061c <checkPlayerMode>
	startTimer();
 8000564:	f000 fa30 	bl	80009c8 <startTimer>
	winner = 0;
 8000568:	4b04      	ldr	r3, [pc, #16]	@ (800057c <startGame+0x24>)
 800056a:	2200      	movs	r2, #0
 800056c:	701a      	strb	r2, [r3, #0]
	newGame();
 800056e:	f000 f873 	bl	8000658 <newGame>
	playGame();
 8000572:	f000 f805 	bl	8000580 <playGame>
}
 8000576:	bf00      	nop
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	20000044 	.word	0x20000044

08000580 <playGame>:

void playGame(void){
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	while (winner == 0){
 8000584:	e022      	b.n	80005cc <playGame+0x4c>
		Screen2_Display();
 8000586:	f000 fafb 	bl	8000b80 <Screen2_Display>
		if(TwoPlayerMode == false && player1turn == false){
 800058a:	4b1e      	ldr	r3, [pc, #120]	@ (8000604 <playGame+0x84>)
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	f083 0301 	eor.w	r3, r3, #1
 8000592:	b2db      	uxtb	r3, r3
 8000594:	2b00      	cmp	r3, #0
 8000596:	d00f      	beq.n	80005b8 <playGame+0x38>
 8000598:	4b1b      	ldr	r3, [pc, #108]	@ (8000608 <playGame+0x88>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	f083 0301 	eor.w	r3, r3, #1
 80005a0:	b2db      	uxtb	r3, r3
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d008      	beq.n	80005b8 <playGame+0x38>
			chipLoc = moveAI();
 80005a6:	f000 fdcb 	bl	8001140 <moveAI>
 80005aa:	4603      	mov	r3, r0
 80005ac:	461a      	mov	r2, r3
 80005ae:	4b17      	ldr	r3, [pc, #92]	@ (800060c <playGame+0x8c>)
 80005b0:	701a      	strb	r2, [r3, #0]
			drop();
 80005b2:	f000 f891 	bl	80006d8 <drop>
 80005b6:	e001      	b.n	80005bc <playGame+0x3c>
		}
		else{
			moveGyro();
 80005b8:	f000 f8e6 	bl	8000788 <moveGyro>
		}
		Screen2_Display();
 80005bc:	f000 fae0 	bl	8000b80 <Screen2_Display>
		winner = checkState();
 80005c0:	f000 f942 	bl	8000848 <checkState>
 80005c4:	4603      	mov	r3, r0
 80005c6:	461a      	mov	r2, r3
 80005c8:	4b11      	ldr	r3, [pc, #68]	@ (8000610 <playGame+0x90>)
 80005ca:	701a      	strb	r2, [r3, #0]
	while (winner == 0){
 80005cc:	4b10      	ldr	r3, [pc, #64]	@ (8000610 <playGame+0x90>)
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d0d8      	beq.n	8000586 <playGame+0x6>
	}
	if(winner == 1){
 80005d4:	4b0e      	ldr	r3, [pc, #56]	@ (8000610 <playGame+0x90>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d106      	bne.n	80005ea <playGame+0x6a>
		player1_Score++;
 80005dc:	4b0d      	ldr	r3, [pc, #52]	@ (8000614 <playGame+0x94>)
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	3301      	adds	r3, #1
 80005e2:	b2da      	uxtb	r2, r3
 80005e4:	4b0b      	ldr	r3, [pc, #44]	@ (8000614 <playGame+0x94>)
 80005e6:	701a      	strb	r2, [r3, #0]
 80005e8:	e005      	b.n	80005f6 <playGame+0x76>
	}
	else{
		player2_Score++;
 80005ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000618 <playGame+0x98>)
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	3301      	adds	r3, #1
 80005f0:	b2da      	uxtb	r2, r3
 80005f2:	4b09      	ldr	r3, [pc, #36]	@ (8000618 <playGame+0x98>)
 80005f4:	701a      	strb	r2, [r3, #0]
	}
	endTimer();
 80005f6:	f000 f9f3 	bl	80009e0 <endTimer>
	Screen3_Display();
 80005fa:	f000 fbaf 	bl	8000d5c <Screen3_Display>
}
 80005fe:	bf00      	nop
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	20000054 	.word	0x20000054
 8000608:	20000001 	.word	0x20000001
 800060c:	20000000 	.word	0x20000000
 8000610:	20000044 	.word	0x20000044
 8000614:	20000045 	.word	0x20000045
 8000618:	20000046 	.word	0x20000046

0800061c <checkPlayerMode>:


void checkPlayerMode(void){
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
	STMPE811_TouchData touch;
	touch.pressed = STMPE811_State_Released;
 8000622:	2301      	movs	r3, #1
 8000624:	713b      	strb	r3, [r7, #4]
	while(touch.pressed == STMPE811_State_Released){
 8000626:	e003      	b.n	8000630 <checkPlayerMode+0x14>
		returnTouchStateAndLocation(&touch);
 8000628:	463b      	mov	r3, r7
 800062a:	4618      	mov	r0, r3
 800062c:	f001 fc4f 	bl	8001ece <returnTouchStateAndLocation>
	while(touch.pressed == STMPE811_State_Released){
 8000630:	793b      	ldrb	r3, [r7, #4]
 8000632:	2b01      	cmp	r3, #1
 8000634:	d0f8      	beq.n	8000628 <checkPlayerMode+0xc>
	}
	if (touch.x > LCD_PIXEL_WIDTH/2){
 8000636:	883b      	ldrh	r3, [r7, #0]
 8000638:	2b78      	cmp	r3, #120	@ 0x78
 800063a:	d903      	bls.n	8000644 <checkPlayerMode+0x28>
		TwoPlayerMode = LEFT_TOUCH;
 800063c:	4b05      	ldr	r3, [pc, #20]	@ (8000654 <checkPlayerMode+0x38>)
 800063e:	2200      	movs	r2, #0
 8000640:	701a      	strb	r2, [r3, #0]
	}
	else{
		TwoPlayerMode = RIGHT_TOUCH;
	}
}
 8000642:	e002      	b.n	800064a <checkPlayerMode+0x2e>
		TwoPlayerMode = RIGHT_TOUCH;
 8000644:	4b03      	ldr	r3, [pc, #12]	@ (8000654 <checkPlayerMode+0x38>)
 8000646:	2201      	movs	r2, #1
 8000648:	701a      	strb	r2, [r3, #0]
}
 800064a:	bf00      	nop
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	20000054 	.word	0x20000054

08000658 <newGame>:

void newGame(void){
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
	startTimer();
 800065e:	f000 f9b3 	bl	80009c8 <startTimer>
	LCD_Clear(0, LCD_COLOR_GREY);
 8000662:	f24f 71de 	movw	r1, #63454	@ 0xf7de
 8000666:	2000      	movs	r0, #0
 8000668:	f001 fb4e 	bl	8001d08 <LCD_Clear>
	if (startPlayer1 == true){
 800066c:	4b17      	ldr	r3, [pc, #92]	@ (80006cc <newGame+0x74>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d003      	beq.n	800067c <newGame+0x24>
		startPlayer1 = false;
 8000674:	4b15      	ldr	r3, [pc, #84]	@ (80006cc <newGame+0x74>)
 8000676:	2200      	movs	r2, #0
 8000678:	701a      	strb	r2, [r3, #0]
 800067a:	e002      	b.n	8000682 <newGame+0x2a>
	}
	else{
		startPlayer1 = true;
 800067c:	4b13      	ldr	r3, [pc, #76]	@ (80006cc <newGame+0x74>)
 800067e:	2201      	movs	r2, #1
 8000680:	701a      	strb	r2, [r3, #0]
	}
	winner = 0;
 8000682:	4b13      	ldr	r3, [pc, #76]	@ (80006d0 <newGame+0x78>)
 8000684:	2200      	movs	r2, #0
 8000686:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i<boardColumns; i++){
 8000688:	2300      	movs	r3, #0
 800068a:	607b      	str	r3, [r7, #4]
 800068c:	e016      	b.n	80006bc <newGame+0x64>
		for (int j = 0; j<boardRows; j++){
 800068e:	2300      	movs	r3, #0
 8000690:	603b      	str	r3, [r7, #0]
 8000692:	e00d      	b.n	80006b0 <newGame+0x58>
	        gameBoard[i][j] = 0;
 8000694:	490f      	ldr	r1, [pc, #60]	@ (80006d4 <newGame+0x7c>)
 8000696:	687a      	ldr	r2, [r7, #4]
 8000698:	4613      	mov	r3, r2
 800069a:	005b      	lsls	r3, r3, #1
 800069c:	4413      	add	r3, r2
 800069e:	005b      	lsls	r3, r3, #1
 80006a0:	18ca      	adds	r2, r1, r3
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	4413      	add	r3, r2
 80006a6:	2200      	movs	r2, #0
 80006a8:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j<boardRows; j++){
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	3301      	adds	r3, #1
 80006ae:	603b      	str	r3, [r7, #0]
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	2b05      	cmp	r3, #5
 80006b4:	ddee      	ble.n	8000694 <newGame+0x3c>
	for (int i = 0; i<boardColumns; i++){
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	3301      	adds	r3, #1
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	2b06      	cmp	r3, #6
 80006c0:	dde5      	ble.n	800068e <newGame+0x36>
		}
	}
}
 80006c2:	bf00      	nop
 80006c4:	bf00      	nop
 80006c6:	3708      	adds	r7, #8
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	20000002 	.word	0x20000002
 80006d0:	20000044 	.word	0x20000044
 80006d4:	20000058 	.word	0x20000058

080006d8 <drop>:


void drop(void){
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
    int j = 0;
 80006de:	2300      	movs	r3, #0
 80006e0:	607b      	str	r3, [r7, #4]
    while (gameBoard[chipLoc][j] == 0 && j<6){
 80006e2:	e002      	b.n	80006ea <drop+0x12>
        j++;
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	3301      	adds	r3, #1
 80006e8:	607b      	str	r3, [r7, #4]
    while (gameBoard[chipLoc][j] == 0 && j<6){
 80006ea:	4b23      	ldr	r3, [pc, #140]	@ (8000778 <drop+0xa0>)
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	4619      	mov	r1, r3
 80006f0:	4a22      	ldr	r2, [pc, #136]	@ (800077c <drop+0xa4>)
 80006f2:	460b      	mov	r3, r1
 80006f4:	005b      	lsls	r3, r3, #1
 80006f6:	440b      	add	r3, r1
 80006f8:	005b      	lsls	r3, r3, #1
 80006fa:	441a      	add	r2, r3
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	4413      	add	r3, r2
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d102      	bne.n	800070c <drop+0x34>
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	2b05      	cmp	r3, #5
 800070a:	ddeb      	ble.n	80006e4 <drop+0xc>
    }
    if(j>0){
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	2b00      	cmp	r3, #0
 8000710:	dd2c      	ble.n	800076c <drop+0x94>
		if (player1turn){
 8000712:	4b1b      	ldr	r3, [pc, #108]	@ (8000780 <drop+0xa8>)
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	2b00      	cmp	r3, #0
 8000718:	d011      	beq.n	800073e <drop+0x66>
			gameBoard[chipLoc][j-1] = 1;
 800071a:	4b17      	ldr	r3, [pc, #92]	@ (8000778 <drop+0xa0>)
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	4618      	mov	r0, r3
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	1e5a      	subs	r2, r3, #1
 8000724:	4915      	ldr	r1, [pc, #84]	@ (800077c <drop+0xa4>)
 8000726:	4603      	mov	r3, r0
 8000728:	005b      	lsls	r3, r3, #1
 800072a:	4403      	add	r3, r0
 800072c:	005b      	lsls	r3, r3, #1
 800072e:	440b      	add	r3, r1
 8000730:	4413      	add	r3, r2
 8000732:	2201      	movs	r2, #1
 8000734:	701a      	strb	r2, [r3, #0]
			player1turn = false;
 8000736:	4b12      	ldr	r3, [pc, #72]	@ (8000780 <drop+0xa8>)
 8000738:	2200      	movs	r2, #0
 800073a:	701a      	strb	r2, [r3, #0]
 800073c:	e010      	b.n	8000760 <drop+0x88>
		}
		else{
			gameBoard[chipLoc][j-1] = 2;
 800073e:	4b0e      	ldr	r3, [pc, #56]	@ (8000778 <drop+0xa0>)
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	4618      	mov	r0, r3
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	1e5a      	subs	r2, r3, #1
 8000748:	490c      	ldr	r1, [pc, #48]	@ (800077c <drop+0xa4>)
 800074a:	4603      	mov	r3, r0
 800074c:	005b      	lsls	r3, r3, #1
 800074e:	4403      	add	r3, r0
 8000750:	005b      	lsls	r3, r3, #1
 8000752:	440b      	add	r3, r1
 8000754:	4413      	add	r3, r2
 8000756:	2202      	movs	r2, #2
 8000758:	701a      	strb	r2, [r3, #0]
			player1turn = true;
 800075a:	4b09      	ldr	r3, [pc, #36]	@ (8000780 <drop+0xa8>)
 800075c:	2201      	movs	r2, #1
 800075e:	701a      	strb	r2, [r3, #0]
		}
		chipLoc = 3;
 8000760:	4b05      	ldr	r3, [pc, #20]	@ (8000778 <drop+0xa0>)
 8000762:	2203      	movs	r2, #3
 8000764:	701a      	strb	r2, [r3, #0]
		dropped = true;
 8000766:	4b07      	ldr	r3, [pc, #28]	@ (8000784 <drop+0xac>)
 8000768:	2201      	movs	r2, #1
 800076a:	701a      	strb	r2, [r3, #0]
    }
}
 800076c:	bf00      	nop
 800076e:	370c      	adds	r7, #12
 8000770:	46bd      	mov	sp, r7
 8000772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000776:	4770      	bx	lr
 8000778:	20000000 	.word	0x20000000
 800077c:	20000058 	.word	0x20000058
 8000780:	20000001 	.word	0x20000001
 8000784:	20000055 	.word	0x20000055

08000788 <moveGyro>:
            chipLoc--;
        }
    }
}

void moveGyro(void){
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
    int16_t gyroLoc;
    gyroLoc = Gyro_GetYLoc();
 800078e:	f001 f827 	bl	80017e0 <Gyro_GetYLoc>
 8000792:	4603      	mov	r3, r0
 8000794:	80fb      	strh	r3, [r7, #6]
    while((initialGyroLoc+500)>gyroLoc && (initialGyroLoc-500)<gyroLoc && dropped == false){
 8000796:	e003      	b.n	80007a0 <moveGyro+0x18>
    	gyroLoc = Gyro_GetYLoc();
 8000798:	f001 f822 	bl	80017e0 <Gyro_GetYLoc>
 800079c:	4603      	mov	r3, r0
 800079e:	80fb      	strh	r3, [r7, #6]
    while((initialGyroLoc+500)>gyroLoc && (initialGyroLoc-500)<gyroLoc && dropped == false){
 80007a0:	4b26      	ldr	r3, [pc, #152]	@ (800083c <moveGyro+0xb4>)
 80007a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007a6:	f203 12f3 	addw	r2, r3, #499	@ 0x1f3
 80007aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007ae:	429a      	cmp	r2, r3
 80007b0:	db0f      	blt.n	80007d2 <moveGyro+0x4a>
 80007b2:	4b22      	ldr	r3, [pc, #136]	@ (800083c <moveGyro+0xb4>)
 80007b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007b8:	f2a3 12f3 	subw	r2, r3, #499	@ 0x1f3
 80007bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007c0:	429a      	cmp	r2, r3
 80007c2:	dc06      	bgt.n	80007d2 <moveGyro+0x4a>
 80007c4:	4b1e      	ldr	r3, [pc, #120]	@ (8000840 <moveGyro+0xb8>)
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	f083 0301 	eor.w	r3, r3, #1
 80007cc:	b2db      	uxtb	r3, r3
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d1e2      	bne.n	8000798 <moveGyro+0x10>
    }
    if((initialGyroLoc+500)<gyroLoc || (initialGyroLoc-500)>gyroLoc){
 80007d2:	4b1a      	ldr	r3, [pc, #104]	@ (800083c <moveGyro+0xb4>)
 80007d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007d8:	f503 72fa 	add.w	r2, r3, #500	@ 0x1f4
 80007dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007e0:	429a      	cmp	r2, r3
 80007e2:	db08      	blt.n	80007f6 <moveGyro+0x6e>
 80007e4:	4b15      	ldr	r3, [pc, #84]	@ (800083c <moveGyro+0xb4>)
 80007e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007ea:	f5a3 72fa 	sub.w	r2, r3, #500	@ 0x1f4
 80007ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007f2:	429a      	cmp	r2, r3
 80007f4:	dd1d      	ble.n	8000832 <moveGyro+0xaa>
        if ((initialGyroLoc+500)<gyroLoc && chipLoc<6){
 80007f6:	4b11      	ldr	r3, [pc, #68]	@ (800083c <moveGyro+0xb4>)
 80007f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007fc:	f503 72fa 	add.w	r2, r3, #500	@ 0x1f4
 8000800:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000804:	429a      	cmp	r2, r3
 8000806:	da0a      	bge.n	800081e <moveGyro+0x96>
 8000808:	4b0e      	ldr	r3, [pc, #56]	@ (8000844 <moveGyro+0xbc>)
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	2b05      	cmp	r3, #5
 800080e:	d806      	bhi.n	800081e <moveGyro+0x96>
            chipLoc++;
 8000810:	4b0c      	ldr	r3, [pc, #48]	@ (8000844 <moveGyro+0xbc>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	3301      	adds	r3, #1
 8000816:	b2da      	uxtb	r2, r3
 8000818:	4b0a      	ldr	r3, [pc, #40]	@ (8000844 <moveGyro+0xbc>)
 800081a:	701a      	strb	r2, [r3, #0]
        }
        else if(chipLoc > 0){
            chipLoc--;
        }
    }
}
 800081c:	e009      	b.n	8000832 <moveGyro+0xaa>
        else if(chipLoc > 0){
 800081e:	4b09      	ldr	r3, [pc, #36]	@ (8000844 <moveGyro+0xbc>)
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d005      	beq.n	8000832 <moveGyro+0xaa>
            chipLoc--;
 8000826:	4b07      	ldr	r3, [pc, #28]	@ (8000844 <moveGyro+0xbc>)
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	3b01      	subs	r3, #1
 800082c:	b2da      	uxtb	r2, r3
 800082e:	4b05      	ldr	r3, [pc, #20]	@ (8000844 <moveGyro+0xbc>)
 8000830:	701a      	strb	r2, [r3, #0]
}
 8000832:	bf00      	nop
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	20000082 	.word	0x20000082
 8000840:	20000055 	.word	0x20000055
 8000844:	20000000 	.word	0x20000000

08000848 <checkState>:

uint8_t checkState(void){
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af00      	add	r7, sp, #0
    int playerChecking = 0;
 800084e:	2300      	movs	r3, #0
 8000850:	607b      	str	r3, [r7, #4]
    dropped = false;
 8000852:	4b2c      	ldr	r3, [pc, #176]	@ (8000904 <checkState+0xbc>)
 8000854:	2200      	movs	r2, #0
 8000856:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i< boardColumns; i++){
 8000858:	2300      	movs	r3, #0
 800085a:	60fb      	str	r3, [r7, #12]
 800085c:	e049      	b.n	80008f2 <checkState+0xaa>
        for (int j = 0; j < boardRows; j++){
 800085e:	2300      	movs	r3, #0
 8000860:	60bb      	str	r3, [r7, #8]
 8000862:	e040      	b.n	80008e6 <checkState+0x9e>
            playerChecking = gameBoard[i][j];
 8000864:	4928      	ldr	r1, [pc, #160]	@ (8000908 <checkState+0xc0>)
 8000866:	68fa      	ldr	r2, [r7, #12]
 8000868:	4613      	mov	r3, r2
 800086a:	005b      	lsls	r3, r3, #1
 800086c:	4413      	add	r3, r2
 800086e:	005b      	lsls	r3, r3, #1
 8000870:	18ca      	adds	r2, r1, r3
 8000872:	68bb      	ldr	r3, [r7, #8]
 8000874:	4413      	add	r3, r2
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	607b      	str	r3, [r7, #4]
            if (playerChecking != 0){
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d02f      	beq.n	80008e0 <checkState+0x98>
                if (checkDirection(i, j, 1, 0)|| //checking horizontal
 8000880:	2300      	movs	r3, #0
 8000882:	2201      	movs	r2, #1
 8000884:	68b9      	ldr	r1, [r7, #8]
 8000886:	68f8      	ldr	r0, [r7, #12]
 8000888:	f000 f840 	bl	800090c <checkDirection>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d11b      	bne.n	80008ca <checkState+0x82>
                    checkDirection(i, j, 0, 1)|| //checking vertical 
 8000892:	2301      	movs	r3, #1
 8000894:	2200      	movs	r2, #0
 8000896:	68b9      	ldr	r1, [r7, #8]
 8000898:	68f8      	ldr	r0, [r7, #12]
 800089a:	f000 f837 	bl	800090c <checkDirection>
 800089e:	4603      	mov	r3, r0
                if (checkDirection(i, j, 1, 0)|| //checking horizontal
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d112      	bne.n	80008ca <checkState+0x82>
                    checkDirection(i, j, 1, 1)|| //checking / diagonal
 80008a4:	2301      	movs	r3, #1
 80008a6:	2201      	movs	r2, #1
 80008a8:	68b9      	ldr	r1, [r7, #8]
 80008aa:	68f8      	ldr	r0, [r7, #12]
 80008ac:	f000 f82e 	bl	800090c <checkDirection>
 80008b0:	4603      	mov	r3, r0
                    checkDirection(i, j, 0, 1)|| //checking vertical 
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d109      	bne.n	80008ca <checkState+0x82>
                    checkDirection(i, j, 1, -1)){ //checking \ diagonal
 80008b6:	f04f 33ff 	mov.w	r3, #4294967295
 80008ba:	2201      	movs	r2, #1
 80008bc:	68b9      	ldr	r1, [r7, #8]
 80008be:	68f8      	ldr	r0, [r7, #12]
 80008c0:	f000 f824 	bl	800090c <checkDirection>
 80008c4:	4603      	mov	r3, r0
                    checkDirection(i, j, 1, 1)|| //checking / diagonal
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d00a      	beq.n	80008e0 <checkState+0x98>
                        return gameBoard[i][j];
 80008ca:	490f      	ldr	r1, [pc, #60]	@ (8000908 <checkState+0xc0>)
 80008cc:	68fa      	ldr	r2, [r7, #12]
 80008ce:	4613      	mov	r3, r2
 80008d0:	005b      	lsls	r3, r3, #1
 80008d2:	4413      	add	r3, r2
 80008d4:	005b      	lsls	r3, r3, #1
 80008d6:	18ca      	adds	r2, r1, r3
 80008d8:	68bb      	ldr	r3, [r7, #8]
 80008da:	4413      	add	r3, r2
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	e00c      	b.n	80008fa <checkState+0xb2>
        for (int j = 0; j < boardRows; j++){
 80008e0:	68bb      	ldr	r3, [r7, #8]
 80008e2:	3301      	adds	r3, #1
 80008e4:	60bb      	str	r3, [r7, #8]
 80008e6:	68bb      	ldr	r3, [r7, #8]
 80008e8:	2b05      	cmp	r3, #5
 80008ea:	ddbb      	ble.n	8000864 <checkState+0x1c>
    for (int i = 0; i< boardColumns; i++){
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	3301      	adds	r3, #1
 80008f0:	60fb      	str	r3, [r7, #12]
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	2b06      	cmp	r3, #6
 80008f6:	ddb2      	ble.n	800085e <checkState+0x16>
                }
            }
        }
    }
	return 0;
 80008f8:	2300      	movs	r3, #0
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	3710      	adds	r7, #16
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	20000055 	.word	0x20000055
 8000908:	20000058 	.word	0x20000058

0800090c <checkDirection>:
bool checkDirection(int i, int j, int dir_i, int dir_j){
 800090c:	b490      	push	{r4, r7}
 800090e:	b086      	sub	sp, #24
 8000910:	af00      	add	r7, sp, #0
 8000912:	60f8      	str	r0, [r7, #12]
 8000914:	60b9      	str	r1, [r7, #8]
 8000916:	607a      	str	r2, [r7, #4]
 8000918:	603b      	str	r3, [r7, #0]
    for (int k = 1; k < 4; k++){
 800091a:	2301      	movs	r3, #1
 800091c:	617b      	str	r3, [r7, #20]
 800091e:	e048      	b.n	80009b2 <checkDirection+0xa6>
        if ((i+dir_i*k)>boardColumns || (i+dir_i*k)<0){
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	697a      	ldr	r2, [r7, #20]
 8000924:	fb03 f202 	mul.w	r2, r3, r2
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	4413      	add	r3, r2
 800092c:	2b07      	cmp	r3, #7
 800092e:	dc07      	bgt.n	8000940 <checkDirection+0x34>
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	697a      	ldr	r2, [r7, #20]
 8000934:	fb03 f202 	mul.w	r2, r3, r2
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	4413      	add	r3, r2
 800093c:	2b00      	cmp	r3, #0
 800093e:	da01      	bge.n	8000944 <checkDirection+0x38>
            return false;
 8000940:	2300      	movs	r3, #0
 8000942:	e03a      	b.n	80009ba <checkDirection+0xae>
        } 
        if ((j+dir_j*k)>boardRows || (j+dir_j*k)<0){
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	697a      	ldr	r2, [r7, #20]
 8000948:	fb03 f202 	mul.w	r2, r3, r2
 800094c:	68bb      	ldr	r3, [r7, #8]
 800094e:	4413      	add	r3, r2
 8000950:	2b06      	cmp	r3, #6
 8000952:	dc07      	bgt.n	8000964 <checkDirection+0x58>
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	697a      	ldr	r2, [r7, #20]
 8000958:	fb03 f202 	mul.w	r2, r3, r2
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	4413      	add	r3, r2
 8000960:	2b00      	cmp	r3, #0
 8000962:	da01      	bge.n	8000968 <checkDirection+0x5c>
            return false;
 8000964:	2300      	movs	r3, #0
 8000966:	e028      	b.n	80009ba <checkDirection+0xae>
        } 
        if (gameBoard[i][j] != gameBoard[i+dir_i*k][j+dir_j*k]){
 8000968:	4916      	ldr	r1, [pc, #88]	@ (80009c4 <checkDirection+0xb8>)
 800096a:	68fa      	ldr	r2, [r7, #12]
 800096c:	4613      	mov	r3, r2
 800096e:	005b      	lsls	r3, r3, #1
 8000970:	4413      	add	r3, r2
 8000972:	005b      	lsls	r3, r3, #1
 8000974:	18ca      	adds	r2, r1, r3
 8000976:	68bb      	ldr	r3, [r7, #8]
 8000978:	4413      	add	r3, r2
 800097a:	7819      	ldrb	r1, [r3, #0]
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	697a      	ldr	r2, [r7, #20]
 8000980:	fb03 f202 	mul.w	r2, r3, r2
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	441a      	add	r2, r3
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	6978      	ldr	r0, [r7, #20]
 800098c:	fb03 f000 	mul.w	r0, r3, r0
 8000990:	68bb      	ldr	r3, [r7, #8]
 8000992:	4418      	add	r0, r3
 8000994:	4c0b      	ldr	r4, [pc, #44]	@ (80009c4 <checkDirection+0xb8>)
 8000996:	4613      	mov	r3, r2
 8000998:	005b      	lsls	r3, r3, #1
 800099a:	4413      	add	r3, r2
 800099c:	005b      	lsls	r3, r3, #1
 800099e:	4423      	add	r3, r4
 80009a0:	4403      	add	r3, r0
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	4299      	cmp	r1, r3
 80009a6:	d001      	beq.n	80009ac <checkDirection+0xa0>
            return false;
 80009a8:	2300      	movs	r3, #0
 80009aa:	e006      	b.n	80009ba <checkDirection+0xae>
    for (int k = 1; k < 4; k++){
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	3301      	adds	r3, #1
 80009b0:	617b      	str	r3, [r7, #20]
 80009b2:	697b      	ldr	r3, [r7, #20]
 80009b4:	2b03      	cmp	r3, #3
 80009b6:	ddb3      	ble.n	8000920 <checkDirection+0x14>
        }

    }
    return true;
 80009b8:	2301      	movs	r3, #1

}
 80009ba:	4618      	mov	r0, r3
 80009bc:	3718      	adds	r7, #24
 80009be:	46bd      	mov	sp, r7
 80009c0:	bc90      	pop	{r4, r7}
 80009c2:	4770      	bx	lr
 80009c4:	20000058 	.word	0x20000058

080009c8 <startTimer>:

void startTimer(void){
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
	startTime = HAL_GetTick();
 80009cc:	f002 fc1a 	bl	8003204 <HAL_GetTick>
 80009d0:	4603      	mov	r3, r0
 80009d2:	4a02      	ldr	r2, [pc, #8]	@ (80009dc <startTimer+0x14>)
 80009d4:	6013      	str	r3, [r2, #0]
}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	20000048 	.word	0x20000048

080009e0 <endTimer>:

void endTimer(){
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
    endTime = HAL_GetTick();
 80009e4:	f002 fc0e 	bl	8003204 <HAL_GetTick>
 80009e8:	4603      	mov	r3, r0
 80009ea:	4a05      	ldr	r2, [pc, #20]	@ (8000a00 <endTimer+0x20>)
 80009ec:	6013      	str	r3, [r2, #0]
	timePlayed = endTime-startTime;
 80009ee:	4b04      	ldr	r3, [pc, #16]	@ (8000a00 <endTimer+0x20>)
 80009f0:	681a      	ldr	r2, [r3, #0]
 80009f2:	4b04      	ldr	r3, [pc, #16]	@ (8000a04 <endTimer+0x24>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	1ad3      	subs	r3, r2, r3
 80009f8:	4a03      	ldr	r2, [pc, #12]	@ (8000a08 <endTimer+0x28>)
 80009fa:	6013      	str	r3, [r2, #0]
}
 80009fc:	bf00      	nop
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	2000004c 	.word	0x2000004c
 8000a04:	20000048 	.word	0x20000048
 8000a08:	20000050 	.word	0x20000050

08000a0c <Screen1_Display>:


void Screen1_Display(void){
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
    LCD_Clear(0, LCD_COLOR_GREY);
 8000a10:	f24f 71de 	movw	r1, #63454	@ 0xf7de
 8000a14:	2000      	movs	r0, #0
 8000a16:	f001 f977 	bl	8001d08 <LCD_Clear>
    
    LCD_SetFont(&Font16x24);
 8000a1a:	4857      	ldr	r0, [pc, #348]	@ (8000b78 <Screen1_Display+0x16c>)
 8000a1c:	f001 f9a6 	bl	8001d6c <LCD_SetFont>
    LCD_SetTextColor(LCD_COLOR_BLACK);
 8000a20:	2000      	movs	r0, #0
 8000a22:	f001 f993 	bl	8001d4c <LCD_SetTextColor>
    LCD_DisplayChar(20, 20, 'C');
 8000a26:	2243      	movs	r2, #67	@ 0x43
 8000a28:	2114      	movs	r1, #20
 8000a2a:	2014      	movs	r0, #20
 8000a2c:	f001 fa1c 	bl	8001e68 <LCD_DisplayChar>
    LCD_DisplayChar(40, 20, 'O');
 8000a30:	224f      	movs	r2, #79	@ 0x4f
 8000a32:	2114      	movs	r1, #20
 8000a34:	2028      	movs	r0, #40	@ 0x28
 8000a36:	f001 fa17 	bl	8001e68 <LCD_DisplayChar>
    LCD_DisplayChar(60, 20, 'N');
 8000a3a:	224e      	movs	r2, #78	@ 0x4e
 8000a3c:	2114      	movs	r1, #20
 8000a3e:	203c      	movs	r0, #60	@ 0x3c
 8000a40:	f001 fa12 	bl	8001e68 <LCD_DisplayChar>
    LCD_DisplayChar(80, 20, 'N');
 8000a44:	224e      	movs	r2, #78	@ 0x4e
 8000a46:	2114      	movs	r1, #20
 8000a48:	2050      	movs	r0, #80	@ 0x50
 8000a4a:	f001 fa0d 	bl	8001e68 <LCD_DisplayChar>
    LCD_DisplayChar(100, 20, 'E');
 8000a4e:	2245      	movs	r2, #69	@ 0x45
 8000a50:	2114      	movs	r1, #20
 8000a52:	2064      	movs	r0, #100	@ 0x64
 8000a54:	f001 fa08 	bl	8001e68 <LCD_DisplayChar>
    LCD_DisplayChar(120, 20, 'C');
 8000a58:	2243      	movs	r2, #67	@ 0x43
 8000a5a:	2114      	movs	r1, #20
 8000a5c:	2078      	movs	r0, #120	@ 0x78
 8000a5e:	f001 fa03 	bl	8001e68 <LCD_DisplayChar>
    LCD_DisplayChar(140, 20, 'T');
 8000a62:	2254      	movs	r2, #84	@ 0x54
 8000a64:	2114      	movs	r1, #20
 8000a66:	208c      	movs	r0, #140	@ 0x8c
 8000a68:	f001 f9fe 	bl	8001e68 <LCD_DisplayChar>
    LCD_DisplayChar(180, 20, '4');
 8000a6c:	2234      	movs	r2, #52	@ 0x34
 8000a6e:	2114      	movs	r1, #20
 8000a70:	20b4      	movs	r0, #180	@ 0xb4
 8000a72:	f001 f9f9 	bl	8001e68 <LCD_DisplayChar>

    LCD_SetFont(&Font12x12);
 8000a76:	4841      	ldr	r0, [pc, #260]	@ (8000b7c <Screen1_Display+0x170>)
 8000a78:	f001 f978 	bl	8001d6c <LCD_SetFont>
    LCD_DisplayChar(20, 110, '1');
 8000a7c:	2231      	movs	r2, #49	@ 0x31
 8000a7e:	216e      	movs	r1, #110	@ 0x6e
 8000a80:	2014      	movs	r0, #20
 8000a82:	f001 f9f1 	bl	8001e68 <LCD_DisplayChar>
    LCD_DisplayChar(35, 110, 'P');
 8000a86:	2250      	movs	r2, #80	@ 0x50
 8000a88:	216e      	movs	r1, #110	@ 0x6e
 8000a8a:	2023      	movs	r0, #35	@ 0x23
 8000a8c:	f001 f9ec 	bl	8001e68 <LCD_DisplayChar>
    LCD_DisplayChar(45, 110, 'L');
 8000a90:	224c      	movs	r2, #76	@ 0x4c
 8000a92:	216e      	movs	r1, #110	@ 0x6e
 8000a94:	202d      	movs	r0, #45	@ 0x2d
 8000a96:	f001 f9e7 	bl	8001e68 <LCD_DisplayChar>
    LCD_DisplayChar(55, 110, 'A');
 8000a9a:	2241      	movs	r2, #65	@ 0x41
 8000a9c:	216e      	movs	r1, #110	@ 0x6e
 8000a9e:	2037      	movs	r0, #55	@ 0x37
 8000aa0:	f001 f9e2 	bl	8001e68 <LCD_DisplayChar>
    LCD_DisplayChar(65, 110, 'Y');
 8000aa4:	2259      	movs	r2, #89	@ 0x59
 8000aa6:	216e      	movs	r1, #110	@ 0x6e
 8000aa8:	2041      	movs	r0, #65	@ 0x41
 8000aaa:	f001 f9dd 	bl	8001e68 <LCD_DisplayChar>
    LCD_DisplayChar(75, 110, 'E');
 8000aae:	2245      	movs	r2, #69	@ 0x45
 8000ab0:	216e      	movs	r1, #110	@ 0x6e
 8000ab2:	204b      	movs	r0, #75	@ 0x4b
 8000ab4:	f001 f9d8 	bl	8001e68 <LCD_DisplayChar>
    LCD_DisplayChar(85, 110, 'R');
 8000ab8:	2252      	movs	r2, #82	@ 0x52
 8000aba:	216e      	movs	r1, #110	@ 0x6e
 8000abc:	2055      	movs	r0, #85	@ 0x55
 8000abe:	f001 f9d3 	bl	8001e68 <LCD_DisplayChar>
    LCD_DisplayChar(40, 125, 'M');
 8000ac2:	224d      	movs	r2, #77	@ 0x4d
 8000ac4:	217d      	movs	r1, #125	@ 0x7d
 8000ac6:	2028      	movs	r0, #40	@ 0x28
 8000ac8:	f001 f9ce 	bl	8001e68 <LCD_DisplayChar>
    LCD_DisplayChar(50, 125, 'O');
 8000acc:	224f      	movs	r2, #79	@ 0x4f
 8000ace:	217d      	movs	r1, #125	@ 0x7d
 8000ad0:	2032      	movs	r0, #50	@ 0x32
 8000ad2:	f001 f9c9 	bl	8001e68 <LCD_DisplayChar>
    LCD_DisplayChar(60, 125, 'D');
 8000ad6:	2244      	movs	r2, #68	@ 0x44
 8000ad8:	217d      	movs	r1, #125	@ 0x7d
 8000ada:	203c      	movs	r0, #60	@ 0x3c
 8000adc:	f001 f9c4 	bl	8001e68 <LCD_DisplayChar>
    LCD_DisplayChar(70, 125, 'E');
 8000ae0:	2245      	movs	r2, #69	@ 0x45
 8000ae2:	217d      	movs	r1, #125	@ 0x7d
 8000ae4:	2046      	movs	r0, #70	@ 0x46
 8000ae6:	f001 f9bf 	bl	8001e68 <LCD_DisplayChar>

    LCD_DisplayChar(140, 110, '2');
 8000aea:	2232      	movs	r2, #50	@ 0x32
 8000aec:	216e      	movs	r1, #110	@ 0x6e
 8000aee:	208c      	movs	r0, #140	@ 0x8c
 8000af0:	f001 f9ba 	bl	8001e68 <LCD_DisplayChar>
    LCD_DisplayChar(155, 110, 'P');
 8000af4:	2250      	movs	r2, #80	@ 0x50
 8000af6:	216e      	movs	r1, #110	@ 0x6e
 8000af8:	209b      	movs	r0, #155	@ 0x9b
 8000afa:	f001 f9b5 	bl	8001e68 <LCD_DisplayChar>
    LCD_DisplayChar(165, 110, 'L');
 8000afe:	224c      	movs	r2, #76	@ 0x4c
 8000b00:	216e      	movs	r1, #110	@ 0x6e
 8000b02:	20a5      	movs	r0, #165	@ 0xa5
 8000b04:	f001 f9b0 	bl	8001e68 <LCD_DisplayChar>
    LCD_DisplayChar(175, 110, 'A');
 8000b08:	2241      	movs	r2, #65	@ 0x41
 8000b0a:	216e      	movs	r1, #110	@ 0x6e
 8000b0c:	20af      	movs	r0, #175	@ 0xaf
 8000b0e:	f001 f9ab 	bl	8001e68 <LCD_DisplayChar>
    LCD_DisplayChar(185, 110, 'Y');
 8000b12:	2259      	movs	r2, #89	@ 0x59
 8000b14:	216e      	movs	r1, #110	@ 0x6e
 8000b16:	20b9      	movs	r0, #185	@ 0xb9
 8000b18:	f001 f9a6 	bl	8001e68 <LCD_DisplayChar>
    LCD_DisplayChar(195, 110, 'E');
 8000b1c:	2245      	movs	r2, #69	@ 0x45
 8000b1e:	216e      	movs	r1, #110	@ 0x6e
 8000b20:	20c3      	movs	r0, #195	@ 0xc3
 8000b22:	f001 f9a1 	bl	8001e68 <LCD_DisplayChar>
    LCD_DisplayChar(205, 110, 'R');
 8000b26:	2252      	movs	r2, #82	@ 0x52
 8000b28:	216e      	movs	r1, #110	@ 0x6e
 8000b2a:	20cd      	movs	r0, #205	@ 0xcd
 8000b2c:	f001 f99c 	bl	8001e68 <LCD_DisplayChar>
    LCD_DisplayChar(160, 125, 'M');
 8000b30:	224d      	movs	r2, #77	@ 0x4d
 8000b32:	217d      	movs	r1, #125	@ 0x7d
 8000b34:	20a0      	movs	r0, #160	@ 0xa0
 8000b36:	f001 f997 	bl	8001e68 <LCD_DisplayChar>
    LCD_DisplayChar(170, 125, 'O');
 8000b3a:	224f      	movs	r2, #79	@ 0x4f
 8000b3c:	217d      	movs	r1, #125	@ 0x7d
 8000b3e:	20aa      	movs	r0, #170	@ 0xaa
 8000b40:	f001 f992 	bl	8001e68 <LCD_DisplayChar>
    LCD_DisplayChar(180, 125, 'D');
 8000b44:	2244      	movs	r2, #68	@ 0x44
 8000b46:	217d      	movs	r1, #125	@ 0x7d
 8000b48:	20b4      	movs	r0, #180	@ 0xb4
 8000b4a:	f001 f98d 	bl	8001e68 <LCD_DisplayChar>
    LCD_DisplayChar(190, 125, 'E');
 8000b4e:	2245      	movs	r2, #69	@ 0x45
 8000b50:	217d      	movs	r1, #125	@ 0x7d
 8000b52:	20be      	movs	r0, #190	@ 0xbe
 8000b54:	f001 f988 	bl	8001e68 <LCD_DisplayChar>


    LCD_Draw_Circle_Fill(60, (LCD_PIXEL_HEIGHT/2)+20, 40, LCD_COLOR_RED);
 8000b58:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000b5c:	2228      	movs	r2, #40	@ 0x28
 8000b5e:	21b4      	movs	r1, #180	@ 0xb4
 8000b60:	203c      	movs	r0, #60	@ 0x3c
 8000b62:	f001 f87d 	bl	8001c60 <LCD_Draw_Circle_Fill>
    LCD_Draw_Circle_Fill(LCD_PIXEL_WIDTH-60, (LCD_PIXEL_HEIGHT/2)+20, 40, LCD_COLOR_BLUE);
 8000b66:	231f      	movs	r3, #31
 8000b68:	2228      	movs	r2, #40	@ 0x28
 8000b6a:	21b4      	movs	r1, #180	@ 0xb4
 8000b6c:	20b4      	movs	r0, #180	@ 0xb4
 8000b6e:	f001 f877 	bl	8001c60 <LCD_Draw_Circle_Fill>
}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	20000008 	.word	0x20000008
 8000b7c:	20000010 	.word	0x20000010

08000b80 <Screen2_Display>:

void Screen2_Display(void){
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
    LCD_Clear(0, LCD_COLOR_GREY);
 8000b86:	f24f 71de 	movw	r1, #63454	@ 0xf7de
 8000b8a:	2000      	movs	r0, #0
 8000b8c:	f001 f8bc 	bl	8001d08 <LCD_Clear>
    
    LCD_SetFont(&Font16x24);
 8000b90:	486e      	ldr	r0, [pc, #440]	@ (8000d4c <Screen2_Display+0x1cc>)
 8000b92:	f001 f8eb 	bl	8001d6c <LCD_SetFont>
    LCD_SetTextColor(LCD_COLOR_BLACK);
 8000b96:	2000      	movs	r0, #0
 8000b98:	f001 f8d8 	bl	8001d4c <LCD_SetTextColor>
    LCD_DisplayChar(20, 20, 'C');
 8000b9c:	2243      	movs	r2, #67	@ 0x43
 8000b9e:	2114      	movs	r1, #20
 8000ba0:	2014      	movs	r0, #20
 8000ba2:	f001 f961 	bl	8001e68 <LCD_DisplayChar>
    LCD_DisplayChar(40, 20, 'O');
 8000ba6:	224f      	movs	r2, #79	@ 0x4f
 8000ba8:	2114      	movs	r1, #20
 8000baa:	2028      	movs	r0, #40	@ 0x28
 8000bac:	f001 f95c 	bl	8001e68 <LCD_DisplayChar>
    LCD_DisplayChar(60, 20, 'N');
 8000bb0:	224e      	movs	r2, #78	@ 0x4e
 8000bb2:	2114      	movs	r1, #20
 8000bb4:	203c      	movs	r0, #60	@ 0x3c
 8000bb6:	f001 f957 	bl	8001e68 <LCD_DisplayChar>
    LCD_DisplayChar(80, 20, 'N');
 8000bba:	224e      	movs	r2, #78	@ 0x4e
 8000bbc:	2114      	movs	r1, #20
 8000bbe:	2050      	movs	r0, #80	@ 0x50
 8000bc0:	f001 f952 	bl	8001e68 <LCD_DisplayChar>
    LCD_DisplayChar(100, 20, 'E');
 8000bc4:	2245      	movs	r2, #69	@ 0x45
 8000bc6:	2114      	movs	r1, #20
 8000bc8:	2064      	movs	r0, #100	@ 0x64
 8000bca:	f001 f94d 	bl	8001e68 <LCD_DisplayChar>
    LCD_DisplayChar(120, 20, 'C');
 8000bce:	2243      	movs	r2, #67	@ 0x43
 8000bd0:	2114      	movs	r1, #20
 8000bd2:	2078      	movs	r0, #120	@ 0x78
 8000bd4:	f001 f948 	bl	8001e68 <LCD_DisplayChar>
    LCD_DisplayChar(140, 20, 'T');
 8000bd8:	2254      	movs	r2, #84	@ 0x54
 8000bda:	2114      	movs	r1, #20
 8000bdc:	208c      	movs	r0, #140	@ 0x8c
 8000bde:	f001 f943 	bl	8001e68 <LCD_DisplayChar>
    LCD_DisplayChar(180, 20, '4');
 8000be2:	2234      	movs	r2, #52	@ 0x34
 8000be4:	2114      	movs	r1, #20
 8000be6:	20b4      	movs	r0, #180	@ 0xb4
 8000be8:	f001 f93e 	bl	8001e68 <LCD_DisplayChar>
    
    for (int i = 0; i<boardColumns; i++){
 8000bec:	2300      	movs	r3, #0
 8000bee:	60fb      	str	r3, [r7, #12]
 8000bf0:	e037      	b.n	8000c62 <Screen2_Display+0xe2>
        if (i == chipLoc){
 8000bf2:	4b57      	ldr	r3, [pc, #348]	@ (8000d50 <Screen2_Display+0x1d0>)
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d120      	bne.n	8000c40 <Screen2_Display+0xc0>
            if (player1turn){
 8000bfe:	4b55      	ldr	r3, [pc, #340]	@ (8000d54 <Screen2_Display+0x1d4>)
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d00d      	beq.n	8000c22 <Screen2_Display+0xa2>
                LCD_Draw_Circle_Fill((i*30)+30, 80, 12, LCD_COLOR_BLUE);
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	3301      	adds	r3, #1
 8000c0a:	b29b      	uxth	r3, r3
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	0112      	lsls	r2, r2, #4
 8000c10:	1ad3      	subs	r3, r2, r3
 8000c12:	005b      	lsls	r3, r3, #1
 8000c14:	b298      	uxth	r0, r3
 8000c16:	231f      	movs	r3, #31
 8000c18:	220c      	movs	r2, #12
 8000c1a:	2150      	movs	r1, #80	@ 0x50
 8000c1c:	f001 f820 	bl	8001c60 <LCD_Draw_Circle_Fill>
 8000c20:	e01c      	b.n	8000c5c <Screen2_Display+0xdc>
            }
            else{
                LCD_Draw_Circle_Fill((i*30)+30, 80, 12, LCD_COLOR_RED);
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	3301      	adds	r3, #1
 8000c26:	b29b      	uxth	r3, r3
 8000c28:	461a      	mov	r2, r3
 8000c2a:	0112      	lsls	r2, r2, #4
 8000c2c:	1ad3      	subs	r3, r2, r3
 8000c2e:	005b      	lsls	r3, r3, #1
 8000c30:	b298      	uxth	r0, r3
 8000c32:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000c36:	220c      	movs	r2, #12
 8000c38:	2150      	movs	r1, #80	@ 0x50
 8000c3a:	f001 f811 	bl	8001c60 <LCD_Draw_Circle_Fill>
 8000c3e:	e00d      	b.n	8000c5c <Screen2_Display+0xdc>
            }
        }
        else{
            LCD_Draw_Circle_Fill((i*30)+30, 80, 12, LCD_COLOR_GREY);
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	3301      	adds	r3, #1
 8000c44:	b29b      	uxth	r3, r3
 8000c46:	461a      	mov	r2, r3
 8000c48:	0112      	lsls	r2, r2, #4
 8000c4a:	1ad3      	subs	r3, r2, r3
 8000c4c:	005b      	lsls	r3, r3, #1
 8000c4e:	b298      	uxth	r0, r3
 8000c50:	f24f 73de 	movw	r3, #63454	@ 0xf7de
 8000c54:	220c      	movs	r2, #12
 8000c56:	2150      	movs	r1, #80	@ 0x50
 8000c58:	f001 f802 	bl	8001c60 <LCD_Draw_Circle_Fill>
    for (int i = 0; i<boardColumns; i++){
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	3301      	adds	r3, #1
 8000c60:	60fb      	str	r3, [r7, #12]
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	2b06      	cmp	r3, #6
 8000c66:	ddc4      	ble.n	8000bf2 <Screen2_Display+0x72>
        }
    }

    for (int i = 0; i<boardColumns; i++){
 8000c68:	2300      	movs	r3, #0
 8000c6a:	60bb      	str	r3, [r7, #8]
 8000c6c:	e065      	b.n	8000d3a <Screen2_Display+0x1ba>
        for (int j = 0; j<boardRows; j++){
 8000c6e:	2300      	movs	r3, #0
 8000c70:	607b      	str	r3, [r7, #4]
 8000c72:	e05c      	b.n	8000d2e <Screen2_Display+0x1ae>
            if (gameBoard[i][j] == 1){
 8000c74:	4938      	ldr	r1, [pc, #224]	@ (8000d58 <Screen2_Display+0x1d8>)
 8000c76:	68ba      	ldr	r2, [r7, #8]
 8000c78:	4613      	mov	r3, r2
 8000c7a:	005b      	lsls	r3, r3, #1
 8000c7c:	4413      	add	r3, r2
 8000c7e:	005b      	lsls	r3, r3, #1
 8000c80:	18ca      	adds	r2, r1, r3
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	4413      	add	r3, r2
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	2b01      	cmp	r3, #1
 8000c8a:	d115      	bne.n	8000cb8 <Screen2_Display+0x138>
                LCD_Draw_Circle_Fill((i*30)+30, (j*30)+115, 12, LCD_COLOR_BLUE);
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	3301      	adds	r3, #1
 8000c90:	b29b      	uxth	r3, r3
 8000c92:	461a      	mov	r2, r3
 8000c94:	0112      	lsls	r2, r2, #4
 8000c96:	1ad3      	subs	r3, r2, r3
 8000c98:	005b      	lsls	r3, r3, #1
 8000c9a:	b298      	uxth	r0, r3
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	b29b      	uxth	r3, r3
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	0112      	lsls	r2, r2, #4
 8000ca4:	1ad3      	subs	r3, r2, r3
 8000ca6:	005b      	lsls	r3, r3, #1
 8000ca8:	b29b      	uxth	r3, r3
 8000caa:	3373      	adds	r3, #115	@ 0x73
 8000cac:	b299      	uxth	r1, r3
 8000cae:	231f      	movs	r3, #31
 8000cb0:	220c      	movs	r2, #12
 8000cb2:	f000 ffd5 	bl	8001c60 <LCD_Draw_Circle_Fill>
 8000cb6:	e037      	b.n	8000d28 <Screen2_Display+0x1a8>
            }
            else if (gameBoard[i][j] == 2){
 8000cb8:	4927      	ldr	r1, [pc, #156]	@ (8000d58 <Screen2_Display+0x1d8>)
 8000cba:	68ba      	ldr	r2, [r7, #8]
 8000cbc:	4613      	mov	r3, r2
 8000cbe:	005b      	lsls	r3, r3, #1
 8000cc0:	4413      	add	r3, r2
 8000cc2:	005b      	lsls	r3, r3, #1
 8000cc4:	18ca      	adds	r2, r1, r3
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	4413      	add	r3, r2
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	2b02      	cmp	r3, #2
 8000cce:	d116      	bne.n	8000cfe <Screen2_Display+0x17e>
                LCD_Draw_Circle_Fill((i*30)+30, (j*30)+115, 12, LCD_COLOR_RED);
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	b29b      	uxth	r3, r3
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	0112      	lsls	r2, r2, #4
 8000cda:	1ad3      	subs	r3, r2, r3
 8000cdc:	005b      	lsls	r3, r3, #1
 8000cde:	b298      	uxth	r0, r3
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	b29b      	uxth	r3, r3
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	0112      	lsls	r2, r2, #4
 8000ce8:	1ad3      	subs	r3, r2, r3
 8000cea:	005b      	lsls	r3, r3, #1
 8000cec:	b29b      	uxth	r3, r3
 8000cee:	3373      	adds	r3, #115	@ 0x73
 8000cf0:	b299      	uxth	r1, r3
 8000cf2:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000cf6:	220c      	movs	r2, #12
 8000cf8:	f000 ffb2 	bl	8001c60 <LCD_Draw_Circle_Fill>
 8000cfc:	e014      	b.n	8000d28 <Screen2_Display+0x1a8>
            }
            else{
                LCD_Draw_Circle_Fill((i*30)+30, (j*30)+115, 12, LCD_COLOR_BLACK);
 8000cfe:	68bb      	ldr	r3, [r7, #8]
 8000d00:	3301      	adds	r3, #1
 8000d02:	b29b      	uxth	r3, r3
 8000d04:	461a      	mov	r2, r3
 8000d06:	0112      	lsls	r2, r2, #4
 8000d08:	1ad3      	subs	r3, r2, r3
 8000d0a:	005b      	lsls	r3, r3, #1
 8000d0c:	b298      	uxth	r0, r3
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	b29b      	uxth	r3, r3
 8000d12:	461a      	mov	r2, r3
 8000d14:	0112      	lsls	r2, r2, #4
 8000d16:	1ad3      	subs	r3, r2, r3
 8000d18:	005b      	lsls	r3, r3, #1
 8000d1a:	b29b      	uxth	r3, r3
 8000d1c:	3373      	adds	r3, #115	@ 0x73
 8000d1e:	b299      	uxth	r1, r3
 8000d20:	2300      	movs	r3, #0
 8000d22:	220c      	movs	r2, #12
 8000d24:	f000 ff9c 	bl	8001c60 <LCD_Draw_Circle_Fill>
        for (int j = 0; j<boardRows; j++){
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	607b      	str	r3, [r7, #4]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	2b05      	cmp	r3, #5
 8000d32:	dd9f      	ble.n	8000c74 <Screen2_Display+0xf4>
    for (int i = 0; i<boardColumns; i++){
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	3301      	adds	r3, #1
 8000d38:	60bb      	str	r3, [r7, #8]
 8000d3a:	68bb      	ldr	r3, [r7, #8]
 8000d3c:	2b06      	cmp	r3, #6
 8000d3e:	dd96      	ble.n	8000c6e <Screen2_Display+0xee>
            }
        }
    }
}
 8000d40:	bf00      	nop
 8000d42:	bf00      	nop
 8000d44:	3710      	adds	r7, #16
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	20000008 	.word	0x20000008
 8000d50:	20000000 	.word	0x20000000
 8000d54:	20000001 	.word	0x20000001
 8000d58:	20000058 	.word	0x20000058

08000d5c <Screen3_Display>:

void Screen3_Display(void){
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b086      	sub	sp, #24
 8000d60:	af00      	add	r7, sp, #0
    LCD_Clear(0, LCD_COLOR_GREY);
 8000d62:	f24f 71de 	movw	r1, #63454	@ 0xf7de
 8000d66:	2000      	movs	r0, #0
 8000d68:	f000 ffce 	bl	8001d08 <LCD_Clear>
    
    LCD_SetFont(&Font16x24);
 8000d6c:	48d4      	ldr	r0, [pc, #848]	@ (80010c0 <Screen3_Display+0x364>)
 8000d6e:	f000 fffd 	bl	8001d6c <LCD_SetFont>
    LCD_SetTextColor(LCD_COLOR_BLACK);
 8000d72:	2000      	movs	r0, #0
 8000d74:	f000 ffea 	bl	8001d4c <LCD_SetTextColor>
    LCD_DisplayChar(20, 20, 'C');
 8000d78:	2243      	movs	r2, #67	@ 0x43
 8000d7a:	2114      	movs	r1, #20
 8000d7c:	2014      	movs	r0, #20
 8000d7e:	f001 f873 	bl	8001e68 <LCD_DisplayChar>
    LCD_DisplayChar(40, 20, 'O');
 8000d82:	224f      	movs	r2, #79	@ 0x4f
 8000d84:	2114      	movs	r1, #20
 8000d86:	2028      	movs	r0, #40	@ 0x28
 8000d88:	f001 f86e 	bl	8001e68 <LCD_DisplayChar>
    LCD_DisplayChar(60, 20, 'N');
 8000d8c:	224e      	movs	r2, #78	@ 0x4e
 8000d8e:	2114      	movs	r1, #20
 8000d90:	203c      	movs	r0, #60	@ 0x3c
 8000d92:	f001 f869 	bl	8001e68 <LCD_DisplayChar>
    LCD_DisplayChar(80, 20, 'N');
 8000d96:	224e      	movs	r2, #78	@ 0x4e
 8000d98:	2114      	movs	r1, #20
 8000d9a:	2050      	movs	r0, #80	@ 0x50
 8000d9c:	f001 f864 	bl	8001e68 <LCD_DisplayChar>
    LCD_DisplayChar(100, 20, 'E');
 8000da0:	2245      	movs	r2, #69	@ 0x45
 8000da2:	2114      	movs	r1, #20
 8000da4:	2064      	movs	r0, #100	@ 0x64
 8000da6:	f001 f85f 	bl	8001e68 <LCD_DisplayChar>
    LCD_DisplayChar(120, 20, 'C');
 8000daa:	2243      	movs	r2, #67	@ 0x43
 8000dac:	2114      	movs	r1, #20
 8000dae:	2078      	movs	r0, #120	@ 0x78
 8000db0:	f001 f85a 	bl	8001e68 <LCD_DisplayChar>
    LCD_DisplayChar(140, 20, 'T');
 8000db4:	2254      	movs	r2, #84	@ 0x54
 8000db6:	2114      	movs	r1, #20
 8000db8:	208c      	movs	r0, #140	@ 0x8c
 8000dba:	f001 f855 	bl	8001e68 <LCD_DisplayChar>
    LCD_DisplayChar(180, 20, '4');
 8000dbe:	2234      	movs	r2, #52	@ 0x34
 8000dc0:	2114      	movs	r1, #20
 8000dc2:	20b4      	movs	r0, #180	@ 0xb4
 8000dc4:	f001 f850 	bl	8001e68 <LCD_DisplayChar>

    char score1 = (char)(player1_Score+48);
 8000dc8:	4bbe      	ldr	r3, [pc, #760]	@ (80010c4 <Screen3_Display+0x368>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	3330      	adds	r3, #48	@ 0x30
 8000dce:	73fb      	strb	r3, [r7, #15]
	char score2 = (char)(player2_Score+48);
 8000dd0:	4bbd      	ldr	r3, [pc, #756]	@ (80010c8 <Screen3_Display+0x36c>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	3330      	adds	r3, #48	@ 0x30
 8000dd6:	73bb      	strb	r3, [r7, #14]

    LCD_SetFont(&Font12x12);
 8000dd8:	48bc      	ldr	r0, [pc, #752]	@ (80010cc <Screen3_Display+0x370>)
 8000dda:	f000 ffc7 	bl	8001d6c <LCD_SetFont>
	LCD_DisplayChar(20, 45, 'P');
 8000dde:	2250      	movs	r2, #80	@ 0x50
 8000de0:	212d      	movs	r1, #45	@ 0x2d
 8000de2:	2014      	movs	r0, #20
 8000de4:	f001 f840 	bl	8001e68 <LCD_DisplayChar>
    LCD_DisplayChar(30, 45, 'L');
 8000de8:	224c      	movs	r2, #76	@ 0x4c
 8000dea:	212d      	movs	r1, #45	@ 0x2d
 8000dec:	201e      	movs	r0, #30
 8000dee:	f001 f83b 	bl	8001e68 <LCD_DisplayChar>
    LCD_DisplayChar(40, 45, 'A');
 8000df2:	2241      	movs	r2, #65	@ 0x41
 8000df4:	212d      	movs	r1, #45	@ 0x2d
 8000df6:	2028      	movs	r0, #40	@ 0x28
 8000df8:	f001 f836 	bl	8001e68 <LCD_DisplayChar>
    LCD_DisplayChar(50, 45, 'Y');
 8000dfc:	2259      	movs	r2, #89	@ 0x59
 8000dfe:	212d      	movs	r1, #45	@ 0x2d
 8000e00:	2032      	movs	r0, #50	@ 0x32
 8000e02:	f001 f831 	bl	8001e68 <LCD_DisplayChar>
    LCD_DisplayChar(60, 45, 'E');
 8000e06:	2245      	movs	r2, #69	@ 0x45
 8000e08:	212d      	movs	r1, #45	@ 0x2d
 8000e0a:	203c      	movs	r0, #60	@ 0x3c
 8000e0c:	f001 f82c 	bl	8001e68 <LCD_DisplayChar>
    LCD_DisplayChar(70, 45, 'R');
 8000e10:	2252      	movs	r2, #82	@ 0x52
 8000e12:	212d      	movs	r1, #45	@ 0x2d
 8000e14:	2046      	movs	r0, #70	@ 0x46
 8000e16:	f001 f827 	bl	8001e68 <LCD_DisplayChar>
    LCD_DisplayChar(85, 45, '1');
 8000e1a:	2231      	movs	r2, #49	@ 0x31
 8000e1c:	212d      	movs	r1, #45	@ 0x2d
 8000e1e:	2055      	movs	r0, #85	@ 0x55
 8000e20:	f001 f822 	bl	8001e68 <LCD_DisplayChar>
    LCD_DisplayChar(25, 60, 'S');
 8000e24:	2253      	movs	r2, #83	@ 0x53
 8000e26:	213c      	movs	r1, #60	@ 0x3c
 8000e28:	2019      	movs	r0, #25
 8000e2a:	f001 f81d 	bl	8001e68 <LCD_DisplayChar>
    LCD_DisplayChar(35, 60, 'C');
 8000e2e:	2243      	movs	r2, #67	@ 0x43
 8000e30:	213c      	movs	r1, #60	@ 0x3c
 8000e32:	2023      	movs	r0, #35	@ 0x23
 8000e34:	f001 f818 	bl	8001e68 <LCD_DisplayChar>
    LCD_DisplayChar(45, 60, 'O');
 8000e38:	224f      	movs	r2, #79	@ 0x4f
 8000e3a:	213c      	movs	r1, #60	@ 0x3c
 8000e3c:	202d      	movs	r0, #45	@ 0x2d
 8000e3e:	f001 f813 	bl	8001e68 <LCD_DisplayChar>
    LCD_DisplayChar(55, 60, 'R');
 8000e42:	2252      	movs	r2, #82	@ 0x52
 8000e44:	213c      	movs	r1, #60	@ 0x3c
 8000e46:	2037      	movs	r0, #55	@ 0x37
 8000e48:	f001 f80e 	bl	8001e68 <LCD_DisplayChar>
	LCD_DisplayChar(65, 60, 'E');
 8000e4c:	2245      	movs	r2, #69	@ 0x45
 8000e4e:	213c      	movs	r1, #60	@ 0x3c
 8000e50:	2041      	movs	r0, #65	@ 0x41
 8000e52:	f001 f809 	bl	8001e68 <LCD_DisplayChar>
	LCD_DisplayChar(75, 60, ':');
 8000e56:	223a      	movs	r2, #58	@ 0x3a
 8000e58:	213c      	movs	r1, #60	@ 0x3c
 8000e5a:	204b      	movs	r0, #75	@ 0x4b
 8000e5c:	f001 f804 	bl	8001e68 <LCD_DisplayChar>
	LCD_DisplayChar(85, 60, score1);
 8000e60:	7bfb      	ldrb	r3, [r7, #15]
 8000e62:	461a      	mov	r2, r3
 8000e64:	213c      	movs	r1, #60	@ 0x3c
 8000e66:	2055      	movs	r0, #85	@ 0x55
 8000e68:	f000 fffe 	bl	8001e68 <LCD_DisplayChar>

    LCD_DisplayChar(140, 45, 'P');
 8000e6c:	2250      	movs	r2, #80	@ 0x50
 8000e6e:	212d      	movs	r1, #45	@ 0x2d
 8000e70:	208c      	movs	r0, #140	@ 0x8c
 8000e72:	f000 fff9 	bl	8001e68 <LCD_DisplayChar>
    LCD_DisplayChar(150, 45, 'L');
 8000e76:	224c      	movs	r2, #76	@ 0x4c
 8000e78:	212d      	movs	r1, #45	@ 0x2d
 8000e7a:	2096      	movs	r0, #150	@ 0x96
 8000e7c:	f000 fff4 	bl	8001e68 <LCD_DisplayChar>
    LCD_DisplayChar(160, 45, 'A');
 8000e80:	2241      	movs	r2, #65	@ 0x41
 8000e82:	212d      	movs	r1, #45	@ 0x2d
 8000e84:	20a0      	movs	r0, #160	@ 0xa0
 8000e86:	f000 ffef 	bl	8001e68 <LCD_DisplayChar>
    LCD_DisplayChar(170, 45, 'Y');
 8000e8a:	2259      	movs	r2, #89	@ 0x59
 8000e8c:	212d      	movs	r1, #45	@ 0x2d
 8000e8e:	20aa      	movs	r0, #170	@ 0xaa
 8000e90:	f000 ffea 	bl	8001e68 <LCD_DisplayChar>
    LCD_DisplayChar(180, 45, 'E');
 8000e94:	2245      	movs	r2, #69	@ 0x45
 8000e96:	212d      	movs	r1, #45	@ 0x2d
 8000e98:	20b4      	movs	r0, #180	@ 0xb4
 8000e9a:	f000 ffe5 	bl	8001e68 <LCD_DisplayChar>
    LCD_DisplayChar(190, 45, 'R');
 8000e9e:	2252      	movs	r2, #82	@ 0x52
 8000ea0:	212d      	movs	r1, #45	@ 0x2d
 8000ea2:	20be      	movs	r0, #190	@ 0xbe
 8000ea4:	f000 ffe0 	bl	8001e68 <LCD_DisplayChar>
    LCD_DisplayChar(205, 45, '2');
 8000ea8:	2232      	movs	r2, #50	@ 0x32
 8000eaa:	212d      	movs	r1, #45	@ 0x2d
 8000eac:	20cd      	movs	r0, #205	@ 0xcd
 8000eae:	f000 ffdb 	bl	8001e68 <LCD_DisplayChar>
    LCD_DisplayChar(145, 60, 'S');
 8000eb2:	2253      	movs	r2, #83	@ 0x53
 8000eb4:	213c      	movs	r1, #60	@ 0x3c
 8000eb6:	2091      	movs	r0, #145	@ 0x91
 8000eb8:	f000 ffd6 	bl	8001e68 <LCD_DisplayChar>
    LCD_DisplayChar(155, 60, 'C');
 8000ebc:	2243      	movs	r2, #67	@ 0x43
 8000ebe:	213c      	movs	r1, #60	@ 0x3c
 8000ec0:	209b      	movs	r0, #155	@ 0x9b
 8000ec2:	f000 ffd1 	bl	8001e68 <LCD_DisplayChar>
    LCD_DisplayChar(165, 60, 'O');
 8000ec6:	224f      	movs	r2, #79	@ 0x4f
 8000ec8:	213c      	movs	r1, #60	@ 0x3c
 8000eca:	20a5      	movs	r0, #165	@ 0xa5
 8000ecc:	f000 ffcc 	bl	8001e68 <LCD_DisplayChar>
    LCD_DisplayChar(175, 60, 'R');
 8000ed0:	2252      	movs	r2, #82	@ 0x52
 8000ed2:	213c      	movs	r1, #60	@ 0x3c
 8000ed4:	20af      	movs	r0, #175	@ 0xaf
 8000ed6:	f000 ffc7 	bl	8001e68 <LCD_DisplayChar>
	LCD_DisplayChar(185, 60, 'E');
 8000eda:	2245      	movs	r2, #69	@ 0x45
 8000edc:	213c      	movs	r1, #60	@ 0x3c
 8000ede:	20b9      	movs	r0, #185	@ 0xb9
 8000ee0:	f000 ffc2 	bl	8001e68 <LCD_DisplayChar>
	LCD_DisplayChar(195, 60, ':');
 8000ee4:	223a      	movs	r2, #58	@ 0x3a
 8000ee6:	213c      	movs	r1, #60	@ 0x3c
 8000ee8:	20c3      	movs	r0, #195	@ 0xc3
 8000eea:	f000 ffbd 	bl	8001e68 <LCD_DisplayChar>
	LCD_DisplayChar(205, 60, score2);
 8000eee:	7bbb      	ldrb	r3, [r7, #14]
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	213c      	movs	r1, #60	@ 0x3c
 8000ef4:	20cd      	movs	r0, #205	@ 0xcd
 8000ef6:	f000 ffb7 	bl	8001e68 <LCD_DisplayChar>

	LCD_DisplayChar(40, 80, 'T');
 8000efa:	2254      	movs	r2, #84	@ 0x54
 8000efc:	2150      	movs	r1, #80	@ 0x50
 8000efe:	2028      	movs	r0, #40	@ 0x28
 8000f00:	f000 ffb2 	bl	8001e68 <LCD_DisplayChar>
	LCD_DisplayChar(50, 80, 'I');
 8000f04:	2249      	movs	r2, #73	@ 0x49
 8000f06:	2150      	movs	r1, #80	@ 0x50
 8000f08:	2032      	movs	r0, #50	@ 0x32
 8000f0a:	f000 ffad 	bl	8001e68 <LCD_DisplayChar>
	LCD_DisplayChar(55, 80, 'M');
 8000f0e:	224d      	movs	r2, #77	@ 0x4d
 8000f10:	2150      	movs	r1, #80	@ 0x50
 8000f12:	2037      	movs	r0, #55	@ 0x37
 8000f14:	f000 ffa8 	bl	8001e68 <LCD_DisplayChar>
	LCD_DisplayChar(65, 80, 'E');
 8000f18:	2245      	movs	r2, #69	@ 0x45
 8000f1a:	2150      	movs	r1, #80	@ 0x50
 8000f1c:	2041      	movs	r0, #65	@ 0x41
 8000f1e:	f000 ffa3 	bl	8001e68 <LCD_DisplayChar>
	LCD_DisplayChar(80, 80, 'P');
 8000f22:	2250      	movs	r2, #80	@ 0x50
 8000f24:	2150      	movs	r1, #80	@ 0x50
 8000f26:	2050      	movs	r0, #80	@ 0x50
 8000f28:	f000 ff9e 	bl	8001e68 <LCD_DisplayChar>
	LCD_DisplayChar(90, 80, 'L');
 8000f2c:	224c      	movs	r2, #76	@ 0x4c
 8000f2e:	2150      	movs	r1, #80	@ 0x50
 8000f30:	205a      	movs	r0, #90	@ 0x5a
 8000f32:	f000 ff99 	bl	8001e68 <LCD_DisplayChar>
	LCD_DisplayChar(100, 80, 'A');
 8000f36:	2241      	movs	r2, #65	@ 0x41
 8000f38:	2150      	movs	r1, #80	@ 0x50
 8000f3a:	2064      	movs	r0, #100	@ 0x64
 8000f3c:	f000 ff94 	bl	8001e68 <LCD_DisplayChar>
	LCD_DisplayChar(110, 80, 'Y');
 8000f40:	2259      	movs	r2, #89	@ 0x59
 8000f42:	2150      	movs	r1, #80	@ 0x50
 8000f44:	206e      	movs	r0, #110	@ 0x6e
 8000f46:	f000 ff8f 	bl	8001e68 <LCD_DisplayChar>
	LCD_DisplayChar(120, 80, 'E');
 8000f4a:	2245      	movs	r2, #69	@ 0x45
 8000f4c:	2150      	movs	r1, #80	@ 0x50
 8000f4e:	2078      	movs	r0, #120	@ 0x78
 8000f50:	f000 ff8a 	bl	8001e68 <LCD_DisplayChar>
	LCD_DisplayChar(130, 80, 'D');
 8000f54:	2244      	movs	r2, #68	@ 0x44
 8000f56:	2150      	movs	r1, #80	@ 0x50
 8000f58:	2082      	movs	r0, #130	@ 0x82
 8000f5a:	f000 ff85 	bl	8001e68 <LCD_DisplayChar>
	uint32_t seconds = timePlayed/1000;
 8000f5e:	4b5c      	ldr	r3, [pc, #368]	@ (80010d0 <Screen3_Display+0x374>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a5c      	ldr	r2, [pc, #368]	@ (80010d4 <Screen3_Display+0x378>)
 8000f64:	fba2 2303 	umull	r2, r3, r2, r3
 8000f68:	099b      	lsrs	r3, r3, #6
 8000f6a:	60bb      	str	r3, [r7, #8]
	uint32_t minutes = seconds/60;
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	4a5a      	ldr	r2, [pc, #360]	@ (80010d8 <Screen3_Display+0x37c>)
 8000f70:	fba2 2303 	umull	r2, r3, r2, r3
 8000f74:	095b      	lsrs	r3, r3, #5
 8000f76:	607b      	str	r3, [r7, #4]
	seconds = seconds-(minutes*60);
 8000f78:	687a      	ldr	r2, [r7, #4]
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	011b      	lsls	r3, r3, #4
 8000f7e:	1a9b      	subs	r3, r3, r2
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	461a      	mov	r2, r3
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	1a9b      	subs	r3, r3, r2
 8000f88:	60bb      	str	r3, [r7, #8]
	char msb_min = (char)((minutes/10)+48);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a53      	ldr	r2, [pc, #332]	@ (80010dc <Screen3_Display+0x380>)
 8000f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f92:	08db      	lsrs	r3, r3, #3
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	3330      	adds	r3, #48	@ 0x30
 8000f98:	70fb      	strb	r3, [r7, #3]
	char lsb_min = (char)((minutes-((minutes/10)*10))+48);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	b2da      	uxtb	r2, r3
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	494e      	ldr	r1, [pc, #312]	@ (80010dc <Screen3_Display+0x380>)
 8000fa2:	fba1 1303 	umull	r1, r3, r1, r3
 8000fa6:	08db      	lsrs	r3, r3, #3
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	4619      	mov	r1, r3
 8000fac:	0089      	lsls	r1, r1, #2
 8000fae:	440b      	add	r3, r1
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	1ad3      	subs	r3, r2, r3
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	3330      	adds	r3, #48	@ 0x30
 8000fba:	70bb      	strb	r3, [r7, #2]
	char msb_sec = (char)((seconds/10)+48);
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	4a47      	ldr	r2, [pc, #284]	@ (80010dc <Screen3_Display+0x380>)
 8000fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8000fc4:	08db      	lsrs	r3, r3, #3
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	3330      	adds	r3, #48	@ 0x30
 8000fca:	707b      	strb	r3, [r7, #1]
	char lsb_sec = (char)((seconds-((seconds/10)*10))+48);
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	b2da      	uxtb	r2, r3
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	4942      	ldr	r1, [pc, #264]	@ (80010dc <Screen3_Display+0x380>)
 8000fd4:	fba1 1303 	umull	r1, r3, r1, r3
 8000fd8:	08db      	lsrs	r3, r3, #3
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	4619      	mov	r1, r3
 8000fde:	0089      	lsls	r1, r1, #2
 8000fe0:	440b      	add	r3, r1
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	1ad3      	subs	r3, r2, r3
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	3330      	adds	r3, #48	@ 0x30
 8000fec:	703b      	strb	r3, [r7, #0]
	LCD_DisplayChar(150, 80, msb_min);
 8000fee:	78fb      	ldrb	r3, [r7, #3]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	2150      	movs	r1, #80	@ 0x50
 8000ff4:	2096      	movs	r0, #150	@ 0x96
 8000ff6:	f000 ff37 	bl	8001e68 <LCD_DisplayChar>
	LCD_DisplayChar(160, 80, lsb_min);
 8000ffa:	78bb      	ldrb	r3, [r7, #2]
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	2150      	movs	r1, #80	@ 0x50
 8001000:	20a0      	movs	r0, #160	@ 0xa0
 8001002:	f000 ff31 	bl	8001e68 <LCD_DisplayChar>
	LCD_DisplayChar(167, 80, ':');
 8001006:	223a      	movs	r2, #58	@ 0x3a
 8001008:	2150      	movs	r1, #80	@ 0x50
 800100a:	20a7      	movs	r0, #167	@ 0xa7
 800100c:	f000 ff2c 	bl	8001e68 <LCD_DisplayChar>
	LCD_DisplayChar(170, 80, msb_sec);
 8001010:	787b      	ldrb	r3, [r7, #1]
 8001012:	461a      	mov	r2, r3
 8001014:	2150      	movs	r1, #80	@ 0x50
 8001016:	20aa      	movs	r0, #170	@ 0xaa
 8001018:	f000 ff26 	bl	8001e68 <LCD_DisplayChar>
	LCD_DisplayChar(180, 80, lsb_sec);
 800101c:	783b      	ldrb	r3, [r7, #0]
 800101e:	461a      	mov	r2, r3
 8001020:	2150      	movs	r1, #80	@ 0x50
 8001022:	20b4      	movs	r0, #180	@ 0xb4
 8001024:	f000 ff20 	bl	8001e68 <LCD_DisplayChar>

    for (int i = 0; i<boardColumns; i++){
 8001028:	2300      	movs	r3, #0
 800102a:	617b      	str	r3, [r7, #20]
 800102c:	e078      	b.n	8001120 <Screen3_Display+0x3c4>
        for (int j = 0; j<boardRows; j++){
 800102e:	2300      	movs	r3, #0
 8001030:	613b      	str	r3, [r7, #16]
 8001032:	e06f      	b.n	8001114 <Screen3_Display+0x3b8>
            if (gameBoard[i][j] == 1){
 8001034:	492a      	ldr	r1, [pc, #168]	@ (80010e0 <Screen3_Display+0x384>)
 8001036:	697a      	ldr	r2, [r7, #20]
 8001038:	4613      	mov	r3, r2
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	4413      	add	r3, r2
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	18ca      	adds	r2, r1, r3
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	4413      	add	r3, r2
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	2b01      	cmp	r3, #1
 800104a:	d115      	bne.n	8001078 <Screen3_Display+0x31c>
                LCD_Draw_Circle_Fill((i*30)+30, (j*30)+115, 12, LCD_COLOR_BLUE);
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	3301      	adds	r3, #1
 8001050:	b29b      	uxth	r3, r3
 8001052:	461a      	mov	r2, r3
 8001054:	0112      	lsls	r2, r2, #4
 8001056:	1ad3      	subs	r3, r2, r3
 8001058:	005b      	lsls	r3, r3, #1
 800105a:	b298      	uxth	r0, r3
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	b29b      	uxth	r3, r3
 8001060:	461a      	mov	r2, r3
 8001062:	0112      	lsls	r2, r2, #4
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	b29b      	uxth	r3, r3
 800106a:	3373      	adds	r3, #115	@ 0x73
 800106c:	b299      	uxth	r1, r3
 800106e:	231f      	movs	r3, #31
 8001070:	220c      	movs	r2, #12
 8001072:	f000 fdf5 	bl	8001c60 <LCD_Draw_Circle_Fill>
 8001076:	e04a      	b.n	800110e <Screen3_Display+0x3b2>
            }
            else if (gameBoard[i][j] == 2){
 8001078:	4919      	ldr	r1, [pc, #100]	@ (80010e0 <Screen3_Display+0x384>)
 800107a:	697a      	ldr	r2, [r7, #20]
 800107c:	4613      	mov	r3, r2
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	4413      	add	r3, r2
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	18ca      	adds	r2, r1, r3
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	4413      	add	r3, r2
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	2b02      	cmp	r3, #2
 800108e:	d129      	bne.n	80010e4 <Screen3_Display+0x388>
                LCD_Draw_Circle_Fill((i*30)+30, (j*30)+115, 12, LCD_COLOR_RED);
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	3301      	adds	r3, #1
 8001094:	b29b      	uxth	r3, r3
 8001096:	461a      	mov	r2, r3
 8001098:	0112      	lsls	r2, r2, #4
 800109a:	1ad3      	subs	r3, r2, r3
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	b298      	uxth	r0, r3
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	b29b      	uxth	r3, r3
 80010a4:	461a      	mov	r2, r3
 80010a6:	0112      	lsls	r2, r2, #4
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	b29b      	uxth	r3, r3
 80010ae:	3373      	adds	r3, #115	@ 0x73
 80010b0:	b299      	uxth	r1, r3
 80010b2:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80010b6:	220c      	movs	r2, #12
 80010b8:	f000 fdd2 	bl	8001c60 <LCD_Draw_Circle_Fill>
 80010bc:	e027      	b.n	800110e <Screen3_Display+0x3b2>
 80010be:	bf00      	nop
 80010c0:	20000008 	.word	0x20000008
 80010c4:	20000045 	.word	0x20000045
 80010c8:	20000046 	.word	0x20000046
 80010cc:	20000010 	.word	0x20000010
 80010d0:	20000050 	.word	0x20000050
 80010d4:	10624dd3 	.word	0x10624dd3
 80010d8:	88888889 	.word	0x88888889
 80010dc:	cccccccd 	.word	0xcccccccd
 80010e0:	20000058 	.word	0x20000058
            }
            else{
                LCD_Draw_Circle_Fill((i*30)+30, (j*30)+115, 12, LCD_COLOR_BLACK);
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	3301      	adds	r3, #1
 80010e8:	b29b      	uxth	r3, r3
 80010ea:	461a      	mov	r2, r3
 80010ec:	0112      	lsls	r2, r2, #4
 80010ee:	1ad3      	subs	r3, r2, r3
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	b298      	uxth	r0, r3
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	461a      	mov	r2, r3
 80010fa:	0112      	lsls	r2, r2, #4
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	b29b      	uxth	r3, r3
 8001102:	3373      	adds	r3, #115	@ 0x73
 8001104:	b299      	uxth	r1, r3
 8001106:	2300      	movs	r3, #0
 8001108:	220c      	movs	r2, #12
 800110a:	f000 fda9 	bl	8001c60 <LCD_Draw_Circle_Fill>
        for (int j = 0; j<boardRows; j++){
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	3301      	adds	r3, #1
 8001112:	613b      	str	r3, [r7, #16]
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	2b05      	cmp	r3, #5
 8001118:	dd8c      	ble.n	8001034 <Screen3_Display+0x2d8>
    for (int i = 0; i<boardColumns; i++){
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	3301      	adds	r3, #1
 800111e:	617b      	str	r3, [r7, #20]
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	2b06      	cmp	r3, #6
 8001124:	dd83      	ble.n	800102e <Screen3_Display+0x2d2>
            }
        }
    }
    while (winner != 0);
 8001126:	bf00      	nop
 8001128:	4b04      	ldr	r3, [pc, #16]	@ (800113c <Screen3_Display+0x3e0>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d1fb      	bne.n	8001128 <Screen3_Display+0x3cc>
    playGame();
 8001130:	f7ff fa26 	bl	8000580 <playGame>
}
 8001134:	bf00      	nop
 8001136:	3718      	adds	r7, #24
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	20000044 	.word	0x20000044

08001140 <moveAI>:

uint8_t moveAI(){
 8001140:	b580      	push	{r7, lr}
 8001142:	b086      	sub	sp, #24
 8001144:	af00      	add	r7, sp, #0
	uint8_t playerChecking =0;
 8001146:	2300      	movs	r3, #0
 8001148:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i< boardColumns; i++){
 800114a:	2300      	movs	r3, #0
 800114c:	617b      	str	r3, [r7, #20]
 800114e:	e02e      	b.n	80011ae <moveAI+0x6e>
        for (int j = 0; j < boardRows; j++){
 8001150:	2300      	movs	r3, #0
 8001152:	613b      	str	r3, [r7, #16]
 8001154:	e025      	b.n	80011a2 <moveAI+0x62>
            playerChecking = gameBoard[i][j];
 8001156:	4934      	ldr	r1, [pc, #208]	@ (8001228 <moveAI+0xe8>)
 8001158:	697a      	ldr	r2, [r7, #20]
 800115a:	4613      	mov	r3, r2
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	4413      	add	r3, r2
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	18ca      	adds	r2, r1, r3
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	4413      	add	r3, r2
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	71fb      	strb	r3, [r7, #7]
            if (playerChecking != 0){
 800116c:	79fb      	ldrb	r3, [r7, #7]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d014      	beq.n	800119c <moveAI+0x5c>
                if(WinOrBlock(i, j)<8){
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	b2db      	uxtb	r3, r3
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	b2d2      	uxtb	r2, r2
 800117a:	4611      	mov	r1, r2
 800117c:	4618      	mov	r0, r3
 800117e:	f000 f855 	bl	800122c <WinOrBlock>
 8001182:	4603      	mov	r3, r0
 8001184:	2b07      	cmp	r3, #7
 8001186:	d809      	bhi.n	800119c <moveAI+0x5c>
                    return WinOrBlock(i, j);
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	b2db      	uxtb	r3, r3
 800118c:	693a      	ldr	r2, [r7, #16]
 800118e:	b2d2      	uxtb	r2, r2
 8001190:	4611      	mov	r1, r2
 8001192:	4618      	mov	r0, r3
 8001194:	f000 f84a 	bl	800122c <WinOrBlock>
 8001198:	4603      	mov	r3, r0
 800119a:	e041      	b.n	8001220 <moveAI+0xe0>
        for (int j = 0; j < boardRows; j++){
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	3301      	adds	r3, #1
 80011a0:	613b      	str	r3, [r7, #16]
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	2b05      	cmp	r3, #5
 80011a6:	ddd6      	ble.n	8001156 <moveAI+0x16>
	for (int i = 0; i< boardColumns; i++){
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	3301      	adds	r3, #1
 80011ac:	617b      	str	r3, [r7, #20]
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	2b06      	cmp	r3, #6
 80011b2:	ddcd      	ble.n	8001150 <moveAI+0x10>
                }
            }
        }
    }
	for (int i = 0; i< boardColumns; i++){
 80011b4:	2300      	movs	r3, #0
 80011b6:	60fb      	str	r3, [r7, #12]
 80011b8:	e02e      	b.n	8001218 <moveAI+0xd8>
        for (int j = 0; j < boardRows; j++){
 80011ba:	2300      	movs	r3, #0
 80011bc:	60bb      	str	r3, [r7, #8]
 80011be:	e025      	b.n	800120c <moveAI+0xcc>
            playerChecking = gameBoard[i][j];
 80011c0:	4919      	ldr	r1, [pc, #100]	@ (8001228 <moveAI+0xe8>)
 80011c2:	68fa      	ldr	r2, [r7, #12]
 80011c4:	4613      	mov	r3, r2
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	4413      	add	r3, r2
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	18ca      	adds	r2, r1, r3
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	4413      	add	r3, r2
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	71fb      	strb	r3, [r7, #7]
            if (playerChecking != 0){
 80011d6:	79fb      	ldrb	r3, [r7, #7]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d014      	beq.n	8001206 <moveAI+0xc6>
				if(twoAway(i, j)<8){
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	68ba      	ldr	r2, [r7, #8]
 80011e2:	b2d2      	uxtb	r2, r2
 80011e4:	4611      	mov	r1, r2
 80011e6:	4618      	mov	r0, r3
 80011e8:	f000 f8f8 	bl	80013dc <twoAway>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b07      	cmp	r3, #7
 80011f0:	d809      	bhi.n	8001206 <moveAI+0xc6>
					return twoAway(i, j);
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	68ba      	ldr	r2, [r7, #8]
 80011f8:	b2d2      	uxtb	r2, r2
 80011fa:	4611      	mov	r1, r2
 80011fc:	4618      	mov	r0, r3
 80011fe:	f000 f8ed 	bl	80013dc <twoAway>
 8001202:	4603      	mov	r3, r0
 8001204:	e00c      	b.n	8001220 <moveAI+0xe0>
        for (int j = 0; j < boardRows; j++){
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	3301      	adds	r3, #1
 800120a:	60bb      	str	r3, [r7, #8]
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	2b05      	cmp	r3, #5
 8001210:	ddd6      	ble.n	80011c0 <moveAI+0x80>
	for (int i = 0; i< boardColumns; i++){
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	3301      	adds	r3, #1
 8001216:	60fb      	str	r3, [r7, #12]
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	2b06      	cmp	r3, #6
 800121c:	ddcd      	ble.n	80011ba <moveAI+0x7a>
				}
            }
        }
    }
	return 3;
 800121e:	2303      	movs	r3, #3
}
 8001220:	4618      	mov	r0, r3
 8001222:	3718      	adds	r7, #24
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	20000058 	.word	0x20000058

0800122c <WinOrBlock>:

uint8_t WinOrBlock(uint8_t i, uint8_t j){
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	460a      	mov	r2, r1
 8001236:	71fb      	strb	r3, [r7, #7]
 8001238:	4613      	mov	r3, r2
 800123a:	71bb      	strb	r3, [r7, #6]
	if(CheckWinningMove(i, j, 1, 0)<8){
 800123c:	79f8      	ldrb	r0, [r7, #7]
 800123e:	79b9      	ldrb	r1, [r7, #6]
 8001240:	2300      	movs	r3, #0
 8001242:	2201      	movs	r2, #1
 8001244:	f000 f844 	bl	80012d0 <CheckWinningMove>
 8001248:	4603      	mov	r3, r0
 800124a:	2b07      	cmp	r3, #7
 800124c:	d807      	bhi.n	800125e <WinOrBlock+0x32>
		return CheckWinningMove(i, j, 1, 0);
 800124e:	79f8      	ldrb	r0, [r7, #7]
 8001250:	79b9      	ldrb	r1, [r7, #6]
 8001252:	2300      	movs	r3, #0
 8001254:	2201      	movs	r2, #1
 8001256:	f000 f83b 	bl	80012d0 <CheckWinningMove>
 800125a:	4603      	mov	r3, r0
 800125c:	e034      	b.n	80012c8 <WinOrBlock+0x9c>
	}
	if(CheckWinningMove(i, j, 0, 1)<8){
 800125e:	79f8      	ldrb	r0, [r7, #7]
 8001260:	79b9      	ldrb	r1, [r7, #6]
 8001262:	2301      	movs	r3, #1
 8001264:	2200      	movs	r2, #0
 8001266:	f000 f833 	bl	80012d0 <CheckWinningMove>
 800126a:	4603      	mov	r3, r0
 800126c:	2b07      	cmp	r3, #7
 800126e:	d807      	bhi.n	8001280 <WinOrBlock+0x54>
		return CheckWinningMove(i, j, 0, 1);
 8001270:	79f8      	ldrb	r0, [r7, #7]
 8001272:	79b9      	ldrb	r1, [r7, #6]
 8001274:	2301      	movs	r3, #1
 8001276:	2200      	movs	r2, #0
 8001278:	f000 f82a 	bl	80012d0 <CheckWinningMove>
 800127c:	4603      	mov	r3, r0
 800127e:	e023      	b.n	80012c8 <WinOrBlock+0x9c>
	}
	if(CheckWinningMove(i, j, 1, 1)<8){
 8001280:	79f8      	ldrb	r0, [r7, #7]
 8001282:	79b9      	ldrb	r1, [r7, #6]
 8001284:	2301      	movs	r3, #1
 8001286:	2201      	movs	r2, #1
 8001288:	f000 f822 	bl	80012d0 <CheckWinningMove>
 800128c:	4603      	mov	r3, r0
 800128e:	2b07      	cmp	r3, #7
 8001290:	d807      	bhi.n	80012a2 <WinOrBlock+0x76>
		return CheckWinningMove(i, j, 1, 1);
 8001292:	79f8      	ldrb	r0, [r7, #7]
 8001294:	79b9      	ldrb	r1, [r7, #6]
 8001296:	2301      	movs	r3, #1
 8001298:	2201      	movs	r2, #1
 800129a:	f000 f819 	bl	80012d0 <CheckWinningMove>
 800129e:	4603      	mov	r3, r0
 80012a0:	e012      	b.n	80012c8 <WinOrBlock+0x9c>
	}
	if(CheckWinningMove(i, j, 1, -1)){
 80012a2:	79f8      	ldrb	r0, [r7, #7]
 80012a4:	79b9      	ldrb	r1, [r7, #6]
 80012a6:	f04f 33ff 	mov.w	r3, #4294967295
 80012aa:	2201      	movs	r2, #1
 80012ac:	f000 f810 	bl	80012d0 <CheckWinningMove>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d007      	beq.n	80012c6 <WinOrBlock+0x9a>
		return CheckWinningMove(i, j, 1, 0);
 80012b6:	79f8      	ldrb	r0, [r7, #7]
 80012b8:	79b9      	ldrb	r1, [r7, #6]
 80012ba:	2300      	movs	r3, #0
 80012bc:	2201      	movs	r2, #1
 80012be:	f000 f807 	bl	80012d0 <CheckWinningMove>
 80012c2:	4603      	mov	r3, r0
 80012c4:	e000      	b.n	80012c8 <WinOrBlock+0x9c>
	}
	return 8;
 80012c6:	2308      	movs	r3, #8
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <CheckWinningMove>:

uint8_t CheckWinningMove(int i, int j, int dir_i, int dir_j){
 80012d0:	b490      	push	{r4, r7}
 80012d2:	b086      	sub	sp, #24
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	60f8      	str	r0, [r7, #12]
 80012d8:	60b9      	str	r1, [r7, #8]
 80012da:	607a      	str	r2, [r7, #4]
 80012dc:	603b      	str	r3, [r7, #0]
    for (int k = 1; k < 3; k++){
 80012de:	2301      	movs	r3, #1
 80012e0:	617b      	str	r3, [r7, #20]
 80012e2:	e048      	b.n	8001376 <CheckWinningMove+0xa6>
        if ((i+dir_i*k)>boardColumns || (i+dir_i*k)<0){
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	697a      	ldr	r2, [r7, #20]
 80012e8:	fb03 f202 	mul.w	r2, r3, r2
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	4413      	add	r3, r2
 80012f0:	2b07      	cmp	r3, #7
 80012f2:	dc07      	bgt.n	8001304 <CheckWinningMove+0x34>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	697a      	ldr	r2, [r7, #20]
 80012f8:	fb03 f202 	mul.w	r2, r3, r2
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	4413      	add	r3, r2
 8001300:	2b00      	cmp	r3, #0
 8001302:	da01      	bge.n	8001308 <CheckWinningMove+0x38>
            return 8;
 8001304:	2308      	movs	r3, #8
 8001306:	e061      	b.n	80013cc <CheckWinningMove+0xfc>
        }
        if ((j+dir_j*k)>boardRows || (j+dir_j*k)<0){
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	697a      	ldr	r2, [r7, #20]
 800130c:	fb03 f202 	mul.w	r2, r3, r2
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	4413      	add	r3, r2
 8001314:	2b06      	cmp	r3, #6
 8001316:	dc07      	bgt.n	8001328 <CheckWinningMove+0x58>
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	697a      	ldr	r2, [r7, #20]
 800131c:	fb03 f202 	mul.w	r2, r3, r2
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	4413      	add	r3, r2
 8001324:	2b00      	cmp	r3, #0
 8001326:	da01      	bge.n	800132c <CheckWinningMove+0x5c>
            return 8;
 8001328:	2308      	movs	r3, #8
 800132a:	e04f      	b.n	80013cc <CheckWinningMove+0xfc>
        }
        if (gameBoard[i][j] != gameBoard[i+dir_i*k][j+dir_j*k]){
 800132c:	492a      	ldr	r1, [pc, #168]	@ (80013d8 <CheckWinningMove+0x108>)
 800132e:	68fa      	ldr	r2, [r7, #12]
 8001330:	4613      	mov	r3, r2
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	4413      	add	r3, r2
 8001336:	005b      	lsls	r3, r3, #1
 8001338:	18ca      	adds	r2, r1, r3
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	4413      	add	r3, r2
 800133e:	7819      	ldrb	r1, [r3, #0]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	697a      	ldr	r2, [r7, #20]
 8001344:	fb03 f202 	mul.w	r2, r3, r2
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	441a      	add	r2, r3
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	6978      	ldr	r0, [r7, #20]
 8001350:	fb03 f000 	mul.w	r0, r3, r0
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	4418      	add	r0, r3
 8001358:	4c1f      	ldr	r4, [pc, #124]	@ (80013d8 <CheckWinningMove+0x108>)
 800135a:	4613      	mov	r3, r2
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	4413      	add	r3, r2
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	4423      	add	r3, r4
 8001364:	4403      	add	r3, r0
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	4299      	cmp	r1, r3
 800136a:	d001      	beq.n	8001370 <CheckWinningMove+0xa0>
            return 8;
 800136c:	2308      	movs	r3, #8
 800136e:	e02d      	b.n	80013cc <CheckWinningMove+0xfc>
    for (int k = 1; k < 3; k++){
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	3301      	adds	r3, #1
 8001374:	617b      	str	r3, [r7, #20]
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	2b02      	cmp	r3, #2
 800137a:	ddb3      	ble.n	80012e4 <CheckWinningMove+0x14>
        }
    }
	if((i+dir_i*4)>boardColumns || (j+dir_j*4)>boardRows || gameBoard[i+dir_i*4][j+dir_j*4] != 0){
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	009a      	lsls	r2, r3, #2
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	4413      	add	r3, r2
 8001384:	2b07      	cmp	r3, #7
 8001386:	dc17      	bgt.n	80013b8 <CheckWinningMove+0xe8>
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	009a      	lsls	r2, r3, #2
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	4413      	add	r3, r2
 8001390:	2b06      	cmp	r3, #6
 8001392:	dc11      	bgt.n	80013b8 <CheckWinningMove+0xe8>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	009a      	lsls	r2, r3, #2
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	441a      	add	r2, r3
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	0099      	lsls	r1, r3, #2
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	4419      	add	r1, r3
 80013a4:	480c      	ldr	r0, [pc, #48]	@ (80013d8 <CheckWinningMove+0x108>)
 80013a6:	4613      	mov	r3, r2
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	4413      	add	r3, r2
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	4403      	add	r3, r0
 80013b0:	440b      	add	r3, r1
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <CheckWinningMove+0xec>
		return 8;
 80013b8:	2308      	movs	r3, #8
 80013ba:	e007      	b.n	80013cc <CheckWinningMove+0xfc>
	}
    return i+dir_i*4;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	b2da      	uxtb	r2, r3
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	4413      	add	r3, r2
 80013ca:	b2db      	uxtb	r3, r3

}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3718      	adds	r7, #24
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bc90      	pop	{r4, r7}
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	20000058 	.word	0x20000058

080013dc <twoAway>:

uint8_t twoAway(uint8_t i, uint8_t j){
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	460a      	mov	r2, r1
 80013e6:	71fb      	strb	r3, [r7, #7]
 80013e8:	4613      	mov	r3, r2
 80013ea:	71bb      	strb	r3, [r7, #6]
	if(CheckTwoAway(i, j, 1, 0)<8){
 80013ec:	79f8      	ldrb	r0, [r7, #7]
 80013ee:	79b9      	ldrb	r1, [r7, #6]
 80013f0:	2300      	movs	r3, #0
 80013f2:	2201      	movs	r2, #1
 80013f4:	f000 f844 	bl	8001480 <CheckTwoAway>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b07      	cmp	r3, #7
 80013fc:	d807      	bhi.n	800140e <twoAway+0x32>
		return CheckTwoAway(i, j, 1, 0);
 80013fe:	79f8      	ldrb	r0, [r7, #7]
 8001400:	79b9      	ldrb	r1, [r7, #6]
 8001402:	2300      	movs	r3, #0
 8001404:	2201      	movs	r2, #1
 8001406:	f000 f83b 	bl	8001480 <CheckTwoAway>
 800140a:	4603      	mov	r3, r0
 800140c:	e034      	b.n	8001478 <twoAway+0x9c>
	}
	if(CheckTwoAway(i, j, 0, 1)<8){
 800140e:	79f8      	ldrb	r0, [r7, #7]
 8001410:	79b9      	ldrb	r1, [r7, #6]
 8001412:	2301      	movs	r3, #1
 8001414:	2200      	movs	r2, #0
 8001416:	f000 f833 	bl	8001480 <CheckTwoAway>
 800141a:	4603      	mov	r3, r0
 800141c:	2b07      	cmp	r3, #7
 800141e:	d807      	bhi.n	8001430 <twoAway+0x54>
		return CheckTwoAway(i, j, 0, 1);
 8001420:	79f8      	ldrb	r0, [r7, #7]
 8001422:	79b9      	ldrb	r1, [r7, #6]
 8001424:	2301      	movs	r3, #1
 8001426:	2200      	movs	r2, #0
 8001428:	f000 f82a 	bl	8001480 <CheckTwoAway>
 800142c:	4603      	mov	r3, r0
 800142e:	e023      	b.n	8001478 <twoAway+0x9c>
	}
	if(CheckTwoAway(i, j, 1, 1)<8){
 8001430:	79f8      	ldrb	r0, [r7, #7]
 8001432:	79b9      	ldrb	r1, [r7, #6]
 8001434:	2301      	movs	r3, #1
 8001436:	2201      	movs	r2, #1
 8001438:	f000 f822 	bl	8001480 <CheckTwoAway>
 800143c:	4603      	mov	r3, r0
 800143e:	2b07      	cmp	r3, #7
 8001440:	d807      	bhi.n	8001452 <twoAway+0x76>
		return CheckTwoAway(i, j, 1, 1);
 8001442:	79f8      	ldrb	r0, [r7, #7]
 8001444:	79b9      	ldrb	r1, [r7, #6]
 8001446:	2301      	movs	r3, #1
 8001448:	2201      	movs	r2, #1
 800144a:	f000 f819 	bl	8001480 <CheckTwoAway>
 800144e:	4603      	mov	r3, r0
 8001450:	e012      	b.n	8001478 <twoAway+0x9c>
	}
	if(CheckTwoAway(i, j, 1, -1)){
 8001452:	79f8      	ldrb	r0, [r7, #7]
 8001454:	79b9      	ldrb	r1, [r7, #6]
 8001456:	f04f 33ff 	mov.w	r3, #4294967295
 800145a:	2201      	movs	r2, #1
 800145c:	f000 f810 	bl	8001480 <CheckTwoAway>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d007      	beq.n	8001476 <twoAway+0x9a>
		return CheckTwoAway(i, j, 1, 0);
 8001466:	79f8      	ldrb	r0, [r7, #7]
 8001468:	79b9      	ldrb	r1, [r7, #6]
 800146a:	2300      	movs	r3, #0
 800146c:	2201      	movs	r2, #1
 800146e:	f000 f807 	bl	8001480 <CheckTwoAway>
 8001472:	4603      	mov	r3, r0
 8001474:	e000      	b.n	8001478 <twoAway+0x9c>
	}
	return 8;
 8001476:	2308      	movs	r3, #8
}
 8001478:	4618      	mov	r0, r3
 800147a:	3708      	adds	r7, #8
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <CheckTwoAway>:

uint8_t CheckTwoAway(int i, int j, int dir_i, int dir_j){
 8001480:	b490      	push	{r4, r7}
 8001482:	b086      	sub	sp, #24
 8001484:	af00      	add	r7, sp, #0
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	60b9      	str	r1, [r7, #8]
 800148a:	607a      	str	r2, [r7, #4]
 800148c:	603b      	str	r3, [r7, #0]
    for (int k = 1; k < 2; k++){
 800148e:	2301      	movs	r3, #1
 8001490:	617b      	str	r3, [r7, #20]
 8001492:	e048      	b.n	8001526 <CheckTwoAway+0xa6>
        if ((i+dir_i*k)>boardColumns || (i+dir_i*k)<0){
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	697a      	ldr	r2, [r7, #20]
 8001498:	fb03 f202 	mul.w	r2, r3, r2
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	4413      	add	r3, r2
 80014a0:	2b07      	cmp	r3, #7
 80014a2:	dc07      	bgt.n	80014b4 <CheckTwoAway+0x34>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	697a      	ldr	r2, [r7, #20]
 80014a8:	fb03 f202 	mul.w	r2, r3, r2
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	4413      	add	r3, r2
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	da01      	bge.n	80014b8 <CheckTwoAway+0x38>
            return 8;
 80014b4:	2308      	movs	r3, #8
 80014b6:	e06b      	b.n	8001590 <CheckTwoAway+0x110>
        }
        if ((j+dir_j*k)>boardRows || (j+dir_j*k)<0){
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	697a      	ldr	r2, [r7, #20]
 80014bc:	fb03 f202 	mul.w	r2, r3, r2
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	4413      	add	r3, r2
 80014c4:	2b06      	cmp	r3, #6
 80014c6:	dc07      	bgt.n	80014d8 <CheckTwoAway+0x58>
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	697a      	ldr	r2, [r7, #20]
 80014cc:	fb03 f202 	mul.w	r2, r3, r2
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	4413      	add	r3, r2
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	da01      	bge.n	80014dc <CheckTwoAway+0x5c>
            return 8;
 80014d8:	2308      	movs	r3, #8
 80014da:	e059      	b.n	8001590 <CheckTwoAway+0x110>
        }
        if (gameBoard[i][j] != gameBoard[i+dir_i*k][j+dir_j*k]){
 80014dc:	492f      	ldr	r1, [pc, #188]	@ (800159c <CheckTwoAway+0x11c>)
 80014de:	68fa      	ldr	r2, [r7, #12]
 80014e0:	4613      	mov	r3, r2
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	4413      	add	r3, r2
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	18ca      	adds	r2, r1, r3
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	4413      	add	r3, r2
 80014ee:	7819      	ldrb	r1, [r3, #0]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	697a      	ldr	r2, [r7, #20]
 80014f4:	fb03 f202 	mul.w	r2, r3, r2
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	441a      	add	r2, r3
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	6978      	ldr	r0, [r7, #20]
 8001500:	fb03 f000 	mul.w	r0, r3, r0
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	4418      	add	r0, r3
 8001508:	4c24      	ldr	r4, [pc, #144]	@ (800159c <CheckTwoAway+0x11c>)
 800150a:	4613      	mov	r3, r2
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	4413      	add	r3, r2
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	4423      	add	r3, r4
 8001514:	4403      	add	r3, r0
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	4299      	cmp	r1, r3
 800151a:	d001      	beq.n	8001520 <CheckTwoAway+0xa0>
            return 8;
 800151c:	2308      	movs	r3, #8
 800151e:	e037      	b.n	8001590 <CheckTwoAway+0x110>
    for (int k = 1; k < 2; k++){
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	3301      	adds	r3, #1
 8001524:	617b      	str	r3, [r7, #20]
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	2b01      	cmp	r3, #1
 800152a:	ddb3      	ble.n	8001494 <CheckTwoAway+0x14>
        }
    }
	if((i+dir_i*3)>boardColumns || (j+dir_j*3)>boardRows || gameBoard[i+dir_i*3][j+dir_j*3] != 0){
 800152c:	687a      	ldr	r2, [r7, #4]
 800152e:	4613      	mov	r3, r2
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	441a      	add	r2, r3
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	4413      	add	r3, r2
 8001538:	2b07      	cmp	r3, #7
 800153a:	dc1d      	bgt.n	8001578 <CheckTwoAway+0xf8>
 800153c:	683a      	ldr	r2, [r7, #0]
 800153e:	4613      	mov	r3, r2
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	441a      	add	r2, r3
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	4413      	add	r3, r2
 8001548:	2b06      	cmp	r3, #6
 800154a:	dc15      	bgt.n	8001578 <CheckTwoAway+0xf8>
 800154c:	687a      	ldr	r2, [r7, #4]
 800154e:	4613      	mov	r3, r2
 8001550:	005b      	lsls	r3, r3, #1
 8001552:	441a      	add	r2, r3
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	441a      	add	r2, r3
 8001558:	6839      	ldr	r1, [r7, #0]
 800155a:	460b      	mov	r3, r1
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	4419      	add	r1, r3
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	4419      	add	r1, r3
 8001564:	480d      	ldr	r0, [pc, #52]	@ (800159c <CheckTwoAway+0x11c>)
 8001566:	4613      	mov	r3, r2
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	4413      	add	r3, r2
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	4403      	add	r3, r0
 8001570:	440b      	add	r3, r1
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <CheckTwoAway+0xfc>
		return 8;
 8001578:	2308      	movs	r3, #8
 800157a:	e009      	b.n	8001590 <CheckTwoAway+0x110>
	}
    return i+dir_i*3;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	b2db      	uxtb	r3, r3
 8001580:	461a      	mov	r2, r3
 8001582:	0052      	lsls	r2, r2, #1
 8001584:	4413      	add	r3, r2
 8001586:	b2da      	uxtb	r2, r3
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	b2db      	uxtb	r3, r3
 800158c:	4413      	add	r3, r2
 800158e:	b2db      	uxtb	r3, r3

}
 8001590:	4618      	mov	r0, r3
 8001592:	3718      	adds	r7, #24
 8001594:	46bd      	mov	sp, r7
 8001596:	bc90      	pop	{r4, r7}
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	20000058 	.word	0x20000058

080015a0 <EXTI0_IRQHandler>:
		}
	}
}

	
void EXTI0_IRQHandler(){
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 80015a4:	2006      	movs	r0, #6
 80015a6:	f001 ff86 	bl	80034b6 <HAL_NVIC_DisableIRQ>
	if(winner == 0){
 80015aa:	4b08      	ldr	r3, [pc, #32]	@ (80015cc <EXTI0_IRQHandler+0x2c>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d102      	bne.n	80015b8 <EXTI0_IRQHandler+0x18>
		drop();
 80015b2:	f7ff f891 	bl	80006d8 <drop>
 80015b6:	e001      	b.n	80015bc <EXTI0_IRQHandler+0x1c>
	}
	else{
		newGame();
 80015b8:	f7ff f84e 	bl	8000658 <newGame>
	}
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);
 80015bc:	4b04      	ldr	r3, [pc, #16]	@ (80015d0 <EXTI0_IRQHandler+0x30>)
 80015be:	2201      	movs	r2, #1
 80015c0:	615a      	str	r2, [r3, #20]
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80015c2:	2006      	movs	r0, #6
 80015c4:	f001 ff69 	bl	800349a <HAL_NVIC_EnableIRQ>
}
 80015c8:	bf00      	nop
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	20000044 	.word	0x20000044
 80015d0:	40013c00 	.word	0x40013c00

080015d4 <Button_Init_Interrupt>:
#include "Button_Driver.h"



void Button_Init_Interrupt(){
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b086      	sub	sp, #24
 80015d8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef PinConfig;
	PinConfig.Mode = GPIO_MODE_IT_RISING;
 80015da:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80015de:	60bb      	str	r3, [r7, #8]
	PinConfig.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80015e0:	2301      	movs	r3, #1
 80015e2:	613b      	str	r3, [r7, #16]
	PinConfig.Pull = GPIO_NOPULL;
 80015e4:	2300      	movs	r3, #0
 80015e6:	60fb      	str	r3, [r7, #12]
	PinConfig.Pin = GPIO_PIN_0;
 80015e8:	2301      	movs	r3, #1
 80015ea:	607b      	str	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80015ec:	2300      	movs	r3, #0
 80015ee:	603b      	str	r3, [r7, #0]
 80015f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001620 <Button_Init_Interrupt+0x4c>)
 80015f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f4:	4a0a      	ldr	r2, [pc, #40]	@ (8001620 <Button_Init_Interrupt+0x4c>)
 80015f6:	f043 0301 	orr.w	r3, r3, #1
 80015fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80015fc:	4b08      	ldr	r3, [pc, #32]	@ (8001620 <Button_Init_Interrupt+0x4c>)
 80015fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001600:	f003 0301 	and.w	r3, r3, #1
 8001604:	603b      	str	r3, [r7, #0]
 8001606:	683b      	ldr	r3, [r7, #0]
	HAL_GPIO_Init(GPIOA, &PinConfig);
 8001608:	1d3b      	adds	r3, r7, #4
 800160a:	4619      	mov	r1, r3
 800160c:	4805      	ldr	r0, [pc, #20]	@ (8001624 <Button_Init_Interrupt+0x50>)
 800160e:	f001 ff6d 	bl	80034ec <HAL_GPIO_Init>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001612:	2006      	movs	r0, #6
 8001614:	f001 ff41 	bl	800349a <HAL_NVIC_EnableIRQ>
}
 8001618:	bf00      	nop
 800161a:	3718      	adds	r7, #24
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	40023800 	.word	0x40023800
 8001624:	40020000 	.word	0x40020000

08001628 <Gyro_Init>:

static HAL_StatusTypeDef HAL_Status;

static SPI_HandleTypeDef hspi5;

void Gyro_Init(){
 8001628:	b580      	push	{r7, lr}
 800162a:	b098      	sub	sp, #96	@ 0x60
 800162c:	af00      	add	r7, sp, #0
		__HAL_RCC_GPIOF_CLK_ENABLE();
 800162e:	2300      	movs	r3, #0
 8001630:	60bb      	str	r3, [r7, #8]
 8001632:	4b65      	ldr	r3, [pc, #404]	@ (80017c8 <Gyro_Init+0x1a0>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001636:	4a64      	ldr	r2, [pc, #400]	@ (80017c8 <Gyro_Init+0x1a0>)
 8001638:	f043 0320 	orr.w	r3, r3, #32
 800163c:	6313      	str	r3, [r2, #48]	@ 0x30
 800163e:	4b62      	ldr	r3, [pc, #392]	@ (80017c8 <Gyro_Init+0x1a0>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001642:	f003 0320 	and.w	r3, r3, #32
 8001646:	60bb      	str	r3, [r7, #8]
 8001648:	68bb      	ldr	r3, [r7, #8]
		__HAL_RCC_GPIOC_CLK_ENABLE();
 800164a:	2300      	movs	r3, #0
 800164c:	607b      	str	r3, [r7, #4]
 800164e:	4b5e      	ldr	r3, [pc, #376]	@ (80017c8 <Gyro_Init+0x1a0>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001652:	4a5d      	ldr	r2, [pc, #372]	@ (80017c8 <Gyro_Init+0x1a0>)
 8001654:	f043 0304 	orr.w	r3, r3, #4
 8001658:	6313      	str	r3, [r2, #48]	@ 0x30
 800165a:	4b5b      	ldr	r3, [pc, #364]	@ (80017c8 <Gyro_Init+0x1a0>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800165e:	f003 0304 	and.w	r3, r3, #4
 8001662:	607b      	str	r3, [r7, #4]
 8001664:	687b      	ldr	r3, [r7, #4]
		__HAL_RCC_SPI5_CLK_ENABLE();
 8001666:	2300      	movs	r3, #0
 8001668:	603b      	str	r3, [r7, #0]
 800166a:	4b57      	ldr	r3, [pc, #348]	@ (80017c8 <Gyro_Init+0x1a0>)
 800166c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800166e:	4a56      	ldr	r2, [pc, #344]	@ (80017c8 <Gyro_Init+0x1a0>)
 8001670:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001674:	6453      	str	r3, [r2, #68]	@ 0x44
 8001676:	4b54      	ldr	r3, [pc, #336]	@ (80017c8 <Gyro_Init+0x1a0>)
 8001678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800167a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800167e:	603b      	str	r3, [r7, #0]
 8001680:	683b      	ldr	r3, [r7, #0]

	GPIO_InitTypeDef PinConfig0;
	PinConfig0.Mode = GPIO_MODE_AF_PP;
 8001682:	2302      	movs	r3, #2
 8001684:	64fb      	str	r3, [r7, #76]	@ 0x4c
	PinConfig0.Pull = GPIO_NOPULL;
 8001686:	2300      	movs	r3, #0
 8001688:	653b      	str	r3, [r7, #80]	@ 0x50
	PinConfig0.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800168a:	2301      	movs	r3, #1
 800168c:	657b      	str	r3, [r7, #84]	@ 0x54
	PinConfig0.Alternate = GPIO_AF5_SPI5;
 800168e:	2305      	movs	r3, #5
 8001690:	65bb      	str	r3, [r7, #88]	@ 0x58
	PinConfig0.Pin = GPIO_PIN_7;
 8001692:	2380      	movs	r3, #128	@ 0x80
 8001694:	64bb      	str	r3, [r7, #72]	@ 0x48
	HAL_GPIO_Init(GPIOF, &PinConfig0);
 8001696:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800169a:	4619      	mov	r1, r3
 800169c:	484b      	ldr	r0, [pc, #300]	@ (80017cc <Gyro_Init+0x1a4>)
 800169e:	f001 ff25 	bl	80034ec <HAL_GPIO_Init>

	GPIO_InitTypeDef PinConfig1;
	PinConfig1.Mode = GPIO_MODE_AF_PP;
 80016a2:	2302      	movs	r3, #2
 80016a4:	63bb      	str	r3, [r7, #56]	@ 0x38
	PinConfig1.Pull = GPIO_NOPULL;
 80016a6:	2300      	movs	r3, #0
 80016a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
	PinConfig1.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80016aa:	2301      	movs	r3, #1
 80016ac:	643b      	str	r3, [r7, #64]	@ 0x40
	PinConfig1.Alternate = GPIO_AF5_SPI5;
 80016ae:	2305      	movs	r3, #5
 80016b0:	647b      	str	r3, [r7, #68]	@ 0x44
	PinConfig1.Pin = GPIO_PIN_8;
 80016b2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016b6:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(GPIOF, &PinConfig1);
 80016b8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80016bc:	4619      	mov	r1, r3
 80016be:	4843      	ldr	r0, [pc, #268]	@ (80017cc <Gyro_Init+0x1a4>)
 80016c0:	f001 ff14 	bl	80034ec <HAL_GPIO_Init>

	GPIO_InitTypeDef PinConfig2;
	PinConfig2.Mode = GPIO_MODE_AF_PP;
 80016c4:	2302      	movs	r3, #2
 80016c6:	627b      	str	r3, [r7, #36]	@ 0x24
	PinConfig2.Pull = GPIO_NOPULL;
 80016c8:	2300      	movs	r3, #0
 80016ca:	62bb      	str	r3, [r7, #40]	@ 0x28
	PinConfig2.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80016cc:	2301      	movs	r3, #1
 80016ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
	PinConfig2.Alternate = GPIO_AF5_SPI5;
 80016d0:	2305      	movs	r3, #5
 80016d2:	633b      	str	r3, [r7, #48]	@ 0x30
	PinConfig2.Pin = GPIO_PIN_9;
 80016d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80016d8:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOF, &PinConfig2);
 80016da:	f107 0320 	add.w	r3, r7, #32
 80016de:	4619      	mov	r1, r3
 80016e0:	483a      	ldr	r0, [pc, #232]	@ (80017cc <Gyro_Init+0x1a4>)
 80016e2:	f001 ff03 	bl	80034ec <HAL_GPIO_Init>

	GPIO_InitTypeDef PinConfig3;
	PinConfig3.Mode = GPIO_MODE_OUTPUT_PP;
 80016e6:	2301      	movs	r3, #1
 80016e8:	613b      	str	r3, [r7, #16]
	PinConfig3.Pull = GPIO_NOPULL;
 80016ea:	2300      	movs	r3, #0
 80016ec:	617b      	str	r3, [r7, #20]
	PinConfig3.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80016ee:	2301      	movs	r3, #1
 80016f0:	61bb      	str	r3, [r7, #24]
	PinConfig3.Pin = GPIO_PIN_1;
 80016f2:	2302      	movs	r3, #2
 80016f4:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOC, &PinConfig3);
 80016f6:	f107 030c 	add.w	r3, r7, #12
 80016fa:	4619      	mov	r1, r3
 80016fc:	4834      	ldr	r0, [pc, #208]	@ (80017d0 <Gyro_Init+0x1a8>)
 80016fe:	f001 fef5 	bl	80034ec <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 1);
 8001702:	2201      	movs	r2, #1
 8001704:	2102      	movs	r1, #2
 8001706:	4832      	ldr	r0, [pc, #200]	@ (80017d0 <Gyro_Init+0x1a8>)
 8001708:	f002 f9c0 	bl	8003a8c <HAL_GPIO_WritePin>

	hspi5.Instance = SPI5;
 800170c:	4b31      	ldr	r3, [pc, #196]	@ (80017d4 <Gyro_Init+0x1ac>)
 800170e:	4a32      	ldr	r2, [pc, #200]	@ (80017d8 <Gyro_Init+0x1b0>)
 8001710:	601a      	str	r2, [r3, #0]
	hspi5.Init.Mode = SPI_MODE_MASTER;
 8001712:	4b30      	ldr	r3, [pc, #192]	@ (80017d4 <Gyro_Init+0x1ac>)
 8001714:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001718:	605a      	str	r2, [r3, #4]
	hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800171a:	4b2e      	ldr	r3, [pc, #184]	@ (80017d4 <Gyro_Init+0x1ac>)
 800171c:	2200      	movs	r2, #0
 800171e:	609a      	str	r2, [r3, #8]
	hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001720:	4b2c      	ldr	r3, [pc, #176]	@ (80017d4 <Gyro_Init+0x1ac>)
 8001722:	2200      	movs	r2, #0
 8001724:	60da      	str	r2, [r3, #12]
	hspi5.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001726:	4b2b      	ldr	r3, [pc, #172]	@ (80017d4 <Gyro_Init+0x1ac>)
 8001728:	2202      	movs	r2, #2
 800172a:	611a      	str	r2, [r3, #16]
	hspi5.Init.CLKPhase = SPI_PHASE_2EDGE;
 800172c:	4b29      	ldr	r3, [pc, #164]	@ (80017d4 <Gyro_Init+0x1ac>)
 800172e:	2201      	movs	r2, #1
 8001730:	615a      	str	r2, [r3, #20]
	hspi5.Init.NSS = SPI_NSS_SOFT;
 8001732:	4b28      	ldr	r3, [pc, #160]	@ (80017d4 <Gyro_Init+0x1ac>)
 8001734:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001738:	619a      	str	r2, [r3, #24]
	hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800173a:	4b26      	ldr	r3, [pc, #152]	@ (80017d4 <Gyro_Init+0x1ac>)
 800173c:	2200      	movs	r2, #0
 800173e:	61da      	str	r2, [r3, #28]
	hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001740:	4b24      	ldr	r3, [pc, #144]	@ (80017d4 <Gyro_Init+0x1ac>)
 8001742:	2200      	movs	r2, #0
 8001744:	621a      	str	r2, [r3, #32]
	hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001746:	4b23      	ldr	r3, [pc, #140]	@ (80017d4 <Gyro_Init+0x1ac>)
 8001748:	2200      	movs	r2, #0
 800174a:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_Status = HAL_SPI_Init(&hspi5);
 800174c:	4821      	ldr	r0, [pc, #132]	@ (80017d4 <Gyro_Init+0x1ac>)
 800174e:	f004 fac5 	bl	8005cdc <HAL_SPI_Init>
 8001752:	4603      	mov	r3, r0
 8001754:	461a      	mov	r2, r3
 8001756:	4b21      	ldr	r3, [pc, #132]	@ (80017dc <Gyro_Init+0x1b4>)
 8001758:	701a      	strb	r2, [r3, #0]

	Gyro_Power();
 800175a:	f000 f85d 	bl	8001818 <Gyro_Power>
	uint8_t CR5_Config = 0;
 800175e:	2300      	movs	r3, #0
 8001760:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	CR5_Config |= (GYRO_CR5_REBOOTMEMCONTENT);
 8001764:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8001768:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800176c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	CR5_Config |= (GYRO_CR5_FIFO);
 8001770:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8001774:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001778:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	Gyro_ConfigureReg(GYRO_CR5, CR5_Config);
 800177c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8001780:	4619      	mov	r1, r3
 8001782:	2024      	movs	r0, #36	@ 0x24
 8001784:	f000 f85e 	bl	8001844 <Gyro_ConfigureReg>
	uint8_t CR1_Config = 0;
 8001788:	2300      	movs	r3, #0
 800178a:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
	CR1_Config |= GYRO_CR1_POWERDOWN_NORMAL_ENABLE;
 800178e:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8001792:	f043 0308 	orr.w	r3, r3, #8
 8001796:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
	CR1_Config |= GYRO_CR1_BANDWIDTH_SET;
 800179a:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 800179e:	f043 0310 	orr.w	r3, r3, #16
 80017a2:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
	CR1_Config |= GYRO_CR1_Y_ENABLE;
 80017a6:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 80017aa:	f043 0302 	orr.w	r3, r3, #2
 80017ae:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
	Gyro_ConfigureReg(GYRO_CR1, CR1_Config);
 80017b2:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 80017b6:	4619      	mov	r1, r3
 80017b8:	2020      	movs	r0, #32
 80017ba:	f000 f843 	bl	8001844 <Gyro_ConfigureReg>
}
 80017be:	bf00      	nop
 80017c0:	3760      	adds	r7, #96	@ 0x60
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	40023800 	.word	0x40023800
 80017cc:	40021400 	.word	0x40021400
 80017d0:	40020800 	.word	0x40020800
 80017d4:	20000088 	.word	0x20000088
 80017d8:	40015000 	.word	0x40015000
 80017dc:	20000084 	.word	0x20000084

080017e0 <Gyro_GetYLoc>:
int16_t Gyro_GetYLoc(){
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
	uint8_t yLow = Gyro_ReadReg(GYRO_OUT_Y_L);
 80017e6:	202a      	movs	r0, #42	@ 0x2a
 80017e8:	f000 f854 	bl	8001894 <Gyro_ReadReg>
 80017ec:	4603      	mov	r3, r0
 80017ee:	71fb      	strb	r3, [r7, #7]
	uint16_t yHigh = Gyro_ReadReg(GYRO_OUT_Y_H);
 80017f0:	202b      	movs	r0, #43	@ 0x2b
 80017f2:	f000 f84f 	bl	8001894 <Gyro_ReadReg>
 80017f6:	4603      	mov	r3, r0
 80017f8:	80bb      	strh	r3, [r7, #4]
	yHigh = yHigh << 8;
 80017fa:	88bb      	ldrh	r3, [r7, #4]
 80017fc:	021b      	lsls	r3, r3, #8
 80017fe:	80bb      	strh	r3, [r7, #4]
	int16_t yLoc = (int16_t)(yLow | yHigh);
 8001800:	79fb      	ldrb	r3, [r7, #7]
 8001802:	b29a      	uxth	r2, r3
 8001804:	88bb      	ldrh	r3, [r7, #4]
 8001806:	4313      	orrs	r3, r2
 8001808:	b29b      	uxth	r3, r3
 800180a:	807b      	strh	r3, [r7, #2]
	return yLoc;
 800180c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
}
 8001810:	4618      	mov	r0, r3
 8001812:	3708      	adds	r7, #8
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}

08001818 <Gyro_Power>:
void Gyro_GetPrintID	(){
	uint8_t ID = Gyro_ReadReg(GYRO_WHO_AM_I);
	printf("Gyro ID: 0x%02X\n", ID);
}

void Gyro_Power(){
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
	uint8_t CR1_Config = 0;
 800181e:	2300      	movs	r3, #0
 8001820:	71fb      	strb	r3, [r7, #7]
	CR1_Config |= GYRO_CR1_POWERDOWN_NORMAL_ENABLE;
 8001822:	79fb      	ldrb	r3, [r7, #7]
 8001824:	f043 0308 	orr.w	r3, r3, #8
 8001828:	71fb      	strb	r3, [r7, #7]
	Gyro_ConfigureReg(GYRO_CR1, CR1_Config);
 800182a:	79fb      	ldrb	r3, [r7, #7]
 800182c:	4619      	mov	r1, r3
 800182e:	2020      	movs	r0, #32
 8001830:	f000 f808 	bl	8001844 <Gyro_ConfigureReg>
	HAL_Delay(100);
 8001834:	2064      	movs	r0, #100	@ 0x64
 8001836:	f001 fcf1 	bl	800321c <HAL_Delay>
}
 800183a:	bf00      	nop
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
	...

08001844 <Gyro_ConfigureReg>:
void Gyro_GetPrintTemp(){
	uint8_t Temp = Gyro_ReadReg(GYRO_OUT_TEMP);
	printf("Temperature: %d\n", Temp);
}

void Gyro_ConfigureReg(uint16_t Reg, uint8_t data){
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	4603      	mov	r3, r0
 800184c:	460a      	mov	r2, r1
 800184e:	80fb      	strh	r3, [r7, #6]
 8001850:	4613      	mov	r3, r2
 8001852:	717b      	strb	r3, [r7, #5]
	uint16_t package = 0;
 8001854:	2300      	movs	r3, #0
 8001856:	81fb      	strh	r3, [r7, #14]
	package = SPI_WRITE | Reg ;
 8001858:	88fb      	ldrh	r3, [r7, #6]
 800185a:	81fb      	strh	r3, [r7, #14]
	package |= (data << SPI_DATA_OFFSET);
 800185c:	797b      	ldrb	r3, [r7, #5]
 800185e:	b21b      	sxth	r3, r3
 8001860:	021b      	lsls	r3, r3, #8
 8001862:	b21a      	sxth	r2, r3
 8001864:	89fb      	ldrh	r3, [r7, #14]
 8001866:	b21b      	sxth	r3, r3
 8001868:	4313      	orrs	r3, r2
 800186a:	b21b      	sxth	r3, r3
 800186c:	b29b      	uxth	r3, r3
 800186e:	81fb      	strh	r3, [r7, #14]
	Gyro_EnableSlaveConnection();
 8001870:	f000 f85a 	bl	8001928 <Gyro_EnableSlaveConnection>

	HAL_SPI_Transmit(&hspi5, (uint8_t*) &package, 2, timeout);
 8001874:	f107 010e 	add.w	r1, r7, #14
 8001878:	f640 2328 	movw	r3, #2600	@ 0xa28
 800187c:	2202      	movs	r2, #2
 800187e:	4804      	ldr	r0, [pc, #16]	@ (8001890 <Gyro_ConfigureReg+0x4c>)
 8001880:	f004 fadd 	bl	8005e3e <HAL_SPI_Transmit>

	Gyro_DisableSlaveConnection();
 8001884:	f000 f85c 	bl	8001940 <Gyro_DisableSlaveConnection>

}
 8001888:	bf00      	nop
 800188a:	3710      	adds	r7, #16
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	20000088 	.word	0x20000088

08001894 <Gyro_ReadReg>:

uint16_t Gyro_ReadReg(uint16_t Reg){
 8001894:	b580      	push	{r7, lr}
 8001896:	b086      	sub	sp, #24
 8001898:	af02      	add	r7, sp, #8
 800189a:	4603      	mov	r3, r0
 800189c:	80fb      	strh	r3, [r7, #6]
	uint8_t package = 0;
 800189e:	2300      	movs	r3, #0
 80018a0:	737b      	strb	r3, [r7, #13]
	package = SPI_READ | Reg;
 80018a2:	88fb      	ldrh	r3, [r7, #6]
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	737b      	strb	r3, [r7, #13]
	uint16_t data = 0;
 80018ae:	2300      	movs	r3, #0
 80018b0:	817b      	strh	r3, [r7, #10]
	Gyro_EnableSlaveConnection();
 80018b2:	f000 f839 	bl	8001928 <Gyro_EnableSlaveConnection>

	while (HAL_GPIO_ReadPin(GYRO_CS_PORT, GYRO_CS_PIN) != GPIO_PIN_RESET);
 80018b6:	bf00      	nop
 80018b8:	2102      	movs	r1, #2
 80018ba:	4810      	ldr	r0, [pc, #64]	@ (80018fc <Gyro_ReadReg+0x68>)
 80018bc:	f002 f8ce 	bl	8003a5c <HAL_GPIO_ReadPin>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d1f8      	bne.n	80018b8 <Gyro_ReadReg+0x24>
	HAL_Status = HAL_SPI_TransmitReceive(&hspi5, &package,(uint8_t*) &data, 2, timeout);
 80018c6:	f107 020a 	add.w	r2, r7, #10
 80018ca:	f107 010d 	add.w	r1, r7, #13
 80018ce:	f640 2328 	movw	r3, #2600	@ 0xa28
 80018d2:	9300      	str	r3, [sp, #0]
 80018d4:	2302      	movs	r3, #2
 80018d6:	480a      	ldr	r0, [pc, #40]	@ (8001900 <Gyro_ReadReg+0x6c>)
 80018d8:	f004 fbf5 	bl	80060c6 <HAL_SPI_TransmitReceive>
 80018dc:	4603      	mov	r3, r0
 80018de:	461a      	mov	r2, r3
 80018e0:	4b08      	ldr	r3, [pc, #32]	@ (8001904 <Gyro_ReadReg+0x70>)
 80018e2:	701a      	strb	r2, [r3, #0]
	Gyro_VerifyHAL();
 80018e4:	f000 f810 	bl	8001908 <Gyro_VerifyHAL>
	uint16_t DataReturned = (0xFF00 & data) >> 8;
 80018e8:	897b      	ldrh	r3, [r7, #10]
 80018ea:	0a1b      	lsrs	r3, r3, #8
 80018ec:	81fb      	strh	r3, [r7, #14]
	Gyro_DisableSlaveConnection();
 80018ee:	f000 f827 	bl	8001940 <Gyro_DisableSlaveConnection>
	return DataReturned;
 80018f2:	89fb      	ldrh	r3, [r7, #14]

}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3710      	adds	r7, #16
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	40020800 	.word	0x40020800
 8001900:	20000088 	.word	0x20000088
 8001904:	20000084 	.word	0x20000084

08001908 <Gyro_VerifyHAL>:

void Gyro_VerifyHAL(){
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
	while(HAL_Status != HAL_OK);
 800190c:	bf00      	nop
 800190e:	4b05      	ldr	r3, [pc, #20]	@ (8001924 <Gyro_VerifyHAL+0x1c>)
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d1fb      	bne.n	800190e <Gyro_VerifyHAL+0x6>
}
 8001916:	bf00      	nop
 8001918:	bf00      	nop
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	20000084 	.word	0x20000084

08001928 <Gyro_EnableSlaveConnection>:

void Gyro_EnableSlaveConnection(){
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GYRO_CS_PORT, GYRO_CS_PIN, 0);
 800192c:	2200      	movs	r2, #0
 800192e:	2102      	movs	r1, #2
 8001930:	4802      	ldr	r0, [pc, #8]	@ (800193c <Gyro_EnableSlaveConnection+0x14>)
 8001932:	f002 f8ab 	bl	8003a8c <HAL_GPIO_WritePin>
}
 8001936:	bf00      	nop
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	40020800 	.word	0x40020800

08001940 <Gyro_DisableSlaveConnection>:

void Gyro_DisableSlaveConnection(){
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GYRO_CS_PORT, GYRO_CS_PIN, 1);
 8001944:	2201      	movs	r2, #1
 8001946:	2102      	movs	r1, #2
 8001948:	4802      	ldr	r0, [pc, #8]	@ (8001954 <Gyro_DisableSlaveConnection+0x14>)
 800194a:	f002 f89f 	bl	8003a8c <HAL_GPIO_WritePin>
}
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	40020800 	.word	0x40020800

08001958 <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b08c      	sub	sp, #48	@ 0x30
 800195c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	61bb      	str	r3, [r7, #24]
 8001962:	4b5a      	ldr	r3, [pc, #360]	@ (8001acc <LCD_GPIO_Init+0x174>)
 8001964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001966:	4a59      	ldr	r2, [pc, #356]	@ (8001acc <LCD_GPIO_Init+0x174>)
 8001968:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800196c:	6453      	str	r3, [r2, #68]	@ 0x44
 800196e:	4b57      	ldr	r3, [pc, #348]	@ (8001acc <LCD_GPIO_Init+0x174>)
 8001970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001972:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001976:	61bb      	str	r3, [r7, #24]
 8001978:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800197a:	2300      	movs	r3, #0
 800197c:	617b      	str	r3, [r7, #20]
 800197e:	4b53      	ldr	r3, [pc, #332]	@ (8001acc <LCD_GPIO_Init+0x174>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001982:	4a52      	ldr	r2, [pc, #328]	@ (8001acc <LCD_GPIO_Init+0x174>)
 8001984:	f043 0301 	orr.w	r3, r3, #1
 8001988:	6313      	str	r3, [r2, #48]	@ 0x30
 800198a:	4b50      	ldr	r3, [pc, #320]	@ (8001acc <LCD_GPIO_Init+0x174>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800198e:	f003 0301 	and.w	r3, r3, #1
 8001992:	617b      	str	r3, [r7, #20]
 8001994:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001996:	2300      	movs	r3, #0
 8001998:	613b      	str	r3, [r7, #16]
 800199a:	4b4c      	ldr	r3, [pc, #304]	@ (8001acc <LCD_GPIO_Init+0x174>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800199e:	4a4b      	ldr	r2, [pc, #300]	@ (8001acc <LCD_GPIO_Init+0x174>)
 80019a0:	f043 0302 	orr.w	r3, r3, #2
 80019a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019a6:	4b49      	ldr	r3, [pc, #292]	@ (8001acc <LCD_GPIO_Init+0x174>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019aa:	f003 0302 	and.w	r3, r3, #2
 80019ae:	613b      	str	r3, [r7, #16]
 80019b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019b2:	2300      	movs	r3, #0
 80019b4:	60fb      	str	r3, [r7, #12]
 80019b6:	4b45      	ldr	r3, [pc, #276]	@ (8001acc <LCD_GPIO_Init+0x174>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ba:	4a44      	ldr	r2, [pc, #272]	@ (8001acc <LCD_GPIO_Init+0x174>)
 80019bc:	f043 0304 	orr.w	r3, r3, #4
 80019c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019c2:	4b42      	ldr	r3, [pc, #264]	@ (8001acc <LCD_GPIO_Init+0x174>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c6:	f003 0304 	and.w	r3, r3, #4
 80019ca:	60fb      	str	r3, [r7, #12]
 80019cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019ce:	2300      	movs	r3, #0
 80019d0:	60bb      	str	r3, [r7, #8]
 80019d2:	4b3e      	ldr	r3, [pc, #248]	@ (8001acc <LCD_GPIO_Init+0x174>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d6:	4a3d      	ldr	r2, [pc, #244]	@ (8001acc <LCD_GPIO_Init+0x174>)
 80019d8:	f043 0308 	orr.w	r3, r3, #8
 80019dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80019de:	4b3b      	ldr	r3, [pc, #236]	@ (8001acc <LCD_GPIO_Init+0x174>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e2:	f003 0308 	and.w	r3, r3, #8
 80019e6:	60bb      	str	r3, [r7, #8]
 80019e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80019ea:	2300      	movs	r3, #0
 80019ec:	607b      	str	r3, [r7, #4]
 80019ee:	4b37      	ldr	r3, [pc, #220]	@ (8001acc <LCD_GPIO_Init+0x174>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f2:	4a36      	ldr	r2, [pc, #216]	@ (8001acc <LCD_GPIO_Init+0x174>)
 80019f4:	f043 0320 	orr.w	r3, r3, #32
 80019f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019fa:	4b34      	ldr	r3, [pc, #208]	@ (8001acc <LCD_GPIO_Init+0x174>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019fe:	f003 0320 	and.w	r3, r3, #32
 8001a02:	607b      	str	r3, [r7, #4]
 8001a04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a06:	2300      	movs	r3, #0
 8001a08:	603b      	str	r3, [r7, #0]
 8001a0a:	4b30      	ldr	r3, [pc, #192]	@ (8001acc <LCD_GPIO_Init+0x174>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a0e:	4a2f      	ldr	r2, [pc, #188]	@ (8001acc <LCD_GPIO_Init+0x174>)
 8001a10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a14:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a16:	4b2d      	ldr	r3, [pc, #180]	@ (8001acc <LCD_GPIO_Init+0x174>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a1e:	603b      	str	r3, [r7, #0]
 8001a20:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8001a22:	f641 0358 	movw	r3, #6232	@ 0x1858
 8001a26:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8001a28:	2302      	movs	r3, #2
 8001a2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001a30:	2302      	movs	r3, #2
 8001a32:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8001a34:	230e      	movs	r3, #14
 8001a36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001a38:	f107 031c 	add.w	r3, r7, #28
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4824      	ldr	r0, [pc, #144]	@ (8001ad0 <LCD_GPIO_Init+0x178>)
 8001a40:	f001 fd54 	bl	80034ec <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8001a44:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001a48:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001a4a:	f107 031c 	add.w	r3, r7, #28
 8001a4e:	4619      	mov	r1, r3
 8001a50:	4820      	ldr	r0, [pc, #128]	@ (8001ad4 <LCD_GPIO_Init+0x17c>)
 8001a52:	f001 fd4b 	bl	80034ec <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8001a56:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8001a5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001a5c:	f107 031c 	add.w	r3, r7, #28
 8001a60:	4619      	mov	r1, r3
 8001a62:	481d      	ldr	r0, [pc, #116]	@ (8001ad8 <LCD_GPIO_Init+0x180>)
 8001a64:	f001 fd42 	bl	80034ec <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8001a68:	2348      	movs	r3, #72	@ 0x48
 8001a6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001a6c:	f107 031c 	add.w	r3, r7, #28
 8001a70:	4619      	mov	r1, r3
 8001a72:	481a      	ldr	r0, [pc, #104]	@ (8001adc <LCD_GPIO_Init+0x184>)
 8001a74:	f001 fd3a 	bl	80034ec <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8001a78:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8001a7e:	f107 031c 	add.w	r3, r7, #28
 8001a82:	4619      	mov	r1, r3
 8001a84:	4816      	ldr	r0, [pc, #88]	@ (8001ae0 <LCD_GPIO_Init+0x188>)
 8001a86:	f001 fd31 	bl	80034ec <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8001a8a:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8001a8e:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001a90:	f107 031c 	add.w	r3, r7, #28
 8001a94:	4619      	mov	r1, r3
 8001a96:	4813      	ldr	r0, [pc, #76]	@ (8001ae4 <LCD_GPIO_Init+0x18c>)
 8001a98:	f001 fd28 	bl	80034ec <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8001aa0:	2309      	movs	r3, #9
 8001aa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001aa4:	f107 031c 	add.w	r3, r7, #28
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	480a      	ldr	r0, [pc, #40]	@ (8001ad4 <LCD_GPIO_Init+0x17c>)
 8001aac:	f001 fd1e 	bl	80034ec <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8001ab0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001ab4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001ab6:	f107 031c 	add.w	r3, r7, #28
 8001aba:	4619      	mov	r1, r3
 8001abc:	4809      	ldr	r0, [pc, #36]	@ (8001ae4 <LCD_GPIO_Init+0x18c>)
 8001abe:	f001 fd15 	bl	80034ec <HAL_GPIO_Init>
}
 8001ac2:	bf00      	nop
 8001ac4:	3730      	adds	r7, #48	@ 0x30
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	40023800 	.word	0x40023800
 8001ad0:	40020000 	.word	0x40020000
 8001ad4:	40020400 	.word	0x40020400
 8001ad8:	40020800 	.word	0x40020800
 8001adc:	40020c00 	.word	0x40020c00
 8001ae0:	40021400 	.word	0x40021400
 8001ae4:	40021800 	.word	0x40021800

08001ae8 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b090      	sub	sp, #64	@ 0x40
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4603      	mov	r3, r0
 8001af0:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 8001af2:	2300      	movs	r3, #0
 8001af4:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 8001af6:	23f0      	movs	r3, #240	@ 0xf0
 8001af8:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 8001afa:	2300      	movs	r3, #0
 8001afc:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 8001afe:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001b02:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 8001b04:	2302      	movs	r3, #2
 8001b06:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8001b08:	23ff      	movs	r3, #255	@ 0xff
 8001b0a:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001b10:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b14:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001b16:	2305      	movs	r3, #5
 8001b18:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 8001b1a:	79fb      	ldrb	r3, [r7, #7]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d101      	bne.n	8001b24 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 8001b20:	4b0f      	ldr	r3, [pc, #60]	@ (8001b60 <LTCD_Layer_Init+0x78>)
 8001b22:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 8001b24:	23f0      	movs	r3, #240	@ 0xf0
 8001b26:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8001b28:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001b2c:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8001b34:	2300      	movs	r3, #0
 8001b36:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 8001b40:	79fa      	ldrb	r2, [r7, #7]
 8001b42:	f107 030c 	add.w	r3, r7, #12
 8001b46:	4619      	mov	r1, r3
 8001b48:	4806      	ldr	r0, [pc, #24]	@ (8001b64 <LTCD_Layer_Init+0x7c>)
 8001b4a:	f003 f8ad 	bl	8004ca8 <HAL_LTDC_ConfigLayer>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 8001b54:	f000 f9aa 	bl	8001eac <LCD_Error_Handler>
	}
}
 8001b58:	bf00      	nop
 8001b5a:	3740      	adds	r7, #64	@ 0x40
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	200001bc 	.word	0x200001bc
 8001b64:	200000e0 	.word	0x200000e0

08001b68 <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 8001b6c:	4b2a      	ldr	r3, [pc, #168]	@ (8001c18 <LTCD__Init+0xb0>)
 8001b6e:	4a2b      	ldr	r2, [pc, #172]	@ (8001c1c <LTCD__Init+0xb4>)
 8001b70:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 8001b72:	4b29      	ldr	r3, [pc, #164]	@ (8001c18 <LTCD__Init+0xb0>)
 8001b74:	2209      	movs	r2, #9
 8001b76:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 8001b78:	4b27      	ldr	r3, [pc, #156]	@ (8001c18 <LTCD__Init+0xb0>)
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 8001b7e:	4b26      	ldr	r3, [pc, #152]	@ (8001c18 <LTCD__Init+0xb0>)
 8001b80:	221d      	movs	r2, #29
 8001b82:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8001b84:	4b24      	ldr	r3, [pc, #144]	@ (8001c18 <LTCD__Init+0xb0>)
 8001b86:	2203      	movs	r2, #3
 8001b88:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 8001b8a:	4b23      	ldr	r3, [pc, #140]	@ (8001c18 <LTCD__Init+0xb0>)
 8001b8c:	f240 120d 	movw	r2, #269	@ 0x10d
 8001b90:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 8001b92:	4b21      	ldr	r3, [pc, #132]	@ (8001c18 <LTCD__Init+0xb0>)
 8001b94:	f240 1243 	movw	r2, #323	@ 0x143
 8001b98:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 8001b9a:	4b1f      	ldr	r3, [pc, #124]	@ (8001c18 <LTCD__Init+0xb0>)
 8001b9c:	f240 1217 	movw	r2, #279	@ 0x117
 8001ba0:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 8001ba2:	4b1d      	ldr	r3, [pc, #116]	@ (8001c18 <LTCD__Init+0xb0>)
 8001ba4:	f240 1247 	movw	r2, #327	@ 0x147
 8001ba8:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 8001baa:	4b1b      	ldr	r3, [pc, #108]	@ (8001c18 <LTCD__Init+0xb0>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 8001bb2:	4b19      	ldr	r3, [pc, #100]	@ (8001c18 <LTCD__Init+0xb0>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 8001bba:	4b17      	ldr	r3, [pc, #92]	@ (8001c18 <LTCD__Init+0xb0>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001bc2:	4b17      	ldr	r3, [pc, #92]	@ (8001c20 <LTCD__Init+0xb8>)
 8001bc4:	2208      	movs	r2, #8
 8001bc6:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001bc8:	4b15      	ldr	r3, [pc, #84]	@ (8001c20 <LTCD__Init+0xb8>)
 8001bca:	22c0      	movs	r2, #192	@ 0xc0
 8001bcc:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8001bce:	4b14      	ldr	r3, [pc, #80]	@ (8001c20 <LTCD__Init+0xb8>)
 8001bd0:	2204      	movs	r2, #4
 8001bd2:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001bd4:	4b12      	ldr	r3, [pc, #72]	@ (8001c20 <LTCD__Init+0xb8>)
 8001bd6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001bda:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8001bdc:	4810      	ldr	r0, [pc, #64]	@ (8001c20 <LTCD__Init+0xb8>)
 8001bde:	f003 febd 	bl	800595c <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001be2:	4b0d      	ldr	r3, [pc, #52]	@ (8001c18 <LTCD__Init+0xb0>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001be8:	4b0b      	ldr	r3, [pc, #44]	@ (8001c18 <LTCD__Init+0xb0>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001bee:	4b0a      	ldr	r3, [pc, #40]	@ (8001c18 <LTCD__Init+0xb0>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001bf4:	4b08      	ldr	r3, [pc, #32]	@ (8001c18 <LTCD__Init+0xb0>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 8001bfa:	f7ff fead 	bl	8001958 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001bfe:	4806      	ldr	r0, [pc, #24]	@ (8001c18 <LTCD__Init+0xb0>)
 8001c00:	f002 ff82 	bl	8004b08 <HAL_LTDC_Init>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 8001c0a:	f000 f94f 	bl	8001eac <LCD_Error_Handler>
	 }

	ili9341_Init();
 8001c0e:	f000 f96a 	bl	8001ee6 <ili9341_Init>
}
 8001c12:	bf00      	nop
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	200000e0 	.word	0x200000e0
 8001c1c:	40016800 	.word	0x40016800
 8001c20:	20000188 	.word	0x20000188

08001c24 <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	80fb      	strh	r3, [r7, #6]
 8001c2e:	460b      	mov	r3, r1
 8001c30:	80bb      	strh	r3, [r7, #4]
 8001c32:	4613      	mov	r3, r2
 8001c34:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 8001c36:	88ba      	ldrh	r2, [r7, #4]
 8001c38:	4613      	mov	r3, r2
 8001c3a:	011b      	lsls	r3, r3, #4
 8001c3c:	1a9b      	subs	r3, r3, r2
 8001c3e:	011b      	lsls	r3, r3, #4
 8001c40:	461a      	mov	r2, r3
 8001c42:	88fb      	ldrh	r3, [r7, #6]
 8001c44:	4413      	add	r3, r2
 8001c46:	4905      	ldr	r1, [pc, #20]	@ (8001c5c <LCD_Draw_Pixel+0x38>)
 8001c48:	887a      	ldrh	r2, [r7, #2]
 8001c4a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8001c4e:	bf00      	nop
 8001c50:	370c      	adds	r7, #12
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	200001bc 	.word	0x200001bc

08001c60 <LCD_Draw_Circle_Fill>:
 * These functions are simple examples. Most computer graphics like OpenGl and stm's graphics library use a state machine. Where you first call some function like SetColor(color), SetPosition(x,y), then DrawSqure(size)
 * Instead all of these are explicit where color, size, and position are passed in.
 * There is tons of ways to handle drawing. I dont think it matters too much.
 */
void LCD_Draw_Circle_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t radius, uint16_t color)
{
 8001c60:	b590      	push	{r4, r7, lr}
 8001c62:	b085      	sub	sp, #20
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	4604      	mov	r4, r0
 8001c68:	4608      	mov	r0, r1
 8001c6a:	4611      	mov	r1, r2
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	4623      	mov	r3, r4
 8001c70:	80fb      	strh	r3, [r7, #6]
 8001c72:	4603      	mov	r3, r0
 8001c74:	80bb      	strh	r3, [r7, #4]
 8001c76:	460b      	mov	r3, r1
 8001c78:	807b      	strh	r3, [r7, #2]
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	803b      	strh	r3, [r7, #0]
    for(int16_t y=-radius; y<=radius; y++)
 8001c7e:	887b      	ldrh	r3, [r7, #2]
 8001c80:	425b      	negs	r3, r3
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	81fb      	strh	r3, [r7, #14]
 8001c86:	e034      	b.n	8001cf2 <LCD_Draw_Circle_Fill+0x92>
    {
        for(int16_t x=-radius; x<=radius; x++)
 8001c88:	887b      	ldrh	r3, [r7, #2]
 8001c8a:	425b      	negs	r3, r3
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	81bb      	strh	r3, [r7, #12]
 8001c90:	e024      	b.n	8001cdc <LCD_Draw_Circle_Fill+0x7c>
        {
            if(x*x+y*y <= radius*radius)
 8001c92:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001c96:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001c9a:	fb03 f202 	mul.w	r2, r3, r2
 8001c9e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ca2:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8001ca6:	fb01 f303 	mul.w	r3, r1, r3
 8001caa:	441a      	add	r2, r3
 8001cac:	887b      	ldrh	r3, [r7, #2]
 8001cae:	8879      	ldrh	r1, [r7, #2]
 8001cb0:	fb01 f303 	mul.w	r3, r1, r3
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	dc0b      	bgt.n	8001cd0 <LCD_Draw_Circle_Fill+0x70>
            {
            	LCD_Draw_Pixel(x+Xpos, y+Ypos, color);
 8001cb8:	89ba      	ldrh	r2, [r7, #12]
 8001cba:	88fb      	ldrh	r3, [r7, #6]
 8001cbc:	4413      	add	r3, r2
 8001cbe:	b298      	uxth	r0, r3
 8001cc0:	89fa      	ldrh	r2, [r7, #14]
 8001cc2:	88bb      	ldrh	r3, [r7, #4]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	b29b      	uxth	r3, r3
 8001cc8:	883a      	ldrh	r2, [r7, #0]
 8001cca:	4619      	mov	r1, r3
 8001ccc:	f7ff ffaa 	bl	8001c24 <LCD_Draw_Pixel>
        for(int16_t x=-radius; x<=radius; x++)
 8001cd0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	81bb      	strh	r3, [r7, #12]
 8001cdc:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001ce0:	887b      	ldrh	r3, [r7, #2]
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	ddd5      	ble.n	8001c92 <LCD_Draw_Circle_Fill+0x32>
    for(int16_t y=-radius; y<=radius; y++)
 8001ce6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001cea:	b29b      	uxth	r3, r3
 8001cec:	3301      	adds	r3, #1
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	81fb      	strh	r3, [r7, #14]
 8001cf2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001cf6:	887b      	ldrh	r3, [r7, #2]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	ddc5      	ble.n	8001c88 <LCD_Draw_Circle_Fill+0x28>
            }
        }
    }
}
 8001cfc:	bf00      	nop
 8001cfe:	bf00      	nop
 8001d00:	3714      	adds	r7, #20
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd90      	pop	{r4, r7, pc}
	...

08001d08 <LCD_Clear>:
	  LCD_Draw_Pixel(x, i+y, color);
  }
}

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b085      	sub	sp, #20
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	4603      	mov	r3, r0
 8001d10:	460a      	mov	r2, r1
 8001d12:	71fb      	strb	r3, [r7, #7]
 8001d14:	4613      	mov	r3, r2
 8001d16:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 8001d18:	79fb      	ldrb	r3, [r7, #7]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d10e      	bne.n	8001d3c <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8001d1e:	2300      	movs	r3, #0
 8001d20:	60fb      	str	r3, [r7, #12]
 8001d22:	e007      	b.n	8001d34 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 8001d24:	4908      	ldr	r1, [pc, #32]	@ (8001d48 <LCD_Clear+0x40>)
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	88ba      	ldrh	r2, [r7, #4]
 8001d2a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	3301      	adds	r3, #1
 8001d32:	60fb      	str	r3, [r7, #12]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8001d3a:	d3f3      	bcc.n	8001d24 <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 8001d3c:	bf00      	nop
 8001d3e:	3714      	adds	r7, #20
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr
 8001d48:	200001bc 	.word	0x200001bc

08001d4c <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	4603      	mov	r3, r0
 8001d54:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 8001d56:	4a04      	ldr	r2, [pc, #16]	@ (8001d68 <LCD_SetTextColor+0x1c>)
 8001d58:	88fb      	ldrh	r3, [r7, #6]
 8001d5a:	8013      	strh	r3, [r2, #0]
}
 8001d5c:	bf00      	nop
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr
 8001d68:	20000004 	.word	0x20000004

08001d6c <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8001d74:	4a04      	ldr	r2, [pc, #16]	@ (8001d88 <LCD_SetFont+0x1c>)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6013      	str	r3, [r2, #0]
}
 8001d7a:	bf00      	nop
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	200001b8 	.word	0x200001b8

08001d8c <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	4603      	mov	r3, r0
 8001d94:	603a      	str	r2, [r7, #0]
 8001d96:	80fb      	strh	r3, [r7, #6]
 8001d98:	460b      	mov	r3, r1
 8001d9a:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	60fb      	str	r3, [r7, #12]
 8001da0:	2300      	movs	r3, #0
 8001da2:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8001da4:	2300      	movs	r3, #0
 8001da6:	60fb      	str	r3, [r7, #12]
 8001da8:	e04c      	b.n	8001e44 <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8001daa:	2300      	movs	r3, #0
 8001dac:	60bb      	str	r3, [r7, #8]
 8001dae:	e03f      	b.n	8001e30 <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	683a      	ldr	r2, [r7, #0]
 8001db6:	4413      	add	r3, r2
 8001db8:	881b      	ldrh	r3, [r3, #0]
 8001dba:	4619      	mov	r1, r3
 8001dbc:	4b27      	ldr	r3, [pc, #156]	@ (8001e5c <LCD_Draw_Char+0xd0>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	889b      	ldrh	r3, [r3, #4]
 8001dc2:	4a27      	ldr	r2, [pc, #156]	@ (8001e60 <LCD_Draw_Char+0xd4>)
 8001dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc8:	08db      	lsrs	r3, r3, #3
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	00db      	lsls	r3, r3, #3
 8001dce:	2280      	movs	r2, #128	@ 0x80
 8001dd0:	409a      	lsls	r2, r3
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	fa42 f303 	asr.w	r3, r2, r3
 8001dd8:	400b      	ands	r3, r1
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d104      	bne.n	8001de8 <LCD_Draw_Char+0x5c>
 8001dde:	4b1f      	ldr	r3, [pc, #124]	@ (8001e5c <LCD_Draw_Char+0xd0>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	889b      	ldrh	r3, [r3, #4]
 8001de4:	2b0c      	cmp	r3, #12
 8001de6:	d920      	bls.n	8001e2a <LCD_Draw_Char+0x9e>
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	683a      	ldr	r2, [r7, #0]
 8001dee:	4413      	add	r3, r2
 8001df0:	881b      	ldrh	r3, [r3, #0]
 8001df2:	461a      	mov	r2, r3
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	fa42 f303 	asr.w	r3, r2, r3
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d104      	bne.n	8001e0c <LCD_Draw_Char+0x80>
 8001e02:	4b16      	ldr	r3, [pc, #88]	@ (8001e5c <LCD_Draw_Char+0xd0>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	889b      	ldrh	r3, [r3, #4]
 8001e08:	2b0c      	cmp	r3, #12
 8001e0a:	d80e      	bhi.n	8001e2a <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	b29a      	uxth	r2, r3
 8001e10:	88fb      	ldrh	r3, [r7, #6]
 8001e12:	4413      	add	r3, r2
 8001e14:	b298      	uxth	r0, r3
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	b29a      	uxth	r2, r3
 8001e1a:	88bb      	ldrh	r3, [r7, #4]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	4a10      	ldr	r2, [pc, #64]	@ (8001e64 <LCD_Draw_Char+0xd8>)
 8001e22:	8812      	ldrh	r2, [r2, #0]
 8001e24:	4619      	mov	r1, r3
 8001e26:	f7ff fefd 	bl	8001c24 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	60bb      	str	r3, [r7, #8]
 8001e30:	4b0a      	ldr	r3, [pc, #40]	@ (8001e5c <LCD_Draw_Char+0xd0>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	889b      	ldrh	r3, [r3, #4]
 8001e36:	461a      	mov	r2, r3
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d3b8      	bcc.n	8001db0 <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	3301      	adds	r3, #1
 8001e42:	60fb      	str	r3, [r7, #12]
 8001e44:	4b05      	ldr	r3, [pc, #20]	@ (8001e5c <LCD_Draw_Char+0xd0>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	88db      	ldrh	r3, [r3, #6]
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d3ab      	bcc.n	8001daa <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 8001e52:	bf00      	nop
 8001e54:	bf00      	nop
 8001e56:	3710      	adds	r7, #16
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	200001b8 	.word	0x200001b8
 8001e60:	aaaaaaab 	.word	0xaaaaaaab
 8001e64:	20000004 	.word	0x20000004

08001e68 <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	4603      	mov	r3, r0
 8001e70:	80fb      	strh	r3, [r7, #6]
 8001e72:	460b      	mov	r3, r1
 8001e74:	80bb      	strh	r3, [r7, #4]
 8001e76:	4613      	mov	r3, r2
 8001e78:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8001e7a:	78fb      	ldrb	r3, [r7, #3]
 8001e7c:	3b20      	subs	r3, #32
 8001e7e:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8001e80:	4b09      	ldr	r3, [pc, #36]	@ (8001ea8 <LCD_DisplayChar+0x40>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	78fb      	ldrb	r3, [r7, #3]
 8001e88:	4907      	ldr	r1, [pc, #28]	@ (8001ea8 <LCD_DisplayChar+0x40>)
 8001e8a:	6809      	ldr	r1, [r1, #0]
 8001e8c:	88c9      	ldrh	r1, [r1, #6]
 8001e8e:	fb01 f303 	mul.w	r3, r1, r3
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	441a      	add	r2, r3
 8001e96:	88b9      	ldrh	r1, [r7, #4]
 8001e98:	88fb      	ldrh	r3, [r7, #6]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7ff ff76 	bl	8001d8c <LCD_Draw_Char>
}
 8001ea0:	bf00      	nop
 8001ea2:	3708      	adds	r7, #8
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	200001b8 	.word	0x200001b8

08001eac <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001eb0:	b672      	cpsid	i
}
 8001eb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001eb4:	bf00      	nop
 8001eb6:	e7fd      	b.n	8001eb4 <LCD_Error_Handler+0x8>

08001eb8 <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 8001ebc:	f000 fdad 	bl	8002a1a <STMPE811_Init>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d001      	beq.n	8001eca <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialzation
 8001ec6:	bf00      	nop
 8001ec8:	e7fd      	b.n	8001ec6 <InitializeLCDTouch+0xe>
  }
}
 8001eca:	bf00      	nop
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <returnTouchStateAndLocation>:

STMPE811_State_t returnTouchStateAndLocation(STMPE811_TouchData * touchStruct)
{
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	b082      	sub	sp, #8
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6078      	str	r0, [r7, #4]
	return STMPE811_ReadTouch(touchStruct);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f000 fe57 	bl	8002b8a <STMPE811_ReadTouch>
 8001edc:	4603      	mov	r3, r0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}

08001ee6 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001ee6:	b580      	push	{r7, lr}
 8001ee8:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001eea:	f000 f9ff 	bl	80022ec <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 8001eee:	20ca      	movs	r0, #202	@ 0xca
 8001ef0:	f000 f943 	bl	800217a <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 8001ef4:	20c3      	movs	r0, #195	@ 0xc3
 8001ef6:	f000 f94d 	bl	8002194 <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 8001efa:	2008      	movs	r0, #8
 8001efc:	f000 f94a 	bl	8002194 <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 8001f00:	2050      	movs	r0, #80	@ 0x50
 8001f02:	f000 f947 	bl	8002194 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 8001f06:	20cf      	movs	r0, #207	@ 0xcf
 8001f08:	f000 f937 	bl	800217a <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 8001f0c:	2000      	movs	r0, #0
 8001f0e:	f000 f941 	bl	8002194 <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8001f12:	20c1      	movs	r0, #193	@ 0xc1
 8001f14:	f000 f93e 	bl	8002194 <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 8001f18:	2030      	movs	r0, #48	@ 0x30
 8001f1a:	f000 f93b 	bl	8002194 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 8001f1e:	20ed      	movs	r0, #237	@ 0xed
 8001f20:	f000 f92b 	bl	800217a <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 8001f24:	2064      	movs	r0, #100	@ 0x64
 8001f26:	f000 f935 	bl	8002194 <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 8001f2a:	2003      	movs	r0, #3
 8001f2c:	f000 f932 	bl	8002194 <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 8001f30:	2012      	movs	r0, #18
 8001f32:	f000 f92f 	bl	8002194 <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8001f36:	2081      	movs	r0, #129	@ 0x81
 8001f38:	f000 f92c 	bl	8002194 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 8001f3c:	20e8      	movs	r0, #232	@ 0xe8
 8001f3e:	f000 f91c 	bl	800217a <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8001f42:	2085      	movs	r0, #133	@ 0x85
 8001f44:	f000 f926 	bl	8002194 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001f48:	2000      	movs	r0, #0
 8001f4a:	f000 f923 	bl	8002194 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001f4e:	2078      	movs	r0, #120	@ 0x78
 8001f50:	f000 f920 	bl	8002194 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8001f54:	20cb      	movs	r0, #203	@ 0xcb
 8001f56:	f000 f910 	bl	800217a <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 8001f5a:	2039      	movs	r0, #57	@ 0x39
 8001f5c:	f000 f91a 	bl	8002194 <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 8001f60:	202c      	movs	r0, #44	@ 0x2c
 8001f62:	f000 f917 	bl	8002194 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001f66:	2000      	movs	r0, #0
 8001f68:	f000 f914 	bl	8002194 <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 8001f6c:	2034      	movs	r0, #52	@ 0x34
 8001f6e:	f000 f911 	bl	8002194 <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8001f72:	2002      	movs	r0, #2
 8001f74:	f000 f90e 	bl	8002194 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 8001f78:	20f7      	movs	r0, #247	@ 0xf7
 8001f7a:	f000 f8fe 	bl	800217a <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 8001f7e:	2020      	movs	r0, #32
 8001f80:	f000 f908 	bl	8002194 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8001f84:	20ea      	movs	r0, #234	@ 0xea
 8001f86:	f000 f8f8 	bl	800217a <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001f8a:	2000      	movs	r0, #0
 8001f8c:	f000 f902 	bl	8002194 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001f90:	2000      	movs	r0, #0
 8001f92:	f000 f8ff 	bl	8002194 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 8001f96:	20b1      	movs	r0, #177	@ 0xb1
 8001f98:	f000 f8ef 	bl	800217a <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001f9c:	2000      	movs	r0, #0
 8001f9e:	f000 f8f9 	bl	8002194 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8001fa2:	201b      	movs	r0, #27
 8001fa4:	f000 f8f6 	bl	8002194 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8001fa8:	20b6      	movs	r0, #182	@ 0xb6
 8001faa:	f000 f8e6 	bl	800217a <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8001fae:	200a      	movs	r0, #10
 8001fb0:	f000 f8f0 	bl	8002194 <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 8001fb4:	20a2      	movs	r0, #162	@ 0xa2
 8001fb6:	f000 f8ed 	bl	8002194 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 8001fba:	20c0      	movs	r0, #192	@ 0xc0
 8001fbc:	f000 f8dd 	bl	800217a <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001fc0:	2010      	movs	r0, #16
 8001fc2:	f000 f8e7 	bl	8002194 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 8001fc6:	20c1      	movs	r0, #193	@ 0xc1
 8001fc8:	f000 f8d7 	bl	800217a <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001fcc:	2010      	movs	r0, #16
 8001fce:	f000 f8e1 	bl	8002194 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 8001fd2:	20c5      	movs	r0, #197	@ 0xc5
 8001fd4:	f000 f8d1 	bl	800217a <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 8001fd8:	2045      	movs	r0, #69	@ 0x45
 8001fda:	f000 f8db 	bl	8002194 <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 8001fde:	2015      	movs	r0, #21
 8001fe0:	f000 f8d8 	bl	8002194 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 8001fe4:	20c7      	movs	r0, #199	@ 0xc7
 8001fe6:	f000 f8c8 	bl	800217a <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 8001fea:	2090      	movs	r0, #144	@ 0x90
 8001fec:	f000 f8d2 	bl	8002194 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 8001ff0:	2036      	movs	r0, #54	@ 0x36
 8001ff2:	f000 f8c2 	bl	800217a <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 8001ff6:	20c8      	movs	r0, #200	@ 0xc8
 8001ff8:	f000 f8cc 	bl	8002194 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 8001ffc:	20f2      	movs	r0, #242	@ 0xf2
 8001ffe:	f000 f8bc 	bl	800217a <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8002002:	2000      	movs	r0, #0
 8002004:	f000 f8c6 	bl	8002194 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 8002008:	20b0      	movs	r0, #176	@ 0xb0
 800200a:	f000 f8b6 	bl	800217a <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 800200e:	20c2      	movs	r0, #194	@ 0xc2
 8002010:	f000 f8c0 	bl	8002194 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8002014:	20b6      	movs	r0, #182	@ 0xb6
 8002016:	f000 f8b0 	bl	800217a <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 800201a:	200a      	movs	r0, #10
 800201c:	f000 f8ba 	bl	8002194 <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 8002020:	20a7      	movs	r0, #167	@ 0xa7
 8002022:	f000 f8b7 	bl	8002194 <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 8002026:	2027      	movs	r0, #39	@ 0x27
 8002028:	f000 f8b4 	bl	8002194 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 800202c:	2004      	movs	r0, #4
 800202e:	f000 f8b1 	bl	8002194 <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 8002032:	202a      	movs	r0, #42	@ 0x2a
 8002034:	f000 f8a1 	bl	800217a <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8002038:	2000      	movs	r0, #0
 800203a:	f000 f8ab 	bl	8002194 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800203e:	2000      	movs	r0, #0
 8002040:	f000 f8a8 	bl	8002194 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002044:	2000      	movs	r0, #0
 8002046:	f000 f8a5 	bl	8002194 <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 800204a:	20ef      	movs	r0, #239	@ 0xef
 800204c:	f000 f8a2 	bl	8002194 <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 8002050:	202b      	movs	r0, #43	@ 0x2b
 8002052:	f000 f892 	bl	800217a <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8002056:	2000      	movs	r0, #0
 8002058:	f000 f89c 	bl	8002194 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800205c:	2000      	movs	r0, #0
 800205e:	f000 f899 	bl	8002194 <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 8002062:	2001      	movs	r0, #1
 8002064:	f000 f896 	bl	8002194 <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 8002068:	203f      	movs	r0, #63	@ 0x3f
 800206a:	f000 f893 	bl	8002194 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 800206e:	20f6      	movs	r0, #246	@ 0xf6
 8002070:	f000 f883 	bl	800217a <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8002074:	2001      	movs	r0, #1
 8002076:	f000 f88d 	bl	8002194 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800207a:	2000      	movs	r0, #0
 800207c:	f000 f88a 	bl	8002194 <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 8002080:	2006      	movs	r0, #6
 8002082:	f000 f887 	bl	8002194 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 8002086:	202c      	movs	r0, #44	@ 0x2c
 8002088:	f000 f877 	bl	800217a <ili9341_Write_Reg>
  LCD_Delay(200);
 800208c:	20c8      	movs	r0, #200	@ 0xc8
 800208e:	f000 f9e9 	bl	8002464 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 8002092:	2026      	movs	r0, #38	@ 0x26
 8002094:	f000 f871 	bl	800217a <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8002098:	2001      	movs	r0, #1
 800209a:	f000 f87b 	bl	8002194 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 800209e:	20e0      	movs	r0, #224	@ 0xe0
 80020a0:	f000 f86b 	bl	800217a <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 80020a4:	200f      	movs	r0, #15
 80020a6:	f000 f875 	bl	8002194 <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 80020aa:	2029      	movs	r0, #41	@ 0x29
 80020ac:	f000 f872 	bl	8002194 <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 80020b0:	2024      	movs	r0, #36	@ 0x24
 80020b2:	f000 f86f 	bl	8002194 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 80020b6:	200c      	movs	r0, #12
 80020b8:	f000 f86c 	bl	8002194 <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 80020bc:	200e      	movs	r0, #14
 80020be:	f000 f869 	bl	8002194 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 80020c2:	2009      	movs	r0, #9
 80020c4:	f000 f866 	bl	8002194 <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 80020c8:	204e      	movs	r0, #78	@ 0x4e
 80020ca:	f000 f863 	bl	8002194 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 80020ce:	2078      	movs	r0, #120	@ 0x78
 80020d0:	f000 f860 	bl	8002194 <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 80020d4:	203c      	movs	r0, #60	@ 0x3c
 80020d6:	f000 f85d 	bl	8002194 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 80020da:	2009      	movs	r0, #9
 80020dc:	f000 f85a 	bl	8002194 <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 80020e0:	2013      	movs	r0, #19
 80020e2:	f000 f857 	bl	8002194 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 80020e6:	2005      	movs	r0, #5
 80020e8:	f000 f854 	bl	8002194 <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 80020ec:	2017      	movs	r0, #23
 80020ee:	f000 f851 	bl	8002194 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 80020f2:	2011      	movs	r0, #17
 80020f4:	f000 f84e 	bl	8002194 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80020f8:	2000      	movs	r0, #0
 80020fa:	f000 f84b 	bl	8002194 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 80020fe:	20e1      	movs	r0, #225	@ 0xe1
 8002100:	f000 f83b 	bl	800217a <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8002104:	2000      	movs	r0, #0
 8002106:	f000 f845 	bl	8002194 <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 800210a:	2016      	movs	r0, #22
 800210c:	f000 f842 	bl	8002194 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8002110:	201b      	movs	r0, #27
 8002112:	f000 f83f 	bl	8002194 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8002116:	2004      	movs	r0, #4
 8002118:	f000 f83c 	bl	8002194 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 800211c:	2011      	movs	r0, #17
 800211e:	f000 f839 	bl	8002194 <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 8002122:	2007      	movs	r0, #7
 8002124:	f000 f836 	bl	8002194 <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 8002128:	2031      	movs	r0, #49	@ 0x31
 800212a:	f000 f833 	bl	8002194 <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 800212e:	2033      	movs	r0, #51	@ 0x33
 8002130:	f000 f830 	bl	8002194 <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 8002134:	2042      	movs	r0, #66	@ 0x42
 8002136:	f000 f82d 	bl	8002194 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 800213a:	2005      	movs	r0, #5
 800213c:	f000 f82a 	bl	8002194 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8002140:	200c      	movs	r0, #12
 8002142:	f000 f827 	bl	8002194 <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8002146:	200a      	movs	r0, #10
 8002148:	f000 f824 	bl	8002194 <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 800214c:	2028      	movs	r0, #40	@ 0x28
 800214e:	f000 f821 	bl	8002194 <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 8002152:	202f      	movs	r0, #47	@ 0x2f
 8002154:	f000 f81e 	bl	8002194 <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 8002158:	200f      	movs	r0, #15
 800215a:	f000 f81b 	bl	8002194 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 800215e:	2011      	movs	r0, #17
 8002160:	f000 f80b 	bl	800217a <ili9341_Write_Reg>
  LCD_Delay(200);
 8002164:	20c8      	movs	r0, #200	@ 0xc8
 8002166:	f000 f97d 	bl	8002464 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 800216a:	2029      	movs	r0, #41	@ 0x29
 800216c:	f000 f805 	bl	800217a <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 8002170:	202c      	movs	r0, #44	@ 0x2c
 8002172:	f000 f802 	bl	800217a <ili9341_Write_Reg>
}
 8002176:	bf00      	nop
 8002178:	bd80      	pop	{r7, pc}

0800217a <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 800217a:	b580      	push	{r7, lr}
 800217c:	b082      	sub	sp, #8
 800217e:	af00      	add	r7, sp, #0
 8002180:	4603      	mov	r3, r0
 8002182:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8002184:	79fb      	ldrb	r3, [r7, #7]
 8002186:	4618      	mov	r0, r3
 8002188:	f000 f94a 	bl	8002420 <LCD_IO_WriteReg>
}
 800218c:	bf00      	nop
 800218e:	3708      	adds	r7, #8
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}

08002194 <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	4603      	mov	r3, r0
 800219c:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 800219e:	88fb      	ldrh	r3, [r7, #6]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f000 f91b 	bl	80023dc <LCD_IO_WriteData>
}
 80021a6:	bf00      	nop
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
	...

080021b0 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80021b4:	4819      	ldr	r0, [pc, #100]	@ (800221c <SPI_Init+0x6c>)
 80021b6:	f004 f92f 	bl	8006418 <HAL_SPI_GetState>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d12b      	bne.n	8002218 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 80021c0:	4b16      	ldr	r3, [pc, #88]	@ (800221c <SPI_Init+0x6c>)
 80021c2:	4a17      	ldr	r2, [pc, #92]	@ (8002220 <SPI_Init+0x70>)
 80021c4:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80021c6:	4b15      	ldr	r3, [pc, #84]	@ (800221c <SPI_Init+0x6c>)
 80021c8:	2218      	movs	r2, #24
 80021ca:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80021cc:	4b13      	ldr	r3, [pc, #76]	@ (800221c <SPI_Init+0x6c>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80021d2:	4b12      	ldr	r3, [pc, #72]	@ (800221c <SPI_Init+0x6c>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80021d8:	4b10      	ldr	r3, [pc, #64]	@ (800221c <SPI_Init+0x6c>)
 80021da:	2200      	movs	r2, #0
 80021dc:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80021de:	4b0f      	ldr	r3, [pc, #60]	@ (800221c <SPI_Init+0x6c>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 80021e4:	4b0d      	ldr	r3, [pc, #52]	@ (800221c <SPI_Init+0x6c>)
 80021e6:	2207      	movs	r2, #7
 80021e8:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 80021ea:	4b0c      	ldr	r3, [pc, #48]	@ (800221c <SPI_Init+0x6c>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 80021f0:	4b0a      	ldr	r3, [pc, #40]	@ (800221c <SPI_Init+0x6c>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 80021f6:	4b09      	ldr	r3, [pc, #36]	@ (800221c <SPI_Init+0x6c>)
 80021f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80021fc:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 80021fe:	4b07      	ldr	r3, [pc, #28]	@ (800221c <SPI_Init+0x6c>)
 8002200:	2200      	movs	r2, #0
 8002202:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8002204:	4b05      	ldr	r3, [pc, #20]	@ (800221c <SPI_Init+0x6c>)
 8002206:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800220a:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 800220c:	4803      	ldr	r0, [pc, #12]	@ (800221c <SPI_Init+0x6c>)
 800220e:	f000 f833 	bl	8002278 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8002212:	4802      	ldr	r0, [pc, #8]	@ (800221c <SPI_Init+0x6c>)
 8002214:	f003 fd62 	bl	8005cdc <HAL_SPI_Init>
  }
}
 8002218:	bf00      	nop
 800221a:	bd80      	pop	{r7, pc}
 800221c:	200259bc 	.word	0x200259bc
 8002220:	40015000 	.word	0x40015000

08002224 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	4603      	mov	r3, r0
 800222c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800222e:	2300      	movs	r3, #0
 8002230:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 8002232:	4b09      	ldr	r3, [pc, #36]	@ (8002258 <SPI_Write+0x34>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	1db9      	adds	r1, r7, #6
 8002238:	2201      	movs	r2, #1
 800223a:	4808      	ldr	r0, [pc, #32]	@ (800225c <SPI_Write+0x38>)
 800223c:	f003 fdff 	bl	8005e3e <HAL_SPI_Transmit>
 8002240:	4603      	mov	r3, r0
 8002242:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8002244:	7bfb      	ldrb	r3, [r7, #15]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 800224a:	f000 f809 	bl	8002260 <SPI_Error>
  }
}
 800224e:	bf00      	nop
 8002250:	3710      	adds	r7, #16
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	20000018 	.word	0x20000018
 800225c:	200259bc 	.word	0x200259bc

08002260 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8002264:	4803      	ldr	r0, [pc, #12]	@ (8002274 <SPI_Error+0x14>)
 8002266:	f003 fdc2 	bl	8005dee <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 800226a:	f7ff ffa1 	bl	80021b0 <SPI_Init>
}
 800226e:	bf00      	nop
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	200259bc 	.word	0x200259bc

08002278 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b08a      	sub	sp, #40	@ 0x28
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 8002280:	2300      	movs	r3, #0
 8002282:	613b      	str	r3, [r7, #16]
 8002284:	4b17      	ldr	r3, [pc, #92]	@ (80022e4 <SPI_MspInit+0x6c>)
 8002286:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002288:	4a16      	ldr	r2, [pc, #88]	@ (80022e4 <SPI_MspInit+0x6c>)
 800228a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800228e:	6453      	str	r3, [r2, #68]	@ 0x44
 8002290:	4b14      	ldr	r3, [pc, #80]	@ (80022e4 <SPI_MspInit+0x6c>)
 8002292:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002294:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002298:	613b      	str	r3, [r7, #16]
 800229a:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 800229c:	2300      	movs	r3, #0
 800229e:	60fb      	str	r3, [r7, #12]
 80022a0:	4b10      	ldr	r3, [pc, #64]	@ (80022e4 <SPI_MspInit+0x6c>)
 80022a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022a4:	4a0f      	ldr	r2, [pc, #60]	@ (80022e4 <SPI_MspInit+0x6c>)
 80022a6:	f043 0320 	orr.w	r3, r3, #32
 80022aa:	6313      	str	r3, [r2, #48]	@ 0x30
 80022ac:	4b0d      	ldr	r3, [pc, #52]	@ (80022e4 <SPI_MspInit+0x6c>)
 80022ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022b0:	f003 0320 	and.w	r3, r3, #32
 80022b4:	60fb      	str	r3, [r7, #12]
 80022b6:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 80022b8:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80022bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 80022be:	2302      	movs	r3, #2
 80022c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 80022c2:	2302      	movs	r3, #2
 80022c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 80022c6:	2301      	movs	r3, #1
 80022c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 80022ca:	2305      	movs	r3, #5
 80022cc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 80022ce:	f107 0314 	add.w	r3, r7, #20
 80022d2:	4619      	mov	r1, r3
 80022d4:	4804      	ldr	r0, [pc, #16]	@ (80022e8 <SPI_MspInit+0x70>)
 80022d6:	f001 f909 	bl	80034ec <HAL_GPIO_Init>
}
 80022da:	bf00      	nop
 80022dc:	3728      	adds	r7, #40	@ 0x28
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	40023800 	.word	0x40023800
 80022e8:	40021400 	.word	0x40021400

080022ec <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b088      	sub	sp, #32
 80022f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 80022f2:	4b36      	ldr	r3, [pc, #216]	@ (80023cc <LCD_IO_Init+0xe0>)
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d164      	bne.n	80023c4 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 80022fa:	4b34      	ldr	r3, [pc, #208]	@ (80023cc <LCD_IO_Init+0xe0>)
 80022fc:	2201      	movs	r2, #1
 80022fe:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8002300:	2300      	movs	r3, #0
 8002302:	60bb      	str	r3, [r7, #8]
 8002304:	4b32      	ldr	r3, [pc, #200]	@ (80023d0 <LCD_IO_Init+0xe4>)
 8002306:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002308:	4a31      	ldr	r2, [pc, #196]	@ (80023d0 <LCD_IO_Init+0xe4>)
 800230a:	f043 0308 	orr.w	r3, r3, #8
 800230e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002310:	4b2f      	ldr	r3, [pc, #188]	@ (80023d0 <LCD_IO_Init+0xe4>)
 8002312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002314:	f003 0308 	and.w	r3, r3, #8
 8002318:	60bb      	str	r3, [r7, #8]
 800231a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 800231c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002320:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002322:	2301      	movs	r3, #1
 8002324:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002326:	2300      	movs	r3, #0
 8002328:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800232a:	2302      	movs	r3, #2
 800232c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 800232e:	f107 030c 	add.w	r3, r7, #12
 8002332:	4619      	mov	r1, r3
 8002334:	4827      	ldr	r0, [pc, #156]	@ (80023d4 <LCD_IO_Init+0xe8>)
 8002336:	f001 f8d9 	bl	80034ec <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 800233a:	2300      	movs	r3, #0
 800233c:	607b      	str	r3, [r7, #4]
 800233e:	4b24      	ldr	r3, [pc, #144]	@ (80023d0 <LCD_IO_Init+0xe4>)
 8002340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002342:	4a23      	ldr	r2, [pc, #140]	@ (80023d0 <LCD_IO_Init+0xe4>)
 8002344:	f043 0308 	orr.w	r3, r3, #8
 8002348:	6313      	str	r3, [r2, #48]	@ 0x30
 800234a:	4b21      	ldr	r3, [pc, #132]	@ (80023d0 <LCD_IO_Init+0xe4>)
 800234c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800234e:	f003 0308 	and.w	r3, r3, #8
 8002352:	607b      	str	r3, [r7, #4]
 8002354:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8002356:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800235a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800235c:	2301      	movs	r3, #1
 800235e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002360:	2300      	movs	r3, #0
 8002362:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002364:	2302      	movs	r3, #2
 8002366:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8002368:	f107 030c 	add.w	r3, r7, #12
 800236c:	4619      	mov	r1, r3
 800236e:	4819      	ldr	r0, [pc, #100]	@ (80023d4 <LCD_IO_Init+0xe8>)
 8002370:	f001 f8bc 	bl	80034ec <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8002374:	2300      	movs	r3, #0
 8002376:	603b      	str	r3, [r7, #0]
 8002378:	4b15      	ldr	r3, [pc, #84]	@ (80023d0 <LCD_IO_Init+0xe4>)
 800237a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800237c:	4a14      	ldr	r2, [pc, #80]	@ (80023d0 <LCD_IO_Init+0xe4>)
 800237e:	f043 0304 	orr.w	r3, r3, #4
 8002382:	6313      	str	r3, [r2, #48]	@ 0x30
 8002384:	4b12      	ldr	r3, [pc, #72]	@ (80023d0 <LCD_IO_Init+0xe4>)
 8002386:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002388:	f003 0304 	and.w	r3, r3, #4
 800238c:	603b      	str	r3, [r7, #0]
 800238e:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8002390:	2304      	movs	r3, #4
 8002392:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002394:	2301      	movs	r3, #1
 8002396:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002398:	2300      	movs	r3, #0
 800239a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800239c:	2302      	movs	r3, #2
 800239e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80023a0:	f107 030c 	add.w	r3, r7, #12
 80023a4:	4619      	mov	r1, r3
 80023a6:	480c      	ldr	r0, [pc, #48]	@ (80023d8 <LCD_IO_Init+0xec>)
 80023a8:	f001 f8a0 	bl	80034ec <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 80023ac:	2200      	movs	r2, #0
 80023ae:	2104      	movs	r1, #4
 80023b0:	4809      	ldr	r0, [pc, #36]	@ (80023d8 <LCD_IO_Init+0xec>)
 80023b2:	f001 fb6b 	bl	8003a8c <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 80023b6:	2201      	movs	r2, #1
 80023b8:	2104      	movs	r1, #4
 80023ba:	4807      	ldr	r0, [pc, #28]	@ (80023d8 <LCD_IO_Init+0xec>)
 80023bc:	f001 fb66 	bl	8003a8c <HAL_GPIO_WritePin>

    SPI_Init();
 80023c0:	f7ff fef6 	bl	80021b0 <SPI_Init>
  }
}
 80023c4:	bf00      	nop
 80023c6:	3720      	adds	r7, #32
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	20025a14 	.word	0x20025a14
 80023d0:	40023800 	.word	0x40023800
 80023d4:	40020c00 	.word	0x40020c00
 80023d8:	40020800 	.word	0x40020800

080023dc <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	4603      	mov	r3, r0
 80023e4:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80023e6:	2201      	movs	r2, #1
 80023e8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80023ec:	480a      	ldr	r0, [pc, #40]	@ (8002418 <LCD_IO_WriteData+0x3c>)
 80023ee:	f001 fb4d 	bl	8003a8c <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 80023f2:	2200      	movs	r2, #0
 80023f4:	2104      	movs	r1, #4
 80023f6:	4809      	ldr	r0, [pc, #36]	@ (800241c <LCD_IO_WriteData+0x40>)
 80023f8:	f001 fb48 	bl	8003a8c <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 80023fc:	88fb      	ldrh	r3, [r7, #6]
 80023fe:	4618      	mov	r0, r3
 8002400:	f7ff ff10 	bl	8002224 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002404:	2201      	movs	r2, #1
 8002406:	2104      	movs	r1, #4
 8002408:	4804      	ldr	r0, [pc, #16]	@ (800241c <LCD_IO_WriteData+0x40>)
 800240a:	f001 fb3f 	bl	8003a8c <HAL_GPIO_WritePin>
}
 800240e:	bf00      	nop
 8002410:	3708      	adds	r7, #8
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	40020c00 	.word	0x40020c00
 800241c:	40020800 	.word	0x40020800

08002420 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	4603      	mov	r3, r0
 8002428:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800242a:	2200      	movs	r2, #0
 800242c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002430:	480a      	ldr	r0, [pc, #40]	@ (800245c <LCD_IO_WriteReg+0x3c>)
 8002432:	f001 fb2b 	bl	8003a8c <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8002436:	2200      	movs	r2, #0
 8002438:	2104      	movs	r1, #4
 800243a:	4809      	ldr	r0, [pc, #36]	@ (8002460 <LCD_IO_WriteReg+0x40>)
 800243c:	f001 fb26 	bl	8003a8c <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 8002440:	79fb      	ldrb	r3, [r7, #7]
 8002442:	b29b      	uxth	r3, r3
 8002444:	4618      	mov	r0, r3
 8002446:	f7ff feed 	bl	8002224 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800244a:	2201      	movs	r2, #1
 800244c:	2104      	movs	r1, #4
 800244e:	4804      	ldr	r0, [pc, #16]	@ (8002460 <LCD_IO_WriteReg+0x40>)
 8002450:	f001 fb1c 	bl	8003a8c <HAL_GPIO_WritePin>
}
 8002454:	bf00      	nop
 8002456:	3708      	adds	r7, #8
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	40020c00 	.word	0x40020c00
 8002460:	40020800 	.word	0x40020800

08002464 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f000 fed5 	bl	800321c <HAL_Delay>
}
 8002472:	bf00      	nop
 8002474:	3708      	adds	r7, #8
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}

0800247a <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800247a:	b580      	push	{r7, lr}
 800247c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/
	initialise_monitor_handles();
 800247e:	f000 fe17 	bl	80030b0 <initialise_monitor_handles>
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002482:	f000 fe59 	bl	8003138 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002486:	f000 f809 	bl	800249c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* USER CODE BEGIN 2 */
  ApplicationInit(); // Initializes the LCD functionality
 800248a:	f7fe f845 	bl	8000518 <ApplicationInit>
  HAL_Delay(5000);
 800248e:	f241 3088 	movw	r0, #5000	@ 0x1388
 8002492:	f000 fec3 	bl	800321c <HAL_Delay>
  /* USER CODE END 2 */
  
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002496:	bf00      	nop
 8002498:	e7fd      	b.n	8002496 <main+0x1c>
	...

0800249c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b094      	sub	sp, #80	@ 0x50
 80024a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024a2:	f107 0320 	add.w	r3, r7, #32
 80024a6:	2230      	movs	r2, #48	@ 0x30
 80024a8:	2100      	movs	r1, #0
 80024aa:	4618      	mov	r0, r3
 80024ac:	f004 f89e 	bl	80065ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024b0:	f107 030c 	add.w	r3, r7, #12
 80024b4:	2200      	movs	r2, #0
 80024b6:	601a      	str	r2, [r3, #0]
 80024b8:	605a      	str	r2, [r3, #4]
 80024ba:	609a      	str	r2, [r3, #8]
 80024bc:	60da      	str	r2, [r3, #12]
 80024be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80024c0:	2300      	movs	r3, #0
 80024c2:	60bb      	str	r3, [r7, #8]
 80024c4:	4b28      	ldr	r3, [pc, #160]	@ (8002568 <SystemClock_Config+0xcc>)
 80024c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c8:	4a27      	ldr	r2, [pc, #156]	@ (8002568 <SystemClock_Config+0xcc>)
 80024ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80024d0:	4b25      	ldr	r3, [pc, #148]	@ (8002568 <SystemClock_Config+0xcc>)
 80024d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024d8:	60bb      	str	r3, [r7, #8]
 80024da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80024dc:	2300      	movs	r3, #0
 80024de:	607b      	str	r3, [r7, #4]
 80024e0:	4b22      	ldr	r3, [pc, #136]	@ (800256c <SystemClock_Config+0xd0>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a21      	ldr	r2, [pc, #132]	@ (800256c <SystemClock_Config+0xd0>)
 80024e6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80024ea:	6013      	str	r3, [r2, #0]
 80024ec:	4b1f      	ldr	r3, [pc, #124]	@ (800256c <SystemClock_Config+0xd0>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80024f4:	607b      	str	r3, [r7, #4]
 80024f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80024f8:	2301      	movs	r3, #1
 80024fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80024fc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002500:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002502:	2302      	movs	r3, #2
 8002504:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002506:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800250a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800250c:	2308      	movs	r3, #8
 800250e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002510:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8002514:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002516:	2302      	movs	r3, #2
 8002518:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800251a:	2307      	movs	r3, #7
 800251c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800251e:	f107 0320 	add.w	r3, r7, #32
 8002522:	4618      	mov	r0, r3
 8002524:	f002 fd96 	bl	8005054 <HAL_RCC_OscConfig>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d001      	beq.n	8002532 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800252e:	f000 f81f 	bl	8002570 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002532:	230f      	movs	r3, #15
 8002534:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002536:	2302      	movs	r3, #2
 8002538:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800253a:	2300      	movs	r3, #0
 800253c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800253e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002542:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002544:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002548:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800254a:	f107 030c 	add.w	r3, r7, #12
 800254e:	2105      	movs	r1, #5
 8002550:	4618      	mov	r0, r3
 8002552:	f002 fff7 	bl	8005544 <HAL_RCC_ClockConfig>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d001      	beq.n	8002560 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800255c:	f000 f808 	bl	8002570 <Error_Handler>
  }
}
 8002560:	bf00      	nop
 8002562:	3750      	adds	r7, #80	@ 0x50
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	40023800 	.word	0x40023800
 800256c:	40007000 	.word	0x40007000

08002570 <Error_Handler>:


void Error_Handler(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002574:	b672      	cpsid	i
}
 8002576:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002578:	bf00      	nop
 800257a:	e7fd      	b.n	8002578 <Error_Handler+0x8>

0800257c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002582:	2300      	movs	r3, #0
 8002584:	607b      	str	r3, [r7, #4]
 8002586:	4b10      	ldr	r3, [pc, #64]	@ (80025c8 <HAL_MspInit+0x4c>)
 8002588:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800258a:	4a0f      	ldr	r2, [pc, #60]	@ (80025c8 <HAL_MspInit+0x4c>)
 800258c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002590:	6453      	str	r3, [r2, #68]	@ 0x44
 8002592:	4b0d      	ldr	r3, [pc, #52]	@ (80025c8 <HAL_MspInit+0x4c>)
 8002594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002596:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800259a:	607b      	str	r3, [r7, #4]
 800259c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800259e:	2300      	movs	r3, #0
 80025a0:	603b      	str	r3, [r7, #0]
 80025a2:	4b09      	ldr	r3, [pc, #36]	@ (80025c8 <HAL_MspInit+0x4c>)
 80025a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a6:	4a08      	ldr	r2, [pc, #32]	@ (80025c8 <HAL_MspInit+0x4c>)
 80025a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80025ae:	4b06      	ldr	r3, [pc, #24]	@ (80025c8 <HAL_MspInit+0x4c>)
 80025b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025b6:	603b      	str	r3, [r7, #0]
 80025b8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80025ba:	2007      	movs	r0, #7
 80025bc:	f000 ff46 	bl	800344c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025c0:	bf00      	nop
 80025c2:	3708      	adds	r7, #8
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	40023800 	.word	0x40023800

080025cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b08a      	sub	sp, #40	@ 0x28
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025d4:	f107 0314 	add.w	r3, r7, #20
 80025d8:	2200      	movs	r2, #0
 80025da:	601a      	str	r2, [r3, #0]
 80025dc:	605a      	str	r2, [r3, #4]
 80025de:	609a      	str	r2, [r3, #8]
 80025e0:	60da      	str	r2, [r3, #12]
 80025e2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a29      	ldr	r2, [pc, #164]	@ (8002690 <HAL_I2C_MspInit+0xc4>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d14b      	bne.n	8002686 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025ee:	2300      	movs	r3, #0
 80025f0:	613b      	str	r3, [r7, #16]
 80025f2:	4b28      	ldr	r3, [pc, #160]	@ (8002694 <HAL_I2C_MspInit+0xc8>)
 80025f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f6:	4a27      	ldr	r2, [pc, #156]	@ (8002694 <HAL_I2C_MspInit+0xc8>)
 80025f8:	f043 0304 	orr.w	r3, r3, #4
 80025fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80025fe:	4b25      	ldr	r3, [pc, #148]	@ (8002694 <HAL_I2C_MspInit+0xc8>)
 8002600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002602:	f003 0304 	and.w	r3, r3, #4
 8002606:	613b      	str	r3, [r7, #16]
 8002608:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800260a:	2300      	movs	r3, #0
 800260c:	60fb      	str	r3, [r7, #12]
 800260e:	4b21      	ldr	r3, [pc, #132]	@ (8002694 <HAL_I2C_MspInit+0xc8>)
 8002610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002612:	4a20      	ldr	r2, [pc, #128]	@ (8002694 <HAL_I2C_MspInit+0xc8>)
 8002614:	f043 0301 	orr.w	r3, r3, #1
 8002618:	6313      	str	r3, [r2, #48]	@ 0x30
 800261a:	4b1e      	ldr	r3, [pc, #120]	@ (8002694 <HAL_I2C_MspInit+0xc8>)
 800261c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800261e:	f003 0301 	and.w	r3, r3, #1
 8002622:	60fb      	str	r3, [r7, #12]
 8002624:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8002626:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800262a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800262c:	2312      	movs	r3, #18
 800262e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002630:	2300      	movs	r3, #0
 8002632:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002634:	2300      	movs	r3, #0
 8002636:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002638:	2304      	movs	r3, #4
 800263a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 800263c:	f107 0314 	add.w	r3, r7, #20
 8002640:	4619      	mov	r1, r3
 8002642:	4815      	ldr	r0, [pc, #84]	@ (8002698 <HAL_I2C_MspInit+0xcc>)
 8002644:	f000 ff52 	bl	80034ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8002648:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800264c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800264e:	2312      	movs	r3, #18
 8002650:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002652:	2300      	movs	r3, #0
 8002654:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002656:	2300      	movs	r3, #0
 8002658:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800265a:	2304      	movs	r3, #4
 800265c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800265e:	f107 0314 	add.w	r3, r7, #20
 8002662:	4619      	mov	r1, r3
 8002664:	480d      	ldr	r0, [pc, #52]	@ (800269c <HAL_I2C_MspInit+0xd0>)
 8002666:	f000 ff41 	bl	80034ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800266a:	2300      	movs	r3, #0
 800266c:	60bb      	str	r3, [r7, #8]
 800266e:	4b09      	ldr	r3, [pc, #36]	@ (8002694 <HAL_I2C_MspInit+0xc8>)
 8002670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002672:	4a08      	ldr	r2, [pc, #32]	@ (8002694 <HAL_I2C_MspInit+0xc8>)
 8002674:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002678:	6413      	str	r3, [r2, #64]	@ 0x40
 800267a:	4b06      	ldr	r3, [pc, #24]	@ (8002694 <HAL_I2C_MspInit+0xc8>)
 800267c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800267e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002682:	60bb      	str	r3, [r7, #8]
 8002684:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8002686:	bf00      	nop
 8002688:	3728      	adds	r7, #40	@ 0x28
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	40005c00 	.word	0x40005c00
 8002694:	40023800 	.word	0x40023800
 8002698:	40020800 	.word	0x40020800
 800269c:	40020000 	.word	0x40020000

080026a0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b09a      	sub	sp, #104	@ 0x68
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026a8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80026ac:	2200      	movs	r2, #0
 80026ae:	601a      	str	r2, [r3, #0]
 80026b0:	605a      	str	r2, [r3, #4]
 80026b2:	609a      	str	r2, [r3, #8]
 80026b4:	60da      	str	r2, [r3, #12]
 80026b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026bc:	2230      	movs	r2, #48	@ 0x30
 80026be:	2100      	movs	r1, #0
 80026c0:	4618      	mov	r0, r3
 80026c2:	f003 ff93 	bl	80065ec <memset>
  if(hltdc->Instance==LTDC)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a81      	ldr	r2, [pc, #516]	@ (80028d0 <HAL_LTDC_MspInit+0x230>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	f040 80fb 	bne.w	80028c8 <HAL_LTDC_MspInit+0x228>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80026d2:	2308      	movs	r3, #8
 80026d4:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 200;
 80026d6:	23c8      	movs	r3, #200	@ 0xc8
 80026d8:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80026da:	2302      	movs	r3, #2
 80026dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_16;
 80026de:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 80026e2:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026e8:	4618      	mov	r0, r3
 80026ea:	f003 f937 	bl	800595c <HAL_RCCEx_PeriphCLKConfig>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d001      	beq.n	80026f8 <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 80026f4:	f7ff ff3c 	bl	8002570 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80026f8:	2300      	movs	r3, #0
 80026fa:	623b      	str	r3, [r7, #32]
 80026fc:	4b75      	ldr	r3, [pc, #468]	@ (80028d4 <HAL_LTDC_MspInit+0x234>)
 80026fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002700:	4a74      	ldr	r2, [pc, #464]	@ (80028d4 <HAL_LTDC_MspInit+0x234>)
 8002702:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002706:	6453      	str	r3, [r2, #68]	@ 0x44
 8002708:	4b72      	ldr	r3, [pc, #456]	@ (80028d4 <HAL_LTDC_MspInit+0x234>)
 800270a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800270c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002710:	623b      	str	r3, [r7, #32]
 8002712:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002714:	2300      	movs	r3, #0
 8002716:	61fb      	str	r3, [r7, #28]
 8002718:	4b6e      	ldr	r3, [pc, #440]	@ (80028d4 <HAL_LTDC_MspInit+0x234>)
 800271a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800271c:	4a6d      	ldr	r2, [pc, #436]	@ (80028d4 <HAL_LTDC_MspInit+0x234>)
 800271e:	f043 0320 	orr.w	r3, r3, #32
 8002722:	6313      	str	r3, [r2, #48]	@ 0x30
 8002724:	4b6b      	ldr	r3, [pc, #428]	@ (80028d4 <HAL_LTDC_MspInit+0x234>)
 8002726:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002728:	f003 0320 	and.w	r3, r3, #32
 800272c:	61fb      	str	r3, [r7, #28]
 800272e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002730:	2300      	movs	r3, #0
 8002732:	61bb      	str	r3, [r7, #24]
 8002734:	4b67      	ldr	r3, [pc, #412]	@ (80028d4 <HAL_LTDC_MspInit+0x234>)
 8002736:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002738:	4a66      	ldr	r2, [pc, #408]	@ (80028d4 <HAL_LTDC_MspInit+0x234>)
 800273a:	f043 0301 	orr.w	r3, r3, #1
 800273e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002740:	4b64      	ldr	r3, [pc, #400]	@ (80028d4 <HAL_LTDC_MspInit+0x234>)
 8002742:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002744:	f003 0301 	and.w	r3, r3, #1
 8002748:	61bb      	str	r3, [r7, #24]
 800274a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800274c:	2300      	movs	r3, #0
 800274e:	617b      	str	r3, [r7, #20]
 8002750:	4b60      	ldr	r3, [pc, #384]	@ (80028d4 <HAL_LTDC_MspInit+0x234>)
 8002752:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002754:	4a5f      	ldr	r2, [pc, #380]	@ (80028d4 <HAL_LTDC_MspInit+0x234>)
 8002756:	f043 0302 	orr.w	r3, r3, #2
 800275a:	6313      	str	r3, [r2, #48]	@ 0x30
 800275c:	4b5d      	ldr	r3, [pc, #372]	@ (80028d4 <HAL_LTDC_MspInit+0x234>)
 800275e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002760:	f003 0302 	and.w	r3, r3, #2
 8002764:	617b      	str	r3, [r7, #20]
 8002766:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002768:	2300      	movs	r3, #0
 800276a:	613b      	str	r3, [r7, #16]
 800276c:	4b59      	ldr	r3, [pc, #356]	@ (80028d4 <HAL_LTDC_MspInit+0x234>)
 800276e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002770:	4a58      	ldr	r2, [pc, #352]	@ (80028d4 <HAL_LTDC_MspInit+0x234>)
 8002772:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002776:	6313      	str	r3, [r2, #48]	@ 0x30
 8002778:	4b56      	ldr	r3, [pc, #344]	@ (80028d4 <HAL_LTDC_MspInit+0x234>)
 800277a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800277c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002780:	613b      	str	r3, [r7, #16]
 8002782:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002784:	2300      	movs	r3, #0
 8002786:	60fb      	str	r3, [r7, #12]
 8002788:	4b52      	ldr	r3, [pc, #328]	@ (80028d4 <HAL_LTDC_MspInit+0x234>)
 800278a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800278c:	4a51      	ldr	r2, [pc, #324]	@ (80028d4 <HAL_LTDC_MspInit+0x234>)
 800278e:	f043 0304 	orr.w	r3, r3, #4
 8002792:	6313      	str	r3, [r2, #48]	@ 0x30
 8002794:	4b4f      	ldr	r3, [pc, #316]	@ (80028d4 <HAL_LTDC_MspInit+0x234>)
 8002796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002798:	f003 0304 	and.w	r3, r3, #4
 800279c:	60fb      	str	r3, [r7, #12]
 800279e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80027a0:	2300      	movs	r3, #0
 80027a2:	60bb      	str	r3, [r7, #8]
 80027a4:	4b4b      	ldr	r3, [pc, #300]	@ (80028d4 <HAL_LTDC_MspInit+0x234>)
 80027a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027a8:	4a4a      	ldr	r2, [pc, #296]	@ (80028d4 <HAL_LTDC_MspInit+0x234>)
 80027aa:	f043 0308 	orr.w	r3, r3, #8
 80027ae:	6313      	str	r3, [r2, #48]	@ 0x30
 80027b0:	4b48      	ldr	r3, [pc, #288]	@ (80028d4 <HAL_LTDC_MspInit+0x234>)
 80027b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027b4:	f003 0308 	and.w	r3, r3, #8
 80027b8:	60bb      	str	r3, [r7, #8]
 80027ba:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 80027bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80027c0:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027c2:	2302      	movs	r3, #2
 80027c4:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c6:	2300      	movs	r3, #0
 80027c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ca:	2300      	movs	r3, #0
 80027cc:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80027ce:	230e      	movs	r3, #14
 80027d0:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80027d2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80027d6:	4619      	mov	r1, r3
 80027d8:	483f      	ldr	r0, [pc, #252]	@ (80028d8 <HAL_LTDC_MspInit+0x238>)
 80027da:	f000 fe87 	bl	80034ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80027de:	f641 0358 	movw	r3, #6232	@ 0x1858
 80027e2:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027e4:	2302      	movs	r3, #2
 80027e6:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e8:	2300      	movs	r3, #0
 80027ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ec:	2300      	movs	r3, #0
 80027ee:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80027f0:	230e      	movs	r3, #14
 80027f2:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027f4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80027f8:	4619      	mov	r1, r3
 80027fa:	4838      	ldr	r0, [pc, #224]	@ (80028dc <HAL_LTDC_MspInit+0x23c>)
 80027fc:	f000 fe76 	bl	80034ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8002800:	2303      	movs	r3, #3
 8002802:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002804:	2302      	movs	r3, #2
 8002806:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002808:	2300      	movs	r3, #0
 800280a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800280c:	2300      	movs	r3, #0
 800280e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002810:	2309      	movs	r3, #9
 8002812:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002814:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002818:	4619      	mov	r1, r3
 800281a:	4831      	ldr	r0, [pc, #196]	@ (80028e0 <HAL_LTDC_MspInit+0x240>)
 800281c:	f000 fe66 	bl	80034ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8002820:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8002824:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002826:	2302      	movs	r3, #2
 8002828:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800282a:	2300      	movs	r3, #0
 800282c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800282e:	2300      	movs	r3, #0
 8002830:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002832:	230e      	movs	r3, #14
 8002834:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002836:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800283a:	4619      	mov	r1, r3
 800283c:	4828      	ldr	r0, [pc, #160]	@ (80028e0 <HAL_LTDC_MspInit+0x240>)
 800283e:	f000 fe55 	bl	80034ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8002842:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8002846:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002848:	2302      	movs	r3, #2
 800284a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800284c:	2300      	movs	r3, #0
 800284e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002850:	2300      	movs	r3, #0
 8002852:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002854:	230e      	movs	r3, #14
 8002856:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002858:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800285c:	4619      	mov	r1, r3
 800285e:	4821      	ldr	r0, [pc, #132]	@ (80028e4 <HAL_LTDC_MspInit+0x244>)
 8002860:	f000 fe44 	bl	80034ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8002864:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8002868:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800286a:	2302      	movs	r3, #2
 800286c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286e:	2300      	movs	r3, #0
 8002870:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002872:	2300      	movs	r3, #0
 8002874:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002876:	230e      	movs	r3, #14
 8002878:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800287a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800287e:	4619      	mov	r1, r3
 8002880:	4819      	ldr	r0, [pc, #100]	@ (80028e8 <HAL_LTDC_MspInit+0x248>)
 8002882:	f000 fe33 	bl	80034ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8002886:	2348      	movs	r3, #72	@ 0x48
 8002888:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800288a:	2302      	movs	r3, #2
 800288c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288e:	2300      	movs	r3, #0
 8002890:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002892:	2300      	movs	r3, #0
 8002894:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002896:	230e      	movs	r3, #14
 8002898:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800289a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800289e:	4619      	mov	r1, r3
 80028a0:	4812      	ldr	r0, [pc, #72]	@ (80028ec <HAL_LTDC_MspInit+0x24c>)
 80028a2:	f000 fe23 	bl	80034ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80028a6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80028aa:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ac:	2302      	movs	r3, #2
 80028ae:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b0:	2300      	movs	r3, #0
 80028b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028b4:	2300      	movs	r3, #0
 80028b6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80028b8:	2309      	movs	r3, #9
 80028ba:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80028bc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80028c0:	4619      	mov	r1, r3
 80028c2:	4808      	ldr	r0, [pc, #32]	@ (80028e4 <HAL_LTDC_MspInit+0x244>)
 80028c4:	f000 fe12 	bl	80034ec <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 80028c8:	bf00      	nop
 80028ca:	3768      	adds	r7, #104	@ 0x68
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	40016800 	.word	0x40016800
 80028d4:	40023800 	.word	0x40023800
 80028d8:	40021400 	.word	0x40021400
 80028dc:	40020000 	.word	0x40020000
 80028e0:	40020400 	.word	0x40020400
 80028e4:	40021800 	.word	0x40021800
 80028e8:	40020800 	.word	0x40020800
 80028ec:	40020c00 	.word	0x40020c00

080028f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b08a      	sub	sp, #40	@ 0x28
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028f8:	f107 0314 	add.w	r3, r7, #20
 80028fc:	2200      	movs	r2, #0
 80028fe:	601a      	str	r2, [r3, #0]
 8002900:	605a      	str	r2, [r3, #4]
 8002902:	609a      	str	r2, [r3, #8]
 8002904:	60da      	str	r2, [r3, #12]
 8002906:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a19      	ldr	r2, [pc, #100]	@ (8002974 <HAL_SPI_MspInit+0x84>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d12c      	bne.n	800296c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002912:	2300      	movs	r3, #0
 8002914:	613b      	str	r3, [r7, #16]
 8002916:	4b18      	ldr	r3, [pc, #96]	@ (8002978 <HAL_SPI_MspInit+0x88>)
 8002918:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800291a:	4a17      	ldr	r2, [pc, #92]	@ (8002978 <HAL_SPI_MspInit+0x88>)
 800291c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002920:	6453      	str	r3, [r2, #68]	@ 0x44
 8002922:	4b15      	ldr	r3, [pc, #84]	@ (8002978 <HAL_SPI_MspInit+0x88>)
 8002924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002926:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800292a:	613b      	str	r3, [r7, #16]
 800292c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800292e:	2300      	movs	r3, #0
 8002930:	60fb      	str	r3, [r7, #12]
 8002932:	4b11      	ldr	r3, [pc, #68]	@ (8002978 <HAL_SPI_MspInit+0x88>)
 8002934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002936:	4a10      	ldr	r2, [pc, #64]	@ (8002978 <HAL_SPI_MspInit+0x88>)
 8002938:	f043 0320 	orr.w	r3, r3, #32
 800293c:	6313      	str	r3, [r2, #48]	@ 0x30
 800293e:	4b0e      	ldr	r3, [pc, #56]	@ (8002978 <HAL_SPI_MspInit+0x88>)
 8002940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002942:	f003 0320 	and.w	r3, r3, #32
 8002946:	60fb      	str	r3, [r7, #12]
 8002948:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800294a:	f44f 7360 	mov.w	r3, #896	@ 0x380
 800294e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002950:	2302      	movs	r3, #2
 8002952:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002954:	2300      	movs	r3, #0
 8002956:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002958:	2300      	movs	r3, #0
 800295a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800295c:	2305      	movs	r3, #5
 800295e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002960:	f107 0314 	add.w	r3, r7, #20
 8002964:	4619      	mov	r1, r3
 8002966:	4805      	ldr	r0, [pc, #20]	@ (800297c <HAL_SPI_MspInit+0x8c>)
 8002968:	f000 fdc0 	bl	80034ec <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 800296c:	bf00      	nop
 800296e:	3728      	adds	r7, #40	@ 0x28
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	40015000 	.word	0x40015000
 8002978:	40023800 	.word	0x40023800
 800297c:	40021400 	.word	0x40021400

08002980 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a08      	ldr	r2, [pc, #32]	@ (80029b0 <HAL_SPI_MspDeInit+0x30>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d10a      	bne.n	80029a8 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8002992:	4b08      	ldr	r3, [pc, #32]	@ (80029b4 <HAL_SPI_MspDeInit+0x34>)
 8002994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002996:	4a07      	ldr	r2, [pc, #28]	@ (80029b4 <HAL_SPI_MspDeInit+0x34>)
 8002998:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800299c:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 800299e:	f44f 7160 	mov.w	r1, #896	@ 0x380
 80029a2:	4805      	ldr	r0, [pc, #20]	@ (80029b8 <HAL_SPI_MspDeInit+0x38>)
 80029a4:	f000 ff4e 	bl	8003844 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 80029a8:	bf00      	nop
 80029aa:	3708      	adds	r7, #8
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	40015000 	.word	0x40015000
 80029b4:	40023800 	.word	0x40023800
 80029b8:	40021400 	.word	0x40021400

080029bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80029c0:	bf00      	nop
 80029c2:	e7fd      	b.n	80029c0 <NMI_Handler+0x4>

080029c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029c4:	b480      	push	{r7}
 80029c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029c8:	bf00      	nop
 80029ca:	e7fd      	b.n	80029c8 <HardFault_Handler+0x4>

080029cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029cc:	b480      	push	{r7}
 80029ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029d0:	bf00      	nop
 80029d2:	e7fd      	b.n	80029d0 <MemManage_Handler+0x4>

080029d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029d4:	b480      	push	{r7}
 80029d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029d8:	bf00      	nop
 80029da:	e7fd      	b.n	80029d8 <BusFault_Handler+0x4>

080029dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029e0:	bf00      	nop
 80029e2:	e7fd      	b.n	80029e0 <UsageFault_Handler+0x4>

080029e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029e8:	bf00      	nop
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr

080029f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029f2:	b480      	push	{r7}
 80029f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029f6:	bf00      	nop
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a00:	b480      	push	{r7}
 8002a02:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a04:	bf00      	nop
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr

08002a0e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a12:	f000 fbe3 	bl	80031dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a16:	bf00      	nop
 8002a18:	bd80      	pop	{r7, pc}

08002a1a <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 8002a1a:	b580      	push	{r7, lr}
 8002a1c:	b082      	sub	sp, #8
 8002a1e:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports 
    I2C3_MspInit();
 8002a20:	f000 f9ce 	bl	8002dc0 <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 8002a24:	f000 f98e 	bl	8002d44 <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8002a28:	2202      	movs	r2, #2
 8002a2a:	2103      	movs	r1, #3
 8002a2c:	2082      	movs	r0, #130	@ 0x82
 8002a2e:	f000 fa1b 	bl	8002e68 <I2C3_Write>
    HAL_Delay(5);
 8002a32:	2005      	movs	r0, #5
 8002a34:	f000 fbf2 	bl	800321c <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8002a38:	2200      	movs	r2, #0
 8002a3a:	2103      	movs	r1, #3
 8002a3c:	2082      	movs	r0, #130	@ 0x82
 8002a3e:	f000 fa13 	bl	8002e68 <I2C3_Write>
    HAL_Delay(2);
 8002a42:	2002      	movs	r0, #2
 8002a44:	f000 fbea 	bl	800321c <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 8002a48:	1cba      	adds	r2, r7, #2
 8002a4a:	2302      	movs	r3, #2
 8002a4c:	2100      	movs	r1, #0
 8002a4e:	2082      	movs	r0, #130	@ 0x82
 8002a50:	f000 fa5a 	bl	8002f08 <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 8002a54:	887b      	ldrh	r3, [r7, #2]
 8002a56:	021b      	lsls	r3, r3, #8
 8002a58:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 8002a5a:	887b      	ldrh	r3, [r7, #2]
 8002a5c:	0a1b      	lsrs	r3, r3, #8
 8002a5e:	b29a      	uxth	r2, r3
 8002a60:	88fb      	ldrh	r3, [r7, #6]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 8002a66:	88fb      	ldrh	r3, [r7, #6]
 8002a68:	f640 0211 	movw	r2, #2065	@ 0x811
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d001      	beq.n	8002a74 <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e075      	b.n	8002b60 <STMPE811_Init+0x146>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8002a74:	2202      	movs	r2, #2
 8002a76:	2103      	movs	r1, #3
 8002a78:	2082      	movs	r0, #130	@ 0x82
 8002a7a:	f000 f9f5 	bl	8002e68 <I2C3_Write>
    HAL_Delay(5);
 8002a7e:	2005      	movs	r0, #5
 8002a80:	f000 fbcc 	bl	800321c <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8002a84:	2200      	movs	r2, #0
 8002a86:	2103      	movs	r1, #3
 8002a88:	2082      	movs	r0, #130	@ 0x82
 8002a8a:	f000 f9ed 	bl	8002e68 <I2C3_Write>
    HAL_Delay(2);
 8002a8e:	2002      	movs	r0, #2
 8002a90:	f000 fbc4 	bl	800321c <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8002a94:	2004      	movs	r0, #4
 8002a96:	f000 f867 	bl	8002b68 <STMPE811_Read>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 8002a9e:	797b      	ldrb	r3, [r7, #5]
 8002aa0:	f023 0301 	bic.w	r3, r3, #1
 8002aa4:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8002aa6:	797b      	ldrb	r3, [r7, #5]
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	2104      	movs	r1, #4
 8002aac:	2082      	movs	r0, #130	@ 0x82
 8002aae:	f000 f9db 	bl	8002e68 <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8002ab2:	2004      	movs	r0, #4
 8002ab4:	f000 f858 	bl	8002b68 <STMPE811_Read>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 8002abc:	797b      	ldrb	r3, [r7, #5]
 8002abe:	f023 0302 	bic.w	r3, r3, #2
 8002ac2:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8002ac4:	797b      	ldrb	r3, [r7, #5]
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	2104      	movs	r1, #4
 8002aca:	2082      	movs	r0, #130	@ 0x82
 8002acc:	f000 f9cc 	bl	8002e68 <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 8002ad0:	2249      	movs	r2, #73	@ 0x49
 8002ad2:	2120      	movs	r1, #32
 8002ad4:	2082      	movs	r0, #130	@ 0x82
 8002ad6:	f000 f9c7 	bl	8002e68 <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 8002ada:	2002      	movs	r0, #2
 8002adc:	f000 fb9e 	bl	800321c <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	2121      	movs	r1, #33	@ 0x21
 8002ae4:	2082      	movs	r0, #130	@ 0x82
 8002ae6:	f000 f9bf 	bl	8002e68 <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 8002aea:	2017      	movs	r0, #23
 8002aec:	f000 f83c 	bl	8002b68 <STMPE811_Read>
 8002af0:	4603      	mov	r3, r0
 8002af2:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 8002af4:	797b      	ldrb	r3, [r7, #5]
 8002af6:	f043 031e 	orr.w	r3, r3, #30
 8002afa:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 8002afc:	797b      	ldrb	r3, [r7, #5]
 8002afe:	461a      	mov	r2, r3
 8002b00:	2117      	movs	r1, #23
 8002b02:	2082      	movs	r0, #130	@ 0x82
 8002b04:	f000 f9b0 	bl	8002e68 <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 8002b08:	229a      	movs	r2, #154	@ 0x9a
 8002b0a:	2141      	movs	r1, #65	@ 0x41
 8002b0c:	2082      	movs	r0, #130	@ 0x82
 8002b0e:	f000 f9ab 	bl	8002e68 <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 8002b12:	2201      	movs	r2, #1
 8002b14:	214a      	movs	r1, #74	@ 0x4a
 8002b16:	2082      	movs	r0, #130	@ 0x82
 8002b18:	f000 f9a6 	bl	8002e68 <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	214b      	movs	r1, #75	@ 0x4b
 8002b20:	2082      	movs	r0, #130	@ 0x82
 8002b22:	f000 f9a1 	bl	8002e68 <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8002b26:	2200      	movs	r2, #0
 8002b28:	214b      	movs	r1, #75	@ 0x4b
 8002b2a:	2082      	movs	r0, #130	@ 0x82
 8002b2c:	f000 f99c 	bl	8002e68 <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 8002b30:	2201      	movs	r2, #1
 8002b32:	2156      	movs	r1, #86	@ 0x56
 8002b34:	2082      	movs	r0, #130	@ 0x82
 8002b36:	f000 f997 	bl	8002e68 <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	2158      	movs	r1, #88	@ 0x58
 8002b3e:	2082      	movs	r0, #130	@ 0x82
 8002b40:	f000 f992 	bl	8002e68 <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 8002b44:	2203      	movs	r2, #3
 8002b46:	2140      	movs	r1, #64	@ 0x40
 8002b48:	2082      	movs	r0, #130	@ 0x82
 8002b4a:	f000 f98d 	bl	8002e68 <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 8002b4e:	22ff      	movs	r2, #255	@ 0xff
 8002b50:	210b      	movs	r1, #11
 8002b52:	2082      	movs	r0, #130	@ 0x82
 8002b54:	f000 f988 	bl	8002e68 <I2C3_Write>
    
    /* Wait for 2 ms delay */
    HAL_Delay(200);
 8002b58:	20c8      	movs	r0, #200	@ 0xc8
 8002b5a:	f000 fb5f 	bl	800321c <HAL_Delay>

    return STMPE811_State_Ok;
 8002b5e:	2302      	movs	r3, #2

}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3708      	adds	r7, #8
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	4603      	mov	r3, r0
 8002b70:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 8002b72:	f107 020f 	add.w	r2, r7, #15
 8002b76:	79fb      	ldrb	r3, [r7, #7]
 8002b78:	4619      	mov	r1, r3
 8002b7a:	2082      	movs	r0, #130	@ 0x82
 8002b7c:	f000 f99e 	bl	8002ebc <I2C3_Read>

    return readData;
 8002b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3710      	adds	r7, #16
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}

08002b8a <STMPE811_ReadTouch>:
}

/* The below function was created by Tilen MAJERLE but modified by Xavion */

STMPE811_State_t STMPE811_ReadTouch(STMPE811_TouchData *structdata)  //TM Function
{
 8002b8a:	b580      	push	{r7, lr}
 8002b8c:	b084      	sub	sp, #16
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
    uint8_t val;

    /* Save state */
    structdata->last_pressed = structdata->pressed;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	791a      	ldrb	r2, [r3, #4]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	715a      	strb	r2, [r3, #5]

    /* Read */
    val = STMPE811_Read(STMPE811_TSC_CTRL);
 8002b9a:	2040      	movs	r0, #64	@ 0x40
 8002b9c:	f7ff ffe4 	bl	8002b68 <STMPE811_Read>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	73fb      	strb	r3, [r7, #15]
    if ((val & 0x80) == 0) {
 8002ba4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	db0e      	blt.n	8002bca <STMPE811_ReadTouch+0x40>
        //Not pressed
        structdata->pressed = STMPE811_State_Released;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	711a      	strb	r2, [r3, #4]

        //Reset Fifo
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	214b      	movs	r1, #75	@ 0x4b
 8002bb6:	2082      	movs	r0, #130	@ 0x82
 8002bb8:	f000 f956 	bl	8002e68 <I2C3_Write>
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	214b      	movs	r1, #75	@ 0x4b
 8002bc0:	2082      	movs	r0, #130	@ 0x82
 8002bc2:	f000 f951 	bl	8002e68 <I2C3_Write>

        return STMPE811_State_Released;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e0a7      	b.n	8002d1a <STMPE811_ReadTouch+0x190>

    /* Clear all the status pending bits if any */
    //TM_I2C_Write(STMPE811_I2C, STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);

    //Pressed
    if (structdata->orientation == STMPE811_Orientation_Portrait_1) {
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	799b      	ldrb	r3, [r3, #6]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d117      	bne.n	8002c02 <STMPE811_ReadTouch+0x78>
        structdata->x = 239 - TM_STMPE811_ReadX(structdata->x);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	881b      	ldrh	r3, [r3, #0]
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f000 f9b8 	bl	8002f4c <TM_STMPE811_ReadX>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8002be2:	b29a      	uxth	r2, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	801a      	strh	r2, [r3, #0]
        structdata->y = 319 - TM_STMPE811_ReadY(structdata->y);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	885b      	ldrh	r3, [r3, #2]
 8002bec:	4618      	mov	r0, r3
 8002bee:	f000 fa0d 	bl	800300c <TM_STMPE811_ReadY>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	b29a      	uxth	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	805a      	strh	r2, [r3, #2]
 8002c00:	e048      	b.n	8002c94 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Portrait_2) {
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	799b      	ldrb	r3, [r3, #6]
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d112      	bne.n	8002c30 <STMPE811_ReadTouch+0xa6>
        structdata->x = TM_STMPE811_ReadX(structdata->x);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	881b      	ldrh	r3, [r3, #0]
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f000 f99c 	bl	8002f4c <TM_STMPE811_ReadX>
 8002c14:	4603      	mov	r3, r0
 8002c16:	461a      	mov	r2, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	801a      	strh	r2, [r3, #0]
        structdata->y = TM_STMPE811_ReadY(structdata->y);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	885b      	ldrh	r3, [r3, #2]
 8002c20:	4618      	mov	r0, r3
 8002c22:	f000 f9f3 	bl	800300c <TM_STMPE811_ReadY>
 8002c26:	4603      	mov	r3, r0
 8002c28:	461a      	mov	r2, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	805a      	strh	r2, [r3, #2]
 8002c2e:	e031      	b.n	8002c94 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_1) {
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	799b      	ldrb	r3, [r3, #6]
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d115      	bne.n	8002c64 <STMPE811_ReadTouch+0xda>
        structdata->y = TM_STMPE811_ReadX(structdata->y);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	885b      	ldrh	r3, [r3, #2]
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f000 f985 	bl	8002f4c <TM_STMPE811_ReadX>
 8002c42:	4603      	mov	r3, r0
 8002c44:	461a      	mov	r2, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	805a      	strh	r2, [r3, #2]
        structdata->x = 319 - TM_STMPE811_ReadY(structdata->x);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	881b      	ldrh	r3, [r3, #0]
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f000 f9dc 	bl	800300c <TM_STMPE811_ReadY>
 8002c54:	4603      	mov	r3, r0
 8002c56:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	b29a      	uxth	r2, r3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	801a      	strh	r2, [r3, #0]
 8002c62:	e017      	b.n	8002c94 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_2) {
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	799b      	ldrb	r3, [r3, #6]
 8002c68:	2b03      	cmp	r3, #3
 8002c6a:	d113      	bne.n	8002c94 <STMPE811_ReadTouch+0x10a>
        structdata->y = 239 - TM_STMPE811_ReadX(structdata->x);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	881b      	ldrh	r3, [r3, #0]
 8002c70:	4618      	mov	r0, r3
 8002c72:	f000 f96b 	bl	8002f4c <TM_STMPE811_ReadX>
 8002c76:	4603      	mov	r3, r0
 8002c78:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8002c7c:	b29a      	uxth	r2, r3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	805a      	strh	r2, [r3, #2]
        structdata->x = TM_STMPE811_ReadY(structdata->x);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	881b      	ldrh	r3, [r3, #0]
 8002c86:	4618      	mov	r0, r3
 8002c88:	f000 f9c0 	bl	800300c <TM_STMPE811_ReadY>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	461a      	mov	r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002c94:	2201      	movs	r2, #1
 8002c96:	214b      	movs	r1, #75	@ 0x4b
 8002c98:	2082      	movs	r0, #130	@ 0x82
 8002c9a:	f000 f8e5 	bl	8002e68 <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	214b      	movs	r1, #75	@ 0x4b
 8002ca2:	2082      	movs	r0, #130	@ 0x82
 8002ca4:	f000 f8e0 	bl	8002e68 <I2C3_Write>

    //Check for valid data
    if (structdata->orientation == STMPE811_Orientation_Portrait_1 || structdata->orientation == STMPE811_Orientation_Portrait_2) {
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	799b      	ldrb	r3, [r3, #6]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d003      	beq.n	8002cb8 <STMPE811_ReadTouch+0x12e>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	799b      	ldrb	r3, [r3, #6]
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d115      	bne.n	8002ce4 <STMPE811_ReadTouch+0x15a>
        //Portrait
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	881b      	ldrh	r3, [r3, #0]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d027      	beq.n	8002d10 <STMPE811_ReadTouch+0x186>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	881b      	ldrh	r3, [r3, #0]
 8002cc4:	2bee      	cmp	r3, #238	@ 0xee
 8002cc6:	d823      	bhi.n	8002d10 <STMPE811_ReadTouch+0x186>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	885b      	ldrh	r3, [r3, #2]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d01f      	beq.n	8002d10 <STMPE811_ReadTouch+0x186>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	885b      	ldrh	r3, [r3, #2]
 8002cd4:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 8002cd8:	d81a      	bhi.n	8002d10 <STMPE811_ReadTouch+0x186>
            structdata->pressed = STMPE811_State_Pressed;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	e01a      	b.n	8002d1a <STMPE811_ReadTouch+0x190>
        }
    } else {
        //Landscape
        if (structdata->x > 0 && structdata->x < 319 && structdata->y > 0 && structdata->y < 239) {
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	881b      	ldrh	r3, [r3, #0]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d012      	beq.n	8002d12 <STMPE811_ReadTouch+0x188>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	881b      	ldrh	r3, [r3, #0]
 8002cf0:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 8002cf4:	d80d      	bhi.n	8002d12 <STMPE811_ReadTouch+0x188>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	885b      	ldrh	r3, [r3, #2]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d009      	beq.n	8002d12 <STMPE811_ReadTouch+0x188>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	885b      	ldrh	r3, [r3, #2]
 8002d02:	2bee      	cmp	r3, #238	@ 0xee
 8002d04:	d805      	bhi.n	8002d12 <STMPE811_ReadTouch+0x188>
            structdata->pressed = STMPE811_State_Pressed;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	e004      	b.n	8002d1a <STMPE811_ReadTouch+0x190>
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 8002d10:	bf00      	nop
        }
    }

    structdata->pressed = STMPE811_State_Released;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2201      	movs	r2, #1
 8002d16:	711a      	strb	r2, [r3, #4]

    return STMPE811_State_Released;
 8002d18:	2301      	movs	r3, #1
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3710      	adds	r7, #16
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
	...

08002d24 <verifyHAL_I2C_IS_OKAY>:
    }
    return true;
}

//  ******************************** I2C Functions ********************************//
void verifyHAL_I2C_IS_OKAY(){
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
    if (HAL_status != HAL_OK)
 8002d28:	4b05      	ldr	r3, [pc, #20]	@ (8002d40 <verifyHAL_I2C_IS_OKAY+0x1c>)
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d001      	beq.n	8002d34 <verifyHAL_I2C_IS_OKAY+0x10>
    {
        while(1);
 8002d30:	bf00      	nop
 8002d32:	e7fd      	b.n	8002d30 <verifyHAL_I2C_IS_OKAY+0xc>
    }
}
 8002d34:	bf00      	nop
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	20025a6c 	.word	0x20025a6c

08002d44 <I2C3_Init>:

static void I2C3_Init()
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	603b      	str	r3, [r7, #0]
 8002d4e:	4b18      	ldr	r3, [pc, #96]	@ (8002db0 <I2C3_Init+0x6c>)
 8002d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d52:	4a17      	ldr	r2, [pc, #92]	@ (8002db0 <I2C3_Init+0x6c>)
 8002d54:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002d58:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d5a:	4b15      	ldr	r3, [pc, #84]	@ (8002db0 <I2C3_Init+0x6c>)
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d5e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002d62:	603b      	str	r3, [r7, #0]
 8002d64:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 8002d66:	4b13      	ldr	r3, [pc, #76]	@ (8002db4 <I2C3_Init+0x70>)
 8002d68:	4a13      	ldr	r2, [pc, #76]	@ (8002db8 <I2C3_Init+0x74>)
 8002d6a:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 8002d6c:	4b11      	ldr	r3, [pc, #68]	@ (8002db4 <I2C3_Init+0x70>)
 8002d6e:	4a13      	ldr	r2, [pc, #76]	@ (8002dbc <I2C3_Init+0x78>)
 8002d70:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002d72:	4b10      	ldr	r3, [pc, #64]	@ (8002db4 <I2C3_Init+0x70>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 8002d78:	4b0e      	ldr	r3, [pc, #56]	@ (8002db4 <I2C3_Init+0x70>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002d7e:	4b0d      	ldr	r3, [pc, #52]	@ (8002db4 <I2C3_Init+0x70>)
 8002d80:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002d84:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 8002d86:	4b0b      	ldr	r3, [pc, #44]	@ (8002db4 <I2C3_Init+0x70>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002d8c:	4b09      	ldr	r3, [pc, #36]	@ (8002db4 <I2C3_Init+0x70>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode? 

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 8002d92:	4808      	ldr	r0, [pc, #32]	@ (8002db4 <I2C3_Init+0x70>)
 8002d94:	f000 fe94 	bl	8003ac0 <HAL_I2C_Init>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8002d9c:	79fb      	ldrb	r3, [r7, #7]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d001      	beq.n	8002da6 <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 8002da2:	bf00      	nop
 8002da4:	e7fd      	b.n	8002da2 <I2C3_Init+0x5e>
    }
    return;
 8002da6:	bf00      	nop
}
 8002da8:	3708      	adds	r7, #8
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	40023800 	.word	0x40023800
 8002db4:	20025a18 	.word	0x20025a18
 8002db8:	40005c00 	.word	0x40005c00
 8002dbc:	000186a0 	.word	0x000186a0

08002dc0 <I2C3_MspInit>:

// GPIO Initializations 
static void I2C3_MspInit(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b088      	sub	sp, #32
 8002dc4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dc6:	f107 030c 	add.w	r3, r7, #12
 8002dca:	2200      	movs	r2, #0
 8002dcc:	601a      	str	r2, [r3, #0]
 8002dce:	605a      	str	r2, [r3, #4]
 8002dd0:	609a      	str	r2, [r3, #8]
 8002dd2:	60da      	str	r2, [r3, #12]
 8002dd4:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	60bb      	str	r3, [r7, #8]
 8002dda:	4b20      	ldr	r3, [pc, #128]	@ (8002e5c <I2C3_MspInit+0x9c>)
 8002ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dde:	4a1f      	ldr	r2, [pc, #124]	@ (8002e5c <I2C3_MspInit+0x9c>)
 8002de0:	f043 0304 	orr.w	r3, r3, #4
 8002de4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002de6:	4b1d      	ldr	r3, [pc, #116]	@ (8002e5c <I2C3_MspInit+0x9c>)
 8002de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dea:	f003 0304 	and.w	r3, r3, #4
 8002dee:	60bb      	str	r3, [r7, #8]
 8002df0:	68bb      	ldr	r3, [r7, #8]

    // GPIOA 
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002df2:	2300      	movs	r3, #0
 8002df4:	607b      	str	r3, [r7, #4]
 8002df6:	4b19      	ldr	r3, [pc, #100]	@ (8002e5c <I2C3_MspInit+0x9c>)
 8002df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dfa:	4a18      	ldr	r2, [pc, #96]	@ (8002e5c <I2C3_MspInit+0x9c>)
 8002dfc:	f043 0301 	orr.w	r3, r3, #1
 8002e00:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e02:	4b16      	ldr	r3, [pc, #88]	@ (8002e5c <I2C3_MspInit+0x9c>)
 8002e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e06:	f003 0301 	and.w	r3, r3, #1
 8002e0a:	607b      	str	r3, [r7, #4]
 8002e0c:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8002e0e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002e12:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e14:	2312      	movs	r3, #18
 8002e16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002e20:	2304      	movs	r3, #4
 8002e22:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8002e24:	f107 030c 	add.w	r3, r7, #12
 8002e28:	4619      	mov	r1, r3
 8002e2a:	480d      	ldr	r0, [pc, #52]	@ (8002e60 <I2C3_MspInit+0xa0>)
 8002e2c:	f000 fb5e 	bl	80034ec <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8002e30:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002e34:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e36:	2312      	movs	r3, #18
 8002e38:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002e42:	2304      	movs	r3, #4
 8002e44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8002e46:	f107 030c 	add.w	r3, r7, #12
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	4805      	ldr	r0, [pc, #20]	@ (8002e64 <I2C3_MspInit+0xa4>)
 8002e4e:	f000 fb4d 	bl	80034ec <HAL_GPIO_Init>
    
}
 8002e52:	bf00      	nop
 8002e54:	3720      	adds	r7, #32
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	40023800 	.word	0x40023800
 8002e60:	40020800 	.word	0x40020800
 8002e64:	40020000 	.word	0x40020000

08002e68 <I2C3_Write>:

// This function should only be used for single BYTE transfers 
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b088      	sub	sp, #32
 8002e6c:	af04      	add	r7, sp, #16
 8002e6e:	4603      	mov	r3, r0
 8002e70:	80fb      	strh	r3, [r7, #6]
 8002e72:	460b      	mov	r3, r1
 8002e74:	717b      	strb	r3, [r7, #5]
 8002e76:	4613      	mov	r3, r2
 8002e78:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 8002e7a:	793b      	ldrb	r3, [r7, #4]
 8002e7c:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call? 
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8002e7e:	797b      	ldrb	r3, [r7, #5]
 8002e80:	b29a      	uxth	r2, r3
 8002e82:	88f9      	ldrh	r1, [r7, #6]
 8002e84:	4b0a      	ldr	r3, [pc, #40]	@ (8002eb0 <I2C3_Write+0x48>)
 8002e86:	9302      	str	r3, [sp, #8]
 8002e88:	2301      	movs	r3, #1
 8002e8a:	9301      	str	r3, [sp, #4]
 8002e8c:	f107 030f 	add.w	r3, r7, #15
 8002e90:	9300      	str	r3, [sp, #0]
 8002e92:	2301      	movs	r3, #1
 8002e94:	4807      	ldr	r0, [pc, #28]	@ (8002eb4 <I2C3_Write+0x4c>)
 8002e96:	f000 ff57 	bl	8003d48 <HAL_I2C_Mem_Write>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	4b06      	ldr	r3, [pc, #24]	@ (8002eb8 <I2C3_Write+0x50>)
 8002ea0:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8002ea2:	f7ff ff3f 	bl	8002d24 <verifyHAL_I2C_IS_OKAY>
}
 8002ea6:	bf00      	nop
 8002ea8:	3710      	adds	r7, #16
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	0003d090 	.word	0x0003d090
 8002eb4:	20025a18 	.word	0x20025a18
 8002eb8:	20025a6c 	.word	0x20025a6c

08002ebc <I2C3_Read>:

// This function should only be used for single BYTE transfers 
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b086      	sub	sp, #24
 8002ec0:	af04      	add	r7, sp, #16
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	603a      	str	r2, [r7, #0]
 8002ec6:	71fb      	strb	r3, [r7, #7]
 8002ec8:	460b      	mov	r3, r1
 8002eca:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8002ecc:	79fb      	ldrb	r3, [r7, #7]
 8002ece:	b299      	uxth	r1, r3
 8002ed0:	79bb      	ldrb	r3, [r7, #6]
 8002ed2:	b29a      	uxth	r2, r3
 8002ed4:	4b09      	ldr	r3, [pc, #36]	@ (8002efc <I2C3_Read+0x40>)
 8002ed6:	9302      	str	r3, [sp, #8]
 8002ed8:	2301      	movs	r3, #1
 8002eda:	9301      	str	r3, [sp, #4]
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	9300      	str	r3, [sp, #0]
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	4807      	ldr	r0, [pc, #28]	@ (8002f00 <I2C3_Read+0x44>)
 8002ee4:	f001 f82a 	bl	8003f3c <HAL_I2C_Mem_Read>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	461a      	mov	r2, r3
 8002eec:	4b05      	ldr	r3, [pc, #20]	@ (8002f04 <I2C3_Read+0x48>)
 8002eee:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8002ef0:	f7ff ff18 	bl	8002d24 <verifyHAL_I2C_IS_OKAY>
}
 8002ef4:	bf00      	nop
 8002ef6:	3708      	adds	r7, #8
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	0003d090 	.word	0x0003d090
 8002f00:	20025a18 	.word	0x20025a18
 8002f04:	20025a6c 	.word	0x20025a6c

08002f08 <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b086      	sub	sp, #24
 8002f0c:	af04      	add	r7, sp, #16
 8002f0e:	603a      	str	r2, [r7, #0]
 8002f10:	461a      	mov	r2, r3
 8002f12:	4603      	mov	r3, r0
 8002f14:	71fb      	strb	r3, [r7, #7]
 8002f16:	460b      	mov	r3, r1
 8002f18:	71bb      	strb	r3, [r7, #6]
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 8002f1e:	79fb      	ldrb	r3, [r7, #7]
 8002f20:	b299      	uxth	r1, r3
 8002f22:	79bb      	ldrb	r3, [r7, #6]
 8002f24:	b29a      	uxth	r2, r3
 8002f26:	4b07      	ldr	r3, [pc, #28]	@ (8002f44 <I2C3_MulitByteRead+0x3c>)
 8002f28:	9302      	str	r3, [sp, #8]
 8002f2a:	88bb      	ldrh	r3, [r7, #4]
 8002f2c:	9301      	str	r3, [sp, #4]
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	9300      	str	r3, [sp, #0]
 8002f32:	2301      	movs	r3, #1
 8002f34:	4804      	ldr	r0, [pc, #16]	@ (8002f48 <I2C3_MulitByteRead+0x40>)
 8002f36:	f001 f801 	bl	8003f3c <HAL_I2C_Mem_Read>
}
 8002f3a:	bf00      	nop
 8002f3c:	3708      	adds	r7, #8
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	0003d090 	.word	0x0003d090
 8002f48:	20025a18 	.word	0x20025a18

08002f4c <TM_STMPE811_ReadX>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x) { // TM FUNCTION 
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	4603      	mov	r3, r0
 8002f54:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 8002f56:	204d      	movs	r0, #77	@ 0x4d
 8002f58:	f7ff fe06 	bl	8002b68 <STMPE811_Read>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 8002f60:	204e      	movs	r0, #78	@ 0x4e
 8002f62:	f7ff fe01 	bl	8002b68 <STMPE811_Read>
 8002f66:	4603      	mov	r3, r0
 8002f68:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8002f6a:	7a7b      	ldrb	r3, [r7, #9]
 8002f6c:	b21b      	sxth	r3, r3
 8002f6e:	021b      	lsls	r3, r3, #8
 8002f70:	b21a      	sxth	r2, r3
 8002f72:	7a3b      	ldrb	r3, [r7, #8]
 8002f74:	b21b      	sxth	r3, r3
 8002f76:	4313      	orrs	r3, r2
 8002f78:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000) {
 8002f7a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002f7e:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002f82:	4293      	cmp	r3, r2
 8002f84:	dc06      	bgt.n	8002f94 <TM_STMPE811_ReadX+0x48>
        val = 3900 - val;
 8002f86:	89fb      	ldrh	r3, [r7, #14]
 8002f88:	f5c3 6373 	rsb	r3, r3, #3888	@ 0xf30
 8002f8c:	330c      	adds	r3, #12
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	81fb      	strh	r3, [r7, #14]
 8002f92:	e005      	b.n	8002fa0 <TM_STMPE811_ReadX+0x54>
    } else {
        val = 3800 - val;
 8002f94:	89fb      	ldrh	r3, [r7, #14]
 8002f96:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 8002f9a:	3308      	adds	r3, #8
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 8002fa0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002fa4:	4a18      	ldr	r2, [pc, #96]	@ (8003008 <TM_STMPE811_ReadX+0xbc>)
 8002fa6:	fb82 1203 	smull	r1, r2, r2, r3
 8002faa:	441a      	add	r2, r3
 8002fac:	10d2      	asrs	r2, r2, #3
 8002fae:	17db      	asrs	r3, r3, #31
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	81fb      	strh	r3, [r7, #14]

    if (val > 239) {
 8002fb4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002fb8:	2bef      	cmp	r3, #239	@ 0xef
 8002fba:	dd02      	ble.n	8002fc2 <TM_STMPE811_ReadX+0x76>
        val = 239;
 8002fbc:	23ef      	movs	r3, #239	@ 0xef
 8002fbe:	81fb      	strh	r3, [r7, #14]
 8002fc0:	e005      	b.n	8002fce <TM_STMPE811_ReadX+0x82>
    } else if (val < 0) {
 8002fc2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	da01      	bge.n	8002fce <TM_STMPE811_ReadX+0x82>
        val = 0;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 8002fce:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002fd2:	88fb      	ldrh	r3, [r7, #6]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	dd05      	ble.n	8002fe4 <TM_STMPE811_ReadX+0x98>
 8002fd8:	89fa      	ldrh	r2, [r7, #14]
 8002fda:	88fb      	ldrh	r3, [r7, #6]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	b21b      	sxth	r3, r3
 8002fe2:	e004      	b.n	8002fee <TM_STMPE811_ReadX+0xa2>
 8002fe4:	89fb      	ldrh	r3, [r7, #14]
 8002fe6:	88fa      	ldrh	r2, [r7, #6]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	b21b      	sxth	r3, r3
 8002fee:	81bb      	strh	r3, [r7, #12]
    if (dx > 4) {
 8002ff0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002ff4:	2b04      	cmp	r3, #4
 8002ff6:	dd01      	ble.n	8002ffc <TM_STMPE811_ReadX+0xb0>
        return val;
 8002ff8:	89fb      	ldrh	r3, [r7, #14]
 8002ffa:	e000      	b.n	8002ffe <TM_STMPE811_ReadX+0xb2>
    }
    return x;
 8002ffc:	88fb      	ldrh	r3, [r7, #6]
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3710      	adds	r7, #16
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	88888889 	.word	0x88888889

0800300c <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y) { // TM FUNCTION 
 800300c:	b580      	push	{r7, lr}
 800300e:	b084      	sub	sp, #16
 8003010:	af00      	add	r7, sp, #0
 8003012:	4603      	mov	r3, r0
 8003014:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 8003016:	204f      	movs	r0, #79	@ 0x4f
 8003018:	f7ff fda6 	bl	8002b68 <STMPE811_Read>
 800301c:	4603      	mov	r3, r0
 800301e:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 8003020:	2050      	movs	r0, #80	@ 0x50
 8003022:	f7ff fda1 	bl	8002b68 <STMPE811_Read>
 8003026:	4603      	mov	r3, r0
 8003028:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 800302a:	7a7b      	ldrb	r3, [r7, #9]
 800302c:	b21b      	sxth	r3, r3
 800302e:	021b      	lsls	r3, r3, #8
 8003030:	b21a      	sxth	r2, r3
 8003032:	7a3b      	ldrb	r3, [r7, #8]
 8003034:	b21b      	sxth	r3, r3
 8003036:	4313      	orrs	r3, r2
 8003038:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 800303a:	89fb      	ldrh	r3, [r7, #14]
 800303c:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003040:	b29b      	uxth	r3, r3
 8003042:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 8003044:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003048:	4a18      	ldr	r2, [pc, #96]	@ (80030ac <TM_STMPE811_ReadY+0xa0>)
 800304a:	fb82 1203 	smull	r1, r2, r2, r3
 800304e:	1052      	asrs	r2, r2, #1
 8003050:	17db      	asrs	r3, r3, #31
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	81fb      	strh	r3, [r7, #14]

    if (val <= 0) {
 8003056:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800305a:	2b00      	cmp	r3, #0
 800305c:	dc02      	bgt.n	8003064 <TM_STMPE811_ReadY+0x58>
        val = 0;
 800305e:	2300      	movs	r3, #0
 8003060:	81fb      	strh	r3, [r7, #14]
 8003062:	e007      	b.n	8003074 <TM_STMPE811_ReadY+0x68>
    } else if (val >= 320) {
 8003064:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003068:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800306c:	db02      	blt.n	8003074 <TM_STMPE811_ReadY+0x68>
        val = 319;
 800306e:	f240 133f 	movw	r3, #319	@ 0x13f
 8003072:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 8003074:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003078:	88fb      	ldrh	r3, [r7, #6]
 800307a:	429a      	cmp	r2, r3
 800307c:	dd05      	ble.n	800308a <TM_STMPE811_ReadY+0x7e>
 800307e:	89fa      	ldrh	r2, [r7, #14]
 8003080:	88fb      	ldrh	r3, [r7, #6]
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	b29b      	uxth	r3, r3
 8003086:	b21b      	sxth	r3, r3
 8003088:	e004      	b.n	8003094 <TM_STMPE811_ReadY+0x88>
 800308a:	89fb      	ldrh	r3, [r7, #14]
 800308c:	88fa      	ldrh	r2, [r7, #6]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	b29b      	uxth	r3, r3
 8003092:	b21b      	sxth	r3, r3
 8003094:	81bb      	strh	r3, [r7, #12]
    if (dy > 4) {
 8003096:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800309a:	2b04      	cmp	r3, #4
 800309c:	dd01      	ble.n	80030a2 <TM_STMPE811_ReadY+0x96>
        return val;
 800309e:	89fb      	ldrh	r3, [r7, #14]
 80030a0:	e000      	b.n	80030a4 <TM_STMPE811_ReadY+0x98>
    }
    return y;
 80030a2:	88fb      	ldrh	r3, [r7, #6]
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3710      	adds	r7, #16
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	2e8ba2e9 	.word	0x2e8ba2e9

080030b0 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 80030b0:	b480      	push	{r7}
 80030b2:	af00      	add	r7, sp, #0
}
 80030b4:	bf00      	nop
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr
	...

080030c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80030c0:	b480      	push	{r7}
 80030c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80030c4:	4b06      	ldr	r3, [pc, #24]	@ (80030e0 <SystemInit+0x20>)
 80030c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030ca:	4a05      	ldr	r2, [pc, #20]	@ (80030e0 <SystemInit+0x20>)
 80030cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80030d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80030d4:	bf00      	nop
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr
 80030de:	bf00      	nop
 80030e0:	e000ed00 	.word	0xe000ed00

080030e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80030e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800311c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80030e8:	f7ff ffea 	bl	80030c0 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80030ec:	480c      	ldr	r0, [pc, #48]	@ (8003120 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80030ee:	490d      	ldr	r1, [pc, #52]	@ (8003124 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80030f0:	4a0d      	ldr	r2, [pc, #52]	@ (8003128 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80030f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030f4:	e002      	b.n	80030fc <LoopCopyDataInit>

080030f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030fa:	3304      	adds	r3, #4

080030fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003100:	d3f9      	bcc.n	80030f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003102:	4a0a      	ldr	r2, [pc, #40]	@ (800312c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003104:	4c0a      	ldr	r4, [pc, #40]	@ (8003130 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003106:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003108:	e001      	b.n	800310e <LoopFillZerobss>

0800310a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800310a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800310c:	3204      	adds	r2, #4

0800310e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800310e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003110:	d3fb      	bcc.n	800310a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003112:	f003 fa73 	bl	80065fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003116:	f7ff f9b0 	bl	800247a <main>
  bx  lr    
 800311a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800311c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8003120:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003124:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8003128:	08008154 	.word	0x08008154
  ldr r2, =_sbss
 800312c:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8003130:	20025a74 	.word	0x20025a74

08003134 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003134:	e7fe      	b.n	8003134 <ADC_IRQHandler>
	...

08003138 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800313c:	4b0e      	ldr	r3, [pc, #56]	@ (8003178 <HAL_Init+0x40>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a0d      	ldr	r2, [pc, #52]	@ (8003178 <HAL_Init+0x40>)
 8003142:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003146:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003148:	4b0b      	ldr	r3, [pc, #44]	@ (8003178 <HAL_Init+0x40>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a0a      	ldr	r2, [pc, #40]	@ (8003178 <HAL_Init+0x40>)
 800314e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003152:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003154:	4b08      	ldr	r3, [pc, #32]	@ (8003178 <HAL_Init+0x40>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a07      	ldr	r2, [pc, #28]	@ (8003178 <HAL_Init+0x40>)
 800315a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800315e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003160:	2003      	movs	r0, #3
 8003162:	f000 f973 	bl	800344c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003166:	2000      	movs	r0, #0
 8003168:	f000 f808 	bl	800317c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800316c:	f7ff fa06 	bl	800257c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003170:	2300      	movs	r3, #0
}
 8003172:	4618      	mov	r0, r3
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	40023c00 	.word	0x40023c00

0800317c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003184:	4b12      	ldr	r3, [pc, #72]	@ (80031d0 <HAL_InitTick+0x54>)
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	4b12      	ldr	r3, [pc, #72]	@ (80031d4 <HAL_InitTick+0x58>)
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	4619      	mov	r1, r3
 800318e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003192:	fbb3 f3f1 	udiv	r3, r3, r1
 8003196:	fbb2 f3f3 	udiv	r3, r2, r3
 800319a:	4618      	mov	r0, r3
 800319c:	f000 f999 	bl	80034d2 <HAL_SYSTICK_Config>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d001      	beq.n	80031aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e00e      	b.n	80031c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2b0f      	cmp	r3, #15
 80031ae:	d80a      	bhi.n	80031c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80031b0:	2200      	movs	r2, #0
 80031b2:	6879      	ldr	r1, [r7, #4]
 80031b4:	f04f 30ff 	mov.w	r0, #4294967295
 80031b8:	f000 f953 	bl	8003462 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80031bc:	4a06      	ldr	r2, [pc, #24]	@ (80031d8 <HAL_InitTick+0x5c>)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80031c2:	2300      	movs	r3, #0
 80031c4:	e000      	b.n	80031c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3708      	adds	r7, #8
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	2000001c 	.word	0x2000001c
 80031d4:	20000024 	.word	0x20000024
 80031d8:	20000020 	.word	0x20000020

080031dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031dc:	b480      	push	{r7}
 80031de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80031e0:	4b06      	ldr	r3, [pc, #24]	@ (80031fc <HAL_IncTick+0x20>)
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	461a      	mov	r2, r3
 80031e6:	4b06      	ldr	r3, [pc, #24]	@ (8003200 <HAL_IncTick+0x24>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4413      	add	r3, r2
 80031ec:	4a04      	ldr	r2, [pc, #16]	@ (8003200 <HAL_IncTick+0x24>)
 80031ee:	6013      	str	r3, [r2, #0]
}
 80031f0:	bf00      	nop
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop
 80031fc:	20000024 	.word	0x20000024
 8003200:	20025a70 	.word	0x20025a70

08003204 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003204:	b480      	push	{r7}
 8003206:	af00      	add	r7, sp, #0
  return uwTick;
 8003208:	4b03      	ldr	r3, [pc, #12]	@ (8003218 <HAL_GetTick+0x14>)
 800320a:	681b      	ldr	r3, [r3, #0]
}
 800320c:	4618      	mov	r0, r3
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop
 8003218:	20025a70 	.word	0x20025a70

0800321c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b084      	sub	sp, #16
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003224:	f7ff ffee 	bl	8003204 <HAL_GetTick>
 8003228:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003234:	d005      	beq.n	8003242 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003236:	4b0a      	ldr	r3, [pc, #40]	@ (8003260 <HAL_Delay+0x44>)
 8003238:	781b      	ldrb	r3, [r3, #0]
 800323a:	461a      	mov	r2, r3
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	4413      	add	r3, r2
 8003240:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003242:	bf00      	nop
 8003244:	f7ff ffde 	bl	8003204 <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	68fa      	ldr	r2, [r7, #12]
 8003250:	429a      	cmp	r2, r3
 8003252:	d8f7      	bhi.n	8003244 <HAL_Delay+0x28>
  {
  }
}
 8003254:	bf00      	nop
 8003256:	bf00      	nop
 8003258:	3710      	adds	r7, #16
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	20000024 	.word	0x20000024

08003264 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003264:	b480      	push	{r7}
 8003266:	b085      	sub	sp, #20
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f003 0307 	and.w	r3, r3, #7
 8003272:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003274:	4b0c      	ldr	r3, [pc, #48]	@ (80032a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800327a:	68ba      	ldr	r2, [r7, #8]
 800327c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003280:	4013      	ands	r3, r2
 8003282:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800328c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003290:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003294:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003296:	4a04      	ldr	r2, [pc, #16]	@ (80032a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	60d3      	str	r3, [r2, #12]
}
 800329c:	bf00      	nop
 800329e:	3714      	adds	r7, #20
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr
 80032a8:	e000ed00 	.word	0xe000ed00

080032ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032ac:	b480      	push	{r7}
 80032ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032b0:	4b04      	ldr	r3, [pc, #16]	@ (80032c4 <__NVIC_GetPriorityGrouping+0x18>)
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	0a1b      	lsrs	r3, r3, #8
 80032b6:	f003 0307 	and.w	r3, r3, #7
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr
 80032c4:	e000ed00 	.word	0xe000ed00

080032c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	4603      	mov	r3, r0
 80032d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	db0b      	blt.n	80032f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032da:	79fb      	ldrb	r3, [r7, #7]
 80032dc:	f003 021f 	and.w	r2, r3, #31
 80032e0:	4907      	ldr	r1, [pc, #28]	@ (8003300 <__NVIC_EnableIRQ+0x38>)
 80032e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032e6:	095b      	lsrs	r3, r3, #5
 80032e8:	2001      	movs	r0, #1
 80032ea:	fa00 f202 	lsl.w	r2, r0, r2
 80032ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80032f2:	bf00      	nop
 80032f4:	370c      	adds	r7, #12
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	e000e100 	.word	0xe000e100

08003304 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	4603      	mov	r3, r0
 800330c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800330e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003312:	2b00      	cmp	r3, #0
 8003314:	db12      	blt.n	800333c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003316:	79fb      	ldrb	r3, [r7, #7]
 8003318:	f003 021f 	and.w	r2, r3, #31
 800331c:	490a      	ldr	r1, [pc, #40]	@ (8003348 <__NVIC_DisableIRQ+0x44>)
 800331e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003322:	095b      	lsrs	r3, r3, #5
 8003324:	2001      	movs	r0, #1
 8003326:	fa00 f202 	lsl.w	r2, r0, r2
 800332a:	3320      	adds	r3, #32
 800332c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003330:	f3bf 8f4f 	dsb	sy
}
 8003334:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003336:	f3bf 8f6f 	isb	sy
}
 800333a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800333c:	bf00      	nop
 800333e:	370c      	adds	r7, #12
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr
 8003348:	e000e100 	.word	0xe000e100

0800334c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	4603      	mov	r3, r0
 8003354:	6039      	str	r1, [r7, #0]
 8003356:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003358:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800335c:	2b00      	cmp	r3, #0
 800335e:	db0a      	blt.n	8003376 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	b2da      	uxtb	r2, r3
 8003364:	490c      	ldr	r1, [pc, #48]	@ (8003398 <__NVIC_SetPriority+0x4c>)
 8003366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800336a:	0112      	lsls	r2, r2, #4
 800336c:	b2d2      	uxtb	r2, r2
 800336e:	440b      	add	r3, r1
 8003370:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003374:	e00a      	b.n	800338c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	b2da      	uxtb	r2, r3
 800337a:	4908      	ldr	r1, [pc, #32]	@ (800339c <__NVIC_SetPriority+0x50>)
 800337c:	79fb      	ldrb	r3, [r7, #7]
 800337e:	f003 030f 	and.w	r3, r3, #15
 8003382:	3b04      	subs	r3, #4
 8003384:	0112      	lsls	r2, r2, #4
 8003386:	b2d2      	uxtb	r2, r2
 8003388:	440b      	add	r3, r1
 800338a:	761a      	strb	r2, [r3, #24]
}
 800338c:	bf00      	nop
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr
 8003398:	e000e100 	.word	0xe000e100
 800339c:	e000ed00 	.word	0xe000ed00

080033a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b089      	sub	sp, #36	@ 0x24
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	60f8      	str	r0, [r7, #12]
 80033a8:	60b9      	str	r1, [r7, #8]
 80033aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f003 0307 	and.w	r3, r3, #7
 80033b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	f1c3 0307 	rsb	r3, r3, #7
 80033ba:	2b04      	cmp	r3, #4
 80033bc:	bf28      	it	cs
 80033be:	2304      	movcs	r3, #4
 80033c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	3304      	adds	r3, #4
 80033c6:	2b06      	cmp	r3, #6
 80033c8:	d902      	bls.n	80033d0 <NVIC_EncodePriority+0x30>
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	3b03      	subs	r3, #3
 80033ce:	e000      	b.n	80033d2 <NVIC_EncodePriority+0x32>
 80033d0:	2300      	movs	r3, #0
 80033d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033d4:	f04f 32ff 	mov.w	r2, #4294967295
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	fa02 f303 	lsl.w	r3, r2, r3
 80033de:	43da      	mvns	r2, r3
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	401a      	ands	r2, r3
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033e8:	f04f 31ff 	mov.w	r1, #4294967295
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	fa01 f303 	lsl.w	r3, r1, r3
 80033f2:	43d9      	mvns	r1, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033f8:	4313      	orrs	r3, r2
         );
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3724      	adds	r7, #36	@ 0x24
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr
	...

08003408 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	3b01      	subs	r3, #1
 8003414:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003418:	d301      	bcc.n	800341e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800341a:	2301      	movs	r3, #1
 800341c:	e00f      	b.n	800343e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800341e:	4a0a      	ldr	r2, [pc, #40]	@ (8003448 <SysTick_Config+0x40>)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	3b01      	subs	r3, #1
 8003424:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003426:	210f      	movs	r1, #15
 8003428:	f04f 30ff 	mov.w	r0, #4294967295
 800342c:	f7ff ff8e 	bl	800334c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003430:	4b05      	ldr	r3, [pc, #20]	@ (8003448 <SysTick_Config+0x40>)
 8003432:	2200      	movs	r2, #0
 8003434:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003436:	4b04      	ldr	r3, [pc, #16]	@ (8003448 <SysTick_Config+0x40>)
 8003438:	2207      	movs	r2, #7
 800343a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3708      	adds	r7, #8
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	e000e010 	.word	0xe000e010

0800344c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f7ff ff05 	bl	8003264 <__NVIC_SetPriorityGrouping>
}
 800345a:	bf00      	nop
 800345c:	3708      	adds	r7, #8
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}

08003462 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003462:	b580      	push	{r7, lr}
 8003464:	b086      	sub	sp, #24
 8003466:	af00      	add	r7, sp, #0
 8003468:	4603      	mov	r3, r0
 800346a:	60b9      	str	r1, [r7, #8]
 800346c:	607a      	str	r2, [r7, #4]
 800346e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003470:	2300      	movs	r3, #0
 8003472:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003474:	f7ff ff1a 	bl	80032ac <__NVIC_GetPriorityGrouping>
 8003478:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	68b9      	ldr	r1, [r7, #8]
 800347e:	6978      	ldr	r0, [r7, #20]
 8003480:	f7ff ff8e 	bl	80033a0 <NVIC_EncodePriority>
 8003484:	4602      	mov	r2, r0
 8003486:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800348a:	4611      	mov	r1, r2
 800348c:	4618      	mov	r0, r3
 800348e:	f7ff ff5d 	bl	800334c <__NVIC_SetPriority>
}
 8003492:	bf00      	nop
 8003494:	3718      	adds	r7, #24
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}

0800349a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800349a:	b580      	push	{r7, lr}
 800349c:	b082      	sub	sp, #8
 800349e:	af00      	add	r7, sp, #0
 80034a0:	4603      	mov	r3, r0
 80034a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034a8:	4618      	mov	r0, r3
 80034aa:	f7ff ff0d 	bl	80032c8 <__NVIC_EnableIRQ>
}
 80034ae:	bf00      	nop
 80034b0:	3708      	adds	r7, #8
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}

080034b6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80034b6:	b580      	push	{r7, lr}
 80034b8:	b082      	sub	sp, #8
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	4603      	mov	r3, r0
 80034be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80034c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034c4:	4618      	mov	r0, r3
 80034c6:	f7ff ff1d 	bl	8003304 <__NVIC_DisableIRQ>
}
 80034ca:	bf00      	nop
 80034cc:	3708      	adds	r7, #8
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}

080034d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034d2:	b580      	push	{r7, lr}
 80034d4:	b082      	sub	sp, #8
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f7ff ff94 	bl	8003408 <SysTick_Config>
 80034e0:	4603      	mov	r3, r0
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3708      	adds	r7, #8
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
	...

080034ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b089      	sub	sp, #36	@ 0x24
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80034f6:	2300      	movs	r3, #0
 80034f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80034fa:	2300      	movs	r3, #0
 80034fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80034fe:	2300      	movs	r3, #0
 8003500:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003502:	2300      	movs	r3, #0
 8003504:	61fb      	str	r3, [r7, #28]
 8003506:	e177      	b.n	80037f8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003508:	2201      	movs	r2, #1
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	fa02 f303 	lsl.w	r3, r2, r3
 8003510:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	697a      	ldr	r2, [r7, #20]
 8003518:	4013      	ands	r3, r2
 800351a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800351c:	693a      	ldr	r2, [r7, #16]
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	429a      	cmp	r2, r3
 8003522:	f040 8166 	bne.w	80037f2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f003 0303 	and.w	r3, r3, #3
 800352e:	2b01      	cmp	r3, #1
 8003530:	d005      	beq.n	800353e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800353a:	2b02      	cmp	r3, #2
 800353c:	d130      	bne.n	80035a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	005b      	lsls	r3, r3, #1
 8003548:	2203      	movs	r2, #3
 800354a:	fa02 f303 	lsl.w	r3, r2, r3
 800354e:	43db      	mvns	r3, r3
 8003550:	69ba      	ldr	r2, [r7, #24]
 8003552:	4013      	ands	r3, r2
 8003554:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	68da      	ldr	r2, [r3, #12]
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	005b      	lsls	r3, r3, #1
 800355e:	fa02 f303 	lsl.w	r3, r2, r3
 8003562:	69ba      	ldr	r2, [r7, #24]
 8003564:	4313      	orrs	r3, r2
 8003566:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	69ba      	ldr	r2, [r7, #24]
 800356c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003574:	2201      	movs	r2, #1
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	fa02 f303 	lsl.w	r3, r2, r3
 800357c:	43db      	mvns	r3, r3
 800357e:	69ba      	ldr	r2, [r7, #24]
 8003580:	4013      	ands	r3, r2
 8003582:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	091b      	lsrs	r3, r3, #4
 800358a:	f003 0201 	and.w	r2, r3, #1
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	fa02 f303 	lsl.w	r3, r2, r3
 8003594:	69ba      	ldr	r2, [r7, #24]
 8003596:	4313      	orrs	r3, r2
 8003598:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	69ba      	ldr	r2, [r7, #24]
 800359e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f003 0303 	and.w	r3, r3, #3
 80035a8:	2b03      	cmp	r3, #3
 80035aa:	d017      	beq.n	80035dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	005b      	lsls	r3, r3, #1
 80035b6:	2203      	movs	r2, #3
 80035b8:	fa02 f303 	lsl.w	r3, r2, r3
 80035bc:	43db      	mvns	r3, r3
 80035be:	69ba      	ldr	r2, [r7, #24]
 80035c0:	4013      	ands	r3, r2
 80035c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	689a      	ldr	r2, [r3, #8]
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	005b      	lsls	r3, r3, #1
 80035cc:	fa02 f303 	lsl.w	r3, r2, r3
 80035d0:	69ba      	ldr	r2, [r7, #24]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	69ba      	ldr	r2, [r7, #24]
 80035da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f003 0303 	and.w	r3, r3, #3
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d123      	bne.n	8003630 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	08da      	lsrs	r2, r3, #3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	3208      	adds	r2, #8
 80035f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	f003 0307 	and.w	r3, r3, #7
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	220f      	movs	r2, #15
 8003600:	fa02 f303 	lsl.w	r3, r2, r3
 8003604:	43db      	mvns	r3, r3
 8003606:	69ba      	ldr	r2, [r7, #24]
 8003608:	4013      	ands	r3, r2
 800360a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	691a      	ldr	r2, [r3, #16]
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	f003 0307 	and.w	r3, r3, #7
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	fa02 f303 	lsl.w	r3, r2, r3
 800361c:	69ba      	ldr	r2, [r7, #24]
 800361e:	4313      	orrs	r3, r2
 8003620:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	08da      	lsrs	r2, r3, #3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	3208      	adds	r2, #8
 800362a:	69b9      	ldr	r1, [r7, #24]
 800362c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	005b      	lsls	r3, r3, #1
 800363a:	2203      	movs	r2, #3
 800363c:	fa02 f303 	lsl.w	r3, r2, r3
 8003640:	43db      	mvns	r3, r3
 8003642:	69ba      	ldr	r2, [r7, #24]
 8003644:	4013      	ands	r3, r2
 8003646:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f003 0203 	and.w	r2, r3, #3
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	005b      	lsls	r3, r3, #1
 8003654:	fa02 f303 	lsl.w	r3, r2, r3
 8003658:	69ba      	ldr	r2, [r7, #24]
 800365a:	4313      	orrs	r3, r2
 800365c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	69ba      	ldr	r2, [r7, #24]
 8003662:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800366c:	2b00      	cmp	r3, #0
 800366e:	f000 80c0 	beq.w	80037f2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003672:	2300      	movs	r3, #0
 8003674:	60fb      	str	r3, [r7, #12]
 8003676:	4b66      	ldr	r3, [pc, #408]	@ (8003810 <HAL_GPIO_Init+0x324>)
 8003678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800367a:	4a65      	ldr	r2, [pc, #404]	@ (8003810 <HAL_GPIO_Init+0x324>)
 800367c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003680:	6453      	str	r3, [r2, #68]	@ 0x44
 8003682:	4b63      	ldr	r3, [pc, #396]	@ (8003810 <HAL_GPIO_Init+0x324>)
 8003684:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003686:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800368a:	60fb      	str	r3, [r7, #12]
 800368c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800368e:	4a61      	ldr	r2, [pc, #388]	@ (8003814 <HAL_GPIO_Init+0x328>)
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	089b      	lsrs	r3, r3, #2
 8003694:	3302      	adds	r3, #2
 8003696:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800369a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	f003 0303 	and.w	r3, r3, #3
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	220f      	movs	r2, #15
 80036a6:	fa02 f303 	lsl.w	r3, r2, r3
 80036aa:	43db      	mvns	r3, r3
 80036ac:	69ba      	ldr	r2, [r7, #24]
 80036ae:	4013      	ands	r3, r2
 80036b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4a58      	ldr	r2, [pc, #352]	@ (8003818 <HAL_GPIO_Init+0x32c>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d037      	beq.n	800372a <HAL_GPIO_Init+0x23e>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a57      	ldr	r2, [pc, #348]	@ (800381c <HAL_GPIO_Init+0x330>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d031      	beq.n	8003726 <HAL_GPIO_Init+0x23a>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a56      	ldr	r2, [pc, #344]	@ (8003820 <HAL_GPIO_Init+0x334>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d02b      	beq.n	8003722 <HAL_GPIO_Init+0x236>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a55      	ldr	r2, [pc, #340]	@ (8003824 <HAL_GPIO_Init+0x338>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d025      	beq.n	800371e <HAL_GPIO_Init+0x232>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a54      	ldr	r2, [pc, #336]	@ (8003828 <HAL_GPIO_Init+0x33c>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d01f      	beq.n	800371a <HAL_GPIO_Init+0x22e>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a53      	ldr	r2, [pc, #332]	@ (800382c <HAL_GPIO_Init+0x340>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d019      	beq.n	8003716 <HAL_GPIO_Init+0x22a>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a52      	ldr	r2, [pc, #328]	@ (8003830 <HAL_GPIO_Init+0x344>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d013      	beq.n	8003712 <HAL_GPIO_Init+0x226>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a51      	ldr	r2, [pc, #324]	@ (8003834 <HAL_GPIO_Init+0x348>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d00d      	beq.n	800370e <HAL_GPIO_Init+0x222>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a50      	ldr	r2, [pc, #320]	@ (8003838 <HAL_GPIO_Init+0x34c>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d007      	beq.n	800370a <HAL_GPIO_Init+0x21e>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a4f      	ldr	r2, [pc, #316]	@ (800383c <HAL_GPIO_Init+0x350>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d101      	bne.n	8003706 <HAL_GPIO_Init+0x21a>
 8003702:	2309      	movs	r3, #9
 8003704:	e012      	b.n	800372c <HAL_GPIO_Init+0x240>
 8003706:	230a      	movs	r3, #10
 8003708:	e010      	b.n	800372c <HAL_GPIO_Init+0x240>
 800370a:	2308      	movs	r3, #8
 800370c:	e00e      	b.n	800372c <HAL_GPIO_Init+0x240>
 800370e:	2307      	movs	r3, #7
 8003710:	e00c      	b.n	800372c <HAL_GPIO_Init+0x240>
 8003712:	2306      	movs	r3, #6
 8003714:	e00a      	b.n	800372c <HAL_GPIO_Init+0x240>
 8003716:	2305      	movs	r3, #5
 8003718:	e008      	b.n	800372c <HAL_GPIO_Init+0x240>
 800371a:	2304      	movs	r3, #4
 800371c:	e006      	b.n	800372c <HAL_GPIO_Init+0x240>
 800371e:	2303      	movs	r3, #3
 8003720:	e004      	b.n	800372c <HAL_GPIO_Init+0x240>
 8003722:	2302      	movs	r3, #2
 8003724:	e002      	b.n	800372c <HAL_GPIO_Init+0x240>
 8003726:	2301      	movs	r3, #1
 8003728:	e000      	b.n	800372c <HAL_GPIO_Init+0x240>
 800372a:	2300      	movs	r3, #0
 800372c:	69fa      	ldr	r2, [r7, #28]
 800372e:	f002 0203 	and.w	r2, r2, #3
 8003732:	0092      	lsls	r2, r2, #2
 8003734:	4093      	lsls	r3, r2
 8003736:	69ba      	ldr	r2, [r7, #24]
 8003738:	4313      	orrs	r3, r2
 800373a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800373c:	4935      	ldr	r1, [pc, #212]	@ (8003814 <HAL_GPIO_Init+0x328>)
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	089b      	lsrs	r3, r3, #2
 8003742:	3302      	adds	r3, #2
 8003744:	69ba      	ldr	r2, [r7, #24]
 8003746:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800374a:	4b3d      	ldr	r3, [pc, #244]	@ (8003840 <HAL_GPIO_Init+0x354>)
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	43db      	mvns	r3, r3
 8003754:	69ba      	ldr	r2, [r7, #24]
 8003756:	4013      	ands	r3, r2
 8003758:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d003      	beq.n	800376e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003766:	69ba      	ldr	r2, [r7, #24]
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	4313      	orrs	r3, r2
 800376c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800376e:	4a34      	ldr	r2, [pc, #208]	@ (8003840 <HAL_GPIO_Init+0x354>)
 8003770:	69bb      	ldr	r3, [r7, #24]
 8003772:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003774:	4b32      	ldr	r3, [pc, #200]	@ (8003840 <HAL_GPIO_Init+0x354>)
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	43db      	mvns	r3, r3
 800377e:	69ba      	ldr	r2, [r7, #24]
 8003780:	4013      	ands	r3, r2
 8003782:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d003      	beq.n	8003798 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003790:	69ba      	ldr	r2, [r7, #24]
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	4313      	orrs	r3, r2
 8003796:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003798:	4a29      	ldr	r2, [pc, #164]	@ (8003840 <HAL_GPIO_Init+0x354>)
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800379e:	4b28      	ldr	r3, [pc, #160]	@ (8003840 <HAL_GPIO_Init+0x354>)
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	43db      	mvns	r3, r3
 80037a8:	69ba      	ldr	r2, [r7, #24]
 80037aa:	4013      	ands	r3, r2
 80037ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d003      	beq.n	80037c2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80037ba:	69ba      	ldr	r2, [r7, #24]
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	4313      	orrs	r3, r2
 80037c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80037c2:	4a1f      	ldr	r2, [pc, #124]	@ (8003840 <HAL_GPIO_Init+0x354>)
 80037c4:	69bb      	ldr	r3, [r7, #24]
 80037c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037c8:	4b1d      	ldr	r3, [pc, #116]	@ (8003840 <HAL_GPIO_Init+0x354>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	43db      	mvns	r3, r3
 80037d2:	69ba      	ldr	r2, [r7, #24]
 80037d4:	4013      	ands	r3, r2
 80037d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d003      	beq.n	80037ec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80037e4:	69ba      	ldr	r2, [r7, #24]
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80037ec:	4a14      	ldr	r2, [pc, #80]	@ (8003840 <HAL_GPIO_Init+0x354>)
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	3301      	adds	r3, #1
 80037f6:	61fb      	str	r3, [r7, #28]
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	2b0f      	cmp	r3, #15
 80037fc:	f67f ae84 	bls.w	8003508 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003800:	bf00      	nop
 8003802:	bf00      	nop
 8003804:	3724      	adds	r7, #36	@ 0x24
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	40023800 	.word	0x40023800
 8003814:	40013800 	.word	0x40013800
 8003818:	40020000 	.word	0x40020000
 800381c:	40020400 	.word	0x40020400
 8003820:	40020800 	.word	0x40020800
 8003824:	40020c00 	.word	0x40020c00
 8003828:	40021000 	.word	0x40021000
 800382c:	40021400 	.word	0x40021400
 8003830:	40021800 	.word	0x40021800
 8003834:	40021c00 	.word	0x40021c00
 8003838:	40022000 	.word	0x40022000
 800383c:	40022400 	.word	0x40022400
 8003840:	40013c00 	.word	0x40013c00

08003844 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003844:	b480      	push	{r7}
 8003846:	b087      	sub	sp, #28
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800384e:	2300      	movs	r3, #0
 8003850:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003852:	2300      	movs	r3, #0
 8003854:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003856:	2300      	movs	r3, #0
 8003858:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800385a:	2300      	movs	r3, #0
 800385c:	617b      	str	r3, [r7, #20]
 800385e:	e0d9      	b.n	8003a14 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003860:	2201      	movs	r2, #1
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	fa02 f303 	lsl.w	r3, r2, r3
 8003868:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800386a:	683a      	ldr	r2, [r7, #0]
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	4013      	ands	r3, r2
 8003870:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003872:	68fa      	ldr	r2, [r7, #12]
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	429a      	cmp	r2, r3
 8003878:	f040 80c9 	bne.w	8003a0e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800387c:	4a6b      	ldr	r2, [pc, #428]	@ (8003a2c <HAL_GPIO_DeInit+0x1e8>)
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	089b      	lsrs	r3, r3, #2
 8003882:	3302      	adds	r3, #2
 8003884:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003888:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	f003 0303 	and.w	r3, r3, #3
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	220f      	movs	r2, #15
 8003894:	fa02 f303 	lsl.w	r3, r2, r3
 8003898:	68ba      	ldr	r2, [r7, #8]
 800389a:	4013      	ands	r3, r2
 800389c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a63      	ldr	r2, [pc, #396]	@ (8003a30 <HAL_GPIO_DeInit+0x1ec>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d037      	beq.n	8003916 <HAL_GPIO_DeInit+0xd2>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a62      	ldr	r2, [pc, #392]	@ (8003a34 <HAL_GPIO_DeInit+0x1f0>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d031      	beq.n	8003912 <HAL_GPIO_DeInit+0xce>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a61      	ldr	r2, [pc, #388]	@ (8003a38 <HAL_GPIO_DeInit+0x1f4>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d02b      	beq.n	800390e <HAL_GPIO_DeInit+0xca>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a60      	ldr	r2, [pc, #384]	@ (8003a3c <HAL_GPIO_DeInit+0x1f8>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d025      	beq.n	800390a <HAL_GPIO_DeInit+0xc6>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a5f      	ldr	r2, [pc, #380]	@ (8003a40 <HAL_GPIO_DeInit+0x1fc>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d01f      	beq.n	8003906 <HAL_GPIO_DeInit+0xc2>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a5e      	ldr	r2, [pc, #376]	@ (8003a44 <HAL_GPIO_DeInit+0x200>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d019      	beq.n	8003902 <HAL_GPIO_DeInit+0xbe>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a5d      	ldr	r2, [pc, #372]	@ (8003a48 <HAL_GPIO_DeInit+0x204>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d013      	beq.n	80038fe <HAL_GPIO_DeInit+0xba>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a5c      	ldr	r2, [pc, #368]	@ (8003a4c <HAL_GPIO_DeInit+0x208>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d00d      	beq.n	80038fa <HAL_GPIO_DeInit+0xb6>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a5b      	ldr	r2, [pc, #364]	@ (8003a50 <HAL_GPIO_DeInit+0x20c>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d007      	beq.n	80038f6 <HAL_GPIO_DeInit+0xb2>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a5a      	ldr	r2, [pc, #360]	@ (8003a54 <HAL_GPIO_DeInit+0x210>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d101      	bne.n	80038f2 <HAL_GPIO_DeInit+0xae>
 80038ee:	2309      	movs	r3, #9
 80038f0:	e012      	b.n	8003918 <HAL_GPIO_DeInit+0xd4>
 80038f2:	230a      	movs	r3, #10
 80038f4:	e010      	b.n	8003918 <HAL_GPIO_DeInit+0xd4>
 80038f6:	2308      	movs	r3, #8
 80038f8:	e00e      	b.n	8003918 <HAL_GPIO_DeInit+0xd4>
 80038fa:	2307      	movs	r3, #7
 80038fc:	e00c      	b.n	8003918 <HAL_GPIO_DeInit+0xd4>
 80038fe:	2306      	movs	r3, #6
 8003900:	e00a      	b.n	8003918 <HAL_GPIO_DeInit+0xd4>
 8003902:	2305      	movs	r3, #5
 8003904:	e008      	b.n	8003918 <HAL_GPIO_DeInit+0xd4>
 8003906:	2304      	movs	r3, #4
 8003908:	e006      	b.n	8003918 <HAL_GPIO_DeInit+0xd4>
 800390a:	2303      	movs	r3, #3
 800390c:	e004      	b.n	8003918 <HAL_GPIO_DeInit+0xd4>
 800390e:	2302      	movs	r3, #2
 8003910:	e002      	b.n	8003918 <HAL_GPIO_DeInit+0xd4>
 8003912:	2301      	movs	r3, #1
 8003914:	e000      	b.n	8003918 <HAL_GPIO_DeInit+0xd4>
 8003916:	2300      	movs	r3, #0
 8003918:	697a      	ldr	r2, [r7, #20]
 800391a:	f002 0203 	and.w	r2, r2, #3
 800391e:	0092      	lsls	r2, r2, #2
 8003920:	4093      	lsls	r3, r2
 8003922:	68ba      	ldr	r2, [r7, #8]
 8003924:	429a      	cmp	r2, r3
 8003926:	d132      	bne.n	800398e <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003928:	4b4b      	ldr	r3, [pc, #300]	@ (8003a58 <HAL_GPIO_DeInit+0x214>)
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	43db      	mvns	r3, r3
 8003930:	4949      	ldr	r1, [pc, #292]	@ (8003a58 <HAL_GPIO_DeInit+0x214>)
 8003932:	4013      	ands	r3, r2
 8003934:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003936:	4b48      	ldr	r3, [pc, #288]	@ (8003a58 <HAL_GPIO_DeInit+0x214>)
 8003938:	685a      	ldr	r2, [r3, #4]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	43db      	mvns	r3, r3
 800393e:	4946      	ldr	r1, [pc, #280]	@ (8003a58 <HAL_GPIO_DeInit+0x214>)
 8003940:	4013      	ands	r3, r2
 8003942:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003944:	4b44      	ldr	r3, [pc, #272]	@ (8003a58 <HAL_GPIO_DeInit+0x214>)
 8003946:	68da      	ldr	r2, [r3, #12]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	43db      	mvns	r3, r3
 800394c:	4942      	ldr	r1, [pc, #264]	@ (8003a58 <HAL_GPIO_DeInit+0x214>)
 800394e:	4013      	ands	r3, r2
 8003950:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003952:	4b41      	ldr	r3, [pc, #260]	@ (8003a58 <HAL_GPIO_DeInit+0x214>)
 8003954:	689a      	ldr	r2, [r3, #8]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	43db      	mvns	r3, r3
 800395a:	493f      	ldr	r1, [pc, #252]	@ (8003a58 <HAL_GPIO_DeInit+0x214>)
 800395c:	4013      	ands	r3, r2
 800395e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	f003 0303 	and.w	r3, r3, #3
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	220f      	movs	r2, #15
 800396a:	fa02 f303 	lsl.w	r3, r2, r3
 800396e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003970:	4a2e      	ldr	r2, [pc, #184]	@ (8003a2c <HAL_GPIO_DeInit+0x1e8>)
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	089b      	lsrs	r3, r3, #2
 8003976:	3302      	adds	r3, #2
 8003978:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	43da      	mvns	r2, r3
 8003980:	482a      	ldr	r0, [pc, #168]	@ (8003a2c <HAL_GPIO_DeInit+0x1e8>)
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	089b      	lsrs	r3, r3, #2
 8003986:	400a      	ands	r2, r1
 8003988:	3302      	adds	r3, #2
 800398a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	005b      	lsls	r3, r3, #1
 8003996:	2103      	movs	r1, #3
 8003998:	fa01 f303 	lsl.w	r3, r1, r3
 800399c:	43db      	mvns	r3, r3
 800399e:	401a      	ands	r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	08da      	lsrs	r2, r3, #3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	3208      	adds	r2, #8
 80039ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	f003 0307 	and.w	r3, r3, #7
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	220f      	movs	r2, #15
 80039ba:	fa02 f303 	lsl.w	r3, r2, r3
 80039be:	43db      	mvns	r3, r3
 80039c0:	697a      	ldr	r2, [r7, #20]
 80039c2:	08d2      	lsrs	r2, r2, #3
 80039c4:	4019      	ands	r1, r3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	3208      	adds	r2, #8
 80039ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	68da      	ldr	r2, [r3, #12]
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	005b      	lsls	r3, r3, #1
 80039d6:	2103      	movs	r1, #3
 80039d8:	fa01 f303 	lsl.w	r3, r1, r3
 80039dc:	43db      	mvns	r3, r3
 80039de:	401a      	ands	r2, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	685a      	ldr	r2, [r3, #4]
 80039e8:	2101      	movs	r1, #1
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	fa01 f303 	lsl.w	r3, r1, r3
 80039f0:	43db      	mvns	r3, r3
 80039f2:	401a      	ands	r2, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	689a      	ldr	r2, [r3, #8]
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	005b      	lsls	r3, r3, #1
 8003a00:	2103      	movs	r1, #3
 8003a02:	fa01 f303 	lsl.w	r3, r1, r3
 8003a06:	43db      	mvns	r3, r3
 8003a08:	401a      	ands	r2, r3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	3301      	adds	r3, #1
 8003a12:	617b      	str	r3, [r7, #20]
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	2b0f      	cmp	r3, #15
 8003a18:	f67f af22 	bls.w	8003860 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003a1c:	bf00      	nop
 8003a1e:	bf00      	nop
 8003a20:	371c      	adds	r7, #28
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	40013800 	.word	0x40013800
 8003a30:	40020000 	.word	0x40020000
 8003a34:	40020400 	.word	0x40020400
 8003a38:	40020800 	.word	0x40020800
 8003a3c:	40020c00 	.word	0x40020c00
 8003a40:	40021000 	.word	0x40021000
 8003a44:	40021400 	.word	0x40021400
 8003a48:	40021800 	.word	0x40021800
 8003a4c:	40021c00 	.word	0x40021c00
 8003a50:	40022000 	.word	0x40022000
 8003a54:	40022400 	.word	0x40022400
 8003a58:	40013c00 	.word	0x40013c00

08003a5c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b085      	sub	sp, #20
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	460b      	mov	r3, r1
 8003a66:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	691a      	ldr	r2, [r3, #16]
 8003a6c:	887b      	ldrh	r3, [r7, #2]
 8003a6e:	4013      	ands	r3, r2
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d002      	beq.n	8003a7a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a74:	2301      	movs	r3, #1
 8003a76:	73fb      	strb	r3, [r7, #15]
 8003a78:	e001      	b.n	8003a7e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3714      	adds	r7, #20
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	460b      	mov	r3, r1
 8003a96:	807b      	strh	r3, [r7, #2]
 8003a98:	4613      	mov	r3, r2
 8003a9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a9c:	787b      	ldrb	r3, [r7, #1]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d003      	beq.n	8003aaa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003aa2:	887a      	ldrh	r2, [r7, #2]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003aa8:	e003      	b.n	8003ab2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003aaa:	887b      	ldrh	r3, [r7, #2]
 8003aac:	041a      	lsls	r2, r3, #16
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	619a      	str	r2, [r3, #24]
}
 8003ab2:	bf00      	nop
 8003ab4:	370c      	adds	r7, #12
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr
	...

08003ac0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d101      	bne.n	8003ad2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e12b      	b.n	8003d2a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d106      	bne.n	8003aec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f7fe fd70 	bl	80025cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2224      	movs	r2, #36	@ 0x24
 8003af0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f022 0201 	bic.w	r2, r2, #1
 8003b02:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003b12:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003b22:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003b24:	f001 ff06 	bl	8005934 <HAL_RCC_GetPCLK1Freq>
 8003b28:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	4a81      	ldr	r2, [pc, #516]	@ (8003d34 <HAL_I2C_Init+0x274>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d807      	bhi.n	8003b44 <HAL_I2C_Init+0x84>
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	4a80      	ldr	r2, [pc, #512]	@ (8003d38 <HAL_I2C_Init+0x278>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	bf94      	ite	ls
 8003b3c:	2301      	movls	r3, #1
 8003b3e:	2300      	movhi	r3, #0
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	e006      	b.n	8003b52 <HAL_I2C_Init+0x92>
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	4a7d      	ldr	r2, [pc, #500]	@ (8003d3c <HAL_I2C_Init+0x27c>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	bf94      	ite	ls
 8003b4c:	2301      	movls	r3, #1
 8003b4e:	2300      	movhi	r3, #0
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d001      	beq.n	8003b5a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e0e7      	b.n	8003d2a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	4a78      	ldr	r2, [pc, #480]	@ (8003d40 <HAL_I2C_Init+0x280>)
 8003b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b62:	0c9b      	lsrs	r3, r3, #18
 8003b64:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	68ba      	ldr	r2, [r7, #8]
 8003b76:	430a      	orrs	r2, r1
 8003b78:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	6a1b      	ldr	r3, [r3, #32]
 8003b80:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	4a6a      	ldr	r2, [pc, #424]	@ (8003d34 <HAL_I2C_Init+0x274>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d802      	bhi.n	8003b94 <HAL_I2C_Init+0xd4>
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	3301      	adds	r3, #1
 8003b92:	e009      	b.n	8003ba8 <HAL_I2C_Init+0xe8>
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003b9a:	fb02 f303 	mul.w	r3, r2, r3
 8003b9e:	4a69      	ldr	r2, [pc, #420]	@ (8003d44 <HAL_I2C_Init+0x284>)
 8003ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba4:	099b      	lsrs	r3, r3, #6
 8003ba6:	3301      	adds	r3, #1
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	6812      	ldr	r2, [r2, #0]
 8003bac:	430b      	orrs	r3, r1
 8003bae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	69db      	ldr	r3, [r3, #28]
 8003bb6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003bba:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	495c      	ldr	r1, [pc, #368]	@ (8003d34 <HAL_I2C_Init+0x274>)
 8003bc4:	428b      	cmp	r3, r1
 8003bc6:	d819      	bhi.n	8003bfc <HAL_I2C_Init+0x13c>
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	1e59      	subs	r1, r3, #1
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	005b      	lsls	r3, r3, #1
 8003bd2:	fbb1 f3f3 	udiv	r3, r1, r3
 8003bd6:	1c59      	adds	r1, r3, #1
 8003bd8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003bdc:	400b      	ands	r3, r1
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d00a      	beq.n	8003bf8 <HAL_I2C_Init+0x138>
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	1e59      	subs	r1, r3, #1
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	005b      	lsls	r3, r3, #1
 8003bec:	fbb1 f3f3 	udiv	r3, r1, r3
 8003bf0:	3301      	adds	r3, #1
 8003bf2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bf6:	e051      	b.n	8003c9c <HAL_I2C_Init+0x1dc>
 8003bf8:	2304      	movs	r3, #4
 8003bfa:	e04f      	b.n	8003c9c <HAL_I2C_Init+0x1dc>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d111      	bne.n	8003c28 <HAL_I2C_Init+0x168>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	1e58      	subs	r0, r3, #1
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6859      	ldr	r1, [r3, #4]
 8003c0c:	460b      	mov	r3, r1
 8003c0e:	005b      	lsls	r3, r3, #1
 8003c10:	440b      	add	r3, r1
 8003c12:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c16:	3301      	adds	r3, #1
 8003c18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	bf0c      	ite	eq
 8003c20:	2301      	moveq	r3, #1
 8003c22:	2300      	movne	r3, #0
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	e012      	b.n	8003c4e <HAL_I2C_Init+0x18e>
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	1e58      	subs	r0, r3, #1
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6859      	ldr	r1, [r3, #4]
 8003c30:	460b      	mov	r3, r1
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	440b      	add	r3, r1
 8003c36:	0099      	lsls	r1, r3, #2
 8003c38:	440b      	add	r3, r1
 8003c3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c3e:	3301      	adds	r3, #1
 8003c40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	bf0c      	ite	eq
 8003c48:	2301      	moveq	r3, #1
 8003c4a:	2300      	movne	r3, #0
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d001      	beq.n	8003c56 <HAL_I2C_Init+0x196>
 8003c52:	2301      	movs	r3, #1
 8003c54:	e022      	b.n	8003c9c <HAL_I2C_Init+0x1dc>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d10e      	bne.n	8003c7c <HAL_I2C_Init+0x1bc>
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	1e58      	subs	r0, r3, #1
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6859      	ldr	r1, [r3, #4]
 8003c66:	460b      	mov	r3, r1
 8003c68:	005b      	lsls	r3, r3, #1
 8003c6a:	440b      	add	r3, r1
 8003c6c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c70:	3301      	adds	r3, #1
 8003c72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c7a:	e00f      	b.n	8003c9c <HAL_I2C_Init+0x1dc>
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	1e58      	subs	r0, r3, #1
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6859      	ldr	r1, [r3, #4]
 8003c84:	460b      	mov	r3, r1
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	440b      	add	r3, r1
 8003c8a:	0099      	lsls	r1, r3, #2
 8003c8c:	440b      	add	r3, r1
 8003c8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c92:	3301      	adds	r3, #1
 8003c94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c98:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003c9c:	6879      	ldr	r1, [r7, #4]
 8003c9e:	6809      	ldr	r1, [r1, #0]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	69da      	ldr	r2, [r3, #28]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a1b      	ldr	r3, [r3, #32]
 8003cb6:	431a      	orrs	r2, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	430a      	orrs	r2, r1
 8003cbe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003cca:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	6911      	ldr	r1, [r2, #16]
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	68d2      	ldr	r2, [r2, #12]
 8003cd6:	4311      	orrs	r1, r2
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	6812      	ldr	r2, [r2, #0]
 8003cdc:	430b      	orrs	r3, r1
 8003cde:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	695a      	ldr	r2, [r3, #20]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	699b      	ldr	r3, [r3, #24]
 8003cf2:	431a      	orrs	r2, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	430a      	orrs	r2, r1
 8003cfa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f042 0201 	orr.w	r2, r2, #1
 8003d0a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2220      	movs	r2, #32
 8003d16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003d28:	2300      	movs	r3, #0
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3710      	adds	r7, #16
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	000186a0 	.word	0x000186a0
 8003d38:	001e847f 	.word	0x001e847f
 8003d3c:	003d08ff 	.word	0x003d08ff
 8003d40:	431bde83 	.word	0x431bde83
 8003d44:	10624dd3 	.word	0x10624dd3

08003d48 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b088      	sub	sp, #32
 8003d4c:	af02      	add	r7, sp, #8
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	4608      	mov	r0, r1
 8003d52:	4611      	mov	r1, r2
 8003d54:	461a      	mov	r2, r3
 8003d56:	4603      	mov	r3, r0
 8003d58:	817b      	strh	r3, [r7, #10]
 8003d5a:	460b      	mov	r3, r1
 8003d5c:	813b      	strh	r3, [r7, #8]
 8003d5e:	4613      	mov	r3, r2
 8003d60:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d62:	f7ff fa4f 	bl	8003204 <HAL_GetTick>
 8003d66:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	2b20      	cmp	r3, #32
 8003d72:	f040 80d9 	bne.w	8003f28 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	9300      	str	r3, [sp, #0]
 8003d7a:	2319      	movs	r3, #25
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	496d      	ldr	r1, [pc, #436]	@ (8003f34 <HAL_I2C_Mem_Write+0x1ec>)
 8003d80:	68f8      	ldr	r0, [r7, #12]
 8003d82:	f000 fc8b 	bl	800469c <I2C_WaitOnFlagUntilTimeout>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d001      	beq.n	8003d90 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003d8c:	2302      	movs	r3, #2
 8003d8e:	e0cc      	b.n	8003f2a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d101      	bne.n	8003d9e <HAL_I2C_Mem_Write+0x56>
 8003d9a:	2302      	movs	r3, #2
 8003d9c:	e0c5      	b.n	8003f2a <HAL_I2C_Mem_Write+0x1e2>
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2201      	movs	r2, #1
 8003da2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0301 	and.w	r3, r3, #1
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d007      	beq.n	8003dc4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f042 0201 	orr.w	r2, r2, #1
 8003dc2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003dd2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2221      	movs	r2, #33	@ 0x21
 8003dd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2240      	movs	r2, #64	@ 0x40
 8003de0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2200      	movs	r2, #0
 8003de8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	6a3a      	ldr	r2, [r7, #32]
 8003dee:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003df4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dfa:	b29a      	uxth	r2, r3
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	4a4d      	ldr	r2, [pc, #308]	@ (8003f38 <HAL_I2C_Mem_Write+0x1f0>)
 8003e04:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e06:	88f8      	ldrh	r0, [r7, #6]
 8003e08:	893a      	ldrh	r2, [r7, #8]
 8003e0a:	8979      	ldrh	r1, [r7, #10]
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	9301      	str	r3, [sp, #4]
 8003e10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e12:	9300      	str	r3, [sp, #0]
 8003e14:	4603      	mov	r3, r0
 8003e16:	68f8      	ldr	r0, [r7, #12]
 8003e18:	f000 fac2 	bl	80043a0 <I2C_RequestMemoryWrite>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d052      	beq.n	8003ec8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e081      	b.n	8003f2a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e26:	697a      	ldr	r2, [r7, #20]
 8003e28:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e2a:	68f8      	ldr	r0, [r7, #12]
 8003e2c:	f000 fd50 	bl	80048d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d00d      	beq.n	8003e52 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e3a:	2b04      	cmp	r3, #4
 8003e3c:	d107      	bne.n	8003e4e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e4c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e06b      	b.n	8003f2a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e56:	781a      	ldrb	r2, [r3, #0]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e62:	1c5a      	adds	r2, r3, #1
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e6c:	3b01      	subs	r3, #1
 8003e6e:	b29a      	uxth	r2, r3
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	3b01      	subs	r3, #1
 8003e7c:	b29a      	uxth	r2, r3
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	695b      	ldr	r3, [r3, #20]
 8003e88:	f003 0304 	and.w	r3, r3, #4
 8003e8c:	2b04      	cmp	r3, #4
 8003e8e:	d11b      	bne.n	8003ec8 <HAL_I2C_Mem_Write+0x180>
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d017      	beq.n	8003ec8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e9c:	781a      	ldrb	r2, [r3, #0]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea8:	1c5a      	adds	r2, r3, #1
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eb2:	3b01      	subs	r3, #1
 8003eb4:	b29a      	uxth	r2, r3
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	3b01      	subs	r3, #1
 8003ec2:	b29a      	uxth	r2, r3
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d1aa      	bne.n	8003e26 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ed0:	697a      	ldr	r2, [r7, #20]
 8003ed2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ed4:	68f8      	ldr	r0, [r7, #12]
 8003ed6:	f000 fd43 	bl	8004960 <I2C_WaitOnBTFFlagUntilTimeout>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d00d      	beq.n	8003efc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ee4:	2b04      	cmp	r3, #4
 8003ee6:	d107      	bne.n	8003ef8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ef6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e016      	b.n	8003f2a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2220      	movs	r2, #32
 8003f10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2200      	movs	r2, #0
 8003f18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003f24:	2300      	movs	r3, #0
 8003f26:	e000      	b.n	8003f2a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003f28:	2302      	movs	r3, #2
  }
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3718      	adds	r7, #24
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	00100002 	.word	0x00100002
 8003f38:	ffff0000 	.word	0xffff0000

08003f3c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b08c      	sub	sp, #48	@ 0x30
 8003f40:	af02      	add	r7, sp, #8
 8003f42:	60f8      	str	r0, [r7, #12]
 8003f44:	4608      	mov	r0, r1
 8003f46:	4611      	mov	r1, r2
 8003f48:	461a      	mov	r2, r3
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	817b      	strh	r3, [r7, #10]
 8003f4e:	460b      	mov	r3, r1
 8003f50:	813b      	strh	r3, [r7, #8]
 8003f52:	4613      	mov	r3, r2
 8003f54:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003f56:	f7ff f955 	bl	8003204 <HAL_GetTick>
 8003f5a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	2b20      	cmp	r3, #32
 8003f66:	f040 8214 	bne.w	8004392 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f6c:	9300      	str	r3, [sp, #0]
 8003f6e:	2319      	movs	r3, #25
 8003f70:	2201      	movs	r2, #1
 8003f72:	497b      	ldr	r1, [pc, #492]	@ (8004160 <HAL_I2C_Mem_Read+0x224>)
 8003f74:	68f8      	ldr	r0, [r7, #12]
 8003f76:	f000 fb91 	bl	800469c <I2C_WaitOnFlagUntilTimeout>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d001      	beq.n	8003f84 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003f80:	2302      	movs	r3, #2
 8003f82:	e207      	b.n	8004394 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d101      	bne.n	8003f92 <HAL_I2C_Mem_Read+0x56>
 8003f8e:	2302      	movs	r3, #2
 8003f90:	e200      	b.n	8004394 <HAL_I2C_Mem_Read+0x458>
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2201      	movs	r2, #1
 8003f96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0301 	and.w	r3, r3, #1
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d007      	beq.n	8003fb8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f042 0201 	orr.w	r2, r2, #1
 8003fb6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003fc6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2222      	movs	r2, #34	@ 0x22
 8003fcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2240      	movs	r2, #64	@ 0x40
 8003fd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003fe2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003fe8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fee:	b29a      	uxth	r2, r3
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	4a5b      	ldr	r2, [pc, #364]	@ (8004164 <HAL_I2C_Mem_Read+0x228>)
 8003ff8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ffa:	88f8      	ldrh	r0, [r7, #6]
 8003ffc:	893a      	ldrh	r2, [r7, #8]
 8003ffe:	8979      	ldrh	r1, [r7, #10]
 8004000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004002:	9301      	str	r3, [sp, #4]
 8004004:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004006:	9300      	str	r3, [sp, #0]
 8004008:	4603      	mov	r3, r0
 800400a:	68f8      	ldr	r0, [r7, #12]
 800400c:	f000 fa5e 	bl	80044cc <I2C_RequestMemoryRead>
 8004010:	4603      	mov	r3, r0
 8004012:	2b00      	cmp	r3, #0
 8004014:	d001      	beq.n	800401a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e1bc      	b.n	8004394 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800401e:	2b00      	cmp	r3, #0
 8004020:	d113      	bne.n	800404a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004022:	2300      	movs	r3, #0
 8004024:	623b      	str	r3, [r7, #32]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	695b      	ldr	r3, [r3, #20]
 800402c:	623b      	str	r3, [r7, #32]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	699b      	ldr	r3, [r3, #24]
 8004034:	623b      	str	r3, [r7, #32]
 8004036:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004046:	601a      	str	r2, [r3, #0]
 8004048:	e190      	b.n	800436c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800404e:	2b01      	cmp	r3, #1
 8004050:	d11b      	bne.n	800408a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004060:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004062:	2300      	movs	r3, #0
 8004064:	61fb      	str	r3, [r7, #28]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	695b      	ldr	r3, [r3, #20]
 800406c:	61fb      	str	r3, [r7, #28]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	699b      	ldr	r3, [r3, #24]
 8004074:	61fb      	str	r3, [r7, #28]
 8004076:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004086:	601a      	str	r2, [r3, #0]
 8004088:	e170      	b.n	800436c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800408e:	2b02      	cmp	r3, #2
 8004090:	d11b      	bne.n	80040ca <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040a0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80040b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040b2:	2300      	movs	r3, #0
 80040b4:	61bb      	str	r3, [r7, #24]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	695b      	ldr	r3, [r3, #20]
 80040bc:	61bb      	str	r3, [r7, #24]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	699b      	ldr	r3, [r3, #24]
 80040c4:	61bb      	str	r3, [r7, #24]
 80040c6:	69bb      	ldr	r3, [r7, #24]
 80040c8:	e150      	b.n	800436c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040ca:	2300      	movs	r3, #0
 80040cc:	617b      	str	r3, [r7, #20]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	695b      	ldr	r3, [r3, #20]
 80040d4:	617b      	str	r3, [r7, #20]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	699b      	ldr	r3, [r3, #24]
 80040dc:	617b      	str	r3, [r7, #20]
 80040de:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80040e0:	e144      	b.n	800436c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040e6:	2b03      	cmp	r3, #3
 80040e8:	f200 80f1 	bhi.w	80042ce <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d123      	bne.n	800413c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040f6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80040f8:	68f8      	ldr	r0, [r7, #12]
 80040fa:	f000 fc79 	bl	80049f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d001      	beq.n	8004108 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	e145      	b.n	8004394 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	691a      	ldr	r2, [r3, #16]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004112:	b2d2      	uxtb	r2, r2
 8004114:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800411a:	1c5a      	adds	r2, r3, #1
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004124:	3b01      	subs	r3, #1
 8004126:	b29a      	uxth	r2, r3
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004130:	b29b      	uxth	r3, r3
 8004132:	3b01      	subs	r3, #1
 8004134:	b29a      	uxth	r2, r3
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800413a:	e117      	b.n	800436c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004140:	2b02      	cmp	r3, #2
 8004142:	d14e      	bne.n	80041e2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004146:	9300      	str	r3, [sp, #0]
 8004148:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800414a:	2200      	movs	r2, #0
 800414c:	4906      	ldr	r1, [pc, #24]	@ (8004168 <HAL_I2C_Mem_Read+0x22c>)
 800414e:	68f8      	ldr	r0, [r7, #12]
 8004150:	f000 faa4 	bl	800469c <I2C_WaitOnFlagUntilTimeout>
 8004154:	4603      	mov	r3, r0
 8004156:	2b00      	cmp	r3, #0
 8004158:	d008      	beq.n	800416c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e11a      	b.n	8004394 <HAL_I2C_Mem_Read+0x458>
 800415e:	bf00      	nop
 8004160:	00100002 	.word	0x00100002
 8004164:	ffff0000 	.word	0xffff0000
 8004168:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800417a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	691a      	ldr	r2, [r3, #16]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004186:	b2d2      	uxtb	r2, r2
 8004188:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800418e:	1c5a      	adds	r2, r3, #1
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004198:	3b01      	subs	r3, #1
 800419a:	b29a      	uxth	r2, r3
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	3b01      	subs	r3, #1
 80041a8:	b29a      	uxth	r2, r3
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	691a      	ldr	r2, [r3, #16]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041b8:	b2d2      	uxtb	r2, r2
 80041ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041c0:	1c5a      	adds	r2, r3, #1
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041ca:	3b01      	subs	r3, #1
 80041cc:	b29a      	uxth	r2, r3
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	3b01      	subs	r3, #1
 80041da:	b29a      	uxth	r2, r3
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80041e0:	e0c4      	b.n	800436c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041e4:	9300      	str	r3, [sp, #0]
 80041e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041e8:	2200      	movs	r2, #0
 80041ea:	496c      	ldr	r1, [pc, #432]	@ (800439c <HAL_I2C_Mem_Read+0x460>)
 80041ec:	68f8      	ldr	r0, [r7, #12]
 80041ee:	f000 fa55 	bl	800469c <I2C_WaitOnFlagUntilTimeout>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d001      	beq.n	80041fc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e0cb      	b.n	8004394 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800420a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	691a      	ldr	r2, [r3, #16]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004216:	b2d2      	uxtb	r2, r2
 8004218:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800421e:	1c5a      	adds	r2, r3, #1
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004228:	3b01      	subs	r3, #1
 800422a:	b29a      	uxth	r2, r3
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004234:	b29b      	uxth	r3, r3
 8004236:	3b01      	subs	r3, #1
 8004238:	b29a      	uxth	r2, r3
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800423e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004240:	9300      	str	r3, [sp, #0]
 8004242:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004244:	2200      	movs	r2, #0
 8004246:	4955      	ldr	r1, [pc, #340]	@ (800439c <HAL_I2C_Mem_Read+0x460>)
 8004248:	68f8      	ldr	r0, [r7, #12]
 800424a:	f000 fa27 	bl	800469c <I2C_WaitOnFlagUntilTimeout>
 800424e:	4603      	mov	r3, r0
 8004250:	2b00      	cmp	r3, #0
 8004252:	d001      	beq.n	8004258 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	e09d      	b.n	8004394 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004266:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	691a      	ldr	r2, [r3, #16]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004272:	b2d2      	uxtb	r2, r2
 8004274:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800427a:	1c5a      	adds	r2, r3, #1
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004284:	3b01      	subs	r3, #1
 8004286:	b29a      	uxth	r2, r3
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004290:	b29b      	uxth	r3, r3
 8004292:	3b01      	subs	r3, #1
 8004294:	b29a      	uxth	r2, r3
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	691a      	ldr	r2, [r3, #16]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042a4:	b2d2      	uxtb	r2, r2
 80042a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ac:	1c5a      	adds	r2, r3, #1
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042b6:	3b01      	subs	r3, #1
 80042b8:	b29a      	uxth	r2, r3
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	3b01      	subs	r3, #1
 80042c6:	b29a      	uxth	r2, r3
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80042cc:	e04e      	b.n	800436c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042d0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80042d2:	68f8      	ldr	r0, [r7, #12]
 80042d4:	f000 fb8c 	bl	80049f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80042d8:	4603      	mov	r3, r0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d001      	beq.n	80042e2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e058      	b.n	8004394 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	691a      	ldr	r2, [r3, #16]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ec:	b2d2      	uxtb	r2, r2
 80042ee:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042f4:	1c5a      	adds	r2, r3, #1
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042fe:	3b01      	subs	r3, #1
 8004300:	b29a      	uxth	r2, r3
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800430a:	b29b      	uxth	r3, r3
 800430c:	3b01      	subs	r3, #1
 800430e:	b29a      	uxth	r2, r3
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	695b      	ldr	r3, [r3, #20]
 800431a:	f003 0304 	and.w	r3, r3, #4
 800431e:	2b04      	cmp	r3, #4
 8004320:	d124      	bne.n	800436c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004326:	2b03      	cmp	r3, #3
 8004328:	d107      	bne.n	800433a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004338:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	691a      	ldr	r2, [r3, #16]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004344:	b2d2      	uxtb	r2, r2
 8004346:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800434c:	1c5a      	adds	r2, r3, #1
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004356:	3b01      	subs	r3, #1
 8004358:	b29a      	uxth	r2, r3
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004362:	b29b      	uxth	r3, r3
 8004364:	3b01      	subs	r3, #1
 8004366:	b29a      	uxth	r2, r3
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004370:	2b00      	cmp	r3, #0
 8004372:	f47f aeb6 	bne.w	80040e2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2220      	movs	r2, #32
 800437a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2200      	movs	r2, #0
 8004382:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2200      	movs	r2, #0
 800438a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800438e:	2300      	movs	r3, #0
 8004390:	e000      	b.n	8004394 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004392:	2302      	movs	r3, #2
  }
}
 8004394:	4618      	mov	r0, r3
 8004396:	3728      	adds	r7, #40	@ 0x28
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}
 800439c:	00010004 	.word	0x00010004

080043a0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b088      	sub	sp, #32
 80043a4:	af02      	add	r7, sp, #8
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	4608      	mov	r0, r1
 80043aa:	4611      	mov	r1, r2
 80043ac:	461a      	mov	r2, r3
 80043ae:	4603      	mov	r3, r0
 80043b0:	817b      	strh	r3, [r7, #10]
 80043b2:	460b      	mov	r3, r1
 80043b4:	813b      	strh	r3, [r7, #8]
 80043b6:	4613      	mov	r3, r2
 80043b8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80043c8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80043ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043cc:	9300      	str	r3, [sp, #0]
 80043ce:	6a3b      	ldr	r3, [r7, #32]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80043d6:	68f8      	ldr	r0, [r7, #12]
 80043d8:	f000 f960 	bl	800469c <I2C_WaitOnFlagUntilTimeout>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d00d      	beq.n	80043fe <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043f0:	d103      	bne.n	80043fa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80043f8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e05f      	b.n	80044be <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80043fe:	897b      	ldrh	r3, [r7, #10]
 8004400:	b2db      	uxtb	r3, r3
 8004402:	461a      	mov	r2, r3
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800440c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800440e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004410:	6a3a      	ldr	r2, [r7, #32]
 8004412:	492d      	ldr	r1, [pc, #180]	@ (80044c8 <I2C_RequestMemoryWrite+0x128>)
 8004414:	68f8      	ldr	r0, [r7, #12]
 8004416:	f000 f9bb 	bl	8004790 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800441a:	4603      	mov	r3, r0
 800441c:	2b00      	cmp	r3, #0
 800441e:	d001      	beq.n	8004424 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	e04c      	b.n	80044be <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004424:	2300      	movs	r3, #0
 8004426:	617b      	str	r3, [r7, #20]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	695b      	ldr	r3, [r3, #20]
 800442e:	617b      	str	r3, [r7, #20]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	699b      	ldr	r3, [r3, #24]
 8004436:	617b      	str	r3, [r7, #20]
 8004438:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800443a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800443c:	6a39      	ldr	r1, [r7, #32]
 800443e:	68f8      	ldr	r0, [r7, #12]
 8004440:	f000 fa46 	bl	80048d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d00d      	beq.n	8004466 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800444e:	2b04      	cmp	r3, #4
 8004450:	d107      	bne.n	8004462 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004460:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e02b      	b.n	80044be <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004466:	88fb      	ldrh	r3, [r7, #6]
 8004468:	2b01      	cmp	r3, #1
 800446a:	d105      	bne.n	8004478 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800446c:	893b      	ldrh	r3, [r7, #8]
 800446e:	b2da      	uxtb	r2, r3
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	611a      	str	r2, [r3, #16]
 8004476:	e021      	b.n	80044bc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004478:	893b      	ldrh	r3, [r7, #8]
 800447a:	0a1b      	lsrs	r3, r3, #8
 800447c:	b29b      	uxth	r3, r3
 800447e:	b2da      	uxtb	r2, r3
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004486:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004488:	6a39      	ldr	r1, [r7, #32]
 800448a:	68f8      	ldr	r0, [r7, #12]
 800448c:	f000 fa20 	bl	80048d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004490:	4603      	mov	r3, r0
 8004492:	2b00      	cmp	r3, #0
 8004494:	d00d      	beq.n	80044b2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800449a:	2b04      	cmp	r3, #4
 800449c:	d107      	bne.n	80044ae <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044ac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e005      	b.n	80044be <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80044b2:	893b      	ldrh	r3, [r7, #8]
 80044b4:	b2da      	uxtb	r2, r3
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80044bc:	2300      	movs	r3, #0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3718      	adds	r7, #24
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	00010002 	.word	0x00010002

080044cc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b088      	sub	sp, #32
 80044d0:	af02      	add	r7, sp, #8
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	4608      	mov	r0, r1
 80044d6:	4611      	mov	r1, r2
 80044d8:	461a      	mov	r2, r3
 80044da:	4603      	mov	r3, r0
 80044dc:	817b      	strh	r3, [r7, #10]
 80044de:	460b      	mov	r3, r1
 80044e0:	813b      	strh	r3, [r7, #8]
 80044e2:	4613      	mov	r3, r2
 80044e4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80044f4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004504:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004508:	9300      	str	r3, [sp, #0]
 800450a:	6a3b      	ldr	r3, [r7, #32]
 800450c:	2200      	movs	r2, #0
 800450e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004512:	68f8      	ldr	r0, [r7, #12]
 8004514:	f000 f8c2 	bl	800469c <I2C_WaitOnFlagUntilTimeout>
 8004518:	4603      	mov	r3, r0
 800451a:	2b00      	cmp	r3, #0
 800451c:	d00d      	beq.n	800453a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004528:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800452c:	d103      	bne.n	8004536 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004534:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	e0aa      	b.n	8004690 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800453a:	897b      	ldrh	r3, [r7, #10]
 800453c:	b2db      	uxtb	r3, r3
 800453e:	461a      	mov	r2, r3
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004548:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800454a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800454c:	6a3a      	ldr	r2, [r7, #32]
 800454e:	4952      	ldr	r1, [pc, #328]	@ (8004698 <I2C_RequestMemoryRead+0x1cc>)
 8004550:	68f8      	ldr	r0, [r7, #12]
 8004552:	f000 f91d 	bl	8004790 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004556:	4603      	mov	r3, r0
 8004558:	2b00      	cmp	r3, #0
 800455a:	d001      	beq.n	8004560 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e097      	b.n	8004690 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004560:	2300      	movs	r3, #0
 8004562:	617b      	str	r3, [r7, #20]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	695b      	ldr	r3, [r3, #20]
 800456a:	617b      	str	r3, [r7, #20]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	699b      	ldr	r3, [r3, #24]
 8004572:	617b      	str	r3, [r7, #20]
 8004574:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004576:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004578:	6a39      	ldr	r1, [r7, #32]
 800457a:	68f8      	ldr	r0, [r7, #12]
 800457c:	f000 f9a8 	bl	80048d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004580:	4603      	mov	r3, r0
 8004582:	2b00      	cmp	r3, #0
 8004584:	d00d      	beq.n	80045a2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800458a:	2b04      	cmp	r3, #4
 800458c:	d107      	bne.n	800459e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800459c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e076      	b.n	8004690 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80045a2:	88fb      	ldrh	r3, [r7, #6]
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d105      	bne.n	80045b4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80045a8:	893b      	ldrh	r3, [r7, #8]
 80045aa:	b2da      	uxtb	r2, r3
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	611a      	str	r2, [r3, #16]
 80045b2:	e021      	b.n	80045f8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80045b4:	893b      	ldrh	r3, [r7, #8]
 80045b6:	0a1b      	lsrs	r3, r3, #8
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	b2da      	uxtb	r2, r3
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045c4:	6a39      	ldr	r1, [r7, #32]
 80045c6:	68f8      	ldr	r0, [r7, #12]
 80045c8:	f000 f982 	bl	80048d0 <I2C_WaitOnTXEFlagUntilTimeout>
 80045cc:	4603      	mov	r3, r0
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d00d      	beq.n	80045ee <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045d6:	2b04      	cmp	r3, #4
 80045d8:	d107      	bne.n	80045ea <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045e8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e050      	b.n	8004690 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80045ee:	893b      	ldrh	r3, [r7, #8]
 80045f0:	b2da      	uxtb	r2, r3
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045fa:	6a39      	ldr	r1, [r7, #32]
 80045fc:	68f8      	ldr	r0, [r7, #12]
 80045fe:	f000 f967 	bl	80048d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d00d      	beq.n	8004624 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800460c:	2b04      	cmp	r3, #4
 800460e:	d107      	bne.n	8004620 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800461e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e035      	b.n	8004690 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004632:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004636:	9300      	str	r3, [sp, #0]
 8004638:	6a3b      	ldr	r3, [r7, #32]
 800463a:	2200      	movs	r2, #0
 800463c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004640:	68f8      	ldr	r0, [r7, #12]
 8004642:	f000 f82b 	bl	800469c <I2C_WaitOnFlagUntilTimeout>
 8004646:	4603      	mov	r3, r0
 8004648:	2b00      	cmp	r3, #0
 800464a:	d00d      	beq.n	8004668 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004656:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800465a:	d103      	bne.n	8004664 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004662:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004664:	2303      	movs	r3, #3
 8004666:	e013      	b.n	8004690 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004668:	897b      	ldrh	r3, [r7, #10]
 800466a:	b2db      	uxtb	r3, r3
 800466c:	f043 0301 	orr.w	r3, r3, #1
 8004670:	b2da      	uxtb	r2, r3
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800467a:	6a3a      	ldr	r2, [r7, #32]
 800467c:	4906      	ldr	r1, [pc, #24]	@ (8004698 <I2C_RequestMemoryRead+0x1cc>)
 800467e:	68f8      	ldr	r0, [r7, #12]
 8004680:	f000 f886 	bl	8004790 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004684:	4603      	mov	r3, r0
 8004686:	2b00      	cmp	r3, #0
 8004688:	d001      	beq.n	800468e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e000      	b.n	8004690 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800468e:	2300      	movs	r3, #0
}
 8004690:	4618      	mov	r0, r3
 8004692:	3718      	adds	r7, #24
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}
 8004698:	00010002 	.word	0x00010002

0800469c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	60f8      	str	r0, [r7, #12]
 80046a4:	60b9      	str	r1, [r7, #8]
 80046a6:	603b      	str	r3, [r7, #0]
 80046a8:	4613      	mov	r3, r2
 80046aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046ac:	e048      	b.n	8004740 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046b4:	d044      	beq.n	8004740 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046b6:	f7fe fda5 	bl	8003204 <HAL_GetTick>
 80046ba:	4602      	mov	r2, r0
 80046bc:	69bb      	ldr	r3, [r7, #24]
 80046be:	1ad3      	subs	r3, r2, r3
 80046c0:	683a      	ldr	r2, [r7, #0]
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d302      	bcc.n	80046cc <I2C_WaitOnFlagUntilTimeout+0x30>
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d139      	bne.n	8004740 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	0c1b      	lsrs	r3, r3, #16
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d10d      	bne.n	80046f2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	695b      	ldr	r3, [r3, #20]
 80046dc:	43da      	mvns	r2, r3
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	4013      	ands	r3, r2
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	bf0c      	ite	eq
 80046e8:	2301      	moveq	r3, #1
 80046ea:	2300      	movne	r3, #0
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	461a      	mov	r2, r3
 80046f0:	e00c      	b.n	800470c <I2C_WaitOnFlagUntilTimeout+0x70>
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	699b      	ldr	r3, [r3, #24]
 80046f8:	43da      	mvns	r2, r3
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	4013      	ands	r3, r2
 80046fe:	b29b      	uxth	r3, r3
 8004700:	2b00      	cmp	r3, #0
 8004702:	bf0c      	ite	eq
 8004704:	2301      	moveq	r3, #1
 8004706:	2300      	movne	r3, #0
 8004708:	b2db      	uxtb	r3, r3
 800470a:	461a      	mov	r2, r3
 800470c:	79fb      	ldrb	r3, [r7, #7]
 800470e:	429a      	cmp	r2, r3
 8004710:	d116      	bne.n	8004740 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2200      	movs	r2, #0
 8004716:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2220      	movs	r2, #32
 800471c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2200      	movs	r2, #0
 8004724:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800472c:	f043 0220 	orr.w	r2, r3, #32
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2200      	movs	r2, #0
 8004738:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	e023      	b.n	8004788 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	0c1b      	lsrs	r3, r3, #16
 8004744:	b2db      	uxtb	r3, r3
 8004746:	2b01      	cmp	r3, #1
 8004748:	d10d      	bne.n	8004766 <I2C_WaitOnFlagUntilTimeout+0xca>
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	695b      	ldr	r3, [r3, #20]
 8004750:	43da      	mvns	r2, r3
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	4013      	ands	r3, r2
 8004756:	b29b      	uxth	r3, r3
 8004758:	2b00      	cmp	r3, #0
 800475a:	bf0c      	ite	eq
 800475c:	2301      	moveq	r3, #1
 800475e:	2300      	movne	r3, #0
 8004760:	b2db      	uxtb	r3, r3
 8004762:	461a      	mov	r2, r3
 8004764:	e00c      	b.n	8004780 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	699b      	ldr	r3, [r3, #24]
 800476c:	43da      	mvns	r2, r3
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	4013      	ands	r3, r2
 8004772:	b29b      	uxth	r3, r3
 8004774:	2b00      	cmp	r3, #0
 8004776:	bf0c      	ite	eq
 8004778:	2301      	moveq	r3, #1
 800477a:	2300      	movne	r3, #0
 800477c:	b2db      	uxtb	r3, r3
 800477e:	461a      	mov	r2, r3
 8004780:	79fb      	ldrb	r3, [r7, #7]
 8004782:	429a      	cmp	r2, r3
 8004784:	d093      	beq.n	80046ae <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004786:	2300      	movs	r3, #0
}
 8004788:	4618      	mov	r0, r3
 800478a:	3710      	adds	r7, #16
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}

08004790 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b084      	sub	sp, #16
 8004794:	af00      	add	r7, sp, #0
 8004796:	60f8      	str	r0, [r7, #12]
 8004798:	60b9      	str	r1, [r7, #8]
 800479a:	607a      	str	r2, [r7, #4]
 800479c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800479e:	e071      	b.n	8004884 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	695b      	ldr	r3, [r3, #20]
 80047a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047ae:	d123      	bne.n	80047f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047be:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80047c8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2200      	movs	r2, #0
 80047ce:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2220      	movs	r2, #32
 80047d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2200      	movs	r2, #0
 80047dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047e4:	f043 0204 	orr.w	r2, r3, #4
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2200      	movs	r2, #0
 80047f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	e067      	b.n	80048c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047fe:	d041      	beq.n	8004884 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004800:	f7fe fd00 	bl	8003204 <HAL_GetTick>
 8004804:	4602      	mov	r2, r0
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	429a      	cmp	r2, r3
 800480e:	d302      	bcc.n	8004816 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d136      	bne.n	8004884 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	0c1b      	lsrs	r3, r3, #16
 800481a:	b2db      	uxtb	r3, r3
 800481c:	2b01      	cmp	r3, #1
 800481e:	d10c      	bne.n	800483a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	695b      	ldr	r3, [r3, #20]
 8004826:	43da      	mvns	r2, r3
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	4013      	ands	r3, r2
 800482c:	b29b      	uxth	r3, r3
 800482e:	2b00      	cmp	r3, #0
 8004830:	bf14      	ite	ne
 8004832:	2301      	movne	r3, #1
 8004834:	2300      	moveq	r3, #0
 8004836:	b2db      	uxtb	r3, r3
 8004838:	e00b      	b.n	8004852 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	699b      	ldr	r3, [r3, #24]
 8004840:	43da      	mvns	r2, r3
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	4013      	ands	r3, r2
 8004846:	b29b      	uxth	r3, r3
 8004848:	2b00      	cmp	r3, #0
 800484a:	bf14      	ite	ne
 800484c:	2301      	movne	r3, #1
 800484e:	2300      	moveq	r3, #0
 8004850:	b2db      	uxtb	r3, r3
 8004852:	2b00      	cmp	r3, #0
 8004854:	d016      	beq.n	8004884 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2200      	movs	r2, #0
 800485a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2220      	movs	r2, #32
 8004860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2200      	movs	r2, #0
 8004868:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004870:	f043 0220 	orr.w	r2, r3, #32
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2200      	movs	r2, #0
 800487c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e021      	b.n	80048c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	0c1b      	lsrs	r3, r3, #16
 8004888:	b2db      	uxtb	r3, r3
 800488a:	2b01      	cmp	r3, #1
 800488c:	d10c      	bne.n	80048a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	695b      	ldr	r3, [r3, #20]
 8004894:	43da      	mvns	r2, r3
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	4013      	ands	r3, r2
 800489a:	b29b      	uxth	r3, r3
 800489c:	2b00      	cmp	r3, #0
 800489e:	bf14      	ite	ne
 80048a0:	2301      	movne	r3, #1
 80048a2:	2300      	moveq	r3, #0
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	e00b      	b.n	80048c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	699b      	ldr	r3, [r3, #24]
 80048ae:	43da      	mvns	r2, r3
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	4013      	ands	r3, r2
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	bf14      	ite	ne
 80048ba:	2301      	movne	r3, #1
 80048bc:	2300      	moveq	r3, #0
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	f47f af6d 	bne.w	80047a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80048c6:	2300      	movs	r3, #0
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3710      	adds	r7, #16
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}

080048d0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b084      	sub	sp, #16
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	60f8      	str	r0, [r7, #12]
 80048d8:	60b9      	str	r1, [r7, #8]
 80048da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048dc:	e034      	b.n	8004948 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80048de:	68f8      	ldr	r0, [r7, #12]
 80048e0:	f000 f8e3 	bl	8004aaa <I2C_IsAcknowledgeFailed>
 80048e4:	4603      	mov	r3, r0
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d001      	beq.n	80048ee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e034      	b.n	8004958 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048f4:	d028      	beq.n	8004948 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048f6:	f7fe fc85 	bl	8003204 <HAL_GetTick>
 80048fa:	4602      	mov	r2, r0
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	1ad3      	subs	r3, r2, r3
 8004900:	68ba      	ldr	r2, [r7, #8]
 8004902:	429a      	cmp	r2, r3
 8004904:	d302      	bcc.n	800490c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d11d      	bne.n	8004948 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	695b      	ldr	r3, [r3, #20]
 8004912:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004916:	2b80      	cmp	r3, #128	@ 0x80
 8004918:	d016      	beq.n	8004948 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2200      	movs	r2, #0
 800491e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2220      	movs	r2, #32
 8004924:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2200      	movs	r2, #0
 800492c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004934:	f043 0220 	orr.w	r2, r3, #32
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2200      	movs	r2, #0
 8004940:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e007      	b.n	8004958 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	695b      	ldr	r3, [r3, #20]
 800494e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004952:	2b80      	cmp	r3, #128	@ 0x80
 8004954:	d1c3      	bne.n	80048de <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004956:	2300      	movs	r3, #0
}
 8004958:	4618      	mov	r0, r3
 800495a:	3710      	adds	r7, #16
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}

08004960 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b084      	sub	sp, #16
 8004964:	af00      	add	r7, sp, #0
 8004966:	60f8      	str	r0, [r7, #12]
 8004968:	60b9      	str	r1, [r7, #8]
 800496a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800496c:	e034      	b.n	80049d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800496e:	68f8      	ldr	r0, [r7, #12]
 8004970:	f000 f89b 	bl	8004aaa <I2C_IsAcknowledgeFailed>
 8004974:	4603      	mov	r3, r0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d001      	beq.n	800497e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e034      	b.n	80049e8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004984:	d028      	beq.n	80049d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004986:	f7fe fc3d 	bl	8003204 <HAL_GetTick>
 800498a:	4602      	mov	r2, r0
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	1ad3      	subs	r3, r2, r3
 8004990:	68ba      	ldr	r2, [r7, #8]
 8004992:	429a      	cmp	r2, r3
 8004994:	d302      	bcc.n	800499c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d11d      	bne.n	80049d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	695b      	ldr	r3, [r3, #20]
 80049a2:	f003 0304 	and.w	r3, r3, #4
 80049a6:	2b04      	cmp	r3, #4
 80049a8:	d016      	beq.n	80049d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2200      	movs	r2, #0
 80049ae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2220      	movs	r2, #32
 80049b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2200      	movs	r2, #0
 80049bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049c4:	f043 0220 	orr.w	r2, r3, #32
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e007      	b.n	80049e8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	695b      	ldr	r3, [r3, #20]
 80049de:	f003 0304 	and.w	r3, r3, #4
 80049e2:	2b04      	cmp	r3, #4
 80049e4:	d1c3      	bne.n	800496e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80049e6:	2300      	movs	r3, #0
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3710      	adds	r7, #16
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}

080049f0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b084      	sub	sp, #16
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	60b9      	str	r1, [r7, #8]
 80049fa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80049fc:	e049      	b.n	8004a92 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	695b      	ldr	r3, [r3, #20]
 8004a04:	f003 0310 	and.w	r3, r3, #16
 8004a08:	2b10      	cmp	r3, #16
 8004a0a:	d119      	bne.n	8004a40 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f06f 0210 	mvn.w	r2, #16
 8004a14:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2220      	movs	r2, #32
 8004a20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2200      	movs	r2, #0
 8004a28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2200      	movs	r2, #0
 8004a38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e030      	b.n	8004aa2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a40:	f7fe fbe0 	bl	8003204 <HAL_GetTick>
 8004a44:	4602      	mov	r2, r0
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	68ba      	ldr	r2, [r7, #8]
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d302      	bcc.n	8004a56 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d11d      	bne.n	8004a92 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	695b      	ldr	r3, [r3, #20]
 8004a5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a60:	2b40      	cmp	r3, #64	@ 0x40
 8004a62:	d016      	beq.n	8004a92 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2200      	movs	r2, #0
 8004a68:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2220      	movs	r2, #32
 8004a6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a7e:	f043 0220 	orr.w	r2, r3, #32
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e007      	b.n	8004aa2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	695b      	ldr	r3, [r3, #20]
 8004a98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a9c:	2b40      	cmp	r3, #64	@ 0x40
 8004a9e:	d1ae      	bne.n	80049fe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004aa0:	2300      	movs	r3, #0
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3710      	adds	r7, #16
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}

08004aaa <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004aaa:	b480      	push	{r7}
 8004aac:	b083      	sub	sp, #12
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	695b      	ldr	r3, [r3, #20]
 8004ab8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004abc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ac0:	d11b      	bne.n	8004afa <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004aca:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2220      	movs	r2, #32
 8004ad6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ae6:	f043 0204 	orr.w	r2, r3, #4
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e000      	b.n	8004afc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004afa:	2300      	movs	r3, #0
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	370c      	adds	r7, #12
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr

08004b08 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b084      	sub	sp, #16
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d101      	bne.n	8004b1a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e0bf      	b.n	8004c9a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d106      	bne.n	8004b34 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f7fd fdb6 	bl	80026a0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2202      	movs	r2, #2
 8004b38:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	699a      	ldr	r2, [r3, #24]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8004b4a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	6999      	ldr	r1, [r3, #24]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	685a      	ldr	r2, [r3, #4]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004b60:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	691b      	ldr	r3, [r3, #16]
 8004b66:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	430a      	orrs	r2, r1
 8004b6e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	6899      	ldr	r1, [r3, #8]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	4b4a      	ldr	r3, [pc, #296]	@ (8004ca4 <HAL_LTDC_Init+0x19c>)
 8004b7c:	400b      	ands	r3, r1
 8004b7e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	695b      	ldr	r3, [r3, #20]
 8004b84:	041b      	lsls	r3, r3, #16
 8004b86:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	6899      	ldr	r1, [r3, #8]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	699a      	ldr	r2, [r3, #24]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	431a      	orrs	r2, r3
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	430a      	orrs	r2, r1
 8004b9c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	68d9      	ldr	r1, [r3, #12]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	4b3e      	ldr	r3, [pc, #248]	@ (8004ca4 <HAL_LTDC_Init+0x19c>)
 8004baa:	400b      	ands	r3, r1
 8004bac:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	69db      	ldr	r3, [r3, #28]
 8004bb2:	041b      	lsls	r3, r3, #16
 8004bb4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	68d9      	ldr	r1, [r3, #12]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6a1a      	ldr	r2, [r3, #32]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	431a      	orrs	r2, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	430a      	orrs	r2, r1
 8004bca:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	6919      	ldr	r1, [r3, #16]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	4b33      	ldr	r3, [pc, #204]	@ (8004ca4 <HAL_LTDC_Init+0x19c>)
 8004bd8:	400b      	ands	r3, r1
 8004bda:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004be0:	041b      	lsls	r3, r3, #16
 8004be2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	6919      	ldr	r1, [r3, #16]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	431a      	orrs	r2, r3
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	430a      	orrs	r2, r1
 8004bf8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	6959      	ldr	r1, [r3, #20]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	4b27      	ldr	r3, [pc, #156]	@ (8004ca4 <HAL_LTDC_Init+0x19c>)
 8004c06:	400b      	ands	r3, r1
 8004c08:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c0e:	041b      	lsls	r3, r3, #16
 8004c10:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	6959      	ldr	r1, [r3, #20]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	431a      	orrs	r2, r3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	430a      	orrs	r2, r1
 8004c26:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004c2e:	021b      	lsls	r3, r3, #8
 8004c30:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8004c38:	041b      	lsls	r3, r3, #16
 8004c3a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8004c4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004c52:	68ba      	ldr	r2, [r7, #8]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8004c5e:	431a      	orrs	r2, r3
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	430a      	orrs	r2, r1
 8004c66:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f042 0206 	orr.w	r2, r2, #6
 8004c76:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	699a      	ldr	r2, [r3, #24]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f042 0201 	orr.w	r2, r2, #1
 8004c86:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8004c98:	2300      	movs	r3, #0
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3710      	adds	r7, #16
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop
 8004ca4:	f000f800 	.word	0xf000f800

08004ca8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004ca8:	b5b0      	push	{r4, r5, r7, lr}
 8004caa:	b084      	sub	sp, #16
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	60b9      	str	r1, [r7, #8]
 8004cb2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d101      	bne.n	8004cc2 <HAL_LTDC_ConfigLayer+0x1a>
 8004cbe:	2302      	movs	r3, #2
 8004cc0:	e02c      	b.n	8004d1c <HAL_LTDC_ConfigLayer+0x74>
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2202      	movs	r2, #2
 8004cce:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004cd2:	68fa      	ldr	r2, [r7, #12]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2134      	movs	r1, #52	@ 0x34
 8004cd8:	fb01 f303 	mul.w	r3, r1, r3
 8004cdc:	4413      	add	r3, r2
 8004cde:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	4614      	mov	r4, r2
 8004ce6:	461d      	mov	r5, r3
 8004ce8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004cea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004cec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004cee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004cf0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004cf2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004cf4:	682b      	ldr	r3, [r5, #0]
 8004cf6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	68b9      	ldr	r1, [r7, #8]
 8004cfc:	68f8      	ldr	r0, [r7, #12]
 8004cfe:	f000 f811 	bl	8004d24 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	2201      	movs	r2, #1
 8004d08:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2200      	movs	r2, #0
 8004d16:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8004d1a:	2300      	movs	r3, #0
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3710      	adds	r7, #16
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bdb0      	pop	{r4, r5, r7, pc}

08004d24 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b089      	sub	sp, #36	@ 0x24
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	60f8      	str	r0, [r7, #12]
 8004d2c:	60b9      	str	r1, [r7, #8]
 8004d2e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	685a      	ldr	r2, [r3, #4]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	68db      	ldr	r3, [r3, #12]
 8004d3a:	0c1b      	lsrs	r3, r3, #16
 8004d3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d40:	4413      	add	r3, r2
 8004d42:	041b      	lsls	r3, r3, #16
 8004d44:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	01db      	lsls	r3, r3, #7
 8004d50:	4413      	add	r3, r2
 8004d52:	3384      	adds	r3, #132	@ 0x84
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	68fa      	ldr	r2, [r7, #12]
 8004d58:	6812      	ldr	r2, [r2, #0]
 8004d5a:	4611      	mov	r1, r2
 8004d5c:	687a      	ldr	r2, [r7, #4]
 8004d5e:	01d2      	lsls	r2, r2, #7
 8004d60:	440a      	add	r2, r1
 8004d62:	3284      	adds	r2, #132	@ 0x84
 8004d64:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004d68:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	0c1b      	lsrs	r3, r3, #16
 8004d76:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004d7a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004d7c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4619      	mov	r1, r3
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	01db      	lsls	r3, r3, #7
 8004d88:	440b      	add	r3, r1
 8004d8a:	3384      	adds	r3, #132	@ 0x84
 8004d8c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004d8e:	69fb      	ldr	r3, [r7, #28]
 8004d90:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004d92:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	68da      	ldr	r2, [r3, #12]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004da2:	4413      	add	r3, r2
 8004da4:	041b      	lsls	r3, r3, #16
 8004da6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	461a      	mov	r2, r3
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	01db      	lsls	r3, r3, #7
 8004db2:	4413      	add	r3, r2
 8004db4:	3384      	adds	r3, #132	@ 0x84
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	68fa      	ldr	r2, [r7, #12]
 8004dba:	6812      	ldr	r2, [r2, #0]
 8004dbc:	4611      	mov	r1, r2
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	01d2      	lsls	r2, r2, #7
 8004dc2:	440a      	add	r2, r1
 8004dc4:	3284      	adds	r2, #132	@ 0x84
 8004dc6:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004dca:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	689a      	ldr	r2, [r3, #8]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004dda:	4413      	add	r3, r2
 8004ddc:	1c5a      	adds	r2, r3, #1
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4619      	mov	r1, r3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	01db      	lsls	r3, r3, #7
 8004de8:	440b      	add	r3, r1
 8004dea:	3384      	adds	r3, #132	@ 0x84
 8004dec:	4619      	mov	r1, r3
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	4313      	orrs	r3, r2
 8004df2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	461a      	mov	r2, r3
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	01db      	lsls	r3, r3, #7
 8004dfe:	4413      	add	r3, r2
 8004e00:	3384      	adds	r3, #132	@ 0x84
 8004e02:	691b      	ldr	r3, [r3, #16]
 8004e04:	68fa      	ldr	r2, [r7, #12]
 8004e06:	6812      	ldr	r2, [r2, #0]
 8004e08:	4611      	mov	r1, r2
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	01d2      	lsls	r2, r2, #7
 8004e0e:	440a      	add	r2, r1
 8004e10:	3284      	adds	r2, #132	@ 0x84
 8004e12:	f023 0307 	bic.w	r3, r3, #7
 8004e16:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	01db      	lsls	r3, r3, #7
 8004e22:	4413      	add	r3, r2
 8004e24:	3384      	adds	r3, #132	@ 0x84
 8004e26:	461a      	mov	r2, r3
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	691b      	ldr	r3, [r3, #16]
 8004e2c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004e34:	021b      	lsls	r3, r3, #8
 8004e36:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004e3e:	041b      	lsls	r3, r3, #16
 8004e40:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	699b      	ldr	r3, [r3, #24]
 8004e46:	061b      	lsls	r3, r3, #24
 8004e48:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	461a      	mov	r2, r3
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	01db      	lsls	r3, r3, #7
 8004e54:	4413      	add	r3, r2
 8004e56:	3384      	adds	r3, #132	@ 0x84
 8004e58:	699b      	ldr	r3, [r3, #24]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	461a      	mov	r2, r3
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	01db      	lsls	r3, r3, #7
 8004e64:	4413      	add	r3, r2
 8004e66:	3384      	adds	r3, #132	@ 0x84
 8004e68:	461a      	mov	r2, r3
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004e74:	461a      	mov	r2, r3
 8004e76:	69fb      	ldr	r3, [r7, #28]
 8004e78:	431a      	orrs	r2, r3
 8004e7a:	69bb      	ldr	r3, [r7, #24]
 8004e7c:	431a      	orrs	r2, r3
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4619      	mov	r1, r3
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	01db      	lsls	r3, r3, #7
 8004e88:	440b      	add	r3, r1
 8004e8a:	3384      	adds	r3, #132	@ 0x84
 8004e8c:	4619      	mov	r1, r3
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	4313      	orrs	r3, r2
 8004e92:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	461a      	mov	r2, r3
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	01db      	lsls	r3, r3, #7
 8004e9e:	4413      	add	r3, r2
 8004ea0:	3384      	adds	r3, #132	@ 0x84
 8004ea2:	695b      	ldr	r3, [r3, #20]
 8004ea4:	68fa      	ldr	r2, [r7, #12]
 8004ea6:	6812      	ldr	r2, [r2, #0]
 8004ea8:	4611      	mov	r1, r2
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	01d2      	lsls	r2, r2, #7
 8004eae:	440a      	add	r2, r1
 8004eb0:	3284      	adds	r2, #132	@ 0x84
 8004eb2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004eb6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	01db      	lsls	r3, r3, #7
 8004ec2:	4413      	add	r3, r2
 8004ec4:	3384      	adds	r3, #132	@ 0x84
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	695b      	ldr	r3, [r3, #20]
 8004ecc:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	01db      	lsls	r3, r3, #7
 8004ed8:	4413      	add	r3, r2
 8004eda:	3384      	adds	r3, #132	@ 0x84
 8004edc:	69db      	ldr	r3, [r3, #28]
 8004ede:	68fa      	ldr	r2, [r7, #12]
 8004ee0:	6812      	ldr	r2, [r2, #0]
 8004ee2:	4611      	mov	r1, r2
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	01d2      	lsls	r2, r2, #7
 8004ee8:	440a      	add	r2, r1
 8004eea:	3284      	adds	r2, #132	@ 0x84
 8004eec:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004ef0:	f023 0307 	bic.w	r3, r3, #7
 8004ef4:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	69da      	ldr	r2, [r3, #28]
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	6a1b      	ldr	r3, [r3, #32]
 8004efe:	68f9      	ldr	r1, [r7, #12]
 8004f00:	6809      	ldr	r1, [r1, #0]
 8004f02:	4608      	mov	r0, r1
 8004f04:	6879      	ldr	r1, [r7, #4]
 8004f06:	01c9      	lsls	r1, r1, #7
 8004f08:	4401      	add	r1, r0
 8004f0a:	3184      	adds	r1, #132	@ 0x84
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	461a      	mov	r2, r3
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	01db      	lsls	r3, r3, #7
 8004f1a:	4413      	add	r3, r2
 8004f1c:	3384      	adds	r3, #132	@ 0x84
 8004f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	461a      	mov	r2, r3
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	01db      	lsls	r3, r3, #7
 8004f2a:	4413      	add	r3, r2
 8004f2c:	3384      	adds	r3, #132	@ 0x84
 8004f2e:	461a      	mov	r2, r3
 8004f30:	2300      	movs	r3, #0
 8004f32:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	461a      	mov	r2, r3
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	01db      	lsls	r3, r3, #7
 8004f3e:	4413      	add	r3, r2
 8004f40:	3384      	adds	r3, #132	@ 0x84
 8004f42:	461a      	mov	r2, r3
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f48:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	691b      	ldr	r3, [r3, #16]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d102      	bne.n	8004f58 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004f52:	2304      	movs	r3, #4
 8004f54:	61fb      	str	r3, [r7, #28]
 8004f56:	e01b      	b.n	8004f90 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	691b      	ldr	r3, [r3, #16]
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d102      	bne.n	8004f66 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004f60:	2303      	movs	r3, #3
 8004f62:	61fb      	str	r3, [r7, #28]
 8004f64:	e014      	b.n	8004f90 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	691b      	ldr	r3, [r3, #16]
 8004f6a:	2b04      	cmp	r3, #4
 8004f6c:	d00b      	beq.n	8004f86 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004f72:	2b02      	cmp	r3, #2
 8004f74:	d007      	beq.n	8004f86 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004f7a:	2b03      	cmp	r3, #3
 8004f7c:	d003      	beq.n	8004f86 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004f82:	2b07      	cmp	r3, #7
 8004f84:	d102      	bne.n	8004f8c <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004f86:	2302      	movs	r3, #2
 8004f88:	61fb      	str	r3, [r7, #28]
 8004f8a:	e001      	b.n	8004f90 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	461a      	mov	r2, r3
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	01db      	lsls	r3, r3, #7
 8004f9a:	4413      	add	r3, r2
 8004f9c:	3384      	adds	r3, #132	@ 0x84
 8004f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fa0:	68fa      	ldr	r2, [r7, #12]
 8004fa2:	6812      	ldr	r2, [r2, #0]
 8004fa4:	4611      	mov	r1, r2
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	01d2      	lsls	r2, r2, #7
 8004faa:	440a      	add	r2, r1
 8004fac:	3284      	adds	r2, #132	@ 0x84
 8004fae:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8004fb2:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fb8:	69fa      	ldr	r2, [r7, #28]
 8004fba:	fb02 f303 	mul.w	r3, r2, r3
 8004fbe:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	6859      	ldr	r1, [r3, #4]
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	1acb      	subs	r3, r1, r3
 8004fca:	69f9      	ldr	r1, [r7, #28]
 8004fcc:	fb01 f303 	mul.w	r3, r1, r3
 8004fd0:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004fd2:	68f9      	ldr	r1, [r7, #12]
 8004fd4:	6809      	ldr	r1, [r1, #0]
 8004fd6:	4608      	mov	r0, r1
 8004fd8:	6879      	ldr	r1, [r7, #4]
 8004fda:	01c9      	lsls	r1, r1, #7
 8004fdc:	4401      	add	r1, r0
 8004fde:	3184      	adds	r1, #132	@ 0x84
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	461a      	mov	r2, r3
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	01db      	lsls	r3, r3, #7
 8004fee:	4413      	add	r3, r2
 8004ff0:	3384      	adds	r3, #132	@ 0x84
 8004ff2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ff4:	68fa      	ldr	r2, [r7, #12]
 8004ff6:	6812      	ldr	r2, [r2, #0]
 8004ff8:	4611      	mov	r1, r2
 8004ffa:	687a      	ldr	r2, [r7, #4]
 8004ffc:	01d2      	lsls	r2, r2, #7
 8004ffe:	440a      	add	r2, r1
 8005000:	3284      	adds	r2, #132	@ 0x84
 8005002:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005006:	f023 0307 	bic.w	r3, r3, #7
 800500a:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	461a      	mov	r2, r3
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	01db      	lsls	r3, r3, #7
 8005016:	4413      	add	r3, r2
 8005018:	3384      	adds	r3, #132	@ 0x84
 800501a:	461a      	mov	r2, r3
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005020:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	461a      	mov	r2, r3
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	01db      	lsls	r3, r3, #7
 800502c:	4413      	add	r3, r2
 800502e:	3384      	adds	r3, #132	@ 0x84
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	68fa      	ldr	r2, [r7, #12]
 8005034:	6812      	ldr	r2, [r2, #0]
 8005036:	4611      	mov	r1, r2
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	01d2      	lsls	r2, r2, #7
 800503c:	440a      	add	r2, r1
 800503e:	3284      	adds	r2, #132	@ 0x84
 8005040:	f043 0301 	orr.w	r3, r3, #1
 8005044:	6013      	str	r3, [r2, #0]
}
 8005046:	bf00      	nop
 8005048:	3724      	adds	r7, #36	@ 0x24
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr
	...

08005054 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b086      	sub	sp, #24
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d101      	bne.n	8005066 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	e267      	b.n	8005536 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 0301 	and.w	r3, r3, #1
 800506e:	2b00      	cmp	r3, #0
 8005070:	d075      	beq.n	800515e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005072:	4b88      	ldr	r3, [pc, #544]	@ (8005294 <HAL_RCC_OscConfig+0x240>)
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	f003 030c 	and.w	r3, r3, #12
 800507a:	2b04      	cmp	r3, #4
 800507c:	d00c      	beq.n	8005098 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800507e:	4b85      	ldr	r3, [pc, #532]	@ (8005294 <HAL_RCC_OscConfig+0x240>)
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005086:	2b08      	cmp	r3, #8
 8005088:	d112      	bne.n	80050b0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800508a:	4b82      	ldr	r3, [pc, #520]	@ (8005294 <HAL_RCC_OscConfig+0x240>)
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005092:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005096:	d10b      	bne.n	80050b0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005098:	4b7e      	ldr	r3, [pc, #504]	@ (8005294 <HAL_RCC_OscConfig+0x240>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d05b      	beq.n	800515c <HAL_RCC_OscConfig+0x108>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d157      	bne.n	800515c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	e242      	b.n	8005536 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050b8:	d106      	bne.n	80050c8 <HAL_RCC_OscConfig+0x74>
 80050ba:	4b76      	ldr	r3, [pc, #472]	@ (8005294 <HAL_RCC_OscConfig+0x240>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a75      	ldr	r2, [pc, #468]	@ (8005294 <HAL_RCC_OscConfig+0x240>)
 80050c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050c4:	6013      	str	r3, [r2, #0]
 80050c6:	e01d      	b.n	8005104 <HAL_RCC_OscConfig+0xb0>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80050d0:	d10c      	bne.n	80050ec <HAL_RCC_OscConfig+0x98>
 80050d2:	4b70      	ldr	r3, [pc, #448]	@ (8005294 <HAL_RCC_OscConfig+0x240>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a6f      	ldr	r2, [pc, #444]	@ (8005294 <HAL_RCC_OscConfig+0x240>)
 80050d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80050dc:	6013      	str	r3, [r2, #0]
 80050de:	4b6d      	ldr	r3, [pc, #436]	@ (8005294 <HAL_RCC_OscConfig+0x240>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a6c      	ldr	r2, [pc, #432]	@ (8005294 <HAL_RCC_OscConfig+0x240>)
 80050e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050e8:	6013      	str	r3, [r2, #0]
 80050ea:	e00b      	b.n	8005104 <HAL_RCC_OscConfig+0xb0>
 80050ec:	4b69      	ldr	r3, [pc, #420]	@ (8005294 <HAL_RCC_OscConfig+0x240>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a68      	ldr	r2, [pc, #416]	@ (8005294 <HAL_RCC_OscConfig+0x240>)
 80050f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050f6:	6013      	str	r3, [r2, #0]
 80050f8:	4b66      	ldr	r3, [pc, #408]	@ (8005294 <HAL_RCC_OscConfig+0x240>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a65      	ldr	r2, [pc, #404]	@ (8005294 <HAL_RCC_OscConfig+0x240>)
 80050fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005102:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d013      	beq.n	8005134 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800510c:	f7fe f87a 	bl	8003204 <HAL_GetTick>
 8005110:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005112:	e008      	b.n	8005126 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005114:	f7fe f876 	bl	8003204 <HAL_GetTick>
 8005118:	4602      	mov	r2, r0
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	1ad3      	subs	r3, r2, r3
 800511e:	2b64      	cmp	r3, #100	@ 0x64
 8005120:	d901      	bls.n	8005126 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005122:	2303      	movs	r3, #3
 8005124:	e207      	b.n	8005536 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005126:	4b5b      	ldr	r3, [pc, #364]	@ (8005294 <HAL_RCC_OscConfig+0x240>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800512e:	2b00      	cmp	r3, #0
 8005130:	d0f0      	beq.n	8005114 <HAL_RCC_OscConfig+0xc0>
 8005132:	e014      	b.n	800515e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005134:	f7fe f866 	bl	8003204 <HAL_GetTick>
 8005138:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800513a:	e008      	b.n	800514e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800513c:	f7fe f862 	bl	8003204 <HAL_GetTick>
 8005140:	4602      	mov	r2, r0
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	2b64      	cmp	r3, #100	@ 0x64
 8005148:	d901      	bls.n	800514e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800514a:	2303      	movs	r3, #3
 800514c:	e1f3      	b.n	8005536 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800514e:	4b51      	ldr	r3, [pc, #324]	@ (8005294 <HAL_RCC_OscConfig+0x240>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005156:	2b00      	cmp	r3, #0
 8005158:	d1f0      	bne.n	800513c <HAL_RCC_OscConfig+0xe8>
 800515a:	e000      	b.n	800515e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800515c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 0302 	and.w	r3, r3, #2
 8005166:	2b00      	cmp	r3, #0
 8005168:	d063      	beq.n	8005232 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800516a:	4b4a      	ldr	r3, [pc, #296]	@ (8005294 <HAL_RCC_OscConfig+0x240>)
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	f003 030c 	and.w	r3, r3, #12
 8005172:	2b00      	cmp	r3, #0
 8005174:	d00b      	beq.n	800518e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005176:	4b47      	ldr	r3, [pc, #284]	@ (8005294 <HAL_RCC_OscConfig+0x240>)
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800517e:	2b08      	cmp	r3, #8
 8005180:	d11c      	bne.n	80051bc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005182:	4b44      	ldr	r3, [pc, #272]	@ (8005294 <HAL_RCC_OscConfig+0x240>)
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800518a:	2b00      	cmp	r3, #0
 800518c:	d116      	bne.n	80051bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800518e:	4b41      	ldr	r3, [pc, #260]	@ (8005294 <HAL_RCC_OscConfig+0x240>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 0302 	and.w	r3, r3, #2
 8005196:	2b00      	cmp	r3, #0
 8005198:	d005      	beq.n	80051a6 <HAL_RCC_OscConfig+0x152>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	68db      	ldr	r3, [r3, #12]
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d001      	beq.n	80051a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e1c7      	b.n	8005536 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051a6:	4b3b      	ldr	r3, [pc, #236]	@ (8005294 <HAL_RCC_OscConfig+0x240>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	00db      	lsls	r3, r3, #3
 80051b4:	4937      	ldr	r1, [pc, #220]	@ (8005294 <HAL_RCC_OscConfig+0x240>)
 80051b6:	4313      	orrs	r3, r2
 80051b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051ba:	e03a      	b.n	8005232 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d020      	beq.n	8005206 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051c4:	4b34      	ldr	r3, [pc, #208]	@ (8005298 <HAL_RCC_OscConfig+0x244>)
 80051c6:	2201      	movs	r2, #1
 80051c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051ca:	f7fe f81b 	bl	8003204 <HAL_GetTick>
 80051ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051d0:	e008      	b.n	80051e4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051d2:	f7fe f817 	bl	8003204 <HAL_GetTick>
 80051d6:	4602      	mov	r2, r0
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	1ad3      	subs	r3, r2, r3
 80051dc:	2b02      	cmp	r3, #2
 80051de:	d901      	bls.n	80051e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80051e0:	2303      	movs	r3, #3
 80051e2:	e1a8      	b.n	8005536 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051e4:	4b2b      	ldr	r3, [pc, #172]	@ (8005294 <HAL_RCC_OscConfig+0x240>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 0302 	and.w	r3, r3, #2
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d0f0      	beq.n	80051d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051f0:	4b28      	ldr	r3, [pc, #160]	@ (8005294 <HAL_RCC_OscConfig+0x240>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	691b      	ldr	r3, [r3, #16]
 80051fc:	00db      	lsls	r3, r3, #3
 80051fe:	4925      	ldr	r1, [pc, #148]	@ (8005294 <HAL_RCC_OscConfig+0x240>)
 8005200:	4313      	orrs	r3, r2
 8005202:	600b      	str	r3, [r1, #0]
 8005204:	e015      	b.n	8005232 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005206:	4b24      	ldr	r3, [pc, #144]	@ (8005298 <HAL_RCC_OscConfig+0x244>)
 8005208:	2200      	movs	r2, #0
 800520a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800520c:	f7fd fffa 	bl	8003204 <HAL_GetTick>
 8005210:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005212:	e008      	b.n	8005226 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005214:	f7fd fff6 	bl	8003204 <HAL_GetTick>
 8005218:	4602      	mov	r2, r0
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	1ad3      	subs	r3, r2, r3
 800521e:	2b02      	cmp	r3, #2
 8005220:	d901      	bls.n	8005226 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005222:	2303      	movs	r3, #3
 8005224:	e187      	b.n	8005536 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005226:	4b1b      	ldr	r3, [pc, #108]	@ (8005294 <HAL_RCC_OscConfig+0x240>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 0302 	and.w	r3, r3, #2
 800522e:	2b00      	cmp	r3, #0
 8005230:	d1f0      	bne.n	8005214 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f003 0308 	and.w	r3, r3, #8
 800523a:	2b00      	cmp	r3, #0
 800523c:	d036      	beq.n	80052ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	695b      	ldr	r3, [r3, #20]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d016      	beq.n	8005274 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005246:	4b15      	ldr	r3, [pc, #84]	@ (800529c <HAL_RCC_OscConfig+0x248>)
 8005248:	2201      	movs	r2, #1
 800524a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800524c:	f7fd ffda 	bl	8003204 <HAL_GetTick>
 8005250:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005252:	e008      	b.n	8005266 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005254:	f7fd ffd6 	bl	8003204 <HAL_GetTick>
 8005258:	4602      	mov	r2, r0
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	1ad3      	subs	r3, r2, r3
 800525e:	2b02      	cmp	r3, #2
 8005260:	d901      	bls.n	8005266 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005262:	2303      	movs	r3, #3
 8005264:	e167      	b.n	8005536 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005266:	4b0b      	ldr	r3, [pc, #44]	@ (8005294 <HAL_RCC_OscConfig+0x240>)
 8005268:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800526a:	f003 0302 	and.w	r3, r3, #2
 800526e:	2b00      	cmp	r3, #0
 8005270:	d0f0      	beq.n	8005254 <HAL_RCC_OscConfig+0x200>
 8005272:	e01b      	b.n	80052ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005274:	4b09      	ldr	r3, [pc, #36]	@ (800529c <HAL_RCC_OscConfig+0x248>)
 8005276:	2200      	movs	r2, #0
 8005278:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800527a:	f7fd ffc3 	bl	8003204 <HAL_GetTick>
 800527e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005280:	e00e      	b.n	80052a0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005282:	f7fd ffbf 	bl	8003204 <HAL_GetTick>
 8005286:	4602      	mov	r2, r0
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	1ad3      	subs	r3, r2, r3
 800528c:	2b02      	cmp	r3, #2
 800528e:	d907      	bls.n	80052a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005290:	2303      	movs	r3, #3
 8005292:	e150      	b.n	8005536 <HAL_RCC_OscConfig+0x4e2>
 8005294:	40023800 	.word	0x40023800
 8005298:	42470000 	.word	0x42470000
 800529c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052a0:	4b88      	ldr	r3, [pc, #544]	@ (80054c4 <HAL_RCC_OscConfig+0x470>)
 80052a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052a4:	f003 0302 	and.w	r3, r3, #2
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d1ea      	bne.n	8005282 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 0304 	and.w	r3, r3, #4
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	f000 8097 	beq.w	80053e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052ba:	2300      	movs	r3, #0
 80052bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052be:	4b81      	ldr	r3, [pc, #516]	@ (80054c4 <HAL_RCC_OscConfig+0x470>)
 80052c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d10f      	bne.n	80052ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052ca:	2300      	movs	r3, #0
 80052cc:	60bb      	str	r3, [r7, #8]
 80052ce:	4b7d      	ldr	r3, [pc, #500]	@ (80054c4 <HAL_RCC_OscConfig+0x470>)
 80052d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052d2:	4a7c      	ldr	r2, [pc, #496]	@ (80054c4 <HAL_RCC_OscConfig+0x470>)
 80052d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80052da:	4b7a      	ldr	r3, [pc, #488]	@ (80054c4 <HAL_RCC_OscConfig+0x470>)
 80052dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052e2:	60bb      	str	r3, [r7, #8]
 80052e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052e6:	2301      	movs	r3, #1
 80052e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052ea:	4b77      	ldr	r3, [pc, #476]	@ (80054c8 <HAL_RCC_OscConfig+0x474>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d118      	bne.n	8005328 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052f6:	4b74      	ldr	r3, [pc, #464]	@ (80054c8 <HAL_RCC_OscConfig+0x474>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a73      	ldr	r2, [pc, #460]	@ (80054c8 <HAL_RCC_OscConfig+0x474>)
 80052fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005300:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005302:	f7fd ff7f 	bl	8003204 <HAL_GetTick>
 8005306:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005308:	e008      	b.n	800531c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800530a:	f7fd ff7b 	bl	8003204 <HAL_GetTick>
 800530e:	4602      	mov	r2, r0
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	1ad3      	subs	r3, r2, r3
 8005314:	2b02      	cmp	r3, #2
 8005316:	d901      	bls.n	800531c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005318:	2303      	movs	r3, #3
 800531a:	e10c      	b.n	8005536 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800531c:	4b6a      	ldr	r3, [pc, #424]	@ (80054c8 <HAL_RCC_OscConfig+0x474>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005324:	2b00      	cmp	r3, #0
 8005326:	d0f0      	beq.n	800530a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	2b01      	cmp	r3, #1
 800532e:	d106      	bne.n	800533e <HAL_RCC_OscConfig+0x2ea>
 8005330:	4b64      	ldr	r3, [pc, #400]	@ (80054c4 <HAL_RCC_OscConfig+0x470>)
 8005332:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005334:	4a63      	ldr	r2, [pc, #396]	@ (80054c4 <HAL_RCC_OscConfig+0x470>)
 8005336:	f043 0301 	orr.w	r3, r3, #1
 800533a:	6713      	str	r3, [r2, #112]	@ 0x70
 800533c:	e01c      	b.n	8005378 <HAL_RCC_OscConfig+0x324>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	2b05      	cmp	r3, #5
 8005344:	d10c      	bne.n	8005360 <HAL_RCC_OscConfig+0x30c>
 8005346:	4b5f      	ldr	r3, [pc, #380]	@ (80054c4 <HAL_RCC_OscConfig+0x470>)
 8005348:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800534a:	4a5e      	ldr	r2, [pc, #376]	@ (80054c4 <HAL_RCC_OscConfig+0x470>)
 800534c:	f043 0304 	orr.w	r3, r3, #4
 8005350:	6713      	str	r3, [r2, #112]	@ 0x70
 8005352:	4b5c      	ldr	r3, [pc, #368]	@ (80054c4 <HAL_RCC_OscConfig+0x470>)
 8005354:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005356:	4a5b      	ldr	r2, [pc, #364]	@ (80054c4 <HAL_RCC_OscConfig+0x470>)
 8005358:	f043 0301 	orr.w	r3, r3, #1
 800535c:	6713      	str	r3, [r2, #112]	@ 0x70
 800535e:	e00b      	b.n	8005378 <HAL_RCC_OscConfig+0x324>
 8005360:	4b58      	ldr	r3, [pc, #352]	@ (80054c4 <HAL_RCC_OscConfig+0x470>)
 8005362:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005364:	4a57      	ldr	r2, [pc, #348]	@ (80054c4 <HAL_RCC_OscConfig+0x470>)
 8005366:	f023 0301 	bic.w	r3, r3, #1
 800536a:	6713      	str	r3, [r2, #112]	@ 0x70
 800536c:	4b55      	ldr	r3, [pc, #340]	@ (80054c4 <HAL_RCC_OscConfig+0x470>)
 800536e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005370:	4a54      	ldr	r2, [pc, #336]	@ (80054c4 <HAL_RCC_OscConfig+0x470>)
 8005372:	f023 0304 	bic.w	r3, r3, #4
 8005376:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d015      	beq.n	80053ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005380:	f7fd ff40 	bl	8003204 <HAL_GetTick>
 8005384:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005386:	e00a      	b.n	800539e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005388:	f7fd ff3c 	bl	8003204 <HAL_GetTick>
 800538c:	4602      	mov	r2, r0
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	1ad3      	subs	r3, r2, r3
 8005392:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005396:	4293      	cmp	r3, r2
 8005398:	d901      	bls.n	800539e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800539a:	2303      	movs	r3, #3
 800539c:	e0cb      	b.n	8005536 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800539e:	4b49      	ldr	r3, [pc, #292]	@ (80054c4 <HAL_RCC_OscConfig+0x470>)
 80053a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053a2:	f003 0302 	and.w	r3, r3, #2
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d0ee      	beq.n	8005388 <HAL_RCC_OscConfig+0x334>
 80053aa:	e014      	b.n	80053d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053ac:	f7fd ff2a 	bl	8003204 <HAL_GetTick>
 80053b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053b2:	e00a      	b.n	80053ca <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053b4:	f7fd ff26 	bl	8003204 <HAL_GetTick>
 80053b8:	4602      	mov	r2, r0
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	1ad3      	subs	r3, r2, r3
 80053be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d901      	bls.n	80053ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80053c6:	2303      	movs	r3, #3
 80053c8:	e0b5      	b.n	8005536 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053ca:	4b3e      	ldr	r3, [pc, #248]	@ (80054c4 <HAL_RCC_OscConfig+0x470>)
 80053cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053ce:	f003 0302 	and.w	r3, r3, #2
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d1ee      	bne.n	80053b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80053d6:	7dfb      	ldrb	r3, [r7, #23]
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d105      	bne.n	80053e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053dc:	4b39      	ldr	r3, [pc, #228]	@ (80054c4 <HAL_RCC_OscConfig+0x470>)
 80053de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053e0:	4a38      	ldr	r2, [pc, #224]	@ (80054c4 <HAL_RCC_OscConfig+0x470>)
 80053e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80053e6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	699b      	ldr	r3, [r3, #24]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	f000 80a1 	beq.w	8005534 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80053f2:	4b34      	ldr	r3, [pc, #208]	@ (80054c4 <HAL_RCC_OscConfig+0x470>)
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	f003 030c 	and.w	r3, r3, #12
 80053fa:	2b08      	cmp	r3, #8
 80053fc:	d05c      	beq.n	80054b8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	699b      	ldr	r3, [r3, #24]
 8005402:	2b02      	cmp	r3, #2
 8005404:	d141      	bne.n	800548a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005406:	4b31      	ldr	r3, [pc, #196]	@ (80054cc <HAL_RCC_OscConfig+0x478>)
 8005408:	2200      	movs	r2, #0
 800540a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800540c:	f7fd fefa 	bl	8003204 <HAL_GetTick>
 8005410:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005412:	e008      	b.n	8005426 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005414:	f7fd fef6 	bl	8003204 <HAL_GetTick>
 8005418:	4602      	mov	r2, r0
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	1ad3      	subs	r3, r2, r3
 800541e:	2b02      	cmp	r3, #2
 8005420:	d901      	bls.n	8005426 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005422:	2303      	movs	r3, #3
 8005424:	e087      	b.n	8005536 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005426:	4b27      	ldr	r3, [pc, #156]	@ (80054c4 <HAL_RCC_OscConfig+0x470>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800542e:	2b00      	cmp	r3, #0
 8005430:	d1f0      	bne.n	8005414 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	69da      	ldr	r2, [r3, #28]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6a1b      	ldr	r3, [r3, #32]
 800543a:	431a      	orrs	r2, r3
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005440:	019b      	lsls	r3, r3, #6
 8005442:	431a      	orrs	r2, r3
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005448:	085b      	lsrs	r3, r3, #1
 800544a:	3b01      	subs	r3, #1
 800544c:	041b      	lsls	r3, r3, #16
 800544e:	431a      	orrs	r2, r3
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005454:	061b      	lsls	r3, r3, #24
 8005456:	491b      	ldr	r1, [pc, #108]	@ (80054c4 <HAL_RCC_OscConfig+0x470>)
 8005458:	4313      	orrs	r3, r2
 800545a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800545c:	4b1b      	ldr	r3, [pc, #108]	@ (80054cc <HAL_RCC_OscConfig+0x478>)
 800545e:	2201      	movs	r2, #1
 8005460:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005462:	f7fd fecf 	bl	8003204 <HAL_GetTick>
 8005466:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005468:	e008      	b.n	800547c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800546a:	f7fd fecb 	bl	8003204 <HAL_GetTick>
 800546e:	4602      	mov	r2, r0
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	1ad3      	subs	r3, r2, r3
 8005474:	2b02      	cmp	r3, #2
 8005476:	d901      	bls.n	800547c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005478:	2303      	movs	r3, #3
 800547a:	e05c      	b.n	8005536 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800547c:	4b11      	ldr	r3, [pc, #68]	@ (80054c4 <HAL_RCC_OscConfig+0x470>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005484:	2b00      	cmp	r3, #0
 8005486:	d0f0      	beq.n	800546a <HAL_RCC_OscConfig+0x416>
 8005488:	e054      	b.n	8005534 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800548a:	4b10      	ldr	r3, [pc, #64]	@ (80054cc <HAL_RCC_OscConfig+0x478>)
 800548c:	2200      	movs	r2, #0
 800548e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005490:	f7fd feb8 	bl	8003204 <HAL_GetTick>
 8005494:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005496:	e008      	b.n	80054aa <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005498:	f7fd feb4 	bl	8003204 <HAL_GetTick>
 800549c:	4602      	mov	r2, r0
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	1ad3      	subs	r3, r2, r3
 80054a2:	2b02      	cmp	r3, #2
 80054a4:	d901      	bls.n	80054aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80054a6:	2303      	movs	r3, #3
 80054a8:	e045      	b.n	8005536 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054aa:	4b06      	ldr	r3, [pc, #24]	@ (80054c4 <HAL_RCC_OscConfig+0x470>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d1f0      	bne.n	8005498 <HAL_RCC_OscConfig+0x444>
 80054b6:	e03d      	b.n	8005534 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	699b      	ldr	r3, [r3, #24]
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d107      	bne.n	80054d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	e038      	b.n	8005536 <HAL_RCC_OscConfig+0x4e2>
 80054c4:	40023800 	.word	0x40023800
 80054c8:	40007000 	.word	0x40007000
 80054cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80054d0:	4b1b      	ldr	r3, [pc, #108]	@ (8005540 <HAL_RCC_OscConfig+0x4ec>)
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	699b      	ldr	r3, [r3, #24]
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d028      	beq.n	8005530 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d121      	bne.n	8005530 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d11a      	bne.n	8005530 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054fa:	68fa      	ldr	r2, [r7, #12]
 80054fc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005500:	4013      	ands	r3, r2
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005506:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005508:	4293      	cmp	r3, r2
 800550a:	d111      	bne.n	8005530 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005516:	085b      	lsrs	r3, r3, #1
 8005518:	3b01      	subs	r3, #1
 800551a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800551c:	429a      	cmp	r2, r3
 800551e:	d107      	bne.n	8005530 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800552a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800552c:	429a      	cmp	r2, r3
 800552e:	d001      	beq.n	8005534 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	e000      	b.n	8005536 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005534:	2300      	movs	r3, #0
}
 8005536:	4618      	mov	r0, r3
 8005538:	3718      	adds	r7, #24
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
 800553e:	bf00      	nop
 8005540:	40023800 	.word	0x40023800

08005544 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b084      	sub	sp, #16
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d101      	bne.n	8005558 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005554:	2301      	movs	r3, #1
 8005556:	e0cc      	b.n	80056f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005558:	4b68      	ldr	r3, [pc, #416]	@ (80056fc <HAL_RCC_ClockConfig+0x1b8>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f003 030f 	and.w	r3, r3, #15
 8005560:	683a      	ldr	r2, [r7, #0]
 8005562:	429a      	cmp	r2, r3
 8005564:	d90c      	bls.n	8005580 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005566:	4b65      	ldr	r3, [pc, #404]	@ (80056fc <HAL_RCC_ClockConfig+0x1b8>)
 8005568:	683a      	ldr	r2, [r7, #0]
 800556a:	b2d2      	uxtb	r2, r2
 800556c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800556e:	4b63      	ldr	r3, [pc, #396]	@ (80056fc <HAL_RCC_ClockConfig+0x1b8>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f003 030f 	and.w	r3, r3, #15
 8005576:	683a      	ldr	r2, [r7, #0]
 8005578:	429a      	cmp	r2, r3
 800557a:	d001      	beq.n	8005580 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	e0b8      	b.n	80056f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 0302 	and.w	r3, r3, #2
 8005588:	2b00      	cmp	r3, #0
 800558a:	d020      	beq.n	80055ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 0304 	and.w	r3, r3, #4
 8005594:	2b00      	cmp	r3, #0
 8005596:	d005      	beq.n	80055a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005598:	4b59      	ldr	r3, [pc, #356]	@ (8005700 <HAL_RCC_ClockConfig+0x1bc>)
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	4a58      	ldr	r2, [pc, #352]	@ (8005700 <HAL_RCC_ClockConfig+0x1bc>)
 800559e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80055a2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 0308 	and.w	r3, r3, #8
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d005      	beq.n	80055bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80055b0:	4b53      	ldr	r3, [pc, #332]	@ (8005700 <HAL_RCC_ClockConfig+0x1bc>)
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	4a52      	ldr	r2, [pc, #328]	@ (8005700 <HAL_RCC_ClockConfig+0x1bc>)
 80055b6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80055ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055bc:	4b50      	ldr	r3, [pc, #320]	@ (8005700 <HAL_RCC_ClockConfig+0x1bc>)
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	494d      	ldr	r1, [pc, #308]	@ (8005700 <HAL_RCC_ClockConfig+0x1bc>)
 80055ca:	4313      	orrs	r3, r2
 80055cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f003 0301 	and.w	r3, r3, #1
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d044      	beq.n	8005664 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d107      	bne.n	80055f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055e2:	4b47      	ldr	r3, [pc, #284]	@ (8005700 <HAL_RCC_ClockConfig+0x1bc>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d119      	bne.n	8005622 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	e07f      	b.n	80056f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	2b02      	cmp	r3, #2
 80055f8:	d003      	beq.n	8005602 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055fe:	2b03      	cmp	r3, #3
 8005600:	d107      	bne.n	8005612 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005602:	4b3f      	ldr	r3, [pc, #252]	@ (8005700 <HAL_RCC_ClockConfig+0x1bc>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800560a:	2b00      	cmp	r3, #0
 800560c:	d109      	bne.n	8005622 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	e06f      	b.n	80056f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005612:	4b3b      	ldr	r3, [pc, #236]	@ (8005700 <HAL_RCC_ClockConfig+0x1bc>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f003 0302 	and.w	r3, r3, #2
 800561a:	2b00      	cmp	r3, #0
 800561c:	d101      	bne.n	8005622 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	e067      	b.n	80056f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005622:	4b37      	ldr	r3, [pc, #220]	@ (8005700 <HAL_RCC_ClockConfig+0x1bc>)
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	f023 0203 	bic.w	r2, r3, #3
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	4934      	ldr	r1, [pc, #208]	@ (8005700 <HAL_RCC_ClockConfig+0x1bc>)
 8005630:	4313      	orrs	r3, r2
 8005632:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005634:	f7fd fde6 	bl	8003204 <HAL_GetTick>
 8005638:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800563a:	e00a      	b.n	8005652 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800563c:	f7fd fde2 	bl	8003204 <HAL_GetTick>
 8005640:	4602      	mov	r2, r0
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	1ad3      	subs	r3, r2, r3
 8005646:	f241 3288 	movw	r2, #5000	@ 0x1388
 800564a:	4293      	cmp	r3, r2
 800564c:	d901      	bls.n	8005652 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800564e:	2303      	movs	r3, #3
 8005650:	e04f      	b.n	80056f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005652:	4b2b      	ldr	r3, [pc, #172]	@ (8005700 <HAL_RCC_ClockConfig+0x1bc>)
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	f003 020c 	and.w	r2, r3, #12
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	009b      	lsls	r3, r3, #2
 8005660:	429a      	cmp	r2, r3
 8005662:	d1eb      	bne.n	800563c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005664:	4b25      	ldr	r3, [pc, #148]	@ (80056fc <HAL_RCC_ClockConfig+0x1b8>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f003 030f 	and.w	r3, r3, #15
 800566c:	683a      	ldr	r2, [r7, #0]
 800566e:	429a      	cmp	r2, r3
 8005670:	d20c      	bcs.n	800568c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005672:	4b22      	ldr	r3, [pc, #136]	@ (80056fc <HAL_RCC_ClockConfig+0x1b8>)
 8005674:	683a      	ldr	r2, [r7, #0]
 8005676:	b2d2      	uxtb	r2, r2
 8005678:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800567a:	4b20      	ldr	r3, [pc, #128]	@ (80056fc <HAL_RCC_ClockConfig+0x1b8>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f003 030f 	and.w	r3, r3, #15
 8005682:	683a      	ldr	r2, [r7, #0]
 8005684:	429a      	cmp	r2, r3
 8005686:	d001      	beq.n	800568c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	e032      	b.n	80056f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f003 0304 	and.w	r3, r3, #4
 8005694:	2b00      	cmp	r3, #0
 8005696:	d008      	beq.n	80056aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005698:	4b19      	ldr	r3, [pc, #100]	@ (8005700 <HAL_RCC_ClockConfig+0x1bc>)
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	4916      	ldr	r1, [pc, #88]	@ (8005700 <HAL_RCC_ClockConfig+0x1bc>)
 80056a6:	4313      	orrs	r3, r2
 80056a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f003 0308 	and.w	r3, r3, #8
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d009      	beq.n	80056ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80056b6:	4b12      	ldr	r3, [pc, #72]	@ (8005700 <HAL_RCC_ClockConfig+0x1bc>)
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	691b      	ldr	r3, [r3, #16]
 80056c2:	00db      	lsls	r3, r3, #3
 80056c4:	490e      	ldr	r1, [pc, #56]	@ (8005700 <HAL_RCC_ClockConfig+0x1bc>)
 80056c6:	4313      	orrs	r3, r2
 80056c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80056ca:	f000 f821 	bl	8005710 <HAL_RCC_GetSysClockFreq>
 80056ce:	4602      	mov	r2, r0
 80056d0:	4b0b      	ldr	r3, [pc, #44]	@ (8005700 <HAL_RCC_ClockConfig+0x1bc>)
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	091b      	lsrs	r3, r3, #4
 80056d6:	f003 030f 	and.w	r3, r3, #15
 80056da:	490a      	ldr	r1, [pc, #40]	@ (8005704 <HAL_RCC_ClockConfig+0x1c0>)
 80056dc:	5ccb      	ldrb	r3, [r1, r3]
 80056de:	fa22 f303 	lsr.w	r3, r2, r3
 80056e2:	4a09      	ldr	r2, [pc, #36]	@ (8005708 <HAL_RCC_ClockConfig+0x1c4>)
 80056e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80056e6:	4b09      	ldr	r3, [pc, #36]	@ (800570c <HAL_RCC_ClockConfig+0x1c8>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4618      	mov	r0, r3
 80056ec:	f7fd fd46 	bl	800317c <HAL_InitTick>

  return HAL_OK;
 80056f0:	2300      	movs	r3, #0
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3710      	adds	r7, #16
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
 80056fa:	bf00      	nop
 80056fc:	40023c00 	.word	0x40023c00
 8005700:	40023800 	.word	0x40023800
 8005704:	0800812c 	.word	0x0800812c
 8005708:	2000001c 	.word	0x2000001c
 800570c:	20000020 	.word	0x20000020

08005710 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005710:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005714:	b094      	sub	sp, #80	@ 0x50
 8005716:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005718:	2300      	movs	r3, #0
 800571a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800571c:	2300      	movs	r3, #0
 800571e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005720:	2300      	movs	r3, #0
 8005722:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005724:	2300      	movs	r3, #0
 8005726:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005728:	4b79      	ldr	r3, [pc, #484]	@ (8005910 <HAL_RCC_GetSysClockFreq+0x200>)
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	f003 030c 	and.w	r3, r3, #12
 8005730:	2b08      	cmp	r3, #8
 8005732:	d00d      	beq.n	8005750 <HAL_RCC_GetSysClockFreq+0x40>
 8005734:	2b08      	cmp	r3, #8
 8005736:	f200 80e1 	bhi.w	80058fc <HAL_RCC_GetSysClockFreq+0x1ec>
 800573a:	2b00      	cmp	r3, #0
 800573c:	d002      	beq.n	8005744 <HAL_RCC_GetSysClockFreq+0x34>
 800573e:	2b04      	cmp	r3, #4
 8005740:	d003      	beq.n	800574a <HAL_RCC_GetSysClockFreq+0x3a>
 8005742:	e0db      	b.n	80058fc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005744:	4b73      	ldr	r3, [pc, #460]	@ (8005914 <HAL_RCC_GetSysClockFreq+0x204>)
 8005746:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005748:	e0db      	b.n	8005902 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800574a:	4b73      	ldr	r3, [pc, #460]	@ (8005918 <HAL_RCC_GetSysClockFreq+0x208>)
 800574c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800574e:	e0d8      	b.n	8005902 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005750:	4b6f      	ldr	r3, [pc, #444]	@ (8005910 <HAL_RCC_GetSysClockFreq+0x200>)
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005758:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800575a:	4b6d      	ldr	r3, [pc, #436]	@ (8005910 <HAL_RCC_GetSysClockFreq+0x200>)
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005762:	2b00      	cmp	r3, #0
 8005764:	d063      	beq.n	800582e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005766:	4b6a      	ldr	r3, [pc, #424]	@ (8005910 <HAL_RCC_GetSysClockFreq+0x200>)
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	099b      	lsrs	r3, r3, #6
 800576c:	2200      	movs	r2, #0
 800576e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005770:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005774:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005778:	633b      	str	r3, [r7, #48]	@ 0x30
 800577a:	2300      	movs	r3, #0
 800577c:	637b      	str	r3, [r7, #52]	@ 0x34
 800577e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005782:	4622      	mov	r2, r4
 8005784:	462b      	mov	r3, r5
 8005786:	f04f 0000 	mov.w	r0, #0
 800578a:	f04f 0100 	mov.w	r1, #0
 800578e:	0159      	lsls	r1, r3, #5
 8005790:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005794:	0150      	lsls	r0, r2, #5
 8005796:	4602      	mov	r2, r0
 8005798:	460b      	mov	r3, r1
 800579a:	4621      	mov	r1, r4
 800579c:	1a51      	subs	r1, r2, r1
 800579e:	6139      	str	r1, [r7, #16]
 80057a0:	4629      	mov	r1, r5
 80057a2:	eb63 0301 	sbc.w	r3, r3, r1
 80057a6:	617b      	str	r3, [r7, #20]
 80057a8:	f04f 0200 	mov.w	r2, #0
 80057ac:	f04f 0300 	mov.w	r3, #0
 80057b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80057b4:	4659      	mov	r1, fp
 80057b6:	018b      	lsls	r3, r1, #6
 80057b8:	4651      	mov	r1, sl
 80057ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80057be:	4651      	mov	r1, sl
 80057c0:	018a      	lsls	r2, r1, #6
 80057c2:	4651      	mov	r1, sl
 80057c4:	ebb2 0801 	subs.w	r8, r2, r1
 80057c8:	4659      	mov	r1, fp
 80057ca:	eb63 0901 	sbc.w	r9, r3, r1
 80057ce:	f04f 0200 	mov.w	r2, #0
 80057d2:	f04f 0300 	mov.w	r3, #0
 80057d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80057da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80057de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80057e2:	4690      	mov	r8, r2
 80057e4:	4699      	mov	r9, r3
 80057e6:	4623      	mov	r3, r4
 80057e8:	eb18 0303 	adds.w	r3, r8, r3
 80057ec:	60bb      	str	r3, [r7, #8]
 80057ee:	462b      	mov	r3, r5
 80057f0:	eb49 0303 	adc.w	r3, r9, r3
 80057f4:	60fb      	str	r3, [r7, #12]
 80057f6:	f04f 0200 	mov.w	r2, #0
 80057fa:	f04f 0300 	mov.w	r3, #0
 80057fe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005802:	4629      	mov	r1, r5
 8005804:	024b      	lsls	r3, r1, #9
 8005806:	4621      	mov	r1, r4
 8005808:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800580c:	4621      	mov	r1, r4
 800580e:	024a      	lsls	r2, r1, #9
 8005810:	4610      	mov	r0, r2
 8005812:	4619      	mov	r1, r3
 8005814:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005816:	2200      	movs	r2, #0
 8005818:	62bb      	str	r3, [r7, #40]	@ 0x28
 800581a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800581c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005820:	f7fa fce4 	bl	80001ec <__aeabi_uldivmod>
 8005824:	4602      	mov	r2, r0
 8005826:	460b      	mov	r3, r1
 8005828:	4613      	mov	r3, r2
 800582a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800582c:	e058      	b.n	80058e0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800582e:	4b38      	ldr	r3, [pc, #224]	@ (8005910 <HAL_RCC_GetSysClockFreq+0x200>)
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	099b      	lsrs	r3, r3, #6
 8005834:	2200      	movs	r2, #0
 8005836:	4618      	mov	r0, r3
 8005838:	4611      	mov	r1, r2
 800583a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800583e:	623b      	str	r3, [r7, #32]
 8005840:	2300      	movs	r3, #0
 8005842:	627b      	str	r3, [r7, #36]	@ 0x24
 8005844:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005848:	4642      	mov	r2, r8
 800584a:	464b      	mov	r3, r9
 800584c:	f04f 0000 	mov.w	r0, #0
 8005850:	f04f 0100 	mov.w	r1, #0
 8005854:	0159      	lsls	r1, r3, #5
 8005856:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800585a:	0150      	lsls	r0, r2, #5
 800585c:	4602      	mov	r2, r0
 800585e:	460b      	mov	r3, r1
 8005860:	4641      	mov	r1, r8
 8005862:	ebb2 0a01 	subs.w	sl, r2, r1
 8005866:	4649      	mov	r1, r9
 8005868:	eb63 0b01 	sbc.w	fp, r3, r1
 800586c:	f04f 0200 	mov.w	r2, #0
 8005870:	f04f 0300 	mov.w	r3, #0
 8005874:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005878:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800587c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005880:	ebb2 040a 	subs.w	r4, r2, sl
 8005884:	eb63 050b 	sbc.w	r5, r3, fp
 8005888:	f04f 0200 	mov.w	r2, #0
 800588c:	f04f 0300 	mov.w	r3, #0
 8005890:	00eb      	lsls	r3, r5, #3
 8005892:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005896:	00e2      	lsls	r2, r4, #3
 8005898:	4614      	mov	r4, r2
 800589a:	461d      	mov	r5, r3
 800589c:	4643      	mov	r3, r8
 800589e:	18e3      	adds	r3, r4, r3
 80058a0:	603b      	str	r3, [r7, #0]
 80058a2:	464b      	mov	r3, r9
 80058a4:	eb45 0303 	adc.w	r3, r5, r3
 80058a8:	607b      	str	r3, [r7, #4]
 80058aa:	f04f 0200 	mov.w	r2, #0
 80058ae:	f04f 0300 	mov.w	r3, #0
 80058b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80058b6:	4629      	mov	r1, r5
 80058b8:	028b      	lsls	r3, r1, #10
 80058ba:	4621      	mov	r1, r4
 80058bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80058c0:	4621      	mov	r1, r4
 80058c2:	028a      	lsls	r2, r1, #10
 80058c4:	4610      	mov	r0, r2
 80058c6:	4619      	mov	r1, r3
 80058c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058ca:	2200      	movs	r2, #0
 80058cc:	61bb      	str	r3, [r7, #24]
 80058ce:	61fa      	str	r2, [r7, #28]
 80058d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80058d4:	f7fa fc8a 	bl	80001ec <__aeabi_uldivmod>
 80058d8:	4602      	mov	r2, r0
 80058da:	460b      	mov	r3, r1
 80058dc:	4613      	mov	r3, r2
 80058de:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80058e0:	4b0b      	ldr	r3, [pc, #44]	@ (8005910 <HAL_RCC_GetSysClockFreq+0x200>)
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	0c1b      	lsrs	r3, r3, #16
 80058e6:	f003 0303 	and.w	r3, r3, #3
 80058ea:	3301      	adds	r3, #1
 80058ec:	005b      	lsls	r3, r3, #1
 80058ee:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80058f0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80058f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80058f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80058f8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80058fa:	e002      	b.n	8005902 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80058fc:	4b05      	ldr	r3, [pc, #20]	@ (8005914 <HAL_RCC_GetSysClockFreq+0x204>)
 80058fe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005900:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005902:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005904:	4618      	mov	r0, r3
 8005906:	3750      	adds	r7, #80	@ 0x50
 8005908:	46bd      	mov	sp, r7
 800590a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800590e:	bf00      	nop
 8005910:	40023800 	.word	0x40023800
 8005914:	00f42400 	.word	0x00f42400
 8005918:	007a1200 	.word	0x007a1200

0800591c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800591c:	b480      	push	{r7}
 800591e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005920:	4b03      	ldr	r3, [pc, #12]	@ (8005930 <HAL_RCC_GetHCLKFreq+0x14>)
 8005922:	681b      	ldr	r3, [r3, #0]
}
 8005924:	4618      	mov	r0, r3
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr
 800592e:	bf00      	nop
 8005930:	2000001c 	.word	0x2000001c

08005934 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005938:	f7ff fff0 	bl	800591c <HAL_RCC_GetHCLKFreq>
 800593c:	4602      	mov	r2, r0
 800593e:	4b05      	ldr	r3, [pc, #20]	@ (8005954 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	0a9b      	lsrs	r3, r3, #10
 8005944:	f003 0307 	and.w	r3, r3, #7
 8005948:	4903      	ldr	r1, [pc, #12]	@ (8005958 <HAL_RCC_GetPCLK1Freq+0x24>)
 800594a:	5ccb      	ldrb	r3, [r1, r3]
 800594c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005950:	4618      	mov	r0, r3
 8005952:	bd80      	pop	{r7, pc}
 8005954:	40023800 	.word	0x40023800
 8005958:	0800813c 	.word	0x0800813c

0800595c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b086      	sub	sp, #24
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005964:	2300      	movs	r3, #0
 8005966:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005968:	2300      	movs	r3, #0
 800596a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f003 0301 	and.w	r3, r3, #1
 8005974:	2b00      	cmp	r3, #0
 8005976:	d10b      	bne.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005980:	2b00      	cmp	r3, #0
 8005982:	d105      	bne.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800598c:	2b00      	cmp	r3, #0
 800598e:	d075      	beq.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005990:	4b91      	ldr	r3, [pc, #580]	@ (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005992:	2200      	movs	r2, #0
 8005994:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005996:	f7fd fc35 	bl	8003204 <HAL_GetTick>
 800599a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800599c:	e008      	b.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800599e:	f7fd fc31 	bl	8003204 <HAL_GetTick>
 80059a2:	4602      	mov	r2, r0
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	1ad3      	subs	r3, r2, r3
 80059a8:	2b02      	cmp	r3, #2
 80059aa:	d901      	bls.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80059ac:	2303      	movs	r3, #3
 80059ae:	e189      	b.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80059b0:	4b8a      	ldr	r3, [pc, #552]	@ (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d1f0      	bne.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f003 0301 	and.w	r3, r3, #1
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d009      	beq.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	019a      	lsls	r2, r3, #6
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	071b      	lsls	r3, r3, #28
 80059d4:	4981      	ldr	r1, [pc, #516]	@ (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80059d6:	4313      	orrs	r3, r2
 80059d8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f003 0302 	and.w	r3, r3, #2
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d01f      	beq.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80059e8:	4b7c      	ldr	r3, [pc, #496]	@ (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80059ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80059ee:	0f1b      	lsrs	r3, r3, #28
 80059f0:	f003 0307 	and.w	r3, r3, #7
 80059f4:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	019a      	lsls	r2, r3, #6
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	061b      	lsls	r3, r3, #24
 8005a02:	431a      	orrs	r2, r3
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	071b      	lsls	r3, r3, #28
 8005a08:	4974      	ldr	r1, [pc, #464]	@ (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005a10:	4b72      	ldr	r3, [pc, #456]	@ (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a12:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005a16:	f023 021f 	bic.w	r2, r3, #31
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	69db      	ldr	r3, [r3, #28]
 8005a1e:	3b01      	subs	r3, #1
 8005a20:	496e      	ldr	r1, [pc, #440]	@ (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a22:	4313      	orrs	r3, r2
 8005a24:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d00d      	beq.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	019a      	lsls	r2, r3, #6
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	061b      	lsls	r3, r3, #24
 8005a40:	431a      	orrs	r2, r3
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	071b      	lsls	r3, r3, #28
 8005a48:	4964      	ldr	r1, [pc, #400]	@ (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005a50:	4b61      	ldr	r3, [pc, #388]	@ (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005a52:	2201      	movs	r2, #1
 8005a54:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005a56:	f7fd fbd5 	bl	8003204 <HAL_GetTick>
 8005a5a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005a5c:	e008      	b.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005a5e:	f7fd fbd1 	bl	8003204 <HAL_GetTick>
 8005a62:	4602      	mov	r2, r0
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	1ad3      	subs	r3, r2, r3
 8005a68:	2b02      	cmp	r3, #2
 8005a6a:	d901      	bls.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a6c:	2303      	movs	r3, #3
 8005a6e:	e129      	b.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005a70:	4b5a      	ldr	r3, [pc, #360]	@ (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d0f0      	beq.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f003 0304 	and.w	r3, r3, #4
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d105      	bne.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d079      	beq.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005a94:	4b52      	ldr	r3, [pc, #328]	@ (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005a96:	2200      	movs	r2, #0
 8005a98:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005a9a:	f7fd fbb3 	bl	8003204 <HAL_GetTick>
 8005a9e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005aa0:	e008      	b.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005aa2:	f7fd fbaf 	bl	8003204 <HAL_GetTick>
 8005aa6:	4602      	mov	r2, r0
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	1ad3      	subs	r3, r2, r3
 8005aac:	2b02      	cmp	r3, #2
 8005aae:	d901      	bls.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ab0:	2303      	movs	r3, #3
 8005ab2:	e107      	b.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005ab4:	4b49      	ldr	r3, [pc, #292]	@ (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005abc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ac0:	d0ef      	beq.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f003 0304 	and.w	r3, r3, #4
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d020      	beq.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005ace:	4b43      	ldr	r3, [pc, #268]	@ (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ad4:	0f1b      	lsrs	r3, r3, #28
 8005ad6:	f003 0307 	and.w	r3, r3, #7
 8005ada:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	691b      	ldr	r3, [r3, #16]
 8005ae0:	019a      	lsls	r2, r3, #6
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	695b      	ldr	r3, [r3, #20]
 8005ae6:	061b      	lsls	r3, r3, #24
 8005ae8:	431a      	orrs	r2, r3
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	071b      	lsls	r3, r3, #28
 8005aee:	493b      	ldr	r1, [pc, #236]	@ (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005af0:	4313      	orrs	r3, r2
 8005af2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005af6:	4b39      	ldr	r3, [pc, #228]	@ (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005af8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005afc:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6a1b      	ldr	r3, [r3, #32]
 8005b04:	3b01      	subs	r3, #1
 8005b06:	021b      	lsls	r3, r3, #8
 8005b08:	4934      	ldr	r1, [pc, #208]	@ (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f003 0308 	and.w	r3, r3, #8
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d01e      	beq.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005b1c:	4b2f      	ldr	r3, [pc, #188]	@ (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b22:	0e1b      	lsrs	r3, r3, #24
 8005b24:	f003 030f 	and.w	r3, r3, #15
 8005b28:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	691b      	ldr	r3, [r3, #16]
 8005b2e:	019a      	lsls	r2, r3, #6
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	061b      	lsls	r3, r3, #24
 8005b34:	431a      	orrs	r2, r3
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	699b      	ldr	r3, [r3, #24]
 8005b3a:	071b      	lsls	r3, r3, #28
 8005b3c:	4927      	ldr	r1, [pc, #156]	@ (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005b44:	4b25      	ldr	r3, [pc, #148]	@ (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b46:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005b4a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b52:	4922      	ldr	r1, [pc, #136]	@ (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b54:	4313      	orrs	r3, r2
 8005b56:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005b5a:	4b21      	ldr	r3, [pc, #132]	@ (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005b60:	f7fd fb50 	bl	8003204 <HAL_GetTick>
 8005b64:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005b66:	e008      	b.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005b68:	f7fd fb4c 	bl	8003204 <HAL_GetTick>
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	1ad3      	subs	r3, r2, r3
 8005b72:	2b02      	cmp	r3, #2
 8005b74:	d901      	bls.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b76:	2303      	movs	r3, #3
 8005b78:	e0a4      	b.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005b7a:	4b18      	ldr	r3, [pc, #96]	@ (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005b82:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b86:	d1ef      	bne.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f003 0320 	and.w	r3, r3, #32
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	f000 808b 	beq.w	8005cac <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005b96:	2300      	movs	r3, #0
 8005b98:	60fb      	str	r3, [r7, #12]
 8005b9a:	4b10      	ldr	r3, [pc, #64]	@ (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b9e:	4a0f      	ldr	r2, [pc, #60]	@ (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ba0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ba4:	6413      	str	r3, [r2, #64]	@ 0x40
 8005ba6:	4b0d      	ldr	r3, [pc, #52]	@ (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005baa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005bae:	60fb      	str	r3, [r7, #12]
 8005bb0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005bb2:	4b0c      	ldr	r3, [pc, #48]	@ (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a0b      	ldr	r2, [pc, #44]	@ (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005bb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005bbc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005bbe:	f7fd fb21 	bl	8003204 <HAL_GetTick>
 8005bc2:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005bc4:	e010      	b.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bc6:	f7fd fb1d 	bl	8003204 <HAL_GetTick>
 8005bca:	4602      	mov	r2, r0
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	1ad3      	subs	r3, r2, r3
 8005bd0:	2b02      	cmp	r3, #2
 8005bd2:	d909      	bls.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005bd4:	2303      	movs	r3, #3
 8005bd6:	e075      	b.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005bd8:	42470068 	.word	0x42470068
 8005bdc:	40023800 	.word	0x40023800
 8005be0:	42470070 	.word	0x42470070
 8005be4:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005be8:	4b38      	ldr	r3, [pc, #224]	@ (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d0e8      	beq.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005bf4:	4b36      	ldr	r3, [pc, #216]	@ (8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005bf6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bf8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005bfc:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d02f      	beq.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c08:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c0c:	693a      	ldr	r2, [r7, #16]
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d028      	beq.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005c12:	4b2f      	ldr	r3, [pc, #188]	@ (8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005c14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c1a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005c1c:	4b2d      	ldr	r3, [pc, #180]	@ (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005c1e:	2201      	movs	r2, #1
 8005c20:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005c22:	4b2c      	ldr	r3, [pc, #176]	@ (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005c24:	2200      	movs	r2, #0
 8005c26:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005c28:	4a29      	ldr	r2, [pc, #164]	@ (8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005c2e:	4b28      	ldr	r3, [pc, #160]	@ (8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005c30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c32:	f003 0301 	and.w	r3, r3, #1
 8005c36:	2b01      	cmp	r3, #1
 8005c38:	d114      	bne.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005c3a:	f7fd fae3 	bl	8003204 <HAL_GetTick>
 8005c3e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c40:	e00a      	b.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c42:	f7fd fadf 	bl	8003204 <HAL_GetTick>
 8005c46:	4602      	mov	r2, r0
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	1ad3      	subs	r3, r2, r3
 8005c4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d901      	bls.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005c54:	2303      	movs	r3, #3
 8005c56:	e035      	b.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c58:	4b1d      	ldr	r3, [pc, #116]	@ (8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005c5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c5c:	f003 0302 	and.w	r3, r3, #2
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d0ee      	beq.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c68:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c6c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005c70:	d10d      	bne.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005c72:	4b17      	ldr	r3, [pc, #92]	@ (8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c7e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005c82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c86:	4912      	ldr	r1, [pc, #72]	@ (8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	608b      	str	r3, [r1, #8]
 8005c8c:	e005      	b.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005c8e:	4b10      	ldr	r3, [pc, #64]	@ (8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	4a0f      	ldr	r2, [pc, #60]	@ (8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005c94:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005c98:	6093      	str	r3, [r2, #8]
 8005c9a:	4b0d      	ldr	r3, [pc, #52]	@ (8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005c9c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ca2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ca6:	490a      	ldr	r1, [pc, #40]	@ (8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f003 0310 	and.w	r3, r3, #16
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d004      	beq.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8005cbe:	4b06      	ldr	r3, [pc, #24]	@ (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005cc0:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005cc2:	2300      	movs	r3, #0
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3718      	adds	r7, #24
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}
 8005ccc:	40007000 	.word	0x40007000
 8005cd0:	40023800 	.word	0x40023800
 8005cd4:	42470e40 	.word	0x42470e40
 8005cd8:	424711e0 	.word	0x424711e0

08005cdc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b082      	sub	sp, #8
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d101      	bne.n	8005cee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	e07b      	b.n	8005de6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d108      	bne.n	8005d08 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005cfe:	d009      	beq.n	8005d14 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2200      	movs	r2, #0
 8005d04:	61da      	str	r2, [r3, #28]
 8005d06:	e005      	b.n	8005d14 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2200      	movs	r2, #0
 8005d12:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2200      	movs	r2, #0
 8005d18:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005d20:	b2db      	uxtb	r3, r3
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d106      	bne.n	8005d34 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f7fc fdde 	bl	80028f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2202      	movs	r2, #2
 8005d38:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d4a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005d5c:	431a      	orrs	r2, r3
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	68db      	ldr	r3, [r3, #12]
 8005d62:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d66:	431a      	orrs	r2, r3
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	691b      	ldr	r3, [r3, #16]
 8005d6c:	f003 0302 	and.w	r3, r3, #2
 8005d70:	431a      	orrs	r2, r3
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	695b      	ldr	r3, [r3, #20]
 8005d76:	f003 0301 	and.w	r3, r3, #1
 8005d7a:	431a      	orrs	r2, r3
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	699b      	ldr	r3, [r3, #24]
 8005d80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d84:	431a      	orrs	r2, r3
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	69db      	ldr	r3, [r3, #28]
 8005d8a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005d8e:	431a      	orrs	r2, r3
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6a1b      	ldr	r3, [r3, #32]
 8005d94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d98:	ea42 0103 	orr.w	r1, r2, r3
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005da0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	430a      	orrs	r2, r1
 8005daa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	699b      	ldr	r3, [r3, #24]
 8005db0:	0c1b      	lsrs	r3, r3, #16
 8005db2:	f003 0104 	and.w	r1, r3, #4
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dba:	f003 0210 	and.w	r2, r3, #16
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	430a      	orrs	r2, r1
 8005dc4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	69da      	ldr	r2, [r3, #28]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005dd4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2201      	movs	r2, #1
 8005de0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005de4:	2300      	movs	r3, #0
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3708      	adds	r7, #8
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}

08005dee <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8005dee:	b580      	push	{r7, lr}
 8005df0:	b082      	sub	sp, #8
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d101      	bne.n	8005e00 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	e01a      	b.n	8005e36 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2202      	movs	r2, #2
 8005e04:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005e16:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f7fc fdb1 	bl	8002980 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2200      	movs	r2, #0
 8005e22:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2200      	movs	r2, #0
 8005e28:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8005e34:	2300      	movs	r3, #0
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3708      	adds	r7, #8
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}

08005e3e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e3e:	b580      	push	{r7, lr}
 8005e40:	b088      	sub	sp, #32
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	60f8      	str	r0, [r7, #12]
 8005e46:	60b9      	str	r1, [r7, #8]
 8005e48:	603b      	str	r3, [r7, #0]
 8005e4a:	4613      	mov	r3, r2
 8005e4c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e4e:	f7fd f9d9 	bl	8003204 <HAL_GetTick>
 8005e52:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005e54:	88fb      	ldrh	r3, [r7, #6]
 8005e56:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005e5e:	b2db      	uxtb	r3, r3
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d001      	beq.n	8005e68 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005e64:	2302      	movs	r3, #2
 8005e66:	e12a      	b.n	80060be <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d002      	beq.n	8005e74 <HAL_SPI_Transmit+0x36>
 8005e6e:	88fb      	ldrh	r3, [r7, #6]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d101      	bne.n	8005e78 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005e74:	2301      	movs	r3, #1
 8005e76:	e122      	b.n	80060be <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	d101      	bne.n	8005e86 <HAL_SPI_Transmit+0x48>
 8005e82:	2302      	movs	r3, #2
 8005e84:	e11b      	b.n	80060be <HAL_SPI_Transmit+0x280>
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2201      	movs	r2, #1
 8005e8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2203      	movs	r2, #3
 8005e92:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	68ba      	ldr	r2, [r7, #8]
 8005ea0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	88fa      	ldrh	r2, [r7, #6]
 8005ea6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	88fa      	ldrh	r2, [r7, #6]
 8005eac:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ed4:	d10f      	bne.n	8005ef6 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ee4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005ef4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f00:	2b40      	cmp	r3, #64	@ 0x40
 8005f02:	d007      	beq.n	8005f14 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005f12:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	68db      	ldr	r3, [r3, #12]
 8005f18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f1c:	d152      	bne.n	8005fc4 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d002      	beq.n	8005f2c <HAL_SPI_Transmit+0xee>
 8005f26:	8b7b      	ldrh	r3, [r7, #26]
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	d145      	bne.n	8005fb8 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f30:	881a      	ldrh	r2, [r3, #0]
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f3c:	1c9a      	adds	r2, r3, #2
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	3b01      	subs	r3, #1
 8005f4a:	b29a      	uxth	r2, r3
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005f50:	e032      	b.n	8005fb8 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	f003 0302 	and.w	r3, r3, #2
 8005f5c:	2b02      	cmp	r3, #2
 8005f5e:	d112      	bne.n	8005f86 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f64:	881a      	ldrh	r2, [r3, #0]
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f70:	1c9a      	adds	r2, r3, #2
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	3b01      	subs	r3, #1
 8005f7e:	b29a      	uxth	r2, r3
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005f84:	e018      	b.n	8005fb8 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f86:	f7fd f93d 	bl	8003204 <HAL_GetTick>
 8005f8a:	4602      	mov	r2, r0
 8005f8c:	69fb      	ldr	r3, [r7, #28]
 8005f8e:	1ad3      	subs	r3, r2, r3
 8005f90:	683a      	ldr	r2, [r7, #0]
 8005f92:	429a      	cmp	r2, r3
 8005f94:	d803      	bhi.n	8005f9e <HAL_SPI_Transmit+0x160>
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f9c:	d102      	bne.n	8005fa4 <HAL_SPI_Transmit+0x166>
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d109      	bne.n	8005fb8 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005fb4:	2303      	movs	r3, #3
 8005fb6:	e082      	b.n	80060be <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d1c7      	bne.n	8005f52 <HAL_SPI_Transmit+0x114>
 8005fc2:	e053      	b.n	800606c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d002      	beq.n	8005fd2 <HAL_SPI_Transmit+0x194>
 8005fcc:	8b7b      	ldrh	r3, [r7, #26]
 8005fce:	2b01      	cmp	r3, #1
 8005fd0:	d147      	bne.n	8006062 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	330c      	adds	r3, #12
 8005fdc:	7812      	ldrb	r2, [r2, #0]
 8005fde:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fe4:	1c5a      	adds	r2, r3, #1
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	3b01      	subs	r3, #1
 8005ff2:	b29a      	uxth	r2, r3
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005ff8:	e033      	b.n	8006062 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	f003 0302 	and.w	r3, r3, #2
 8006004:	2b02      	cmp	r3, #2
 8006006:	d113      	bne.n	8006030 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	330c      	adds	r3, #12
 8006012:	7812      	ldrb	r2, [r2, #0]
 8006014:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800601a:	1c5a      	adds	r2, r3, #1
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006024:	b29b      	uxth	r3, r3
 8006026:	3b01      	subs	r3, #1
 8006028:	b29a      	uxth	r2, r3
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800602e:	e018      	b.n	8006062 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006030:	f7fd f8e8 	bl	8003204 <HAL_GetTick>
 8006034:	4602      	mov	r2, r0
 8006036:	69fb      	ldr	r3, [r7, #28]
 8006038:	1ad3      	subs	r3, r2, r3
 800603a:	683a      	ldr	r2, [r7, #0]
 800603c:	429a      	cmp	r2, r3
 800603e:	d803      	bhi.n	8006048 <HAL_SPI_Transmit+0x20a>
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006046:	d102      	bne.n	800604e <HAL_SPI_Transmit+0x210>
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d109      	bne.n	8006062 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2201      	movs	r2, #1
 8006052:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2200      	movs	r2, #0
 800605a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800605e:	2303      	movs	r3, #3
 8006060:	e02d      	b.n	80060be <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006066:	b29b      	uxth	r3, r3
 8006068:	2b00      	cmp	r3, #0
 800606a:	d1c6      	bne.n	8005ffa <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800606c:	69fa      	ldr	r2, [r7, #28]
 800606e:	6839      	ldr	r1, [r7, #0]
 8006070:	68f8      	ldr	r0, [r7, #12]
 8006072:	f000 fa67 	bl	8006544 <SPI_EndRxTxTransaction>
 8006076:	4603      	mov	r3, r0
 8006078:	2b00      	cmp	r3, #0
 800607a:	d002      	beq.n	8006082 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2220      	movs	r2, #32
 8006080:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d10a      	bne.n	80060a0 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800608a:	2300      	movs	r3, #0
 800608c:	617b      	str	r3, [r7, #20]
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	68db      	ldr	r3, [r3, #12]
 8006094:	617b      	str	r3, [r7, #20]
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	617b      	str	r3, [r7, #20]
 800609e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2201      	movs	r2, #1
 80060a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2200      	movs	r2, #0
 80060ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d001      	beq.n	80060bc <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80060b8:	2301      	movs	r3, #1
 80060ba:	e000      	b.n	80060be <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80060bc:	2300      	movs	r3, #0
  }
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3720      	adds	r7, #32
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}

080060c6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80060c6:	b580      	push	{r7, lr}
 80060c8:	b08a      	sub	sp, #40	@ 0x28
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	60f8      	str	r0, [r7, #12]
 80060ce:	60b9      	str	r1, [r7, #8]
 80060d0:	607a      	str	r2, [r7, #4]
 80060d2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80060d4:	2301      	movs	r3, #1
 80060d6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80060d8:	f7fd f894 	bl	8003204 <HAL_GetTick>
 80060dc:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80060e4:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80060ec:	887b      	ldrh	r3, [r7, #2]
 80060ee:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80060f0:	7ffb      	ldrb	r3, [r7, #31]
 80060f2:	2b01      	cmp	r3, #1
 80060f4:	d00c      	beq.n	8006110 <HAL_SPI_TransmitReceive+0x4a>
 80060f6:	69bb      	ldr	r3, [r7, #24]
 80060f8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80060fc:	d106      	bne.n	800610c <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d102      	bne.n	800610c <HAL_SPI_TransmitReceive+0x46>
 8006106:	7ffb      	ldrb	r3, [r7, #31]
 8006108:	2b04      	cmp	r3, #4
 800610a:	d001      	beq.n	8006110 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 800610c:	2302      	movs	r3, #2
 800610e:	e17f      	b.n	8006410 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d005      	beq.n	8006122 <HAL_SPI_TransmitReceive+0x5c>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d002      	beq.n	8006122 <HAL_SPI_TransmitReceive+0x5c>
 800611c:	887b      	ldrh	r3, [r7, #2]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d101      	bne.n	8006126 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8006122:	2301      	movs	r3, #1
 8006124:	e174      	b.n	8006410 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800612c:	2b01      	cmp	r3, #1
 800612e:	d101      	bne.n	8006134 <HAL_SPI_TransmitReceive+0x6e>
 8006130:	2302      	movs	r3, #2
 8006132:	e16d      	b.n	8006410 <HAL_SPI_TransmitReceive+0x34a>
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2201      	movs	r2, #1
 8006138:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006142:	b2db      	uxtb	r3, r3
 8006144:	2b04      	cmp	r3, #4
 8006146:	d003      	beq.n	8006150 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2205      	movs	r2, #5
 800614c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2200      	movs	r2, #0
 8006154:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	687a      	ldr	r2, [r7, #4]
 800615a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	887a      	ldrh	r2, [r7, #2]
 8006160:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	887a      	ldrh	r2, [r7, #2]
 8006166:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	68ba      	ldr	r2, [r7, #8]
 800616c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	887a      	ldrh	r2, [r7, #2]
 8006172:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	887a      	ldrh	r2, [r7, #2]
 8006178:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2200      	movs	r2, #0
 800617e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2200      	movs	r2, #0
 8006184:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006190:	2b40      	cmp	r3, #64	@ 0x40
 8006192:	d007      	beq.n	80061a4 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	681a      	ldr	r2, [r3, #0]
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80061a2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	68db      	ldr	r3, [r3, #12]
 80061a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80061ac:	d17e      	bne.n	80062ac <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d002      	beq.n	80061bc <HAL_SPI_TransmitReceive+0xf6>
 80061b6:	8afb      	ldrh	r3, [r7, #22]
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d16c      	bne.n	8006296 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061c0:	881a      	ldrh	r2, [r3, #0]
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061cc:	1c9a      	adds	r2, r3, #2
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	3b01      	subs	r3, #1
 80061da:	b29a      	uxth	r2, r3
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80061e0:	e059      	b.n	8006296 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	689b      	ldr	r3, [r3, #8]
 80061e8:	f003 0302 	and.w	r3, r3, #2
 80061ec:	2b02      	cmp	r3, #2
 80061ee:	d11b      	bne.n	8006228 <HAL_SPI_TransmitReceive+0x162>
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d016      	beq.n	8006228 <HAL_SPI_TransmitReceive+0x162>
 80061fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d113      	bne.n	8006228 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006204:	881a      	ldrh	r2, [r3, #0]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006210:	1c9a      	adds	r2, r3, #2
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800621a:	b29b      	uxth	r3, r3
 800621c:	3b01      	subs	r3, #1
 800621e:	b29a      	uxth	r2, r3
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006224:	2300      	movs	r3, #0
 8006226:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	f003 0301 	and.w	r3, r3, #1
 8006232:	2b01      	cmp	r3, #1
 8006234:	d119      	bne.n	800626a <HAL_SPI_TransmitReceive+0x1a4>
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800623a:	b29b      	uxth	r3, r3
 800623c:	2b00      	cmp	r3, #0
 800623e:	d014      	beq.n	800626a <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	68da      	ldr	r2, [r3, #12]
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800624a:	b292      	uxth	r2, r2
 800624c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006252:	1c9a      	adds	r2, r3, #2
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800625c:	b29b      	uxth	r3, r3
 800625e:	3b01      	subs	r3, #1
 8006260:	b29a      	uxth	r2, r3
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006266:	2301      	movs	r3, #1
 8006268:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800626a:	f7fc ffcb 	bl	8003204 <HAL_GetTick>
 800626e:	4602      	mov	r2, r0
 8006270:	6a3b      	ldr	r3, [r7, #32]
 8006272:	1ad3      	subs	r3, r2, r3
 8006274:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006276:	429a      	cmp	r2, r3
 8006278:	d80d      	bhi.n	8006296 <HAL_SPI_TransmitReceive+0x1d0>
 800627a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800627c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006280:	d009      	beq.n	8006296 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2201      	movs	r2, #1
 8006286:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2200      	movs	r2, #0
 800628e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006292:	2303      	movs	r3, #3
 8006294:	e0bc      	b.n	8006410 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800629a:	b29b      	uxth	r3, r3
 800629c:	2b00      	cmp	r3, #0
 800629e:	d1a0      	bne.n	80061e2 <HAL_SPI_TransmitReceive+0x11c>
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d19b      	bne.n	80061e2 <HAL_SPI_TransmitReceive+0x11c>
 80062aa:	e082      	b.n	80063b2 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d002      	beq.n	80062ba <HAL_SPI_TransmitReceive+0x1f4>
 80062b4:	8afb      	ldrh	r3, [r7, #22]
 80062b6:	2b01      	cmp	r3, #1
 80062b8:	d171      	bne.n	800639e <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	330c      	adds	r3, #12
 80062c4:	7812      	ldrb	r2, [r2, #0]
 80062c6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062cc:	1c5a      	adds	r2, r3, #1
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	3b01      	subs	r3, #1
 80062da:	b29a      	uxth	r2, r3
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80062e0:	e05d      	b.n	800639e <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	689b      	ldr	r3, [r3, #8]
 80062e8:	f003 0302 	and.w	r3, r3, #2
 80062ec:	2b02      	cmp	r3, #2
 80062ee:	d11c      	bne.n	800632a <HAL_SPI_TransmitReceive+0x264>
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80062f4:	b29b      	uxth	r3, r3
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d017      	beq.n	800632a <HAL_SPI_TransmitReceive+0x264>
 80062fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d114      	bne.n	800632a <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	330c      	adds	r3, #12
 800630a:	7812      	ldrb	r2, [r2, #0]
 800630c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006312:	1c5a      	adds	r2, r3, #1
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800631c:	b29b      	uxth	r3, r3
 800631e:	3b01      	subs	r3, #1
 8006320:	b29a      	uxth	r2, r3
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006326:	2300      	movs	r3, #0
 8006328:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	f003 0301 	and.w	r3, r3, #1
 8006334:	2b01      	cmp	r3, #1
 8006336:	d119      	bne.n	800636c <HAL_SPI_TransmitReceive+0x2a6>
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800633c:	b29b      	uxth	r3, r3
 800633e:	2b00      	cmp	r3, #0
 8006340:	d014      	beq.n	800636c <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	68da      	ldr	r2, [r3, #12]
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800634c:	b2d2      	uxtb	r2, r2
 800634e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006354:	1c5a      	adds	r2, r3, #1
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800635e:	b29b      	uxth	r3, r3
 8006360:	3b01      	subs	r3, #1
 8006362:	b29a      	uxth	r2, r3
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006368:	2301      	movs	r3, #1
 800636a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800636c:	f7fc ff4a 	bl	8003204 <HAL_GetTick>
 8006370:	4602      	mov	r2, r0
 8006372:	6a3b      	ldr	r3, [r7, #32]
 8006374:	1ad3      	subs	r3, r2, r3
 8006376:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006378:	429a      	cmp	r2, r3
 800637a:	d803      	bhi.n	8006384 <HAL_SPI_TransmitReceive+0x2be>
 800637c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800637e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006382:	d102      	bne.n	800638a <HAL_SPI_TransmitReceive+0x2c4>
 8006384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006386:	2b00      	cmp	r3, #0
 8006388:	d109      	bne.n	800639e <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2201      	movs	r2, #1
 800638e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2200      	movs	r2, #0
 8006396:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800639a:	2303      	movs	r3, #3
 800639c:	e038      	b.n	8006410 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d19c      	bne.n	80062e2 <HAL_SPI_TransmitReceive+0x21c>
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d197      	bne.n	80062e2 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80063b2:	6a3a      	ldr	r2, [r7, #32]
 80063b4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80063b6:	68f8      	ldr	r0, [r7, #12]
 80063b8:	f000 f8c4 	bl	8006544 <SPI_EndRxTxTransaction>
 80063bc:	4603      	mov	r3, r0
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d008      	beq.n	80063d4 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2220      	movs	r2, #32
 80063c6:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2200      	movs	r2, #0
 80063cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80063d0:	2301      	movs	r3, #1
 80063d2:	e01d      	b.n	8006410 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	689b      	ldr	r3, [r3, #8]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d10a      	bne.n	80063f2 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80063dc:	2300      	movs	r3, #0
 80063de:	613b      	str	r3, [r7, #16]
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	68db      	ldr	r3, [r3, #12]
 80063e6:	613b      	str	r3, [r7, #16]
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	689b      	ldr	r3, [r3, #8]
 80063ee:	613b      	str	r3, [r7, #16]
 80063f0:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2201      	movs	r2, #1
 80063f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2200      	movs	r2, #0
 80063fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006406:	2b00      	cmp	r3, #0
 8006408:	d001      	beq.n	800640e <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800640a:	2301      	movs	r3, #1
 800640c:	e000      	b.n	8006410 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800640e:	2300      	movs	r3, #0
  }
}
 8006410:	4618      	mov	r0, r3
 8006412:	3728      	adds	r7, #40	@ 0x28
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}

08006418 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8006418:	b480      	push	{r7}
 800641a:	b083      	sub	sp, #12
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006426:	b2db      	uxtb	r3, r3
}
 8006428:	4618      	mov	r0, r3
 800642a:	370c      	adds	r7, #12
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr

08006434 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b088      	sub	sp, #32
 8006438:	af00      	add	r7, sp, #0
 800643a:	60f8      	str	r0, [r7, #12]
 800643c:	60b9      	str	r1, [r7, #8]
 800643e:	603b      	str	r3, [r7, #0]
 8006440:	4613      	mov	r3, r2
 8006442:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006444:	f7fc fede 	bl	8003204 <HAL_GetTick>
 8006448:	4602      	mov	r2, r0
 800644a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800644c:	1a9b      	subs	r3, r3, r2
 800644e:	683a      	ldr	r2, [r7, #0]
 8006450:	4413      	add	r3, r2
 8006452:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006454:	f7fc fed6 	bl	8003204 <HAL_GetTick>
 8006458:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800645a:	4b39      	ldr	r3, [pc, #228]	@ (8006540 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	015b      	lsls	r3, r3, #5
 8006460:	0d1b      	lsrs	r3, r3, #20
 8006462:	69fa      	ldr	r2, [r7, #28]
 8006464:	fb02 f303 	mul.w	r3, r2, r3
 8006468:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800646a:	e054      	b.n	8006516 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006472:	d050      	beq.n	8006516 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006474:	f7fc fec6 	bl	8003204 <HAL_GetTick>
 8006478:	4602      	mov	r2, r0
 800647a:	69bb      	ldr	r3, [r7, #24]
 800647c:	1ad3      	subs	r3, r2, r3
 800647e:	69fa      	ldr	r2, [r7, #28]
 8006480:	429a      	cmp	r2, r3
 8006482:	d902      	bls.n	800648a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006484:	69fb      	ldr	r3, [r7, #28]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d13d      	bne.n	8006506 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	685a      	ldr	r2, [r3, #4]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006498:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80064a2:	d111      	bne.n	80064c8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80064ac:	d004      	beq.n	80064b8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064b6:	d107      	bne.n	80064c8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	681a      	ldr	r2, [r3, #0]
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80064c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80064d0:	d10f      	bne.n	80064f2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	681a      	ldr	r2, [r3, #0]
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80064e0:	601a      	str	r2, [r3, #0]
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80064f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2201      	movs	r2, #1
 80064f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2200      	movs	r2, #0
 80064fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006502:	2303      	movs	r3, #3
 8006504:	e017      	b.n	8006536 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d101      	bne.n	8006510 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800650c:	2300      	movs	r3, #0
 800650e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	3b01      	subs	r3, #1
 8006514:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	689a      	ldr	r2, [r3, #8]
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	4013      	ands	r3, r2
 8006520:	68ba      	ldr	r2, [r7, #8]
 8006522:	429a      	cmp	r2, r3
 8006524:	bf0c      	ite	eq
 8006526:	2301      	moveq	r3, #1
 8006528:	2300      	movne	r3, #0
 800652a:	b2db      	uxtb	r3, r3
 800652c:	461a      	mov	r2, r3
 800652e:	79fb      	ldrb	r3, [r7, #7]
 8006530:	429a      	cmp	r2, r3
 8006532:	d19b      	bne.n	800646c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006534:	2300      	movs	r3, #0
}
 8006536:	4618      	mov	r0, r3
 8006538:	3720      	adds	r7, #32
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}
 800653e:	bf00      	nop
 8006540:	2000001c 	.word	0x2000001c

08006544 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b088      	sub	sp, #32
 8006548:	af02      	add	r7, sp, #8
 800654a:	60f8      	str	r0, [r7, #12]
 800654c:	60b9      	str	r1, [r7, #8]
 800654e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	9300      	str	r3, [sp, #0]
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	2201      	movs	r2, #1
 8006558:	2102      	movs	r1, #2
 800655a:	68f8      	ldr	r0, [r7, #12]
 800655c:	f7ff ff6a 	bl	8006434 <SPI_WaitFlagStateUntilTimeout>
 8006560:	4603      	mov	r3, r0
 8006562:	2b00      	cmp	r3, #0
 8006564:	d007      	beq.n	8006576 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800656a:	f043 0220 	orr.w	r2, r3, #32
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006572:	2303      	movs	r3, #3
 8006574:	e032      	b.n	80065dc <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006576:	4b1b      	ldr	r3, [pc, #108]	@ (80065e4 <SPI_EndRxTxTransaction+0xa0>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a1b      	ldr	r2, [pc, #108]	@ (80065e8 <SPI_EndRxTxTransaction+0xa4>)
 800657c:	fba2 2303 	umull	r2, r3, r2, r3
 8006580:	0d5b      	lsrs	r3, r3, #21
 8006582:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006586:	fb02 f303 	mul.w	r3, r2, r3
 800658a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006594:	d112      	bne.n	80065bc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	9300      	str	r3, [sp, #0]
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	2200      	movs	r2, #0
 800659e:	2180      	movs	r1, #128	@ 0x80
 80065a0:	68f8      	ldr	r0, [r7, #12]
 80065a2:	f7ff ff47 	bl	8006434 <SPI_WaitFlagStateUntilTimeout>
 80065a6:	4603      	mov	r3, r0
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d016      	beq.n	80065da <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065b0:	f043 0220 	orr.w	r2, r3, #32
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80065b8:	2303      	movs	r3, #3
 80065ba:	e00f      	b.n	80065dc <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d00a      	beq.n	80065d8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	3b01      	subs	r3, #1
 80065c6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065d2:	2b80      	cmp	r3, #128	@ 0x80
 80065d4:	d0f2      	beq.n	80065bc <SPI_EndRxTxTransaction+0x78>
 80065d6:	e000      	b.n	80065da <SPI_EndRxTxTransaction+0x96>
        break;
 80065d8:	bf00      	nop
  }

  return HAL_OK;
 80065da:	2300      	movs	r3, #0
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3718      	adds	r7, #24
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}
 80065e4:	2000001c 	.word	0x2000001c
 80065e8:	165e9f81 	.word	0x165e9f81

080065ec <memset>:
 80065ec:	4402      	add	r2, r0
 80065ee:	4603      	mov	r3, r0
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d100      	bne.n	80065f6 <memset+0xa>
 80065f4:	4770      	bx	lr
 80065f6:	f803 1b01 	strb.w	r1, [r3], #1
 80065fa:	e7f9      	b.n	80065f0 <memset+0x4>

080065fc <__libc_init_array>:
 80065fc:	b570      	push	{r4, r5, r6, lr}
 80065fe:	4d0d      	ldr	r5, [pc, #52]	@ (8006634 <__libc_init_array+0x38>)
 8006600:	4c0d      	ldr	r4, [pc, #52]	@ (8006638 <__libc_init_array+0x3c>)
 8006602:	1b64      	subs	r4, r4, r5
 8006604:	10a4      	asrs	r4, r4, #2
 8006606:	2600      	movs	r6, #0
 8006608:	42a6      	cmp	r6, r4
 800660a:	d109      	bne.n	8006620 <__libc_init_array+0x24>
 800660c:	4d0b      	ldr	r5, [pc, #44]	@ (800663c <__libc_init_array+0x40>)
 800660e:	4c0c      	ldr	r4, [pc, #48]	@ (8006640 <__libc_init_array+0x44>)
 8006610:	f000 f818 	bl	8006644 <_init>
 8006614:	1b64      	subs	r4, r4, r5
 8006616:	10a4      	asrs	r4, r4, #2
 8006618:	2600      	movs	r6, #0
 800661a:	42a6      	cmp	r6, r4
 800661c:	d105      	bne.n	800662a <__libc_init_array+0x2e>
 800661e:	bd70      	pop	{r4, r5, r6, pc}
 8006620:	f855 3b04 	ldr.w	r3, [r5], #4
 8006624:	4798      	blx	r3
 8006626:	3601      	adds	r6, #1
 8006628:	e7ee      	b.n	8006608 <__libc_init_array+0xc>
 800662a:	f855 3b04 	ldr.w	r3, [r5], #4
 800662e:	4798      	blx	r3
 8006630:	3601      	adds	r6, #1
 8006632:	e7f2      	b.n	800661a <__libc_init_array+0x1e>
 8006634:	0800814c 	.word	0x0800814c
 8006638:	0800814c 	.word	0x0800814c
 800663c:	0800814c 	.word	0x0800814c
 8006640:	08008150 	.word	0x08008150

08006644 <_init>:
 8006644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006646:	bf00      	nop
 8006648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800664a:	bc08      	pop	{r3}
 800664c:	469e      	mov	lr, r3
 800664e:	4770      	bx	lr

08006650 <_fini>:
 8006650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006652:	bf00      	nop
 8006654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006656:	bc08      	pop	{r3}
 8006658:	469e      	mov	lr, r3
 800665a:	4770      	bx	lr
