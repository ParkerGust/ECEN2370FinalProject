
ECEN2370_StarterCode_SP25.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005190  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ae8  0800533c  0800533c  0000633c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e24  08006e24  0000802c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006e24  08006e24  00007e24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e2c  08006e2c  0000802c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e2c  08006e2c  00007e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006e30  08006e30  00007e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000002c  20000000  08006e34  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000802c  2**0
                  CONTENTS
 10 .bss          00025a5c  2000002c  2000002c  0000802c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20025a88  20025a88  0000802c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000802c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e70e  00000000  00000000  0000805c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002874  00000000  00000000  0001676a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000dd0  00000000  00000000  00018fe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a72  00000000  00000000  00019db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026848  00000000  00000000  0001a822  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011e81  00000000  00000000  0004106a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e19ba  00000000  00000000  00052eeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001348a5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000037a4  00000000  00000000  001348e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  0013808c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000002c 	.word	0x2000002c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08005324 	.word	0x08005324

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000030 	.word	0x20000030
 80001e8:	08005324 	.word	0x08005324

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b988 	b.w	8000514 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	468e      	mov	lr, r1
 8000224:	4604      	mov	r4, r0
 8000226:	4688      	mov	r8, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d962      	bls.n	80002f8 <__udivmoddi4+0xdc>
 8000232:	fab2 f682 	clz	r6, r2
 8000236:	b14e      	cbz	r6, 800024c <__udivmoddi4+0x30>
 8000238:	f1c6 0320 	rsb	r3, r6, #32
 800023c:	fa01 f806 	lsl.w	r8, r1, r6
 8000240:	fa20 f303 	lsr.w	r3, r0, r3
 8000244:	40b7      	lsls	r7, r6
 8000246:	ea43 0808 	orr.w	r8, r3, r8
 800024a:	40b4      	lsls	r4, r6
 800024c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000250:	fa1f fc87 	uxth.w	ip, r7
 8000254:	fbb8 f1fe 	udiv	r1, r8, lr
 8000258:	0c23      	lsrs	r3, r4, #16
 800025a:	fb0e 8811 	mls	r8, lr, r1, r8
 800025e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000262:	fb01 f20c 	mul.w	r2, r1, ip
 8000266:	429a      	cmp	r2, r3
 8000268:	d909      	bls.n	800027e <__udivmoddi4+0x62>
 800026a:	18fb      	adds	r3, r7, r3
 800026c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000270:	f080 80ea 	bcs.w	8000448 <__udivmoddi4+0x22c>
 8000274:	429a      	cmp	r2, r3
 8000276:	f240 80e7 	bls.w	8000448 <__udivmoddi4+0x22c>
 800027a:	3902      	subs	r1, #2
 800027c:	443b      	add	r3, r7
 800027e:	1a9a      	subs	r2, r3, r2
 8000280:	b2a3      	uxth	r3, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800028e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000292:	459c      	cmp	ip, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x8e>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f100 32ff 	add.w	r2, r0, #4294967295
 800029c:	f080 80d6 	bcs.w	800044c <__udivmoddi4+0x230>
 80002a0:	459c      	cmp	ip, r3
 80002a2:	f240 80d3 	bls.w	800044c <__udivmoddi4+0x230>
 80002a6:	443b      	add	r3, r7
 80002a8:	3802      	subs	r0, #2
 80002aa:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002ae:	eba3 030c 	sub.w	r3, r3, ip
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11d      	cbz	r5, 80002be <__udivmoddi4+0xa2>
 80002b6:	40f3      	lsrs	r3, r6
 80002b8:	2200      	movs	r2, #0
 80002ba:	e9c5 3200 	strd	r3, r2, [r5]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d905      	bls.n	80002d2 <__udivmoddi4+0xb6>
 80002c6:	b10d      	cbz	r5, 80002cc <__udivmoddi4+0xb0>
 80002c8:	e9c5 0100 	strd	r0, r1, [r5]
 80002cc:	2100      	movs	r1, #0
 80002ce:	4608      	mov	r0, r1
 80002d0:	e7f5      	b.n	80002be <__udivmoddi4+0xa2>
 80002d2:	fab3 f183 	clz	r1, r3
 80002d6:	2900      	cmp	r1, #0
 80002d8:	d146      	bne.n	8000368 <__udivmoddi4+0x14c>
 80002da:	4573      	cmp	r3, lr
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xc8>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 8105 	bhi.w	80004ee <__udivmoddi4+0x2d2>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	4690      	mov	r8, r2
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e5      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f2:	e9c5 4800 	strd	r4, r8, [r5]
 80002f6:	e7e2      	b.n	80002be <__udivmoddi4+0xa2>
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f000 8090 	beq.w	800041e <__udivmoddi4+0x202>
 80002fe:	fab2 f682 	clz	r6, r2
 8000302:	2e00      	cmp	r6, #0
 8000304:	f040 80a4 	bne.w	8000450 <__udivmoddi4+0x234>
 8000308:	1a8a      	subs	r2, r1, r2
 800030a:	0c03      	lsrs	r3, r0, #16
 800030c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000310:	b280      	uxth	r0, r0
 8000312:	b2bc      	uxth	r4, r7
 8000314:	2101      	movs	r1, #1
 8000316:	fbb2 fcfe 	udiv	ip, r2, lr
 800031a:	fb0e 221c 	mls	r2, lr, ip, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb04 f20c 	mul.w	r2, r4, ip
 8000326:	429a      	cmp	r2, r3
 8000328:	d907      	bls.n	800033a <__udivmoddi4+0x11e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000330:	d202      	bcs.n	8000338 <__udivmoddi4+0x11c>
 8000332:	429a      	cmp	r2, r3
 8000334:	f200 80e0 	bhi.w	80004f8 <__udivmoddi4+0x2dc>
 8000338:	46c4      	mov	ip, r8
 800033a:	1a9b      	subs	r3, r3, r2
 800033c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000340:	fb0e 3312 	mls	r3, lr, r2, r3
 8000344:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000348:	fb02 f404 	mul.w	r4, r2, r4
 800034c:	429c      	cmp	r4, r3
 800034e:	d907      	bls.n	8000360 <__udivmoddi4+0x144>
 8000350:	18fb      	adds	r3, r7, r3
 8000352:	f102 30ff 	add.w	r0, r2, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x142>
 8000358:	429c      	cmp	r4, r3
 800035a:	f200 80ca 	bhi.w	80004f2 <__udivmoddi4+0x2d6>
 800035e:	4602      	mov	r2, r0
 8000360:	1b1b      	subs	r3, r3, r4
 8000362:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000366:	e7a5      	b.n	80002b4 <__udivmoddi4+0x98>
 8000368:	f1c1 0620 	rsb	r6, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 f706 	lsr.w	r7, r2, r6
 8000372:	431f      	orrs	r7, r3
 8000374:	fa0e f401 	lsl.w	r4, lr, r1
 8000378:	fa20 f306 	lsr.w	r3, r0, r6
 800037c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000380:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	fa1f fc87 	uxth.w	ip, r7
 800038e:	fbbe f0f9 	udiv	r0, lr, r9
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	fb09 ee10 	mls	lr, r9, r0, lr
 8000398:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800039c:	fb00 fe0c 	mul.w	lr, r0, ip
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	fa02 f201 	lsl.w	r2, r2, r1
 80003a6:	d909      	bls.n	80003bc <__udivmoddi4+0x1a0>
 80003a8:	193c      	adds	r4, r7, r4
 80003aa:	f100 3aff 	add.w	sl, r0, #4294967295
 80003ae:	f080 809c 	bcs.w	80004ea <__udivmoddi4+0x2ce>
 80003b2:	45a6      	cmp	lr, r4
 80003b4:	f240 8099 	bls.w	80004ea <__udivmoddi4+0x2ce>
 80003b8:	3802      	subs	r0, #2
 80003ba:	443c      	add	r4, r7
 80003bc:	eba4 040e 	sub.w	r4, r4, lr
 80003c0:	fa1f fe83 	uxth.w	lr, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003d0:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d4:	45a4      	cmp	ip, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1ce>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f103 3eff 	add.w	lr, r3, #4294967295
 80003de:	f080 8082 	bcs.w	80004e6 <__udivmoddi4+0x2ca>
 80003e2:	45a4      	cmp	ip, r4
 80003e4:	d97f      	bls.n	80004e6 <__udivmoddi4+0x2ca>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	443c      	add	r4, r7
 80003ea:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ee:	eba4 040c 	sub.w	r4, r4, ip
 80003f2:	fba0 ec02 	umull	lr, ip, r0, r2
 80003f6:	4564      	cmp	r4, ip
 80003f8:	4673      	mov	r3, lr
 80003fa:	46e1      	mov	r9, ip
 80003fc:	d362      	bcc.n	80004c4 <__udivmoddi4+0x2a8>
 80003fe:	d05f      	beq.n	80004c0 <__udivmoddi4+0x2a4>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x1fe>
 8000402:	ebb8 0203 	subs.w	r2, r8, r3
 8000406:	eb64 0409 	sbc.w	r4, r4, r9
 800040a:	fa04 f606 	lsl.w	r6, r4, r6
 800040e:	fa22 f301 	lsr.w	r3, r2, r1
 8000412:	431e      	orrs	r6, r3
 8000414:	40cc      	lsrs	r4, r1
 8000416:	e9c5 6400 	strd	r6, r4, [r5]
 800041a:	2100      	movs	r1, #0
 800041c:	e74f      	b.n	80002be <__udivmoddi4+0xa2>
 800041e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000422:	0c01      	lsrs	r1, r0, #16
 8000424:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000428:	b280      	uxth	r0, r0
 800042a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800042e:	463b      	mov	r3, r7
 8000430:	4638      	mov	r0, r7
 8000432:	463c      	mov	r4, r7
 8000434:	46b8      	mov	r8, r7
 8000436:	46be      	mov	lr, r7
 8000438:	2620      	movs	r6, #32
 800043a:	fbb1 f1f7 	udiv	r1, r1, r7
 800043e:	eba2 0208 	sub.w	r2, r2, r8
 8000442:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000446:	e766      	b.n	8000316 <__udivmoddi4+0xfa>
 8000448:	4601      	mov	r1, r0
 800044a:	e718      	b.n	800027e <__udivmoddi4+0x62>
 800044c:	4610      	mov	r0, r2
 800044e:	e72c      	b.n	80002aa <__udivmoddi4+0x8e>
 8000450:	f1c6 0220 	rsb	r2, r6, #32
 8000454:	fa2e f302 	lsr.w	r3, lr, r2
 8000458:	40b7      	lsls	r7, r6
 800045a:	40b1      	lsls	r1, r6
 800045c:	fa20 f202 	lsr.w	r2, r0, r2
 8000460:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000464:	430a      	orrs	r2, r1
 8000466:	fbb3 f8fe 	udiv	r8, r3, lr
 800046a:	b2bc      	uxth	r4, r7
 800046c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000470:	0c11      	lsrs	r1, r2, #16
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb08 f904 	mul.w	r9, r8, r4
 800047a:	40b0      	lsls	r0, r6
 800047c:	4589      	cmp	r9, r1
 800047e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000482:	b280      	uxth	r0, r0
 8000484:	d93e      	bls.n	8000504 <__udivmoddi4+0x2e8>
 8000486:	1879      	adds	r1, r7, r1
 8000488:	f108 3cff 	add.w	ip, r8, #4294967295
 800048c:	d201      	bcs.n	8000492 <__udivmoddi4+0x276>
 800048e:	4589      	cmp	r9, r1
 8000490:	d81f      	bhi.n	80004d2 <__udivmoddi4+0x2b6>
 8000492:	eba1 0109 	sub.w	r1, r1, r9
 8000496:	fbb1 f9fe 	udiv	r9, r1, lr
 800049a:	fb09 f804 	mul.w	r8, r9, r4
 800049e:	fb0e 1119 	mls	r1, lr, r9, r1
 80004a2:	b292      	uxth	r2, r2
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	4542      	cmp	r2, r8
 80004aa:	d229      	bcs.n	8000500 <__udivmoddi4+0x2e4>
 80004ac:	18ba      	adds	r2, r7, r2
 80004ae:	f109 31ff 	add.w	r1, r9, #4294967295
 80004b2:	d2c4      	bcs.n	800043e <__udivmoddi4+0x222>
 80004b4:	4542      	cmp	r2, r8
 80004b6:	d2c2      	bcs.n	800043e <__udivmoddi4+0x222>
 80004b8:	f1a9 0102 	sub.w	r1, r9, #2
 80004bc:	443a      	add	r2, r7
 80004be:	e7be      	b.n	800043e <__udivmoddi4+0x222>
 80004c0:	45f0      	cmp	r8, lr
 80004c2:	d29d      	bcs.n	8000400 <__udivmoddi4+0x1e4>
 80004c4:	ebbe 0302 	subs.w	r3, lr, r2
 80004c8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004cc:	3801      	subs	r0, #1
 80004ce:	46e1      	mov	r9, ip
 80004d0:	e796      	b.n	8000400 <__udivmoddi4+0x1e4>
 80004d2:	eba7 0909 	sub.w	r9, r7, r9
 80004d6:	4449      	add	r1, r9
 80004d8:	f1a8 0c02 	sub.w	ip, r8, #2
 80004dc:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e0:	fb09 f804 	mul.w	r8, r9, r4
 80004e4:	e7db      	b.n	800049e <__udivmoddi4+0x282>
 80004e6:	4673      	mov	r3, lr
 80004e8:	e77f      	b.n	80003ea <__udivmoddi4+0x1ce>
 80004ea:	4650      	mov	r0, sl
 80004ec:	e766      	b.n	80003bc <__udivmoddi4+0x1a0>
 80004ee:	4608      	mov	r0, r1
 80004f0:	e6fd      	b.n	80002ee <__udivmoddi4+0xd2>
 80004f2:	443b      	add	r3, r7
 80004f4:	3a02      	subs	r2, #2
 80004f6:	e733      	b.n	8000360 <__udivmoddi4+0x144>
 80004f8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004fc:	443b      	add	r3, r7
 80004fe:	e71c      	b.n	800033a <__udivmoddi4+0x11e>
 8000500:	4649      	mov	r1, r9
 8000502:	e79c      	b.n	800043e <__udivmoddi4+0x222>
 8000504:	eba1 0109 	sub.w	r1, r1, r9
 8000508:	46c4      	mov	ip, r8
 800050a:	fbb1 f9fe 	udiv	r9, r1, lr
 800050e:	fb09 f804 	mul.w	r8, r9, r4
 8000512:	e7c4      	b.n	800049e <__udivmoddi4+0x282>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <ApplicationInit>:
extern void initialise_monitor_handles(void); 

static STMPE811_TouchData StaticTouchData;

void ApplicationInit(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 800051c:	f001 fdf8 	bl	8002110 <initialise_monitor_handles>
    LTCD__Init();
 8000520:	f000 f96e 	bl	8000800 <LTCD__Init>
    LTCD_Layer_Init(0);
 8000524:	2000      	movs	r0, #0
 8000526:	f000 f92b 	bl	8000780 <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_WHITE);
 800052a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800052e:	2000      	movs	r0, #0
 8000530:	f000 fa36 	bl	80009a0 <LCD_Clear>
	InitializeLCDTouch();
 8000534:	f000 fb0c 	bl	8000b50 <InitializeLCDTouch>
	startGame();
 8000538:	f000 f802 	bl	8000540 <startGame>
}
 800053c:	bf00      	nop
 800053e:	bd80      	pop	{r7, pc}

08000540 <startGame>:

void startGame(void){
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
	Screen1_Display();
 8000544:	f000 fb1c 	bl	8000b80 <Screen1_Display>
	checkPlayerMode();
 8000548:	f000 f816 	bl	8000578 <checkPlayerMode>
	Screen2_StartTimer();
 800054c:	f000 fce8 	bl	8000f20 <Screen2_StartTimer>
	playing = true;
 8000550:	4b04      	ldr	r3, [pc, #16]	@ (8000564 <startGame+0x24>)
 8000552:	2201      	movs	r2, #1
 8000554:	701a      	strb	r2, [r3, #0]
	Screen2_NewGame();
 8000556:	f000 fbcd 	bl	8000cf4 <Screen2_NewGame>
	playGame();
 800055a:	f000 f805 	bl	8000568 <playGame>
}
 800055e:	bf00      	nop
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	20000048 	.word	0x20000048

08000568 <playGame>:

void playGame(){
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
	Screen2_Display();
 800056c:	f000 fbec 	bl	8000d48 <Screen2_Display>
	Screen2_Move();
 8000570:	f000 fce4 	bl	8000f3c <Screen2_Move>
}
 8000574:	bf00      	nop
 8000576:	bd80      	pop	{r7, pc}

08000578 <checkPlayerMode>:

void checkPlayerMode(void){
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
	STMPE811_TouchData touch;
	touch.pressed = STMPE811_State_Released;
 800057e:	2301      	movs	r3, #1
 8000580:	713b      	strb	r3, [r7, #4]
	while(touch.pressed == STMPE811_State_Released){
 8000582:	e003      	b.n	800058c <checkPlayerMode+0x14>
		returnTouchStateAndLocation(&touch);
 8000584:	463b      	mov	r3, r7
 8000586:	4618      	mov	r0, r3
 8000588:	f000 faed 	bl	8000b66 <returnTouchStateAndLocation>
	while(touch.pressed == STMPE811_State_Released){
 800058c:	793b      	ldrb	r3, [r7, #4]
 800058e:	2b01      	cmp	r3, #1
 8000590:	d0f8      	beq.n	8000584 <checkPlayerMode+0xc>
	}
	if (touch.x < LCD_PIXEL_WIDTH/2){
 8000592:	883b      	ldrh	r3, [r7, #0]
 8000594:	2b77      	cmp	r3, #119	@ 0x77
 8000596:	d802      	bhi.n	800059e <checkPlayerMode+0x26>
		TwoPlayerMode = LEFT_TOUCH;
 8000598:	4b04      	ldr	r3, [pc, #16]	@ (80005ac <checkPlayerMode+0x34>)
 800059a:	2200      	movs	r2, #0
 800059c:	701a      	strb	r2, [r3, #0]
	}
	TwoPlayerMode = RIGHT_TOUCH;
 800059e:	4b03      	ldr	r3, [pc, #12]	@ (80005ac <checkPlayerMode+0x34>)
 80005a0:	2201      	movs	r2, #1
 80005a2:	701a      	strb	r2, [r3, #0]
}
 80005a4:	bf00      	nop
 80005a6:	3708      	adds	r7, #8
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	20000049 	.word	0x20000049

080005b0 <EXTI0_IRQHandler>:
		}
	}
}

	
void EXTI0_IRQHandler(){
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 80005b4:	2006      	movs	r0, #6
 80005b6:	f001 ffae 	bl	8002516 <HAL_NVIC_DisableIRQ>
	if(playing){
 80005ba:	4b0b      	ldr	r3, [pc, #44]	@ (80005e8 <EXTI0_IRQHandler+0x38>)
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d002      	beq.n	80005c8 <EXTI0_IRQHandler+0x18>
		Screen2_Drop();
 80005c2:	f000 fcb4 	bl	8000f2e <Screen2_Drop>
 80005c6:	e006      	b.n	80005d6 <EXTI0_IRQHandler+0x26>
	}
	else{
		playing = true;
 80005c8:	4b07      	ldr	r3, [pc, #28]	@ (80005e8 <EXTI0_IRQHandler+0x38>)
 80005ca:	2201      	movs	r2, #1
 80005cc:	701a      	strb	r2, [r3, #0]
		Screen2_NewGame();
 80005ce:	f000 fb91 	bl	8000cf4 <Screen2_NewGame>
		Screen2_Display();
 80005d2:	f000 fbb9 	bl	8000d48 <Screen2_Display>
	}
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);
 80005d6:	4b05      	ldr	r3, [pc, #20]	@ (80005ec <EXTI0_IRQHandler+0x3c>)
 80005d8:	2201      	movs	r2, #1
 80005da:	615a      	str	r2, [r3, #20]
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80005dc:	2006      	movs	r0, #6
 80005de:	f001 ff8c 	bl	80024fa <HAL_NVIC_EnableIRQ>
}
 80005e2:	bf00      	nop
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	20000048 	.word	0x20000048
 80005ec:	40013c00 	.word	0x40013c00

080005f0 <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b08c      	sub	sp, #48	@ 0x30
 80005f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80005f6:	2300      	movs	r3, #0
 80005f8:	61bb      	str	r3, [r7, #24]
 80005fa:	4b5a      	ldr	r3, [pc, #360]	@ (8000764 <LCD_GPIO_Init+0x174>)
 80005fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005fe:	4a59      	ldr	r2, [pc, #356]	@ (8000764 <LCD_GPIO_Init+0x174>)
 8000600:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000604:	6453      	str	r3, [r2, #68]	@ 0x44
 8000606:	4b57      	ldr	r3, [pc, #348]	@ (8000764 <LCD_GPIO_Init+0x174>)
 8000608:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800060a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800060e:	61bb      	str	r3, [r7, #24]
 8000610:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000612:	2300      	movs	r3, #0
 8000614:	617b      	str	r3, [r7, #20]
 8000616:	4b53      	ldr	r3, [pc, #332]	@ (8000764 <LCD_GPIO_Init+0x174>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061a:	4a52      	ldr	r2, [pc, #328]	@ (8000764 <LCD_GPIO_Init+0x174>)
 800061c:	f043 0301 	orr.w	r3, r3, #1
 8000620:	6313      	str	r3, [r2, #48]	@ 0x30
 8000622:	4b50      	ldr	r3, [pc, #320]	@ (8000764 <LCD_GPIO_Init+0x174>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000626:	f003 0301 	and.w	r3, r3, #1
 800062a:	617b      	str	r3, [r7, #20]
 800062c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800062e:	2300      	movs	r3, #0
 8000630:	613b      	str	r3, [r7, #16]
 8000632:	4b4c      	ldr	r3, [pc, #304]	@ (8000764 <LCD_GPIO_Init+0x174>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000636:	4a4b      	ldr	r2, [pc, #300]	@ (8000764 <LCD_GPIO_Init+0x174>)
 8000638:	f043 0302 	orr.w	r3, r3, #2
 800063c:	6313      	str	r3, [r2, #48]	@ 0x30
 800063e:	4b49      	ldr	r3, [pc, #292]	@ (8000764 <LCD_GPIO_Init+0x174>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000642:	f003 0302 	and.w	r3, r3, #2
 8000646:	613b      	str	r3, [r7, #16]
 8000648:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800064a:	2300      	movs	r3, #0
 800064c:	60fb      	str	r3, [r7, #12]
 800064e:	4b45      	ldr	r3, [pc, #276]	@ (8000764 <LCD_GPIO_Init+0x174>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000652:	4a44      	ldr	r2, [pc, #272]	@ (8000764 <LCD_GPIO_Init+0x174>)
 8000654:	f043 0304 	orr.w	r3, r3, #4
 8000658:	6313      	str	r3, [r2, #48]	@ 0x30
 800065a:	4b42      	ldr	r3, [pc, #264]	@ (8000764 <LCD_GPIO_Init+0x174>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065e:	f003 0304 	and.w	r3, r3, #4
 8000662:	60fb      	str	r3, [r7, #12]
 8000664:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000666:	2300      	movs	r3, #0
 8000668:	60bb      	str	r3, [r7, #8]
 800066a:	4b3e      	ldr	r3, [pc, #248]	@ (8000764 <LCD_GPIO_Init+0x174>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800066e:	4a3d      	ldr	r2, [pc, #244]	@ (8000764 <LCD_GPIO_Init+0x174>)
 8000670:	f043 0308 	orr.w	r3, r3, #8
 8000674:	6313      	str	r3, [r2, #48]	@ 0x30
 8000676:	4b3b      	ldr	r3, [pc, #236]	@ (8000764 <LCD_GPIO_Init+0x174>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067a:	f003 0308 	and.w	r3, r3, #8
 800067e:	60bb      	str	r3, [r7, #8]
 8000680:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000682:	2300      	movs	r3, #0
 8000684:	607b      	str	r3, [r7, #4]
 8000686:	4b37      	ldr	r3, [pc, #220]	@ (8000764 <LCD_GPIO_Init+0x174>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068a:	4a36      	ldr	r2, [pc, #216]	@ (8000764 <LCD_GPIO_Init+0x174>)
 800068c:	f043 0320 	orr.w	r3, r3, #32
 8000690:	6313      	str	r3, [r2, #48]	@ 0x30
 8000692:	4b34      	ldr	r3, [pc, #208]	@ (8000764 <LCD_GPIO_Init+0x174>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000696:	f003 0320 	and.w	r3, r3, #32
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800069e:	2300      	movs	r3, #0
 80006a0:	603b      	str	r3, [r7, #0]
 80006a2:	4b30      	ldr	r3, [pc, #192]	@ (8000764 <LCD_GPIO_Init+0x174>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a6:	4a2f      	ldr	r2, [pc, #188]	@ (8000764 <LCD_GPIO_Init+0x174>)
 80006a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80006ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ae:	4b2d      	ldr	r3, [pc, #180]	@ (8000764 <LCD_GPIO_Init+0x174>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80006b6:	603b      	str	r3, [r7, #0]
 80006b8:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 80006ba:	f641 0358 	movw	r3, #6232	@ 0x1858
 80006be:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80006c0:	2302      	movs	r3, #2
 80006c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80006c4:	2300      	movs	r3, #0
 80006c6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80006c8:	2302      	movs	r3, #2
 80006ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 80006cc:	230e      	movs	r3, #14
 80006ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80006d0:	f107 031c 	add.w	r3, r7, #28
 80006d4:	4619      	mov	r1, r3
 80006d6:	4824      	ldr	r0, [pc, #144]	@ (8000768 <LCD_GPIO_Init+0x178>)
 80006d8:	f001 ff38 	bl	800254c <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 80006dc:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80006e0:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80006e2:	f107 031c 	add.w	r3, r7, #28
 80006e6:	4619      	mov	r1, r3
 80006e8:	4820      	ldr	r0, [pc, #128]	@ (800076c <LCD_GPIO_Init+0x17c>)
 80006ea:	f001 ff2f 	bl	800254c <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 80006ee:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80006f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80006f4:	f107 031c 	add.w	r3, r7, #28
 80006f8:	4619      	mov	r1, r3
 80006fa:	481d      	ldr	r0, [pc, #116]	@ (8000770 <LCD_GPIO_Init+0x180>)
 80006fc:	f001 ff26 	bl	800254c <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8000700:	2348      	movs	r3, #72	@ 0x48
 8000702:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8000704:	f107 031c 	add.w	r3, r7, #28
 8000708:	4619      	mov	r1, r3
 800070a:	481a      	ldr	r0, [pc, #104]	@ (8000774 <LCD_GPIO_Init+0x184>)
 800070c:	f001 ff1e 	bl	800254c <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8000710:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000714:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8000716:	f107 031c 	add.w	r3, r7, #28
 800071a:	4619      	mov	r1, r3
 800071c:	4816      	ldr	r0, [pc, #88]	@ (8000778 <LCD_GPIO_Init+0x188>)
 800071e:	f001 ff15 	bl	800254c <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8000722:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8000726:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000728:	f107 031c 	add.w	r3, r7, #28
 800072c:	4619      	mov	r1, r3
 800072e:	4813      	ldr	r0, [pc, #76]	@ (800077c <LCD_GPIO_Init+0x18c>)
 8000730:	f001 ff0c 	bl	800254c <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8000734:	2303      	movs	r3, #3
 8000736:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8000738:	2309      	movs	r3, #9
 800073a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800073c:	f107 031c 	add.w	r3, r7, #28
 8000740:	4619      	mov	r1, r3
 8000742:	480a      	ldr	r0, [pc, #40]	@ (800076c <LCD_GPIO_Init+0x17c>)
 8000744:	f001 ff02 	bl	800254c <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8000748:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800074c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800074e:	f107 031c 	add.w	r3, r7, #28
 8000752:	4619      	mov	r1, r3
 8000754:	4809      	ldr	r0, [pc, #36]	@ (800077c <LCD_GPIO_Init+0x18c>)
 8000756:	f001 fef9 	bl	800254c <HAL_GPIO_Init>
}
 800075a:	bf00      	nop
 800075c:	3730      	adds	r7, #48	@ 0x30
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40023800 	.word	0x40023800
 8000768:	40020000 	.word	0x40020000
 800076c:	40020400 	.word	0x40020400
 8000770:	40020800 	.word	0x40020800
 8000774:	40020c00 	.word	0x40020c00
 8000778:	40021400 	.word	0x40021400
 800077c:	40021800 	.word	0x40021800

08000780 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b090      	sub	sp, #64	@ 0x40
 8000784:	af00      	add	r7, sp, #0
 8000786:	4603      	mov	r3, r0
 8000788:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 800078a:	2300      	movs	r3, #0
 800078c:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 800078e:	23f0      	movs	r3, #240	@ 0xf0
 8000790:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 8000792:	2300      	movs	r3, #0
 8000794:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 8000796:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800079a:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 800079c:	2302      	movs	r3, #2
 800079e:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 80007a0:	23ff      	movs	r3, #255	@ 0xff
 80007a2:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 80007a4:	2300      	movs	r3, #0
 80007a6:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80007a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007ac:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80007ae:	2305      	movs	r3, #5
 80007b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 80007b2:	79fb      	ldrb	r3, [r7, #7]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d101      	bne.n	80007bc <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 80007b8:	4b0f      	ldr	r3, [pc, #60]	@ (80007f8 <LTCD_Layer_Init+0x78>)
 80007ba:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 80007bc:	23f0      	movs	r3, #240	@ 0xf0
 80007be:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 80007c0:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80007c4:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 80007c6:	2300      	movs	r3, #0
 80007c8:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 80007cc:	2300      	movs	r3, #0
 80007ce:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 80007d2:	2300      	movs	r3, #0
 80007d4:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 80007d8:	79fa      	ldrb	r2, [r7, #7]
 80007da:	f107 030c 	add.w	r3, r7, #12
 80007de:	4619      	mov	r1, r3
 80007e0:	4806      	ldr	r0, [pc, #24]	@ (80007fc <LTCD_Layer_Init+0x7c>)
 80007e2:	f003 fa79 	bl	8003cd8 <HAL_LTDC_ConfigLayer>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 80007ec:	f000 f9aa 	bl	8000b44 <LCD_Error_Handler>
	}
}
 80007f0:	bf00      	nop
 80007f2:	3740      	adds	r7, #64	@ 0x40
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	20000128 	.word	0x20000128
 80007fc:	2000004c 	.word	0x2000004c

08000800 <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 8000804:	4b2a      	ldr	r3, [pc, #168]	@ (80008b0 <LTCD__Init+0xb0>)
 8000806:	4a2b      	ldr	r2, [pc, #172]	@ (80008b4 <LTCD__Init+0xb4>)
 8000808:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 800080a:	4b29      	ldr	r3, [pc, #164]	@ (80008b0 <LTCD__Init+0xb0>)
 800080c:	2209      	movs	r2, #9
 800080e:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 8000810:	4b27      	ldr	r3, [pc, #156]	@ (80008b0 <LTCD__Init+0xb0>)
 8000812:	2201      	movs	r2, #1
 8000814:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 8000816:	4b26      	ldr	r3, [pc, #152]	@ (80008b0 <LTCD__Init+0xb0>)
 8000818:	221d      	movs	r2, #29
 800081a:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 800081c:	4b24      	ldr	r3, [pc, #144]	@ (80008b0 <LTCD__Init+0xb0>)
 800081e:	2203      	movs	r2, #3
 8000820:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 8000822:	4b23      	ldr	r3, [pc, #140]	@ (80008b0 <LTCD__Init+0xb0>)
 8000824:	f240 120d 	movw	r2, #269	@ 0x10d
 8000828:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 800082a:	4b21      	ldr	r3, [pc, #132]	@ (80008b0 <LTCD__Init+0xb0>)
 800082c:	f240 1243 	movw	r2, #323	@ 0x143
 8000830:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 8000832:	4b1f      	ldr	r3, [pc, #124]	@ (80008b0 <LTCD__Init+0xb0>)
 8000834:	f240 1217 	movw	r2, #279	@ 0x117
 8000838:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 800083a:	4b1d      	ldr	r3, [pc, #116]	@ (80008b0 <LTCD__Init+0xb0>)
 800083c:	f240 1247 	movw	r2, #327	@ 0x147
 8000840:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 8000842:	4b1b      	ldr	r3, [pc, #108]	@ (80008b0 <LTCD__Init+0xb0>)
 8000844:	2200      	movs	r2, #0
 8000846:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 800084a:	4b19      	ldr	r3, [pc, #100]	@ (80008b0 <LTCD__Init+0xb0>)
 800084c:	2200      	movs	r2, #0
 800084e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 8000852:	4b17      	ldr	r3, [pc, #92]	@ (80008b0 <LTCD__Init+0xb0>)
 8000854:	2200      	movs	r2, #0
 8000856:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800085a:	4b17      	ldr	r3, [pc, #92]	@ (80008b8 <LTCD__Init+0xb8>)
 800085c:	2208      	movs	r2, #8
 800085e:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000860:	4b15      	ldr	r3, [pc, #84]	@ (80008b8 <LTCD__Init+0xb8>)
 8000862:	22c0      	movs	r2, #192	@ 0xc0
 8000864:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8000866:	4b14      	ldr	r3, [pc, #80]	@ (80008b8 <LTCD__Init+0xb8>)
 8000868:	2204      	movs	r2, #4
 800086a:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800086c:	4b12      	ldr	r3, [pc, #72]	@ (80008b8 <LTCD__Init+0xb8>)
 800086e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000872:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8000874:	4810      	ldr	r0, [pc, #64]	@ (80008b8 <LTCD__Init+0xb8>)
 8000876:	f004 f889 	bl	800498c <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800087a:	4b0d      	ldr	r3, [pc, #52]	@ (80008b0 <LTCD__Init+0xb0>)
 800087c:	2200      	movs	r2, #0
 800087e:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000880:	4b0b      	ldr	r3, [pc, #44]	@ (80008b0 <LTCD__Init+0xb0>)
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000886:	4b0a      	ldr	r3, [pc, #40]	@ (80008b0 <LTCD__Init+0xb0>)
 8000888:	2200      	movs	r2, #0
 800088a:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800088c:	4b08      	ldr	r3, [pc, #32]	@ (80008b0 <LTCD__Init+0xb0>)
 800088e:	2200      	movs	r2, #0
 8000890:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 8000892:	f7ff fead 	bl	80005f0 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000896:	4806      	ldr	r0, [pc, #24]	@ (80008b0 <LTCD__Init+0xb0>)
 8000898:	f003 f94e 	bl	8003b38 <HAL_LTDC_Init>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 80008a2:	f000 f94f 	bl	8000b44 <LCD_Error_Handler>
	 }

	ili9341_Init();
 80008a6:	f000 fb50 	bl	8000f4a <ili9341_Init>
}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	2000004c 	.word	0x2000004c
 80008b4:	40016800 	.word	0x40016800
 80008b8:	200000f4 	.word	0x200000f4

080008bc <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4603      	mov	r3, r0
 80008c4:	80fb      	strh	r3, [r7, #6]
 80008c6:	460b      	mov	r3, r1
 80008c8:	80bb      	strh	r3, [r7, #4]
 80008ca:	4613      	mov	r3, r2
 80008cc:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 80008ce:	88ba      	ldrh	r2, [r7, #4]
 80008d0:	4613      	mov	r3, r2
 80008d2:	011b      	lsls	r3, r3, #4
 80008d4:	1a9b      	subs	r3, r3, r2
 80008d6:	011b      	lsls	r3, r3, #4
 80008d8:	461a      	mov	r2, r3
 80008da:	88fb      	ldrh	r3, [r7, #6]
 80008dc:	4413      	add	r3, r2
 80008de:	4905      	ldr	r1, [pc, #20]	@ (80008f4 <LCD_Draw_Pixel+0x38>)
 80008e0:	887a      	ldrh	r2, [r7, #2]
 80008e2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 80008e6:	bf00      	nop
 80008e8:	370c      	adds	r7, #12
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	20000128 	.word	0x20000128

080008f8 <LCD_Draw_Circle_Fill>:
 * These functions are simple examples. Most computer graphics like OpenGl and stm's graphics library use a state machine. Where you first call some function like SetColor(color), SetPosition(x,y), then DrawSqure(size)
 * Instead all of these are explicit where color, size, and position are passed in.
 * There is tons of ways to handle drawing. I dont think it matters too much.
 */
void LCD_Draw_Circle_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t radius, uint16_t color)
{
 80008f8:	b590      	push	{r4, r7, lr}
 80008fa:	b085      	sub	sp, #20
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	4604      	mov	r4, r0
 8000900:	4608      	mov	r0, r1
 8000902:	4611      	mov	r1, r2
 8000904:	461a      	mov	r2, r3
 8000906:	4623      	mov	r3, r4
 8000908:	80fb      	strh	r3, [r7, #6]
 800090a:	4603      	mov	r3, r0
 800090c:	80bb      	strh	r3, [r7, #4]
 800090e:	460b      	mov	r3, r1
 8000910:	807b      	strh	r3, [r7, #2]
 8000912:	4613      	mov	r3, r2
 8000914:	803b      	strh	r3, [r7, #0]
    for(int16_t y=-radius; y<=radius; y++)
 8000916:	887b      	ldrh	r3, [r7, #2]
 8000918:	425b      	negs	r3, r3
 800091a:	b29b      	uxth	r3, r3
 800091c:	81fb      	strh	r3, [r7, #14]
 800091e:	e034      	b.n	800098a <LCD_Draw_Circle_Fill+0x92>
    {
        for(int16_t x=-radius; x<=radius; x++)
 8000920:	887b      	ldrh	r3, [r7, #2]
 8000922:	425b      	negs	r3, r3
 8000924:	b29b      	uxth	r3, r3
 8000926:	81bb      	strh	r3, [r7, #12]
 8000928:	e024      	b.n	8000974 <LCD_Draw_Circle_Fill+0x7c>
        {
            if(x*x+y*y <= radius*radius)
 800092a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800092e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000932:	fb03 f202 	mul.w	r2, r3, r2
 8000936:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800093a:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 800093e:	fb01 f303 	mul.w	r3, r1, r3
 8000942:	441a      	add	r2, r3
 8000944:	887b      	ldrh	r3, [r7, #2]
 8000946:	8879      	ldrh	r1, [r7, #2]
 8000948:	fb01 f303 	mul.w	r3, r1, r3
 800094c:	429a      	cmp	r2, r3
 800094e:	dc0b      	bgt.n	8000968 <LCD_Draw_Circle_Fill+0x70>
            {
            	LCD_Draw_Pixel(x+Xpos, y+Ypos, color);
 8000950:	89ba      	ldrh	r2, [r7, #12]
 8000952:	88fb      	ldrh	r3, [r7, #6]
 8000954:	4413      	add	r3, r2
 8000956:	b298      	uxth	r0, r3
 8000958:	89fa      	ldrh	r2, [r7, #14]
 800095a:	88bb      	ldrh	r3, [r7, #4]
 800095c:	4413      	add	r3, r2
 800095e:	b29b      	uxth	r3, r3
 8000960:	883a      	ldrh	r2, [r7, #0]
 8000962:	4619      	mov	r1, r3
 8000964:	f7ff ffaa 	bl	80008bc <LCD_Draw_Pixel>
        for(int16_t x=-radius; x<=radius; x++)
 8000968:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800096c:	b29b      	uxth	r3, r3
 800096e:	3301      	adds	r3, #1
 8000970:	b29b      	uxth	r3, r3
 8000972:	81bb      	strh	r3, [r7, #12]
 8000974:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000978:	887b      	ldrh	r3, [r7, #2]
 800097a:	429a      	cmp	r2, r3
 800097c:	ddd5      	ble.n	800092a <LCD_Draw_Circle_Fill+0x32>
    for(int16_t y=-radius; y<=radius; y++)
 800097e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000982:	b29b      	uxth	r3, r3
 8000984:	3301      	adds	r3, #1
 8000986:	b29b      	uxth	r3, r3
 8000988:	81fb      	strh	r3, [r7, #14]
 800098a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800098e:	887b      	ldrh	r3, [r7, #2]
 8000990:	429a      	cmp	r2, r3
 8000992:	ddc5      	ble.n	8000920 <LCD_Draw_Circle_Fill+0x28>
            }
        }
    }
}
 8000994:	bf00      	nop
 8000996:	bf00      	nop
 8000998:	3714      	adds	r7, #20
 800099a:	46bd      	mov	sp, r7
 800099c:	bd90      	pop	{r4, r7, pc}
	...

080009a0 <LCD_Clear>:
	  LCD_Draw_Pixel(x, i+y, color);
  }
}

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b085      	sub	sp, #20
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	4603      	mov	r3, r0
 80009a8:	460a      	mov	r2, r1
 80009aa:	71fb      	strb	r3, [r7, #7]
 80009ac:	4613      	mov	r3, r2
 80009ae:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 80009b0:	79fb      	ldrb	r3, [r7, #7]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d10e      	bne.n	80009d4 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 80009b6:	2300      	movs	r3, #0
 80009b8:	60fb      	str	r3, [r7, #12]
 80009ba:	e007      	b.n	80009cc <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 80009bc:	4908      	ldr	r1, [pc, #32]	@ (80009e0 <LCD_Clear+0x40>)
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	88ba      	ldrh	r2, [r7, #4]
 80009c2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	3301      	adds	r3, #1
 80009ca:	60fb      	str	r3, [r7, #12]
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 80009d2:	d3f3      	bcc.n	80009bc <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 80009d4:	bf00      	nop
 80009d6:	3714      	adds	r7, #20
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr
 80009e0:	20000128 	.word	0x20000128

080009e4 <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 80009ee:	4a04      	ldr	r2, [pc, #16]	@ (8000a00 <LCD_SetTextColor+0x1c>)
 80009f0:	88fb      	ldrh	r3, [r7, #6]
 80009f2:	8013      	strh	r3, [r2, #0]
}
 80009f4:	bf00      	nop
 80009f6:	370c      	adds	r7, #12
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr
 8000a00:	20000000 	.word	0x20000000

08000a04 <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8000a0c:	4a04      	ldr	r2, [pc, #16]	@ (8000a20 <LCD_SetFont+0x1c>)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	6013      	str	r3, [r2, #0]
}
 8000a12:	bf00      	nop
 8000a14:	370c      	adds	r7, #12
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	20000124 	.word	0x20000124

08000a24 <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	603a      	str	r2, [r7, #0]
 8000a2e:	80fb      	strh	r3, [r7, #6]
 8000a30:	460b      	mov	r3, r1
 8000a32:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 8000a34:	2300      	movs	r3, #0
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	2300      	movs	r3, #0
 8000a3a:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	e04c      	b.n	8000adc <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000a42:	2300      	movs	r3, #0
 8000a44:	60bb      	str	r3, [r7, #8]
 8000a46:	e03f      	b.n	8000ac8 <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	005b      	lsls	r3, r3, #1
 8000a4c:	683a      	ldr	r2, [r7, #0]
 8000a4e:	4413      	add	r3, r2
 8000a50:	881b      	ldrh	r3, [r3, #0]
 8000a52:	4619      	mov	r1, r3
 8000a54:	4b27      	ldr	r3, [pc, #156]	@ (8000af4 <LCD_Draw_Char+0xd0>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	889b      	ldrh	r3, [r3, #4]
 8000a5a:	4a27      	ldr	r2, [pc, #156]	@ (8000af8 <LCD_Draw_Char+0xd4>)
 8000a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8000a60:	08db      	lsrs	r3, r3, #3
 8000a62:	b29b      	uxth	r3, r3
 8000a64:	00db      	lsls	r3, r3, #3
 8000a66:	2280      	movs	r2, #128	@ 0x80
 8000a68:	409a      	lsls	r2, r3
 8000a6a:	68bb      	ldr	r3, [r7, #8]
 8000a6c:	fa42 f303 	asr.w	r3, r2, r3
 8000a70:	400b      	ands	r3, r1
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d104      	bne.n	8000a80 <LCD_Draw_Char+0x5c>
 8000a76:	4b1f      	ldr	r3, [pc, #124]	@ (8000af4 <LCD_Draw_Char+0xd0>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	889b      	ldrh	r3, [r3, #4]
 8000a7c:	2b0c      	cmp	r3, #12
 8000a7e:	d920      	bls.n	8000ac2 <LCD_Draw_Char+0x9e>
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	005b      	lsls	r3, r3, #1
 8000a84:	683a      	ldr	r2, [r7, #0]
 8000a86:	4413      	add	r3, r2
 8000a88:	881b      	ldrh	r3, [r3, #0]
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	fa42 f303 	asr.w	r3, r2, r3
 8000a92:	f003 0301 	and.w	r3, r3, #1
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d104      	bne.n	8000aa4 <LCD_Draw_Char+0x80>
 8000a9a:	4b16      	ldr	r3, [pc, #88]	@ (8000af4 <LCD_Draw_Char+0xd0>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	889b      	ldrh	r3, [r3, #4]
 8000aa0:	2b0c      	cmp	r3, #12
 8000aa2:	d80e      	bhi.n	8000ac2 <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	b29a      	uxth	r2, r3
 8000aa8:	88fb      	ldrh	r3, [r7, #6]
 8000aaa:	4413      	add	r3, r2
 8000aac:	b298      	uxth	r0, r3
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	b29a      	uxth	r2, r3
 8000ab2:	88bb      	ldrh	r3, [r7, #4]
 8000ab4:	4413      	add	r3, r2
 8000ab6:	b29b      	uxth	r3, r3
 8000ab8:	4a10      	ldr	r2, [pc, #64]	@ (8000afc <LCD_Draw_Char+0xd8>)
 8000aba:	8812      	ldrh	r2, [r2, #0]
 8000abc:	4619      	mov	r1, r3
 8000abe:	f7ff fefd 	bl	80008bc <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000ac2:	68bb      	ldr	r3, [r7, #8]
 8000ac4:	3301      	adds	r3, #1
 8000ac6:	60bb      	str	r3, [r7, #8]
 8000ac8:	4b0a      	ldr	r3, [pc, #40]	@ (8000af4 <LCD_Draw_Char+0xd0>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	889b      	ldrh	r3, [r3, #4]
 8000ace:	461a      	mov	r2, r3
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d3b8      	bcc.n	8000a48 <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	3301      	adds	r3, #1
 8000ada:	60fb      	str	r3, [r7, #12]
 8000adc:	4b05      	ldr	r3, [pc, #20]	@ (8000af4 <LCD_Draw_Char+0xd0>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	88db      	ldrh	r3, [r3, #6]
 8000ae2:	461a      	mov	r2, r3
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d3ab      	bcc.n	8000a42 <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 8000aea:	bf00      	nop
 8000aec:	bf00      	nop
 8000aee:	3710      	adds	r7, #16
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	20000124 	.word	0x20000124
 8000af8:	aaaaaaab 	.word	0xaaaaaaab
 8000afc:	20000000 	.word	0x20000000

08000b00 <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	4603      	mov	r3, r0
 8000b08:	80fb      	strh	r3, [r7, #6]
 8000b0a:	460b      	mov	r3, r1
 8000b0c:	80bb      	strh	r3, [r7, #4]
 8000b0e:	4613      	mov	r3, r2
 8000b10:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8000b12:	78fb      	ldrb	r3, [r7, #3]
 8000b14:	3b20      	subs	r3, #32
 8000b16:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8000b18:	4b09      	ldr	r3, [pc, #36]	@ (8000b40 <LCD_DisplayChar+0x40>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	681a      	ldr	r2, [r3, #0]
 8000b1e:	78fb      	ldrb	r3, [r7, #3]
 8000b20:	4907      	ldr	r1, [pc, #28]	@ (8000b40 <LCD_DisplayChar+0x40>)
 8000b22:	6809      	ldr	r1, [r1, #0]
 8000b24:	88c9      	ldrh	r1, [r1, #6]
 8000b26:	fb01 f303 	mul.w	r3, r1, r3
 8000b2a:	005b      	lsls	r3, r3, #1
 8000b2c:	441a      	add	r2, r3
 8000b2e:	88b9      	ldrh	r1, [r7, #4]
 8000b30:	88fb      	ldrh	r3, [r7, #6]
 8000b32:	4618      	mov	r0, r3
 8000b34:	f7ff ff76 	bl	8000a24 <LCD_Draw_Char>
}
 8000b38:	bf00      	nop
 8000b3a:	3708      	adds	r7, #8
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	20000124 	.word	0x20000124

08000b44 <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b48:	b672      	cpsid	i
}
 8000b4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b4c:	bf00      	nop
 8000b4e:	e7fd      	b.n	8000b4c <LCD_Error_Handler+0x8>

08000b50 <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 8000b54:	f000 ff91 	bl	8001a7a <STMPE811_Init>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b02      	cmp	r3, #2
 8000b5c:	d001      	beq.n	8000b62 <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialzation
 8000b5e:	bf00      	nop
 8000b60:	e7fd      	b.n	8000b5e <InitializeLCDTouch+0xe>
  }
}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}

08000b66 <returnTouchStateAndLocation>:

STMPE811_State_t returnTouchStateAndLocation(STMPE811_TouchData * touchStruct)
{
 8000b66:	b580      	push	{r7, lr}
 8000b68:	b082      	sub	sp, #8
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	6078      	str	r0, [r7, #4]
	return STMPE811_ReadTouch(touchStruct);
 8000b6e:	6878      	ldr	r0, [r7, #4]
 8000b70:	f001 f83b 	bl	8001bea <STMPE811_ReadTouch>
 8000b74:	4603      	mov	r3, r0
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
	...

08000b80 <Screen1_Display>:
#include "Screen_1.h"


void Screen1_Display(void){
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
    LCD_Clear(0, LCD_COLOR_GREY);
 8000b84:	f24f 71de 	movw	r1, #63454	@ 0xf7de
 8000b88:	2000      	movs	r0, #0
 8000b8a:	f7ff ff09 	bl	80009a0 <LCD_Clear>
    
    LCD_SetFont(&Font16x24);
 8000b8e:	4857      	ldr	r0, [pc, #348]	@ (8000cec <Screen1_Display+0x16c>)
 8000b90:	f7ff ff38 	bl	8000a04 <LCD_SetFont>
    LCD_SetTextColor(LCD_COLOR_BLACK);
 8000b94:	2000      	movs	r0, #0
 8000b96:	f7ff ff25 	bl	80009e4 <LCD_SetTextColor>
    LCD_DisplayChar(20, 20, 'C');
 8000b9a:	2243      	movs	r2, #67	@ 0x43
 8000b9c:	2114      	movs	r1, #20
 8000b9e:	2014      	movs	r0, #20
 8000ba0:	f7ff ffae 	bl	8000b00 <LCD_DisplayChar>
    LCD_DisplayChar(40, 20, 'O');
 8000ba4:	224f      	movs	r2, #79	@ 0x4f
 8000ba6:	2114      	movs	r1, #20
 8000ba8:	2028      	movs	r0, #40	@ 0x28
 8000baa:	f7ff ffa9 	bl	8000b00 <LCD_DisplayChar>
    LCD_DisplayChar(60, 20, 'N');
 8000bae:	224e      	movs	r2, #78	@ 0x4e
 8000bb0:	2114      	movs	r1, #20
 8000bb2:	203c      	movs	r0, #60	@ 0x3c
 8000bb4:	f7ff ffa4 	bl	8000b00 <LCD_DisplayChar>
    LCD_DisplayChar(80, 20, 'N');
 8000bb8:	224e      	movs	r2, #78	@ 0x4e
 8000bba:	2114      	movs	r1, #20
 8000bbc:	2050      	movs	r0, #80	@ 0x50
 8000bbe:	f7ff ff9f 	bl	8000b00 <LCD_DisplayChar>
    LCD_DisplayChar(100, 20, 'E');
 8000bc2:	2245      	movs	r2, #69	@ 0x45
 8000bc4:	2114      	movs	r1, #20
 8000bc6:	2064      	movs	r0, #100	@ 0x64
 8000bc8:	f7ff ff9a 	bl	8000b00 <LCD_DisplayChar>
    LCD_DisplayChar(120, 20, 'C');
 8000bcc:	2243      	movs	r2, #67	@ 0x43
 8000bce:	2114      	movs	r1, #20
 8000bd0:	2078      	movs	r0, #120	@ 0x78
 8000bd2:	f7ff ff95 	bl	8000b00 <LCD_DisplayChar>
    LCD_DisplayChar(140, 20, 'T');
 8000bd6:	2254      	movs	r2, #84	@ 0x54
 8000bd8:	2114      	movs	r1, #20
 8000bda:	208c      	movs	r0, #140	@ 0x8c
 8000bdc:	f7ff ff90 	bl	8000b00 <LCD_DisplayChar>
    LCD_DisplayChar(180, 20, '4');
 8000be0:	2234      	movs	r2, #52	@ 0x34
 8000be2:	2114      	movs	r1, #20
 8000be4:	20b4      	movs	r0, #180	@ 0xb4
 8000be6:	f7ff ff8b 	bl	8000b00 <LCD_DisplayChar>

    LCD_SetFont(&Font12x12);
 8000bea:	4841      	ldr	r0, [pc, #260]	@ (8000cf0 <Screen1_Display+0x170>)
 8000bec:	f7ff ff0a 	bl	8000a04 <LCD_SetFont>
    LCD_DisplayChar(20, 110, '1');
 8000bf0:	2231      	movs	r2, #49	@ 0x31
 8000bf2:	216e      	movs	r1, #110	@ 0x6e
 8000bf4:	2014      	movs	r0, #20
 8000bf6:	f7ff ff83 	bl	8000b00 <LCD_DisplayChar>
    LCD_DisplayChar(35, 110, 'P');
 8000bfa:	2250      	movs	r2, #80	@ 0x50
 8000bfc:	216e      	movs	r1, #110	@ 0x6e
 8000bfe:	2023      	movs	r0, #35	@ 0x23
 8000c00:	f7ff ff7e 	bl	8000b00 <LCD_DisplayChar>
    LCD_DisplayChar(45, 110, 'L');
 8000c04:	224c      	movs	r2, #76	@ 0x4c
 8000c06:	216e      	movs	r1, #110	@ 0x6e
 8000c08:	202d      	movs	r0, #45	@ 0x2d
 8000c0a:	f7ff ff79 	bl	8000b00 <LCD_DisplayChar>
    LCD_DisplayChar(55, 110, 'A');
 8000c0e:	2241      	movs	r2, #65	@ 0x41
 8000c10:	216e      	movs	r1, #110	@ 0x6e
 8000c12:	2037      	movs	r0, #55	@ 0x37
 8000c14:	f7ff ff74 	bl	8000b00 <LCD_DisplayChar>
    LCD_DisplayChar(65, 110, 'Y');
 8000c18:	2259      	movs	r2, #89	@ 0x59
 8000c1a:	216e      	movs	r1, #110	@ 0x6e
 8000c1c:	2041      	movs	r0, #65	@ 0x41
 8000c1e:	f7ff ff6f 	bl	8000b00 <LCD_DisplayChar>
    LCD_DisplayChar(75, 110, 'E');
 8000c22:	2245      	movs	r2, #69	@ 0x45
 8000c24:	216e      	movs	r1, #110	@ 0x6e
 8000c26:	204b      	movs	r0, #75	@ 0x4b
 8000c28:	f7ff ff6a 	bl	8000b00 <LCD_DisplayChar>
    LCD_DisplayChar(85, 110, 'R');
 8000c2c:	2252      	movs	r2, #82	@ 0x52
 8000c2e:	216e      	movs	r1, #110	@ 0x6e
 8000c30:	2055      	movs	r0, #85	@ 0x55
 8000c32:	f7ff ff65 	bl	8000b00 <LCD_DisplayChar>
    LCD_DisplayChar(40, 125, 'M');
 8000c36:	224d      	movs	r2, #77	@ 0x4d
 8000c38:	217d      	movs	r1, #125	@ 0x7d
 8000c3a:	2028      	movs	r0, #40	@ 0x28
 8000c3c:	f7ff ff60 	bl	8000b00 <LCD_DisplayChar>
    LCD_DisplayChar(50, 125, 'O');
 8000c40:	224f      	movs	r2, #79	@ 0x4f
 8000c42:	217d      	movs	r1, #125	@ 0x7d
 8000c44:	2032      	movs	r0, #50	@ 0x32
 8000c46:	f7ff ff5b 	bl	8000b00 <LCD_DisplayChar>
    LCD_DisplayChar(60, 125, 'D');
 8000c4a:	2244      	movs	r2, #68	@ 0x44
 8000c4c:	217d      	movs	r1, #125	@ 0x7d
 8000c4e:	203c      	movs	r0, #60	@ 0x3c
 8000c50:	f7ff ff56 	bl	8000b00 <LCD_DisplayChar>
    LCD_DisplayChar(70, 125, 'E');
 8000c54:	2245      	movs	r2, #69	@ 0x45
 8000c56:	217d      	movs	r1, #125	@ 0x7d
 8000c58:	2046      	movs	r0, #70	@ 0x46
 8000c5a:	f7ff ff51 	bl	8000b00 <LCD_DisplayChar>

    LCD_DisplayChar(140, 110, '2');
 8000c5e:	2232      	movs	r2, #50	@ 0x32
 8000c60:	216e      	movs	r1, #110	@ 0x6e
 8000c62:	208c      	movs	r0, #140	@ 0x8c
 8000c64:	f7ff ff4c 	bl	8000b00 <LCD_DisplayChar>
    LCD_DisplayChar(155, 110, 'P');
 8000c68:	2250      	movs	r2, #80	@ 0x50
 8000c6a:	216e      	movs	r1, #110	@ 0x6e
 8000c6c:	209b      	movs	r0, #155	@ 0x9b
 8000c6e:	f7ff ff47 	bl	8000b00 <LCD_DisplayChar>
    LCD_DisplayChar(165, 110, 'L');
 8000c72:	224c      	movs	r2, #76	@ 0x4c
 8000c74:	216e      	movs	r1, #110	@ 0x6e
 8000c76:	20a5      	movs	r0, #165	@ 0xa5
 8000c78:	f7ff ff42 	bl	8000b00 <LCD_DisplayChar>
    LCD_DisplayChar(175, 110, 'A');
 8000c7c:	2241      	movs	r2, #65	@ 0x41
 8000c7e:	216e      	movs	r1, #110	@ 0x6e
 8000c80:	20af      	movs	r0, #175	@ 0xaf
 8000c82:	f7ff ff3d 	bl	8000b00 <LCD_DisplayChar>
    LCD_DisplayChar(185, 110, 'Y');
 8000c86:	2259      	movs	r2, #89	@ 0x59
 8000c88:	216e      	movs	r1, #110	@ 0x6e
 8000c8a:	20b9      	movs	r0, #185	@ 0xb9
 8000c8c:	f7ff ff38 	bl	8000b00 <LCD_DisplayChar>
    LCD_DisplayChar(195, 110, 'E');
 8000c90:	2245      	movs	r2, #69	@ 0x45
 8000c92:	216e      	movs	r1, #110	@ 0x6e
 8000c94:	20c3      	movs	r0, #195	@ 0xc3
 8000c96:	f7ff ff33 	bl	8000b00 <LCD_DisplayChar>
    LCD_DisplayChar(205, 110, 'R');
 8000c9a:	2252      	movs	r2, #82	@ 0x52
 8000c9c:	216e      	movs	r1, #110	@ 0x6e
 8000c9e:	20cd      	movs	r0, #205	@ 0xcd
 8000ca0:	f7ff ff2e 	bl	8000b00 <LCD_DisplayChar>
    LCD_DisplayChar(160, 125, 'M');
 8000ca4:	224d      	movs	r2, #77	@ 0x4d
 8000ca6:	217d      	movs	r1, #125	@ 0x7d
 8000ca8:	20a0      	movs	r0, #160	@ 0xa0
 8000caa:	f7ff ff29 	bl	8000b00 <LCD_DisplayChar>
    LCD_DisplayChar(170, 125, 'O');
 8000cae:	224f      	movs	r2, #79	@ 0x4f
 8000cb0:	217d      	movs	r1, #125	@ 0x7d
 8000cb2:	20aa      	movs	r0, #170	@ 0xaa
 8000cb4:	f7ff ff24 	bl	8000b00 <LCD_DisplayChar>
    LCD_DisplayChar(180, 125, 'D');
 8000cb8:	2244      	movs	r2, #68	@ 0x44
 8000cba:	217d      	movs	r1, #125	@ 0x7d
 8000cbc:	20b4      	movs	r0, #180	@ 0xb4
 8000cbe:	f7ff ff1f 	bl	8000b00 <LCD_DisplayChar>
    LCD_DisplayChar(190, 125, 'E');
 8000cc2:	2245      	movs	r2, #69	@ 0x45
 8000cc4:	217d      	movs	r1, #125	@ 0x7d
 8000cc6:	20be      	movs	r0, #190	@ 0xbe
 8000cc8:	f7ff ff1a 	bl	8000b00 <LCD_DisplayChar>


    LCD_Draw_Circle_Fill(60, (LCD_PIXEL_HEIGHT/2)+20, 40, LCD_COLOR_RED);
 8000ccc:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000cd0:	2228      	movs	r2, #40	@ 0x28
 8000cd2:	21b4      	movs	r1, #180	@ 0xb4
 8000cd4:	203c      	movs	r0, #60	@ 0x3c
 8000cd6:	f7ff fe0f 	bl	80008f8 <LCD_Draw_Circle_Fill>
    LCD_Draw_Circle_Fill(LCD_PIXEL_WIDTH-60, (LCD_PIXEL_HEIGHT/2)+20, 40, LCD_COLOR_BLUE);
 8000cda:	231f      	movs	r3, #31
 8000cdc:	2228      	movs	r2, #40	@ 0x28
 8000cde:	21b4      	movs	r1, #180	@ 0xb4
 8000ce0:	20b4      	movs	r0, #180	@ 0xb4
 8000ce2:	f7ff fe09 	bl	80008f8 <LCD_Draw_Circle_Fill>
}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	2000000c 	.word	0x2000000c
 8000cf0:	20000014 	.word	0x20000014

08000cf4 <Screen2_NewGame>:
#include "Screen_2.h"

void Screen2_NewGame(void){
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
	for (int i = 0; i<boardRows; i++){
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	607b      	str	r3, [r7, #4]
 8000cfe:	e016      	b.n	8000d2e <Screen2_NewGame+0x3a>
		for (int j = 0; j<boardColumns; j++){
 8000d00:	2300      	movs	r3, #0
 8000d02:	603b      	str	r3, [r7, #0]
 8000d04:	e00d      	b.n	8000d22 <Screen2_NewGame+0x2e>
	        gameBoard[i][j] = 0;
 8000d06:	490f      	ldr	r1, [pc, #60]	@ (8000d44 <Screen2_NewGame+0x50>)
 8000d08:	687a      	ldr	r2, [r7, #4]
 8000d0a:	4613      	mov	r3, r2
 8000d0c:	005b      	lsls	r3, r3, #1
 8000d0e:	4413      	add	r3, r2
 8000d10:	005b      	lsls	r3, r3, #1
 8000d12:	683a      	ldr	r2, [r7, #0]
 8000d14:	4413      	add	r3, r2
 8000d16:	2200      	movs	r2, #0
 8000d18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int j = 0; j<boardColumns; j++){
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	3301      	adds	r3, #1
 8000d20:	603b      	str	r3, [r7, #0]
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	2b06      	cmp	r3, #6
 8000d26:	ddee      	ble.n	8000d06 <Screen2_NewGame+0x12>
	for (int i = 0; i<boardRows; i++){
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	607b      	str	r3, [r7, #4]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	2b05      	cmp	r3, #5
 8000d32:	dde5      	ble.n	8000d00 <Screen2_NewGame+0xc>
		}
	}
}
 8000d34:	bf00      	nop
 8000d36:	bf00      	nop
 8000d38:	370c      	adds	r7, #12
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	20025928 	.word	0x20025928

08000d48 <Screen2_Display>:

void Screen2_Display(void){
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
    LCD_Clear(0, LCD_COLOR_GREY);
 8000d4e:	f24f 71de 	movw	r1, #63454	@ 0xf7de
 8000d52:	2000      	movs	r0, #0
 8000d54:	f7ff fe24 	bl	80009a0 <LCD_Clear>
    
    LCD_SetFont(&Font16x24);
 8000d58:	486d      	ldr	r0, [pc, #436]	@ (8000f10 <Screen2_Display+0x1c8>)
 8000d5a:	f7ff fe53 	bl	8000a04 <LCD_SetFont>
    LCD_SetTextColor(LCD_COLOR_BLACK);
 8000d5e:	2000      	movs	r0, #0
 8000d60:	f7ff fe40 	bl	80009e4 <LCD_SetTextColor>
    LCD_DisplayChar(20, 20, 'C');
 8000d64:	2243      	movs	r2, #67	@ 0x43
 8000d66:	2114      	movs	r1, #20
 8000d68:	2014      	movs	r0, #20
 8000d6a:	f7ff fec9 	bl	8000b00 <LCD_DisplayChar>
    LCD_DisplayChar(40, 20, 'O');
 8000d6e:	224f      	movs	r2, #79	@ 0x4f
 8000d70:	2114      	movs	r1, #20
 8000d72:	2028      	movs	r0, #40	@ 0x28
 8000d74:	f7ff fec4 	bl	8000b00 <LCD_DisplayChar>
    LCD_DisplayChar(60, 20, 'N');
 8000d78:	224e      	movs	r2, #78	@ 0x4e
 8000d7a:	2114      	movs	r1, #20
 8000d7c:	203c      	movs	r0, #60	@ 0x3c
 8000d7e:	f7ff febf 	bl	8000b00 <LCD_DisplayChar>
    LCD_DisplayChar(80, 20, 'N');
 8000d82:	224e      	movs	r2, #78	@ 0x4e
 8000d84:	2114      	movs	r1, #20
 8000d86:	2050      	movs	r0, #80	@ 0x50
 8000d88:	f7ff feba 	bl	8000b00 <LCD_DisplayChar>
    LCD_DisplayChar(100, 20, 'E');
 8000d8c:	2245      	movs	r2, #69	@ 0x45
 8000d8e:	2114      	movs	r1, #20
 8000d90:	2064      	movs	r0, #100	@ 0x64
 8000d92:	f7ff feb5 	bl	8000b00 <LCD_DisplayChar>
    LCD_DisplayChar(120, 20, 'C');
 8000d96:	2243      	movs	r2, #67	@ 0x43
 8000d98:	2114      	movs	r1, #20
 8000d9a:	2078      	movs	r0, #120	@ 0x78
 8000d9c:	f7ff feb0 	bl	8000b00 <LCD_DisplayChar>
    LCD_DisplayChar(140, 20, 'T');
 8000da0:	2254      	movs	r2, #84	@ 0x54
 8000da2:	2114      	movs	r1, #20
 8000da4:	208c      	movs	r0, #140	@ 0x8c
 8000da6:	f7ff feab 	bl	8000b00 <LCD_DisplayChar>
    LCD_DisplayChar(180, 20, '4');
 8000daa:	2234      	movs	r2, #52	@ 0x34
 8000dac:	2114      	movs	r1, #20
 8000dae:	20b4      	movs	r0, #180	@ 0xb4
 8000db0:	f7ff fea6 	bl	8000b00 <LCD_DisplayChar>
    
    for (int i = 0; i<boardColumns; i++){
 8000db4:	2300      	movs	r3, #0
 8000db6:	60fb      	str	r3, [r7, #12]
 8000db8:	e036      	b.n	8000e28 <Screen2_Display+0xe0>
        if (i == chipLoc){
 8000dba:	4b56      	ldr	r3, [pc, #344]	@ (8000f14 <Screen2_Display+0x1cc>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	68fa      	ldr	r2, [r7, #12]
 8000dc0:	429a      	cmp	r2, r3
 8000dc2:	d120      	bne.n	8000e06 <Screen2_Display+0xbe>
            if (player1turn){
 8000dc4:	4b54      	ldr	r3, [pc, #336]	@ (8000f18 <Screen2_Display+0x1d0>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d00d      	beq.n	8000de8 <Screen2_Display+0xa0>
                LCD_Draw_Circle_Fill((i*30)+30, 80, 12, LCD_COLOR_BLUE);
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	3301      	adds	r3, #1
 8000dd0:	b29b      	uxth	r3, r3
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	0112      	lsls	r2, r2, #4
 8000dd6:	1ad3      	subs	r3, r2, r3
 8000dd8:	005b      	lsls	r3, r3, #1
 8000dda:	b298      	uxth	r0, r3
 8000ddc:	231f      	movs	r3, #31
 8000dde:	220c      	movs	r2, #12
 8000de0:	2150      	movs	r1, #80	@ 0x50
 8000de2:	f7ff fd89 	bl	80008f8 <LCD_Draw_Circle_Fill>
 8000de6:	e01c      	b.n	8000e22 <Screen2_Display+0xda>
            }
            else{
                LCD_Draw_Circle_Fill((i*30)+30, 80, 12, LCD_COLOR_RED);
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	3301      	adds	r3, #1
 8000dec:	b29b      	uxth	r3, r3
 8000dee:	461a      	mov	r2, r3
 8000df0:	0112      	lsls	r2, r2, #4
 8000df2:	1ad3      	subs	r3, r2, r3
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	b298      	uxth	r0, r3
 8000df8:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000dfc:	220c      	movs	r2, #12
 8000dfe:	2150      	movs	r1, #80	@ 0x50
 8000e00:	f7ff fd7a 	bl	80008f8 <LCD_Draw_Circle_Fill>
 8000e04:	e00d      	b.n	8000e22 <Screen2_Display+0xda>
            }
        }
        else{
            LCD_Draw_Circle_Fill((i*30)+30, 80, 12, LCD_COLOR_GREY);
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	3301      	adds	r3, #1
 8000e0a:	b29b      	uxth	r3, r3
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	0112      	lsls	r2, r2, #4
 8000e10:	1ad3      	subs	r3, r2, r3
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	b298      	uxth	r0, r3
 8000e16:	f24f 73de 	movw	r3, #63454	@ 0xf7de
 8000e1a:	220c      	movs	r2, #12
 8000e1c:	2150      	movs	r1, #80	@ 0x50
 8000e1e:	f7ff fd6b 	bl	80008f8 <LCD_Draw_Circle_Fill>
    for (int i = 0; i<boardColumns; i++){
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	3301      	adds	r3, #1
 8000e26:	60fb      	str	r3, [r7, #12]
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	2b06      	cmp	r3, #6
 8000e2c:	ddc5      	ble.n	8000dba <Screen2_Display+0x72>
        }
    }
    for (int i = 0; i<boardColumns; i++){
 8000e2e:	2300      	movs	r3, #0
 8000e30:	60bb      	str	r3, [r7, #8]
 8000e32:	e065      	b.n	8000f00 <Screen2_Display+0x1b8>
        for (int j = 0; j<boardRows; j++){
 8000e34:	2300      	movs	r3, #0
 8000e36:	607b      	str	r3, [r7, #4]
 8000e38:	e05c      	b.n	8000ef4 <Screen2_Display+0x1ac>
            if (gameBoard[i][j] == 1){
 8000e3a:	4938      	ldr	r1, [pc, #224]	@ (8000f1c <Screen2_Display+0x1d4>)
 8000e3c:	68ba      	ldr	r2, [r7, #8]
 8000e3e:	4613      	mov	r3, r2
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	4413      	add	r3, r2
 8000e44:	005b      	lsls	r3, r3, #1
 8000e46:	687a      	ldr	r2, [r7, #4]
 8000e48:	4413      	add	r3, r2
 8000e4a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d115      	bne.n	8000e7e <Screen2_Display+0x136>
                LCD_Draw_Circle_Fill((i*30)+30, (j*30)+115, 12, LCD_COLOR_BLUE);
 8000e52:	68bb      	ldr	r3, [r7, #8]
 8000e54:	3301      	adds	r3, #1
 8000e56:	b29b      	uxth	r3, r3
 8000e58:	461a      	mov	r2, r3
 8000e5a:	0112      	lsls	r2, r2, #4
 8000e5c:	1ad3      	subs	r3, r2, r3
 8000e5e:	005b      	lsls	r3, r3, #1
 8000e60:	b298      	uxth	r0, r3
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	b29b      	uxth	r3, r3
 8000e66:	461a      	mov	r2, r3
 8000e68:	0112      	lsls	r2, r2, #4
 8000e6a:	1ad3      	subs	r3, r2, r3
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	b29b      	uxth	r3, r3
 8000e70:	3373      	adds	r3, #115	@ 0x73
 8000e72:	b299      	uxth	r1, r3
 8000e74:	231f      	movs	r3, #31
 8000e76:	220c      	movs	r2, #12
 8000e78:	f7ff fd3e 	bl	80008f8 <LCD_Draw_Circle_Fill>
 8000e7c:	e037      	b.n	8000eee <Screen2_Display+0x1a6>
            }
            else if (gameBoard[i][j] == 2){
 8000e7e:	4927      	ldr	r1, [pc, #156]	@ (8000f1c <Screen2_Display+0x1d4>)
 8000e80:	68ba      	ldr	r2, [r7, #8]
 8000e82:	4613      	mov	r3, r2
 8000e84:	005b      	lsls	r3, r3, #1
 8000e86:	4413      	add	r3, r2
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	687a      	ldr	r2, [r7, #4]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e92:	2b02      	cmp	r3, #2
 8000e94:	d116      	bne.n	8000ec4 <Screen2_Display+0x17c>
                LCD_Draw_Circle_Fill((i*30)+30, (j*30)+115, 12, LCD_COLOR_RED);
 8000e96:	68bb      	ldr	r3, [r7, #8]
 8000e98:	3301      	adds	r3, #1
 8000e9a:	b29b      	uxth	r3, r3
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	0112      	lsls	r2, r2, #4
 8000ea0:	1ad3      	subs	r3, r2, r3
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	b298      	uxth	r0, r3
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	b29b      	uxth	r3, r3
 8000eaa:	461a      	mov	r2, r3
 8000eac:	0112      	lsls	r2, r2, #4
 8000eae:	1ad3      	subs	r3, r2, r3
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	b29b      	uxth	r3, r3
 8000eb4:	3373      	adds	r3, #115	@ 0x73
 8000eb6:	b299      	uxth	r1, r3
 8000eb8:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000ebc:	220c      	movs	r2, #12
 8000ebe:	f7ff fd1b 	bl	80008f8 <LCD_Draw_Circle_Fill>
 8000ec2:	e014      	b.n	8000eee <Screen2_Display+0x1a6>
            }
            else{
                LCD_Draw_Circle_Fill((i*30)+30, (j*30)+115, 12, LCD_COLOR_BLACK);
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	b29b      	uxth	r3, r3
 8000eca:	461a      	mov	r2, r3
 8000ecc:	0112      	lsls	r2, r2, #4
 8000ece:	1ad3      	subs	r3, r2, r3
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	b298      	uxth	r0, r3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	b29b      	uxth	r3, r3
 8000ed8:	461a      	mov	r2, r3
 8000eda:	0112      	lsls	r2, r2, #4
 8000edc:	1ad3      	subs	r3, r2, r3
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	b29b      	uxth	r3, r3
 8000ee2:	3373      	adds	r3, #115	@ 0x73
 8000ee4:	b299      	uxth	r1, r3
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	220c      	movs	r2, #12
 8000eea:	f7ff fd05 	bl	80008f8 <LCD_Draw_Circle_Fill>
        for (int j = 0; j<boardRows; j++){
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	607b      	str	r3, [r7, #4]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2b05      	cmp	r3, #5
 8000ef8:	dd9f      	ble.n	8000e3a <Screen2_Display+0xf2>
    for (int i = 0; i<boardColumns; i++){
 8000efa:	68bb      	ldr	r3, [r7, #8]
 8000efc:	3301      	adds	r3, #1
 8000efe:	60bb      	str	r3, [r7, #8]
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	2b06      	cmp	r3, #6
 8000f04:	dd96      	ble.n	8000e34 <Screen2_Display+0xec>
            }
        }
    }
}
 8000f06:	bf00      	nop
 8000f08:	bf00      	nop
 8000f0a:	3710      	adds	r7, #16
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	2000000c 	.word	0x2000000c
 8000f14:	20000004 	.word	0x20000004
 8000f18:	20000008 	.word	0x20000008
 8000f1c:	20025928 	.word	0x20025928

08000f20 <Screen2_StartTimer>:

void Screen2_StartTimer(void){
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0

}
 8000f24:	bf00      	nop
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr

08000f2e <Screen2_Drop>:

void Screen2_Drop(void){
 8000f2e:	b480      	push	{r7}
 8000f30:	af00      	add	r7, sp, #0

}
 8000f32:	bf00      	nop
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr

08000f3c <Screen2_Move>:

void Screen2_Move(void){
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0

}
 8000f40:	bf00      	nop
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr

08000f4a <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8000f4e:	f000 f9ff 	bl	8001350 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 8000f52:	20ca      	movs	r0, #202	@ 0xca
 8000f54:	f000 f943 	bl	80011de <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 8000f58:	20c3      	movs	r0, #195	@ 0xc3
 8000f5a:	f000 f94d 	bl	80011f8 <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 8000f5e:	2008      	movs	r0, #8
 8000f60:	f000 f94a 	bl	80011f8 <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 8000f64:	2050      	movs	r0, #80	@ 0x50
 8000f66:	f000 f947 	bl	80011f8 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 8000f6a:	20cf      	movs	r0, #207	@ 0xcf
 8000f6c:	f000 f937 	bl	80011de <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 8000f70:	2000      	movs	r0, #0
 8000f72:	f000 f941 	bl	80011f8 <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8000f76:	20c1      	movs	r0, #193	@ 0xc1
 8000f78:	f000 f93e 	bl	80011f8 <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 8000f7c:	2030      	movs	r0, #48	@ 0x30
 8000f7e:	f000 f93b 	bl	80011f8 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 8000f82:	20ed      	movs	r0, #237	@ 0xed
 8000f84:	f000 f92b 	bl	80011de <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 8000f88:	2064      	movs	r0, #100	@ 0x64
 8000f8a:	f000 f935 	bl	80011f8 <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 8000f8e:	2003      	movs	r0, #3
 8000f90:	f000 f932 	bl	80011f8 <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 8000f94:	2012      	movs	r0, #18
 8000f96:	f000 f92f 	bl	80011f8 <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8000f9a:	2081      	movs	r0, #129	@ 0x81
 8000f9c:	f000 f92c 	bl	80011f8 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 8000fa0:	20e8      	movs	r0, #232	@ 0xe8
 8000fa2:	f000 f91c 	bl	80011de <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8000fa6:	2085      	movs	r0, #133	@ 0x85
 8000fa8:	f000 f926 	bl	80011f8 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000fac:	2000      	movs	r0, #0
 8000fae:	f000 f923 	bl	80011f8 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8000fb2:	2078      	movs	r0, #120	@ 0x78
 8000fb4:	f000 f920 	bl	80011f8 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8000fb8:	20cb      	movs	r0, #203	@ 0xcb
 8000fba:	f000 f910 	bl	80011de <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 8000fbe:	2039      	movs	r0, #57	@ 0x39
 8000fc0:	f000 f91a 	bl	80011f8 <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 8000fc4:	202c      	movs	r0, #44	@ 0x2c
 8000fc6:	f000 f917 	bl	80011f8 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000fca:	2000      	movs	r0, #0
 8000fcc:	f000 f914 	bl	80011f8 <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 8000fd0:	2034      	movs	r0, #52	@ 0x34
 8000fd2:	f000 f911 	bl	80011f8 <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8000fd6:	2002      	movs	r0, #2
 8000fd8:	f000 f90e 	bl	80011f8 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 8000fdc:	20f7      	movs	r0, #247	@ 0xf7
 8000fde:	f000 f8fe 	bl	80011de <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 8000fe2:	2020      	movs	r0, #32
 8000fe4:	f000 f908 	bl	80011f8 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8000fe8:	20ea      	movs	r0, #234	@ 0xea
 8000fea:	f000 f8f8 	bl	80011de <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000fee:	2000      	movs	r0, #0
 8000ff0:	f000 f902 	bl	80011f8 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000ff4:	2000      	movs	r0, #0
 8000ff6:	f000 f8ff 	bl	80011f8 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 8000ffa:	20b1      	movs	r0, #177	@ 0xb1
 8000ffc:	f000 f8ef 	bl	80011de <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001000:	2000      	movs	r0, #0
 8001002:	f000 f8f9 	bl	80011f8 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8001006:	201b      	movs	r0, #27
 8001008:	f000 f8f6 	bl	80011f8 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 800100c:	20b6      	movs	r0, #182	@ 0xb6
 800100e:	f000 f8e6 	bl	80011de <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8001012:	200a      	movs	r0, #10
 8001014:	f000 f8f0 	bl	80011f8 <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 8001018:	20a2      	movs	r0, #162	@ 0xa2
 800101a:	f000 f8ed 	bl	80011f8 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 800101e:	20c0      	movs	r0, #192	@ 0xc0
 8001020:	f000 f8dd 	bl	80011de <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001024:	2010      	movs	r0, #16
 8001026:	f000 f8e7 	bl	80011f8 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 800102a:	20c1      	movs	r0, #193	@ 0xc1
 800102c:	f000 f8d7 	bl	80011de <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001030:	2010      	movs	r0, #16
 8001032:	f000 f8e1 	bl	80011f8 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 8001036:	20c5      	movs	r0, #197	@ 0xc5
 8001038:	f000 f8d1 	bl	80011de <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 800103c:	2045      	movs	r0, #69	@ 0x45
 800103e:	f000 f8db 	bl	80011f8 <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 8001042:	2015      	movs	r0, #21
 8001044:	f000 f8d8 	bl	80011f8 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 8001048:	20c7      	movs	r0, #199	@ 0xc7
 800104a:	f000 f8c8 	bl	80011de <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 800104e:	2090      	movs	r0, #144	@ 0x90
 8001050:	f000 f8d2 	bl	80011f8 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 8001054:	2036      	movs	r0, #54	@ 0x36
 8001056:	f000 f8c2 	bl	80011de <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 800105a:	20c8      	movs	r0, #200	@ 0xc8
 800105c:	f000 f8cc 	bl	80011f8 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 8001060:	20f2      	movs	r0, #242	@ 0xf2
 8001062:	f000 f8bc 	bl	80011de <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001066:	2000      	movs	r0, #0
 8001068:	f000 f8c6 	bl	80011f8 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 800106c:	20b0      	movs	r0, #176	@ 0xb0
 800106e:	f000 f8b6 	bl	80011de <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 8001072:	20c2      	movs	r0, #194	@ 0xc2
 8001074:	f000 f8c0 	bl	80011f8 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8001078:	20b6      	movs	r0, #182	@ 0xb6
 800107a:	f000 f8b0 	bl	80011de <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 800107e:	200a      	movs	r0, #10
 8001080:	f000 f8ba 	bl	80011f8 <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 8001084:	20a7      	movs	r0, #167	@ 0xa7
 8001086:	f000 f8b7 	bl	80011f8 <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 800108a:	2027      	movs	r0, #39	@ 0x27
 800108c:	f000 f8b4 	bl	80011f8 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8001090:	2004      	movs	r0, #4
 8001092:	f000 f8b1 	bl	80011f8 <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 8001096:	202a      	movs	r0, #42	@ 0x2a
 8001098:	f000 f8a1 	bl	80011de <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800109c:	2000      	movs	r0, #0
 800109e:	f000 f8ab 	bl	80011f8 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80010a2:	2000      	movs	r0, #0
 80010a4:	f000 f8a8 	bl	80011f8 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80010a8:	2000      	movs	r0, #0
 80010aa:	f000 f8a5 	bl	80011f8 <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 80010ae:	20ef      	movs	r0, #239	@ 0xef
 80010b0:	f000 f8a2 	bl	80011f8 <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 80010b4:	202b      	movs	r0, #43	@ 0x2b
 80010b6:	f000 f892 	bl	80011de <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80010ba:	2000      	movs	r0, #0
 80010bc:	f000 f89c 	bl	80011f8 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80010c0:	2000      	movs	r0, #0
 80010c2:	f000 f899 	bl	80011f8 <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 80010c6:	2001      	movs	r0, #1
 80010c8:	f000 f896 	bl	80011f8 <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 80010cc:	203f      	movs	r0, #63	@ 0x3f
 80010ce:	f000 f893 	bl	80011f8 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 80010d2:	20f6      	movs	r0, #246	@ 0xf6
 80010d4:	f000 f883 	bl	80011de <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 80010d8:	2001      	movs	r0, #1
 80010da:	f000 f88d 	bl	80011f8 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80010de:	2000      	movs	r0, #0
 80010e0:	f000 f88a 	bl	80011f8 <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 80010e4:	2006      	movs	r0, #6
 80010e6:	f000 f887 	bl	80011f8 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 80010ea:	202c      	movs	r0, #44	@ 0x2c
 80010ec:	f000 f877 	bl	80011de <ili9341_Write_Reg>
  LCD_Delay(200);
 80010f0:	20c8      	movs	r0, #200	@ 0xc8
 80010f2:	f000 f9e9 	bl	80014c8 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 80010f6:	2026      	movs	r0, #38	@ 0x26
 80010f8:	f000 f871 	bl	80011de <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 80010fc:	2001      	movs	r0, #1
 80010fe:	f000 f87b 	bl	80011f8 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 8001102:	20e0      	movs	r0, #224	@ 0xe0
 8001104:	f000 f86b 	bl	80011de <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 8001108:	200f      	movs	r0, #15
 800110a:	f000 f875 	bl	80011f8 <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 800110e:	2029      	movs	r0, #41	@ 0x29
 8001110:	f000 f872 	bl	80011f8 <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 8001114:	2024      	movs	r0, #36	@ 0x24
 8001116:	f000 f86f 	bl	80011f8 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 800111a:	200c      	movs	r0, #12
 800111c:	f000 f86c 	bl	80011f8 <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 8001120:	200e      	movs	r0, #14
 8001122:	f000 f869 	bl	80011f8 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8001126:	2009      	movs	r0, #9
 8001128:	f000 f866 	bl	80011f8 <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 800112c:	204e      	movs	r0, #78	@ 0x4e
 800112e:	f000 f863 	bl	80011f8 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001132:	2078      	movs	r0, #120	@ 0x78
 8001134:	f000 f860 	bl	80011f8 <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 8001138:	203c      	movs	r0, #60	@ 0x3c
 800113a:	f000 f85d 	bl	80011f8 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 800113e:	2009      	movs	r0, #9
 8001140:	f000 f85a 	bl	80011f8 <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 8001144:	2013      	movs	r0, #19
 8001146:	f000 f857 	bl	80011f8 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 800114a:	2005      	movs	r0, #5
 800114c:	f000 f854 	bl	80011f8 <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 8001150:	2017      	movs	r0, #23
 8001152:	f000 f851 	bl	80011f8 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8001156:	2011      	movs	r0, #17
 8001158:	f000 f84e 	bl	80011f8 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800115c:	2000      	movs	r0, #0
 800115e:	f000 f84b 	bl	80011f8 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 8001162:	20e1      	movs	r0, #225	@ 0xe1
 8001164:	f000 f83b 	bl	80011de <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001168:	2000      	movs	r0, #0
 800116a:	f000 f845 	bl	80011f8 <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 800116e:	2016      	movs	r0, #22
 8001170:	f000 f842 	bl	80011f8 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8001174:	201b      	movs	r0, #27
 8001176:	f000 f83f 	bl	80011f8 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 800117a:	2004      	movs	r0, #4
 800117c:	f000 f83c 	bl	80011f8 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8001180:	2011      	movs	r0, #17
 8001182:	f000 f839 	bl	80011f8 <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 8001186:	2007      	movs	r0, #7
 8001188:	f000 f836 	bl	80011f8 <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 800118c:	2031      	movs	r0, #49	@ 0x31
 800118e:	f000 f833 	bl	80011f8 <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 8001192:	2033      	movs	r0, #51	@ 0x33
 8001194:	f000 f830 	bl	80011f8 <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 8001198:	2042      	movs	r0, #66	@ 0x42
 800119a:	f000 f82d 	bl	80011f8 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 800119e:	2005      	movs	r0, #5
 80011a0:	f000 f82a 	bl	80011f8 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 80011a4:	200c      	movs	r0, #12
 80011a6:	f000 f827 	bl	80011f8 <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 80011aa:	200a      	movs	r0, #10
 80011ac:	f000 f824 	bl	80011f8 <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 80011b0:	2028      	movs	r0, #40	@ 0x28
 80011b2:	f000 f821 	bl	80011f8 <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 80011b6:	202f      	movs	r0, #47	@ 0x2f
 80011b8:	f000 f81e 	bl	80011f8 <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 80011bc:	200f      	movs	r0, #15
 80011be:	f000 f81b 	bl	80011f8 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 80011c2:	2011      	movs	r0, #17
 80011c4:	f000 f80b 	bl	80011de <ili9341_Write_Reg>
  LCD_Delay(200);
 80011c8:	20c8      	movs	r0, #200	@ 0xc8
 80011ca:	f000 f97d 	bl	80014c8 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 80011ce:	2029      	movs	r0, #41	@ 0x29
 80011d0:	f000 f805 	bl	80011de <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 80011d4:	202c      	movs	r0, #44	@ 0x2c
 80011d6:	f000 f802 	bl	80011de <ili9341_Write_Reg>
}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}

080011de <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 80011de:	b580      	push	{r7, lr}
 80011e0:	b082      	sub	sp, #8
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	4603      	mov	r3, r0
 80011e6:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 80011e8:	79fb      	ldrb	r3, [r7, #7]
 80011ea:	4618      	mov	r0, r3
 80011ec:	f000 f94a 	bl	8001484 <LCD_IO_WriteReg>
}
 80011f0:	bf00      	nop
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001202:	88fb      	ldrh	r3, [r7, #6]
 8001204:	4618      	mov	r0, r3
 8001206:	f000 f91b 	bl	8001440 <LCD_IO_WriteData>
}
 800120a:	bf00      	nop
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
	...

08001214 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001218:	4819      	ldr	r0, [pc, #100]	@ (8001280 <SPI_Init+0x6c>)
 800121a:	f003 ff6c 	bl	80050f6 <HAL_SPI_GetState>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d12b      	bne.n	800127c <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 8001224:	4b16      	ldr	r3, [pc, #88]	@ (8001280 <SPI_Init+0x6c>)
 8001226:	4a17      	ldr	r2, [pc, #92]	@ (8001284 <SPI_Init+0x70>)
 8001228:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800122a:	4b15      	ldr	r3, [pc, #84]	@ (8001280 <SPI_Init+0x6c>)
 800122c:	2218      	movs	r2, #24
 800122e:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8001230:	4b13      	ldr	r3, [pc, #76]	@ (8001280 <SPI_Init+0x6c>)
 8001232:	2200      	movs	r2, #0
 8001234:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8001236:	4b12      	ldr	r3, [pc, #72]	@ (8001280 <SPI_Init+0x6c>)
 8001238:	2200      	movs	r2, #0
 800123a:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 800123c:	4b10      	ldr	r3, [pc, #64]	@ (8001280 <SPI_Init+0x6c>)
 800123e:	2200      	movs	r2, #0
 8001240:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001242:	4b0f      	ldr	r3, [pc, #60]	@ (8001280 <SPI_Init+0x6c>)
 8001244:	2200      	movs	r2, #0
 8001246:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001248:	4b0d      	ldr	r3, [pc, #52]	@ (8001280 <SPI_Init+0x6c>)
 800124a:	2207      	movs	r2, #7
 800124c:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 800124e:	4b0c      	ldr	r3, [pc, #48]	@ (8001280 <SPI_Init+0x6c>)
 8001250:	2200      	movs	r2, #0
 8001252:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8001254:	4b0a      	ldr	r3, [pc, #40]	@ (8001280 <SPI_Init+0x6c>)
 8001256:	2200      	movs	r2, #0
 8001258:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 800125a:	4b09      	ldr	r3, [pc, #36]	@ (8001280 <SPI_Init+0x6c>)
 800125c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001260:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8001262:	4b07      	ldr	r3, [pc, #28]	@ (8001280 <SPI_Init+0x6c>)
 8001264:	2200      	movs	r2, #0
 8001266:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001268:	4b05      	ldr	r3, [pc, #20]	@ (8001280 <SPI_Init+0x6c>)
 800126a:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800126e:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 8001270:	4803      	ldr	r0, [pc, #12]	@ (8001280 <SPI_Init+0x6c>)
 8001272:	f000 f833 	bl	80012dc <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001276:	4802      	ldr	r0, [pc, #8]	@ (8001280 <SPI_Init+0x6c>)
 8001278:	f003 fd48 	bl	8004d0c <HAL_SPI_Init>
  }
}
 800127c:	bf00      	nop
 800127e:	bd80      	pop	{r7, pc}
 8001280:	200259d0 	.word	0x200259d0
 8001284:	40015000 	.word	0x40015000

08001288 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001292:	2300      	movs	r3, #0
 8001294:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 8001296:	4b09      	ldr	r3, [pc, #36]	@ (80012bc <SPI_Write+0x34>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	1db9      	adds	r1, r7, #6
 800129c:	2201      	movs	r2, #1
 800129e:	4808      	ldr	r0, [pc, #32]	@ (80012c0 <SPI_Write+0x38>)
 80012a0:	f003 fde5 	bl	8004e6e <HAL_SPI_Transmit>
 80012a4:	4603      	mov	r3, r0
 80012a6:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 80012a8:	7bfb      	ldrb	r3, [r7, #15]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 80012ae:	f000 f809 	bl	80012c4 <SPI_Error>
  }
}
 80012b2:	bf00      	nop
 80012b4:	3710      	adds	r7, #16
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	2000001c 	.word	0x2000001c
 80012c0:	200259d0 	.word	0x200259d0

080012c4 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 80012c8:	4803      	ldr	r0, [pc, #12]	@ (80012d8 <SPI_Error+0x14>)
 80012ca:	f003 fda8 	bl	8004e1e <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 80012ce:	f7ff ffa1 	bl	8001214 <SPI_Init>
}
 80012d2:	bf00      	nop
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	200259d0 	.word	0x200259d0

080012dc <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b08a      	sub	sp, #40	@ 0x28
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 80012e4:	2300      	movs	r3, #0
 80012e6:	613b      	str	r3, [r7, #16]
 80012e8:	4b17      	ldr	r3, [pc, #92]	@ (8001348 <SPI_MspInit+0x6c>)
 80012ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ec:	4a16      	ldr	r2, [pc, #88]	@ (8001348 <SPI_MspInit+0x6c>)
 80012ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80012f2:	6453      	str	r3, [r2, #68]	@ 0x44
 80012f4:	4b14      	ldr	r3, [pc, #80]	@ (8001348 <SPI_MspInit+0x6c>)
 80012f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012fc:	613b      	str	r3, [r7, #16]
 80012fe:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 8001300:	2300      	movs	r3, #0
 8001302:	60fb      	str	r3, [r7, #12]
 8001304:	4b10      	ldr	r3, [pc, #64]	@ (8001348 <SPI_MspInit+0x6c>)
 8001306:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001308:	4a0f      	ldr	r2, [pc, #60]	@ (8001348 <SPI_MspInit+0x6c>)
 800130a:	f043 0320 	orr.w	r3, r3, #32
 800130e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001310:	4b0d      	ldr	r3, [pc, #52]	@ (8001348 <SPI_MspInit+0x6c>)
 8001312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001314:	f003 0320 	and.w	r3, r3, #32
 8001318:	60fb      	str	r3, [r7, #12]
 800131a:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 800131c:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001320:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8001322:	2302      	movs	r3, #2
 8001324:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8001326:	2302      	movs	r3, #2
 8001328:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 800132a:	2301      	movs	r3, #1
 800132c:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 800132e:	2305      	movs	r3, #5
 8001330:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 8001332:	f107 0314 	add.w	r3, r7, #20
 8001336:	4619      	mov	r1, r3
 8001338:	4804      	ldr	r0, [pc, #16]	@ (800134c <SPI_MspInit+0x70>)
 800133a:	f001 f907 	bl	800254c <HAL_GPIO_Init>
}
 800133e:	bf00      	nop
 8001340:	3728      	adds	r7, #40	@ 0x28
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40023800 	.word	0x40023800
 800134c:	40021400 	.word	0x40021400

08001350 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b088      	sub	sp, #32
 8001354:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 8001356:	4b36      	ldr	r3, [pc, #216]	@ (8001430 <LCD_IO_Init+0xe0>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d164      	bne.n	8001428 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 800135e:	4b34      	ldr	r3, [pc, #208]	@ (8001430 <LCD_IO_Init+0xe0>)
 8001360:	2201      	movs	r2, #1
 8001362:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8001364:	2300      	movs	r3, #0
 8001366:	60bb      	str	r3, [r7, #8]
 8001368:	4b32      	ldr	r3, [pc, #200]	@ (8001434 <LCD_IO_Init+0xe4>)
 800136a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136c:	4a31      	ldr	r2, [pc, #196]	@ (8001434 <LCD_IO_Init+0xe4>)
 800136e:	f043 0308 	orr.w	r3, r3, #8
 8001372:	6313      	str	r3, [r2, #48]	@ 0x30
 8001374:	4b2f      	ldr	r3, [pc, #188]	@ (8001434 <LCD_IO_Init+0xe4>)
 8001376:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001378:	f003 0308 	and.w	r3, r3, #8
 800137c:	60bb      	str	r3, [r7, #8]
 800137e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8001380:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001384:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001386:	2301      	movs	r3, #1
 8001388:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800138a:	2300      	movs	r3, #0
 800138c:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800138e:	2302      	movs	r3, #2
 8001390:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8001392:	f107 030c 	add.w	r3, r7, #12
 8001396:	4619      	mov	r1, r3
 8001398:	4827      	ldr	r0, [pc, #156]	@ (8001438 <LCD_IO_Init+0xe8>)
 800139a:	f001 f8d7 	bl	800254c <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	607b      	str	r3, [r7, #4]
 80013a2:	4b24      	ldr	r3, [pc, #144]	@ (8001434 <LCD_IO_Init+0xe4>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a6:	4a23      	ldr	r2, [pc, #140]	@ (8001434 <LCD_IO_Init+0xe4>)
 80013a8:	f043 0308 	orr.w	r3, r3, #8
 80013ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ae:	4b21      	ldr	r3, [pc, #132]	@ (8001434 <LCD_IO_Init+0xe4>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b2:	f003 0308 	and.w	r3, r3, #8
 80013b6:	607b      	str	r3, [r7, #4]
 80013b8:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80013ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013be:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80013c0:	2301      	movs	r3, #1
 80013c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80013c8:	2302      	movs	r3, #2
 80013ca:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80013cc:	f107 030c 	add.w	r3, r7, #12
 80013d0:	4619      	mov	r1, r3
 80013d2:	4819      	ldr	r0, [pc, #100]	@ (8001438 <LCD_IO_Init+0xe8>)
 80013d4:	f001 f8ba 	bl	800254c <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 80013d8:	2300      	movs	r3, #0
 80013da:	603b      	str	r3, [r7, #0]
 80013dc:	4b15      	ldr	r3, [pc, #84]	@ (8001434 <LCD_IO_Init+0xe4>)
 80013de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e0:	4a14      	ldr	r2, [pc, #80]	@ (8001434 <LCD_IO_Init+0xe4>)
 80013e2:	f043 0304 	orr.w	r3, r3, #4
 80013e6:	6313      	str	r3, [r2, #48]	@ 0x30
 80013e8:	4b12      	ldr	r3, [pc, #72]	@ (8001434 <LCD_IO_Init+0xe4>)
 80013ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ec:	f003 0304 	and.w	r3, r3, #4
 80013f0:	603b      	str	r3, [r7, #0]
 80013f2:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 80013f4:	2304      	movs	r3, #4
 80013f6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80013f8:	2301      	movs	r3, #1
 80013fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80013fc:	2300      	movs	r3, #0
 80013fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001400:	2302      	movs	r3, #2
 8001402:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8001404:	f107 030c 	add.w	r3, r7, #12
 8001408:	4619      	mov	r1, r3
 800140a:	480c      	ldr	r0, [pc, #48]	@ (800143c <LCD_IO_Init+0xec>)
 800140c:	f001 f89e 	bl	800254c <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8001410:	2200      	movs	r2, #0
 8001412:	2104      	movs	r1, #4
 8001414:	4809      	ldr	r0, [pc, #36]	@ (800143c <LCD_IO_Init+0xec>)
 8001416:	f001 fb51 	bl	8002abc <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 800141a:	2201      	movs	r2, #1
 800141c:	2104      	movs	r1, #4
 800141e:	4807      	ldr	r0, [pc, #28]	@ (800143c <LCD_IO_Init+0xec>)
 8001420:	f001 fb4c 	bl	8002abc <HAL_GPIO_WritePin>

    SPI_Init();
 8001424:	f7ff fef6 	bl	8001214 <SPI_Init>
  }
}
 8001428:	bf00      	nop
 800142a:	3720      	adds	r7, #32
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	20025a28 	.word	0x20025a28
 8001434:	40023800 	.word	0x40023800
 8001438:	40020c00 	.word	0x40020c00
 800143c:	40020800 	.word	0x40020800

08001440 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	4603      	mov	r3, r0
 8001448:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800144a:	2201      	movs	r2, #1
 800144c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001450:	480a      	ldr	r0, [pc, #40]	@ (800147c <LCD_IO_WriteData+0x3c>)
 8001452:	f001 fb33 	bl	8002abc <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 8001456:	2200      	movs	r2, #0
 8001458:	2104      	movs	r1, #4
 800145a:	4809      	ldr	r0, [pc, #36]	@ (8001480 <LCD_IO_WriteData+0x40>)
 800145c:	f001 fb2e 	bl	8002abc <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 8001460:	88fb      	ldrh	r3, [r7, #6]
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff ff10 	bl	8001288 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001468:	2201      	movs	r2, #1
 800146a:	2104      	movs	r1, #4
 800146c:	4804      	ldr	r0, [pc, #16]	@ (8001480 <LCD_IO_WriteData+0x40>)
 800146e:	f001 fb25 	bl	8002abc <HAL_GPIO_WritePin>
}
 8001472:	bf00      	nop
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40020c00 	.word	0x40020c00
 8001480:	40020800 	.word	0x40020800

08001484 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	4603      	mov	r3, r0
 800148c:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800148e:	2200      	movs	r2, #0
 8001490:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001494:	480a      	ldr	r0, [pc, #40]	@ (80014c0 <LCD_IO_WriteReg+0x3c>)
 8001496:	f001 fb11 	bl	8002abc <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 800149a:	2200      	movs	r2, #0
 800149c:	2104      	movs	r1, #4
 800149e:	4809      	ldr	r0, [pc, #36]	@ (80014c4 <LCD_IO_WriteReg+0x40>)
 80014a0:	f001 fb0c 	bl	8002abc <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 80014a4:	79fb      	ldrb	r3, [r7, #7]
 80014a6:	b29b      	uxth	r3, r3
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff feed 	bl	8001288 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80014ae:	2201      	movs	r2, #1
 80014b0:	2104      	movs	r1, #4
 80014b2:	4804      	ldr	r0, [pc, #16]	@ (80014c4 <LCD_IO_WriteReg+0x40>)
 80014b4:	f001 fb02 	bl	8002abc <HAL_GPIO_WritePin>
}
 80014b8:	bf00      	nop
 80014ba:	3708      	adds	r7, #8
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	40020c00 	.word	0x40020c00
 80014c4:	40020800 	.word	0x40020800

080014c8 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f000 fed3 	bl	800227c <HAL_Delay>
}
 80014d6:	bf00      	nop
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}

080014de <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014de:	b580      	push	{r7, lr}
 80014e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014e2:	f000 fe59 	bl	8002198 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014e6:	f000 f809 	bl	80014fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* USER CODE BEGIN 2 */
  ApplicationInit(); // Initializes the LCD functionality
 80014ea:	f7ff f815 	bl	8000518 <ApplicationInit>
  HAL_Delay(5000);
 80014ee:	f241 3088 	movw	r0, #5000	@ 0x1388
 80014f2:	f000 fec3 	bl	800227c <HAL_Delay>
  /* USER CODE END 2 */
  
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80014f6:	bf00      	nop
 80014f8:	e7fd      	b.n	80014f6 <main+0x18>
	...

080014fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b094      	sub	sp, #80	@ 0x50
 8001500:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001502:	f107 0320 	add.w	r3, r7, #32
 8001506:	2230      	movs	r2, #48	@ 0x30
 8001508:	2100      	movs	r1, #0
 800150a:	4618      	mov	r0, r3
 800150c:	f003 fede 	bl	80052cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001510:	f107 030c 	add.w	r3, r7, #12
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	605a      	str	r2, [r3, #4]
 800151a:	609a      	str	r2, [r3, #8]
 800151c:	60da      	str	r2, [r3, #12]
 800151e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001520:	2300      	movs	r3, #0
 8001522:	60bb      	str	r3, [r7, #8]
 8001524:	4b28      	ldr	r3, [pc, #160]	@ (80015c8 <SystemClock_Config+0xcc>)
 8001526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001528:	4a27      	ldr	r2, [pc, #156]	@ (80015c8 <SystemClock_Config+0xcc>)
 800152a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800152e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001530:	4b25      	ldr	r3, [pc, #148]	@ (80015c8 <SystemClock_Config+0xcc>)
 8001532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001534:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001538:	60bb      	str	r3, [r7, #8]
 800153a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800153c:	2300      	movs	r3, #0
 800153e:	607b      	str	r3, [r7, #4]
 8001540:	4b22      	ldr	r3, [pc, #136]	@ (80015cc <SystemClock_Config+0xd0>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a21      	ldr	r2, [pc, #132]	@ (80015cc <SystemClock_Config+0xd0>)
 8001546:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800154a:	6013      	str	r3, [r2, #0]
 800154c:	4b1f      	ldr	r3, [pc, #124]	@ (80015cc <SystemClock_Config+0xd0>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001554:	607b      	str	r3, [r7, #4]
 8001556:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001558:	2301      	movs	r3, #1
 800155a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800155c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001560:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001562:	2302      	movs	r3, #2
 8001564:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001566:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800156a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800156c:	2308      	movs	r3, #8
 800156e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001570:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001574:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001576:	2302      	movs	r3, #2
 8001578:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800157a:	2307      	movs	r3, #7
 800157c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800157e:	f107 0320 	add.w	r3, r7, #32
 8001582:	4618      	mov	r0, r3
 8001584:	f002 fd7e 	bl	8004084 <HAL_RCC_OscConfig>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800158e:	f000 f81f 	bl	80015d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001592:	230f      	movs	r3, #15
 8001594:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001596:	2302      	movs	r3, #2
 8001598:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800159a:	2300      	movs	r3, #0
 800159c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800159e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80015a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80015a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015a8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80015aa:	f107 030c 	add.w	r3, r7, #12
 80015ae:	2105      	movs	r1, #5
 80015b0:	4618      	mov	r0, r3
 80015b2:	f002 ffdf 	bl	8004574 <HAL_RCC_ClockConfig>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80015bc:	f000 f808 	bl	80015d0 <Error_Handler>
  }
}
 80015c0:	bf00      	nop
 80015c2:	3750      	adds	r7, #80	@ 0x50
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	40023800 	.word	0x40023800
 80015cc:	40007000 	.word	0x40007000

080015d0 <Error_Handler>:


void Error_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80015d4:	b672      	cpsid	i
}
 80015d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015d8:	bf00      	nop
 80015da:	e7fd      	b.n	80015d8 <Error_Handler+0x8>

080015dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	607b      	str	r3, [r7, #4]
 80015e6:	4b10      	ldr	r3, [pc, #64]	@ (8001628 <HAL_MspInit+0x4c>)
 80015e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ea:	4a0f      	ldr	r2, [pc, #60]	@ (8001628 <HAL_MspInit+0x4c>)
 80015ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80015f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001628 <HAL_MspInit+0x4c>)
 80015f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015fa:	607b      	str	r3, [r7, #4]
 80015fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015fe:	2300      	movs	r3, #0
 8001600:	603b      	str	r3, [r7, #0]
 8001602:	4b09      	ldr	r3, [pc, #36]	@ (8001628 <HAL_MspInit+0x4c>)
 8001604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001606:	4a08      	ldr	r2, [pc, #32]	@ (8001628 <HAL_MspInit+0x4c>)
 8001608:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800160c:	6413      	str	r3, [r2, #64]	@ 0x40
 800160e:	4b06      	ldr	r3, [pc, #24]	@ (8001628 <HAL_MspInit+0x4c>)
 8001610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001612:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001616:	603b      	str	r3, [r7, #0]
 8001618:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800161a:	2007      	movs	r0, #7
 800161c:	f000 ff46 	bl	80024ac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001620:	bf00      	nop
 8001622:	3708      	adds	r7, #8
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	40023800 	.word	0x40023800

0800162c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b08a      	sub	sp, #40	@ 0x28
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001634:	f107 0314 	add.w	r3, r7, #20
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	605a      	str	r2, [r3, #4]
 800163e:	609a      	str	r2, [r3, #8]
 8001640:	60da      	str	r2, [r3, #12]
 8001642:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a29      	ldr	r2, [pc, #164]	@ (80016f0 <HAL_I2C_MspInit+0xc4>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d14b      	bne.n	80016e6 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	613b      	str	r3, [r7, #16]
 8001652:	4b28      	ldr	r3, [pc, #160]	@ (80016f4 <HAL_I2C_MspInit+0xc8>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001656:	4a27      	ldr	r2, [pc, #156]	@ (80016f4 <HAL_I2C_MspInit+0xc8>)
 8001658:	f043 0304 	orr.w	r3, r3, #4
 800165c:	6313      	str	r3, [r2, #48]	@ 0x30
 800165e:	4b25      	ldr	r3, [pc, #148]	@ (80016f4 <HAL_I2C_MspInit+0xc8>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001662:	f003 0304 	and.w	r3, r3, #4
 8001666:	613b      	str	r3, [r7, #16]
 8001668:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	60fb      	str	r3, [r7, #12]
 800166e:	4b21      	ldr	r3, [pc, #132]	@ (80016f4 <HAL_I2C_MspInit+0xc8>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001672:	4a20      	ldr	r2, [pc, #128]	@ (80016f4 <HAL_I2C_MspInit+0xc8>)
 8001674:	f043 0301 	orr.w	r3, r3, #1
 8001678:	6313      	str	r3, [r2, #48]	@ 0x30
 800167a:	4b1e      	ldr	r3, [pc, #120]	@ (80016f4 <HAL_I2C_MspInit+0xc8>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	60fb      	str	r3, [r7, #12]
 8001684:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8001686:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800168a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800168c:	2312      	movs	r3, #18
 800168e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001690:	2300      	movs	r3, #0
 8001692:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001694:	2300      	movs	r3, #0
 8001696:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001698:	2304      	movs	r3, #4
 800169a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 800169c:	f107 0314 	add.w	r3, r7, #20
 80016a0:	4619      	mov	r1, r3
 80016a2:	4815      	ldr	r0, [pc, #84]	@ (80016f8 <HAL_I2C_MspInit+0xcc>)
 80016a4:	f000 ff52 	bl	800254c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80016a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016ae:	2312      	movs	r3, #18
 80016b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b2:	2300      	movs	r3, #0
 80016b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b6:	2300      	movs	r3, #0
 80016b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80016ba:	2304      	movs	r3, #4
 80016bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80016be:	f107 0314 	add.w	r3, r7, #20
 80016c2:	4619      	mov	r1, r3
 80016c4:	480d      	ldr	r0, [pc, #52]	@ (80016fc <HAL_I2C_MspInit+0xd0>)
 80016c6:	f000 ff41 	bl	800254c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80016ca:	2300      	movs	r3, #0
 80016cc:	60bb      	str	r3, [r7, #8]
 80016ce:	4b09      	ldr	r3, [pc, #36]	@ (80016f4 <HAL_I2C_MspInit+0xc8>)
 80016d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d2:	4a08      	ldr	r2, [pc, #32]	@ (80016f4 <HAL_I2C_MspInit+0xc8>)
 80016d4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80016d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80016da:	4b06      	ldr	r3, [pc, #24]	@ (80016f4 <HAL_I2C_MspInit+0xc8>)
 80016dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80016e2:	60bb      	str	r3, [r7, #8]
 80016e4:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 80016e6:	bf00      	nop
 80016e8:	3728      	adds	r7, #40	@ 0x28
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	40005c00 	.word	0x40005c00
 80016f4:	40023800 	.word	0x40023800
 80016f8:	40020800 	.word	0x40020800
 80016fc:	40020000 	.word	0x40020000

08001700 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b09a      	sub	sp, #104	@ 0x68
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001708:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	605a      	str	r2, [r3, #4]
 8001712:	609a      	str	r2, [r3, #8]
 8001714:	60da      	str	r2, [r3, #12]
 8001716:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001718:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800171c:	2230      	movs	r2, #48	@ 0x30
 800171e:	2100      	movs	r1, #0
 8001720:	4618      	mov	r0, r3
 8001722:	f003 fdd3 	bl	80052cc <memset>
  if(hltdc->Instance==LTDC)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a81      	ldr	r2, [pc, #516]	@ (8001930 <HAL_LTDC_MspInit+0x230>)
 800172c:	4293      	cmp	r3, r2
 800172e:	f040 80fb 	bne.w	8001928 <HAL_LTDC_MspInit+0x228>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001732:	2308      	movs	r3, #8
 8001734:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 200;
 8001736:	23c8      	movs	r3, #200	@ 0xc8
 8001738:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800173a:	2302      	movs	r3, #2
 800173c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_16;
 800173e:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8001742:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001744:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001748:	4618      	mov	r0, r3
 800174a:	f003 f91f 	bl	800498c <HAL_RCCEx_PeriphCLKConfig>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 8001754:	f7ff ff3c 	bl	80015d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001758:	2300      	movs	r3, #0
 800175a:	623b      	str	r3, [r7, #32]
 800175c:	4b75      	ldr	r3, [pc, #468]	@ (8001934 <HAL_LTDC_MspInit+0x234>)
 800175e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001760:	4a74      	ldr	r2, [pc, #464]	@ (8001934 <HAL_LTDC_MspInit+0x234>)
 8001762:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001766:	6453      	str	r3, [r2, #68]	@ 0x44
 8001768:	4b72      	ldr	r3, [pc, #456]	@ (8001934 <HAL_LTDC_MspInit+0x234>)
 800176a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800176c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001770:	623b      	str	r3, [r7, #32]
 8001772:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001774:	2300      	movs	r3, #0
 8001776:	61fb      	str	r3, [r7, #28]
 8001778:	4b6e      	ldr	r3, [pc, #440]	@ (8001934 <HAL_LTDC_MspInit+0x234>)
 800177a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800177c:	4a6d      	ldr	r2, [pc, #436]	@ (8001934 <HAL_LTDC_MspInit+0x234>)
 800177e:	f043 0320 	orr.w	r3, r3, #32
 8001782:	6313      	str	r3, [r2, #48]	@ 0x30
 8001784:	4b6b      	ldr	r3, [pc, #428]	@ (8001934 <HAL_LTDC_MspInit+0x234>)
 8001786:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001788:	f003 0320 	and.w	r3, r3, #32
 800178c:	61fb      	str	r3, [r7, #28]
 800178e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001790:	2300      	movs	r3, #0
 8001792:	61bb      	str	r3, [r7, #24]
 8001794:	4b67      	ldr	r3, [pc, #412]	@ (8001934 <HAL_LTDC_MspInit+0x234>)
 8001796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001798:	4a66      	ldr	r2, [pc, #408]	@ (8001934 <HAL_LTDC_MspInit+0x234>)
 800179a:	f043 0301 	orr.w	r3, r3, #1
 800179e:	6313      	str	r3, [r2, #48]	@ 0x30
 80017a0:	4b64      	ldr	r3, [pc, #400]	@ (8001934 <HAL_LTDC_MspInit+0x234>)
 80017a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a4:	f003 0301 	and.w	r3, r3, #1
 80017a8:	61bb      	str	r3, [r7, #24]
 80017aa:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ac:	2300      	movs	r3, #0
 80017ae:	617b      	str	r3, [r7, #20]
 80017b0:	4b60      	ldr	r3, [pc, #384]	@ (8001934 <HAL_LTDC_MspInit+0x234>)
 80017b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b4:	4a5f      	ldr	r2, [pc, #380]	@ (8001934 <HAL_LTDC_MspInit+0x234>)
 80017b6:	f043 0302 	orr.w	r3, r3, #2
 80017ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80017bc:	4b5d      	ldr	r3, [pc, #372]	@ (8001934 <HAL_LTDC_MspInit+0x234>)
 80017be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c0:	f003 0302 	and.w	r3, r3, #2
 80017c4:	617b      	str	r3, [r7, #20]
 80017c6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80017c8:	2300      	movs	r3, #0
 80017ca:	613b      	str	r3, [r7, #16]
 80017cc:	4b59      	ldr	r3, [pc, #356]	@ (8001934 <HAL_LTDC_MspInit+0x234>)
 80017ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d0:	4a58      	ldr	r2, [pc, #352]	@ (8001934 <HAL_LTDC_MspInit+0x234>)
 80017d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80017d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80017d8:	4b56      	ldr	r3, [pc, #344]	@ (8001934 <HAL_LTDC_MspInit+0x234>)
 80017da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017e0:	613b      	str	r3, [r7, #16]
 80017e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017e4:	2300      	movs	r3, #0
 80017e6:	60fb      	str	r3, [r7, #12]
 80017e8:	4b52      	ldr	r3, [pc, #328]	@ (8001934 <HAL_LTDC_MspInit+0x234>)
 80017ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ec:	4a51      	ldr	r2, [pc, #324]	@ (8001934 <HAL_LTDC_MspInit+0x234>)
 80017ee:	f043 0304 	orr.w	r3, r3, #4
 80017f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80017f4:	4b4f      	ldr	r3, [pc, #316]	@ (8001934 <HAL_LTDC_MspInit+0x234>)
 80017f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f8:	f003 0304 	and.w	r3, r3, #4
 80017fc:	60fb      	str	r3, [r7, #12]
 80017fe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001800:	2300      	movs	r3, #0
 8001802:	60bb      	str	r3, [r7, #8]
 8001804:	4b4b      	ldr	r3, [pc, #300]	@ (8001934 <HAL_LTDC_MspInit+0x234>)
 8001806:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001808:	4a4a      	ldr	r2, [pc, #296]	@ (8001934 <HAL_LTDC_MspInit+0x234>)
 800180a:	f043 0308 	orr.w	r3, r3, #8
 800180e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001810:	4b48      	ldr	r3, [pc, #288]	@ (8001934 <HAL_LTDC_MspInit+0x234>)
 8001812:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001814:	f003 0308 	and.w	r3, r3, #8
 8001818:	60bb      	str	r3, [r7, #8]
 800181a:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 800181c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001820:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001822:	2302      	movs	r3, #2
 8001824:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001826:	2300      	movs	r3, #0
 8001828:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182a:	2300      	movs	r3, #0
 800182c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800182e:	230e      	movs	r3, #14
 8001830:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001832:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001836:	4619      	mov	r1, r3
 8001838:	483f      	ldr	r0, [pc, #252]	@ (8001938 <HAL_LTDC_MspInit+0x238>)
 800183a:	f000 fe87 	bl	800254c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 800183e:	f641 0358 	movw	r3, #6232	@ 0x1858
 8001842:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001844:	2302      	movs	r3, #2
 8001846:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001848:	2300      	movs	r3, #0
 800184a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184c:	2300      	movs	r3, #0
 800184e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001850:	230e      	movs	r3, #14
 8001852:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001854:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001858:	4619      	mov	r1, r3
 800185a:	4838      	ldr	r0, [pc, #224]	@ (800193c <HAL_LTDC_MspInit+0x23c>)
 800185c:	f000 fe76 	bl	800254c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001860:	2303      	movs	r3, #3
 8001862:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001864:	2302      	movs	r3, #2
 8001866:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001868:	2300      	movs	r3, #0
 800186a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186c:	2300      	movs	r3, #0
 800186e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001870:	2309      	movs	r3, #9
 8001872:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001874:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001878:	4619      	mov	r1, r3
 800187a:	4831      	ldr	r0, [pc, #196]	@ (8001940 <HAL_LTDC_MspInit+0x240>)
 800187c:	f000 fe66 	bl	800254c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8001880:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001884:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001886:	2302      	movs	r3, #2
 8001888:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188a:	2300      	movs	r3, #0
 800188c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188e:	2300      	movs	r3, #0
 8001890:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001892:	230e      	movs	r3, #14
 8001894:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001896:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800189a:	4619      	mov	r1, r3
 800189c:	4828      	ldr	r0, [pc, #160]	@ (8001940 <HAL_LTDC_MspInit+0x240>)
 800189e:	f000 fe55 	bl	800254c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80018a2:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80018a6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a8:	2302      	movs	r3, #2
 80018aa:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ac:	2300      	movs	r3, #0
 80018ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b0:	2300      	movs	r3, #0
 80018b2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80018b4:	230e      	movs	r3, #14
 80018b6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80018b8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80018bc:	4619      	mov	r1, r3
 80018be:	4821      	ldr	r0, [pc, #132]	@ (8001944 <HAL_LTDC_MspInit+0x244>)
 80018c0:	f000 fe44 	bl	800254c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80018c4:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80018c8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ca:	2302      	movs	r3, #2
 80018cc:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ce:	2300      	movs	r3, #0
 80018d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d2:	2300      	movs	r3, #0
 80018d4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80018d6:	230e      	movs	r3, #14
 80018d8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018da:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80018de:	4619      	mov	r1, r3
 80018e0:	4819      	ldr	r0, [pc, #100]	@ (8001948 <HAL_LTDC_MspInit+0x248>)
 80018e2:	f000 fe33 	bl	800254c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 80018e6:	2348      	movs	r3, #72	@ 0x48
 80018e8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ea:	2302      	movs	r3, #2
 80018ec:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ee:	2300      	movs	r3, #0
 80018f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f2:	2300      	movs	r3, #0
 80018f4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80018f6:	230e      	movs	r3, #14
 80018f8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018fa:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80018fe:	4619      	mov	r1, r3
 8001900:	4812      	ldr	r0, [pc, #72]	@ (800194c <HAL_LTDC_MspInit+0x24c>)
 8001902:	f000 fe23 	bl	800254c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001906:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800190a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190c:	2302      	movs	r3, #2
 800190e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001910:	2300      	movs	r3, #0
 8001912:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001914:	2300      	movs	r3, #0
 8001916:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001918:	2309      	movs	r3, #9
 800191a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800191c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001920:	4619      	mov	r1, r3
 8001922:	4808      	ldr	r0, [pc, #32]	@ (8001944 <HAL_LTDC_MspInit+0x244>)
 8001924:	f000 fe12 	bl	800254c <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8001928:	bf00      	nop
 800192a:	3768      	adds	r7, #104	@ 0x68
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	40016800 	.word	0x40016800
 8001934:	40023800 	.word	0x40023800
 8001938:	40021400 	.word	0x40021400
 800193c:	40020000 	.word	0x40020000
 8001940:	40020400 	.word	0x40020400
 8001944:	40021800 	.word	0x40021800
 8001948:	40020800 	.word	0x40020800
 800194c:	40020c00 	.word	0x40020c00

08001950 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b08a      	sub	sp, #40	@ 0x28
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001958:	f107 0314 	add.w	r3, r7, #20
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]
 8001960:	605a      	str	r2, [r3, #4]
 8001962:	609a      	str	r2, [r3, #8]
 8001964:	60da      	str	r2, [r3, #12]
 8001966:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a19      	ldr	r2, [pc, #100]	@ (80019d4 <HAL_SPI_MspInit+0x84>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d12c      	bne.n	80019cc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001972:	2300      	movs	r3, #0
 8001974:	613b      	str	r3, [r7, #16]
 8001976:	4b18      	ldr	r3, [pc, #96]	@ (80019d8 <HAL_SPI_MspInit+0x88>)
 8001978:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800197a:	4a17      	ldr	r2, [pc, #92]	@ (80019d8 <HAL_SPI_MspInit+0x88>)
 800197c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001980:	6453      	str	r3, [r2, #68]	@ 0x44
 8001982:	4b15      	ldr	r3, [pc, #84]	@ (80019d8 <HAL_SPI_MspInit+0x88>)
 8001984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001986:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800198a:	613b      	str	r3, [r7, #16]
 800198c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800198e:	2300      	movs	r3, #0
 8001990:	60fb      	str	r3, [r7, #12]
 8001992:	4b11      	ldr	r3, [pc, #68]	@ (80019d8 <HAL_SPI_MspInit+0x88>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001996:	4a10      	ldr	r2, [pc, #64]	@ (80019d8 <HAL_SPI_MspInit+0x88>)
 8001998:	f043 0320 	orr.w	r3, r3, #32
 800199c:	6313      	str	r3, [r2, #48]	@ 0x30
 800199e:	4b0e      	ldr	r3, [pc, #56]	@ (80019d8 <HAL_SPI_MspInit+0x88>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a2:	f003 0320 	and.w	r3, r3, #32
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80019aa:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80019ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b0:	2302      	movs	r3, #2
 80019b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b4:	2300      	movs	r3, #0
 80019b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b8:	2300      	movs	r3, #0
 80019ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80019bc:	2305      	movs	r3, #5
 80019be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019c0:	f107 0314 	add.w	r3, r7, #20
 80019c4:	4619      	mov	r1, r3
 80019c6:	4805      	ldr	r0, [pc, #20]	@ (80019dc <HAL_SPI_MspInit+0x8c>)
 80019c8:	f000 fdc0 	bl	800254c <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 80019cc:	bf00      	nop
 80019ce:	3728      	adds	r7, #40	@ 0x28
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	40015000 	.word	0x40015000
 80019d8:	40023800 	.word	0x40023800
 80019dc:	40021400 	.word	0x40021400

080019e0 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a08      	ldr	r2, [pc, #32]	@ (8001a10 <HAL_SPI_MspDeInit+0x30>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d10a      	bne.n	8001a08 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 80019f2:	4b08      	ldr	r3, [pc, #32]	@ (8001a14 <HAL_SPI_MspDeInit+0x34>)
 80019f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019f6:	4a07      	ldr	r2, [pc, #28]	@ (8001a14 <HAL_SPI_MspDeInit+0x34>)
 80019f8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80019fc:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 80019fe:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8001a02:	4805      	ldr	r0, [pc, #20]	@ (8001a18 <HAL_SPI_MspDeInit+0x38>)
 8001a04:	f000 ff4e 	bl	80028a4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8001a08:	bf00      	nop
 8001a0a:	3708      	adds	r7, #8
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	40015000 	.word	0x40015000
 8001a14:	40023800 	.word	0x40023800
 8001a18:	40021400 	.word	0x40021400

08001a1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a20:	bf00      	nop
 8001a22:	e7fd      	b.n	8001a20 <NMI_Handler+0x4>

08001a24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a28:	bf00      	nop
 8001a2a:	e7fd      	b.n	8001a28 <HardFault_Handler+0x4>

08001a2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a30:	bf00      	nop
 8001a32:	e7fd      	b.n	8001a30 <MemManage_Handler+0x4>

08001a34 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a38:	bf00      	nop
 8001a3a:	e7fd      	b.n	8001a38 <BusFault_Handler+0x4>

08001a3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a40:	bf00      	nop
 8001a42:	e7fd      	b.n	8001a40 <UsageFault_Handler+0x4>

08001a44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a48:	bf00      	nop
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr

08001a52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a52:	b480      	push	{r7}
 8001a54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a56:	bf00      	nop
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a64:	bf00      	nop
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr

08001a6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a72:	f000 fbe3 	bl	800223c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a76:	bf00      	nop
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b082      	sub	sp, #8
 8001a7e:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports 
    I2C3_MspInit();
 8001a80:	f000 f9ce 	bl	8001e20 <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 8001a84:	f000 f98e 	bl	8001da4 <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8001a88:	2202      	movs	r2, #2
 8001a8a:	2103      	movs	r1, #3
 8001a8c:	2082      	movs	r0, #130	@ 0x82
 8001a8e:	f000 fa1b 	bl	8001ec8 <I2C3_Write>
    HAL_Delay(5);
 8001a92:	2005      	movs	r0, #5
 8001a94:	f000 fbf2 	bl	800227c <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8001a98:	2200      	movs	r2, #0
 8001a9a:	2103      	movs	r1, #3
 8001a9c:	2082      	movs	r0, #130	@ 0x82
 8001a9e:	f000 fa13 	bl	8001ec8 <I2C3_Write>
    HAL_Delay(2);
 8001aa2:	2002      	movs	r0, #2
 8001aa4:	f000 fbea 	bl	800227c <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 8001aa8:	1cba      	adds	r2, r7, #2
 8001aaa:	2302      	movs	r3, #2
 8001aac:	2100      	movs	r1, #0
 8001aae:	2082      	movs	r0, #130	@ 0x82
 8001ab0:	f000 fa5a 	bl	8001f68 <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 8001ab4:	887b      	ldrh	r3, [r7, #2]
 8001ab6:	021b      	lsls	r3, r3, #8
 8001ab8:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 8001aba:	887b      	ldrh	r3, [r7, #2]
 8001abc:	0a1b      	lsrs	r3, r3, #8
 8001abe:	b29a      	uxth	r2, r3
 8001ac0:	88fb      	ldrh	r3, [r7, #6]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 8001ac6:	88fb      	ldrh	r3, [r7, #6]
 8001ac8:	f640 0211 	movw	r2, #2065	@ 0x811
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d001      	beq.n	8001ad4 <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e075      	b.n	8001bc0 <STMPE811_Init+0x146>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8001ad4:	2202      	movs	r2, #2
 8001ad6:	2103      	movs	r1, #3
 8001ad8:	2082      	movs	r0, #130	@ 0x82
 8001ada:	f000 f9f5 	bl	8001ec8 <I2C3_Write>
    HAL_Delay(5);
 8001ade:	2005      	movs	r0, #5
 8001ae0:	f000 fbcc 	bl	800227c <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	2103      	movs	r1, #3
 8001ae8:	2082      	movs	r0, #130	@ 0x82
 8001aea:	f000 f9ed 	bl	8001ec8 <I2C3_Write>
    HAL_Delay(2);
 8001aee:	2002      	movs	r0, #2
 8001af0:	f000 fbc4 	bl	800227c <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8001af4:	2004      	movs	r0, #4
 8001af6:	f000 f867 	bl	8001bc8 <STMPE811_Read>
 8001afa:	4603      	mov	r3, r0
 8001afc:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 8001afe:	797b      	ldrb	r3, [r7, #5]
 8001b00:	f023 0301 	bic.w	r3, r3, #1
 8001b04:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8001b06:	797b      	ldrb	r3, [r7, #5]
 8001b08:	461a      	mov	r2, r3
 8001b0a:	2104      	movs	r1, #4
 8001b0c:	2082      	movs	r0, #130	@ 0x82
 8001b0e:	f000 f9db 	bl	8001ec8 <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8001b12:	2004      	movs	r0, #4
 8001b14:	f000 f858 	bl	8001bc8 <STMPE811_Read>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 8001b1c:	797b      	ldrb	r3, [r7, #5]
 8001b1e:	f023 0302 	bic.w	r3, r3, #2
 8001b22:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8001b24:	797b      	ldrb	r3, [r7, #5]
 8001b26:	461a      	mov	r2, r3
 8001b28:	2104      	movs	r1, #4
 8001b2a:	2082      	movs	r0, #130	@ 0x82
 8001b2c:	f000 f9cc 	bl	8001ec8 <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 8001b30:	2249      	movs	r2, #73	@ 0x49
 8001b32:	2120      	movs	r1, #32
 8001b34:	2082      	movs	r0, #130	@ 0x82
 8001b36:	f000 f9c7 	bl	8001ec8 <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 8001b3a:	2002      	movs	r0, #2
 8001b3c:	f000 fb9e 	bl	800227c <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 8001b40:	2201      	movs	r2, #1
 8001b42:	2121      	movs	r1, #33	@ 0x21
 8001b44:	2082      	movs	r0, #130	@ 0x82
 8001b46:	f000 f9bf 	bl	8001ec8 <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 8001b4a:	2017      	movs	r0, #23
 8001b4c:	f000 f83c 	bl	8001bc8 <STMPE811_Read>
 8001b50:	4603      	mov	r3, r0
 8001b52:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 8001b54:	797b      	ldrb	r3, [r7, #5]
 8001b56:	f043 031e 	orr.w	r3, r3, #30
 8001b5a:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 8001b5c:	797b      	ldrb	r3, [r7, #5]
 8001b5e:	461a      	mov	r2, r3
 8001b60:	2117      	movs	r1, #23
 8001b62:	2082      	movs	r0, #130	@ 0x82
 8001b64:	f000 f9b0 	bl	8001ec8 <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 8001b68:	229a      	movs	r2, #154	@ 0x9a
 8001b6a:	2141      	movs	r1, #65	@ 0x41
 8001b6c:	2082      	movs	r0, #130	@ 0x82
 8001b6e:	f000 f9ab 	bl	8001ec8 <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 8001b72:	2201      	movs	r2, #1
 8001b74:	214a      	movs	r1, #74	@ 0x4a
 8001b76:	2082      	movs	r0, #130	@ 0x82
 8001b78:	f000 f9a6 	bl	8001ec8 <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	214b      	movs	r1, #75	@ 0x4b
 8001b80:	2082      	movs	r0, #130	@ 0x82
 8001b82:	f000 f9a1 	bl	8001ec8 <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8001b86:	2200      	movs	r2, #0
 8001b88:	214b      	movs	r1, #75	@ 0x4b
 8001b8a:	2082      	movs	r0, #130	@ 0x82
 8001b8c:	f000 f99c 	bl	8001ec8 <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 8001b90:	2201      	movs	r2, #1
 8001b92:	2156      	movs	r1, #86	@ 0x56
 8001b94:	2082      	movs	r0, #130	@ 0x82
 8001b96:	f000 f997 	bl	8001ec8 <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	2158      	movs	r1, #88	@ 0x58
 8001b9e:	2082      	movs	r0, #130	@ 0x82
 8001ba0:	f000 f992 	bl	8001ec8 <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 8001ba4:	2203      	movs	r2, #3
 8001ba6:	2140      	movs	r1, #64	@ 0x40
 8001ba8:	2082      	movs	r0, #130	@ 0x82
 8001baa:	f000 f98d 	bl	8001ec8 <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 8001bae:	22ff      	movs	r2, #255	@ 0xff
 8001bb0:	210b      	movs	r1, #11
 8001bb2:	2082      	movs	r0, #130	@ 0x82
 8001bb4:	f000 f988 	bl	8001ec8 <I2C3_Write>
    
    /* Wait for 2 ms delay */
    HAL_Delay(200);
 8001bb8:	20c8      	movs	r0, #200	@ 0xc8
 8001bba:	f000 fb5f 	bl	800227c <HAL_Delay>

    return STMPE811_State_Ok;
 8001bbe:	2302      	movs	r3, #2

}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3708      	adds	r7, #8
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	4603      	mov	r3, r0
 8001bd0:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 8001bd2:	f107 020f 	add.w	r2, r7, #15
 8001bd6:	79fb      	ldrb	r3, [r7, #7]
 8001bd8:	4619      	mov	r1, r3
 8001bda:	2082      	movs	r0, #130	@ 0x82
 8001bdc:	f000 f99e 	bl	8001f1c <I2C3_Read>

    return readData;
 8001be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3710      	adds	r7, #16
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <STMPE811_ReadTouch>:
}

/* The below function was created by Tilen MAJERLE but modified by Xavion */

STMPE811_State_t STMPE811_ReadTouch(STMPE811_TouchData *structdata)  //TM Function
{
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b084      	sub	sp, #16
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
    uint8_t val;

    /* Save state */
    structdata->last_pressed = structdata->pressed;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	791a      	ldrb	r2, [r3, #4]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	715a      	strb	r2, [r3, #5]

    /* Read */
    val = STMPE811_Read(STMPE811_TSC_CTRL);
 8001bfa:	2040      	movs	r0, #64	@ 0x40
 8001bfc:	f7ff ffe4 	bl	8001bc8 <STMPE811_Read>
 8001c00:	4603      	mov	r3, r0
 8001c02:	73fb      	strb	r3, [r7, #15]
    if ((val & 0x80) == 0) {
 8001c04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	db0e      	blt.n	8001c2a <STMPE811_ReadTouch+0x40>
        //Not pressed
        structdata->pressed = STMPE811_State_Released;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	711a      	strb	r2, [r3, #4]

        //Reset Fifo
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8001c12:	2201      	movs	r2, #1
 8001c14:	214b      	movs	r1, #75	@ 0x4b
 8001c16:	2082      	movs	r0, #130	@ 0x82
 8001c18:	f000 f956 	bl	8001ec8 <I2C3_Write>
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	214b      	movs	r1, #75	@ 0x4b
 8001c20:	2082      	movs	r0, #130	@ 0x82
 8001c22:	f000 f951 	bl	8001ec8 <I2C3_Write>

        return STMPE811_State_Released;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e0a7      	b.n	8001d7a <STMPE811_ReadTouch+0x190>

    /* Clear all the status pending bits if any */
    //TM_I2C_Write(STMPE811_I2C, STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);

    //Pressed
    if (structdata->orientation == STMPE811_Orientation_Portrait_1) {
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	799b      	ldrb	r3, [r3, #6]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d117      	bne.n	8001c62 <STMPE811_ReadTouch+0x78>
        structdata->x = 239 - TM_STMPE811_ReadX(structdata->x);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	881b      	ldrh	r3, [r3, #0]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f000 f9b8 	bl	8001fac <TM_STMPE811_ReadX>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8001c42:	b29a      	uxth	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	801a      	strh	r2, [r3, #0]
        structdata->y = 319 - TM_STMPE811_ReadY(structdata->y);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	885b      	ldrh	r3, [r3, #2]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f000 fa0d 	bl	800206c <TM_STMPE811_ReadY>
 8001c52:	4603      	mov	r3, r0
 8001c54:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8001c58:	3301      	adds	r3, #1
 8001c5a:	b29a      	uxth	r2, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	805a      	strh	r2, [r3, #2]
 8001c60:	e048      	b.n	8001cf4 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Portrait_2) {
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	799b      	ldrb	r3, [r3, #6]
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d112      	bne.n	8001c90 <STMPE811_ReadTouch+0xa6>
        structdata->x = TM_STMPE811_ReadX(structdata->x);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	881b      	ldrh	r3, [r3, #0]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f000 f99c 	bl	8001fac <TM_STMPE811_ReadX>
 8001c74:	4603      	mov	r3, r0
 8001c76:	461a      	mov	r2, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	801a      	strh	r2, [r3, #0]
        structdata->y = TM_STMPE811_ReadY(structdata->y);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	885b      	ldrh	r3, [r3, #2]
 8001c80:	4618      	mov	r0, r3
 8001c82:	f000 f9f3 	bl	800206c <TM_STMPE811_ReadY>
 8001c86:	4603      	mov	r3, r0
 8001c88:	461a      	mov	r2, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	805a      	strh	r2, [r3, #2]
 8001c8e:	e031      	b.n	8001cf4 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_1) {
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	799b      	ldrb	r3, [r3, #6]
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d115      	bne.n	8001cc4 <STMPE811_ReadTouch+0xda>
        structdata->y = TM_STMPE811_ReadX(structdata->y);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	885b      	ldrh	r3, [r3, #2]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f000 f985 	bl	8001fac <TM_STMPE811_ReadX>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	805a      	strh	r2, [r3, #2]
        structdata->x = 319 - TM_STMPE811_ReadY(structdata->x);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	881b      	ldrh	r3, [r3, #0]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f000 f9dc 	bl	800206c <TM_STMPE811_ReadY>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8001cba:	3301      	adds	r3, #1
 8001cbc:	b29a      	uxth	r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	801a      	strh	r2, [r3, #0]
 8001cc2:	e017      	b.n	8001cf4 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_2) {
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	799b      	ldrb	r3, [r3, #6]
 8001cc8:	2b03      	cmp	r3, #3
 8001cca:	d113      	bne.n	8001cf4 <STMPE811_ReadTouch+0x10a>
        structdata->y = 239 - TM_STMPE811_ReadX(structdata->x);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	881b      	ldrh	r3, [r3, #0]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f000 f96b 	bl	8001fac <TM_STMPE811_ReadX>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8001cdc:	b29a      	uxth	r2, r3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	805a      	strh	r2, [r3, #2]
        structdata->x = TM_STMPE811_ReadY(structdata->x);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	881b      	ldrh	r3, [r3, #0]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f000 f9c0 	bl	800206c <TM_STMPE811_ReadY>
 8001cec:	4603      	mov	r3, r0
 8001cee:	461a      	mov	r2, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	214b      	movs	r1, #75	@ 0x4b
 8001cf8:	2082      	movs	r0, #130	@ 0x82
 8001cfa:	f000 f8e5 	bl	8001ec8 <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8001cfe:	2200      	movs	r2, #0
 8001d00:	214b      	movs	r1, #75	@ 0x4b
 8001d02:	2082      	movs	r0, #130	@ 0x82
 8001d04:	f000 f8e0 	bl	8001ec8 <I2C3_Write>

    //Check for valid data
    if (structdata->orientation == STMPE811_Orientation_Portrait_1 || structdata->orientation == STMPE811_Orientation_Portrait_2) {
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	799b      	ldrb	r3, [r3, #6]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d003      	beq.n	8001d18 <STMPE811_ReadTouch+0x12e>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	799b      	ldrb	r3, [r3, #6]
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d115      	bne.n	8001d44 <STMPE811_ReadTouch+0x15a>
        //Portrait
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	881b      	ldrh	r3, [r3, #0]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d027      	beq.n	8001d70 <STMPE811_ReadTouch+0x186>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	881b      	ldrh	r3, [r3, #0]
 8001d24:	2bee      	cmp	r3, #238	@ 0xee
 8001d26:	d823      	bhi.n	8001d70 <STMPE811_ReadTouch+0x186>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	885b      	ldrh	r3, [r3, #2]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d01f      	beq.n	8001d70 <STMPE811_ReadTouch+0x186>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	885b      	ldrh	r3, [r3, #2]
 8001d34:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 8001d38:	d81a      	bhi.n	8001d70 <STMPE811_ReadTouch+0x186>
            structdata->pressed = STMPE811_State_Pressed;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 8001d40:	2300      	movs	r3, #0
 8001d42:	e01a      	b.n	8001d7a <STMPE811_ReadTouch+0x190>
        }
    } else {
        //Landscape
        if (structdata->x > 0 && structdata->x < 319 && structdata->y > 0 && structdata->y < 239) {
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	881b      	ldrh	r3, [r3, #0]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d012      	beq.n	8001d72 <STMPE811_ReadTouch+0x188>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	881b      	ldrh	r3, [r3, #0]
 8001d50:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 8001d54:	d80d      	bhi.n	8001d72 <STMPE811_ReadTouch+0x188>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	885b      	ldrh	r3, [r3, #2]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d009      	beq.n	8001d72 <STMPE811_ReadTouch+0x188>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	885b      	ldrh	r3, [r3, #2]
 8001d62:	2bee      	cmp	r3, #238	@ 0xee
 8001d64:	d805      	bhi.n	8001d72 <STMPE811_ReadTouch+0x188>
            structdata->pressed = STMPE811_State_Pressed;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	e004      	b.n	8001d7a <STMPE811_ReadTouch+0x190>
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 8001d70:	bf00      	nop
        }
    }

    structdata->pressed = STMPE811_State_Released;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2201      	movs	r2, #1
 8001d76:	711a      	strb	r2, [r3, #4]

    return STMPE811_State_Released;
 8001d78:	2301      	movs	r3, #1
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3710      	adds	r7, #16
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
	...

08001d84 <verifyHAL_I2C_IS_OKAY>:
    }
    return true;
}

//  ******************************** I2C Functions ********************************//
void verifyHAL_I2C_IS_OKAY(){
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
    if (HAL_status != HAL_OK)
 8001d88:	4b05      	ldr	r3, [pc, #20]	@ (8001da0 <verifyHAL_I2C_IS_OKAY+0x1c>)
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <verifyHAL_I2C_IS_OKAY+0x10>
    {
        while(1);
 8001d90:	bf00      	nop
 8001d92:	e7fd      	b.n	8001d90 <verifyHAL_I2C_IS_OKAY+0xc>
    }
}
 8001d94:	bf00      	nop
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	20025a80 	.word	0x20025a80

08001da4 <I2C3_Init>:

static void I2C3_Init()
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 8001daa:	2300      	movs	r3, #0
 8001dac:	603b      	str	r3, [r7, #0]
 8001dae:	4b18      	ldr	r3, [pc, #96]	@ (8001e10 <I2C3_Init+0x6c>)
 8001db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db2:	4a17      	ldr	r2, [pc, #92]	@ (8001e10 <I2C3_Init+0x6c>)
 8001db4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001db8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dba:	4b15      	ldr	r3, [pc, #84]	@ (8001e10 <I2C3_Init+0x6c>)
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dbe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001dc2:	603b      	str	r3, [r7, #0]
 8001dc4:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 8001dc6:	4b13      	ldr	r3, [pc, #76]	@ (8001e14 <I2C3_Init+0x70>)
 8001dc8:	4a13      	ldr	r2, [pc, #76]	@ (8001e18 <I2C3_Init+0x74>)
 8001dca:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 8001dcc:	4b11      	ldr	r3, [pc, #68]	@ (8001e14 <I2C3_Init+0x70>)
 8001dce:	4a13      	ldr	r2, [pc, #76]	@ (8001e1c <I2C3_Init+0x78>)
 8001dd0:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001dd2:	4b10      	ldr	r3, [pc, #64]	@ (8001e14 <I2C3_Init+0x70>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 8001dd8:	4b0e      	ldr	r3, [pc, #56]	@ (8001e14 <I2C3_Init+0x70>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001dde:	4b0d      	ldr	r3, [pc, #52]	@ (8001e14 <I2C3_Init+0x70>)
 8001de0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001de4:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 8001de6:	4b0b      	ldr	r3, [pc, #44]	@ (8001e14 <I2C3_Init+0x70>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001dec:	4b09      	ldr	r3, [pc, #36]	@ (8001e14 <I2C3_Init+0x70>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode? 

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 8001df2:	4808      	ldr	r0, [pc, #32]	@ (8001e14 <I2C3_Init+0x70>)
 8001df4:	f000 fe7c 	bl	8002af0 <HAL_I2C_Init>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8001dfc:	79fb      	ldrb	r3, [r7, #7]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 8001e02:	bf00      	nop
 8001e04:	e7fd      	b.n	8001e02 <I2C3_Init+0x5e>
    }
    return;
 8001e06:	bf00      	nop
}
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	40023800 	.word	0x40023800
 8001e14:	20025a2c 	.word	0x20025a2c
 8001e18:	40005c00 	.word	0x40005c00
 8001e1c:	000186a0 	.word	0x000186a0

08001e20 <I2C3_MspInit>:

// GPIO Initializations 
static void I2C3_MspInit(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b088      	sub	sp, #32
 8001e24:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e26:	f107 030c 	add.w	r3, r7, #12
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	601a      	str	r2, [r3, #0]
 8001e2e:	605a      	str	r2, [r3, #4]
 8001e30:	609a      	str	r2, [r3, #8]
 8001e32:	60da      	str	r2, [r3, #12]
 8001e34:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e36:	2300      	movs	r3, #0
 8001e38:	60bb      	str	r3, [r7, #8]
 8001e3a:	4b20      	ldr	r3, [pc, #128]	@ (8001ebc <I2C3_MspInit+0x9c>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e3e:	4a1f      	ldr	r2, [pc, #124]	@ (8001ebc <I2C3_MspInit+0x9c>)
 8001e40:	f043 0304 	orr.w	r3, r3, #4
 8001e44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e46:	4b1d      	ldr	r3, [pc, #116]	@ (8001ebc <I2C3_MspInit+0x9c>)
 8001e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e4a:	f003 0304 	and.w	r3, r3, #4
 8001e4e:	60bb      	str	r3, [r7, #8]
 8001e50:	68bb      	ldr	r3, [r7, #8]

    // GPIOA 
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e52:	2300      	movs	r3, #0
 8001e54:	607b      	str	r3, [r7, #4]
 8001e56:	4b19      	ldr	r3, [pc, #100]	@ (8001ebc <I2C3_MspInit+0x9c>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e5a:	4a18      	ldr	r2, [pc, #96]	@ (8001ebc <I2C3_MspInit+0x9c>)
 8001e5c:	f043 0301 	orr.w	r3, r3, #1
 8001e60:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e62:	4b16      	ldr	r3, [pc, #88]	@ (8001ebc <I2C3_MspInit+0x9c>)
 8001e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	607b      	str	r3, [r7, #4]
 8001e6c:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8001e6e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001e72:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e74:	2312      	movs	r3, #18
 8001e76:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001e80:	2304      	movs	r3, #4
 8001e82:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8001e84:	f107 030c 	add.w	r3, r7, #12
 8001e88:	4619      	mov	r1, r3
 8001e8a:	480d      	ldr	r0, [pc, #52]	@ (8001ec0 <I2C3_MspInit+0xa0>)
 8001e8c:	f000 fb5e 	bl	800254c <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001e90:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e94:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e96:	2312      	movs	r3, #18
 8001e98:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001ea2:	2304      	movs	r3, #4
 8001ea4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8001ea6:	f107 030c 	add.w	r3, r7, #12
 8001eaa:	4619      	mov	r1, r3
 8001eac:	4805      	ldr	r0, [pc, #20]	@ (8001ec4 <I2C3_MspInit+0xa4>)
 8001eae:	f000 fb4d 	bl	800254c <HAL_GPIO_Init>
    
}
 8001eb2:	bf00      	nop
 8001eb4:	3720      	adds	r7, #32
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	40023800 	.word	0x40023800
 8001ec0:	40020800 	.word	0x40020800
 8001ec4:	40020000 	.word	0x40020000

08001ec8 <I2C3_Write>:

// This function should only be used for single BYTE transfers 
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b088      	sub	sp, #32
 8001ecc:	af04      	add	r7, sp, #16
 8001ece:	4603      	mov	r3, r0
 8001ed0:	80fb      	strh	r3, [r7, #6]
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	717b      	strb	r3, [r7, #5]
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 8001eda:	793b      	ldrb	r3, [r7, #4]
 8001edc:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call? 
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8001ede:	797b      	ldrb	r3, [r7, #5]
 8001ee0:	b29a      	uxth	r2, r3
 8001ee2:	88f9      	ldrh	r1, [r7, #6]
 8001ee4:	4b0a      	ldr	r3, [pc, #40]	@ (8001f10 <I2C3_Write+0x48>)
 8001ee6:	9302      	str	r3, [sp, #8]
 8001ee8:	2301      	movs	r3, #1
 8001eea:	9301      	str	r3, [sp, #4]
 8001eec:	f107 030f 	add.w	r3, r7, #15
 8001ef0:	9300      	str	r3, [sp, #0]
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	4807      	ldr	r0, [pc, #28]	@ (8001f14 <I2C3_Write+0x4c>)
 8001ef6:	f000 ff3f 	bl	8002d78 <HAL_I2C_Mem_Write>
 8001efa:	4603      	mov	r3, r0
 8001efc:	461a      	mov	r2, r3
 8001efe:	4b06      	ldr	r3, [pc, #24]	@ (8001f18 <I2C3_Write+0x50>)
 8001f00:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8001f02:	f7ff ff3f 	bl	8001d84 <verifyHAL_I2C_IS_OKAY>
}
 8001f06:	bf00      	nop
 8001f08:	3710      	adds	r7, #16
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	0003d090 	.word	0x0003d090
 8001f14:	20025a2c 	.word	0x20025a2c
 8001f18:	20025a80 	.word	0x20025a80

08001f1c <I2C3_Read>:

// This function should only be used for single BYTE transfers 
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b086      	sub	sp, #24
 8001f20:	af04      	add	r7, sp, #16
 8001f22:	4603      	mov	r3, r0
 8001f24:	603a      	str	r2, [r7, #0]
 8001f26:	71fb      	strb	r3, [r7, #7]
 8001f28:	460b      	mov	r3, r1
 8001f2a:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8001f2c:	79fb      	ldrb	r3, [r7, #7]
 8001f2e:	b299      	uxth	r1, r3
 8001f30:	79bb      	ldrb	r3, [r7, #6]
 8001f32:	b29a      	uxth	r2, r3
 8001f34:	4b09      	ldr	r3, [pc, #36]	@ (8001f5c <I2C3_Read+0x40>)
 8001f36:	9302      	str	r3, [sp, #8]
 8001f38:	2301      	movs	r3, #1
 8001f3a:	9301      	str	r3, [sp, #4]
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	9300      	str	r3, [sp, #0]
 8001f40:	2301      	movs	r3, #1
 8001f42:	4807      	ldr	r0, [pc, #28]	@ (8001f60 <I2C3_Read+0x44>)
 8001f44:	f001 f812 	bl	8002f6c <HAL_I2C_Mem_Read>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	4b05      	ldr	r3, [pc, #20]	@ (8001f64 <I2C3_Read+0x48>)
 8001f4e:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8001f50:	f7ff ff18 	bl	8001d84 <verifyHAL_I2C_IS_OKAY>
}
 8001f54:	bf00      	nop
 8001f56:	3708      	adds	r7, #8
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	0003d090 	.word	0x0003d090
 8001f60:	20025a2c 	.word	0x20025a2c
 8001f64:	20025a80 	.word	0x20025a80

08001f68 <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b086      	sub	sp, #24
 8001f6c:	af04      	add	r7, sp, #16
 8001f6e:	603a      	str	r2, [r7, #0]
 8001f70:	461a      	mov	r2, r3
 8001f72:	4603      	mov	r3, r0
 8001f74:	71fb      	strb	r3, [r7, #7]
 8001f76:	460b      	mov	r3, r1
 8001f78:	71bb      	strb	r3, [r7, #6]
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 8001f7e:	79fb      	ldrb	r3, [r7, #7]
 8001f80:	b299      	uxth	r1, r3
 8001f82:	79bb      	ldrb	r3, [r7, #6]
 8001f84:	b29a      	uxth	r2, r3
 8001f86:	4b07      	ldr	r3, [pc, #28]	@ (8001fa4 <I2C3_MulitByteRead+0x3c>)
 8001f88:	9302      	str	r3, [sp, #8]
 8001f8a:	88bb      	ldrh	r3, [r7, #4]
 8001f8c:	9301      	str	r3, [sp, #4]
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	9300      	str	r3, [sp, #0]
 8001f92:	2301      	movs	r3, #1
 8001f94:	4804      	ldr	r0, [pc, #16]	@ (8001fa8 <I2C3_MulitByteRead+0x40>)
 8001f96:	f000 ffe9 	bl	8002f6c <HAL_I2C_Mem_Read>
}
 8001f9a:	bf00      	nop
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	0003d090 	.word	0x0003d090
 8001fa8:	20025a2c 	.word	0x20025a2c

08001fac <TM_STMPE811_ReadX>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x) { // TM FUNCTION 
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 8001fb6:	204d      	movs	r0, #77	@ 0x4d
 8001fb8:	f7ff fe06 	bl	8001bc8 <STMPE811_Read>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 8001fc0:	204e      	movs	r0, #78	@ 0x4e
 8001fc2:	f7ff fe01 	bl	8001bc8 <STMPE811_Read>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8001fca:	7a7b      	ldrb	r3, [r7, #9]
 8001fcc:	b21b      	sxth	r3, r3
 8001fce:	021b      	lsls	r3, r3, #8
 8001fd0:	b21a      	sxth	r2, r3
 8001fd2:	7a3b      	ldrb	r3, [r7, #8]
 8001fd4:	b21b      	sxth	r3, r3
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000) {
 8001fda:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001fde:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	dc06      	bgt.n	8001ff4 <TM_STMPE811_ReadX+0x48>
        val = 3900 - val;
 8001fe6:	89fb      	ldrh	r3, [r7, #14]
 8001fe8:	f5c3 6373 	rsb	r3, r3, #3888	@ 0xf30
 8001fec:	330c      	adds	r3, #12
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	81fb      	strh	r3, [r7, #14]
 8001ff2:	e005      	b.n	8002000 <TM_STMPE811_ReadX+0x54>
    } else {
        val = 3800 - val;
 8001ff4:	89fb      	ldrh	r3, [r7, #14]
 8001ff6:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 8001ffa:	3308      	adds	r3, #8
 8001ffc:	b29b      	uxth	r3, r3
 8001ffe:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 8002000:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002004:	4a18      	ldr	r2, [pc, #96]	@ (8002068 <TM_STMPE811_ReadX+0xbc>)
 8002006:	fb82 1203 	smull	r1, r2, r2, r3
 800200a:	441a      	add	r2, r3
 800200c:	10d2      	asrs	r2, r2, #3
 800200e:	17db      	asrs	r3, r3, #31
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	81fb      	strh	r3, [r7, #14]

    if (val > 239) {
 8002014:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002018:	2bef      	cmp	r3, #239	@ 0xef
 800201a:	dd02      	ble.n	8002022 <TM_STMPE811_ReadX+0x76>
        val = 239;
 800201c:	23ef      	movs	r3, #239	@ 0xef
 800201e:	81fb      	strh	r3, [r7, #14]
 8002020:	e005      	b.n	800202e <TM_STMPE811_ReadX+0x82>
    } else if (val < 0) {
 8002022:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002026:	2b00      	cmp	r3, #0
 8002028:	da01      	bge.n	800202e <TM_STMPE811_ReadX+0x82>
        val = 0;
 800202a:	2300      	movs	r3, #0
 800202c:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 800202e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002032:	88fb      	ldrh	r3, [r7, #6]
 8002034:	429a      	cmp	r2, r3
 8002036:	dd05      	ble.n	8002044 <TM_STMPE811_ReadX+0x98>
 8002038:	89fa      	ldrh	r2, [r7, #14]
 800203a:	88fb      	ldrh	r3, [r7, #6]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	b29b      	uxth	r3, r3
 8002040:	b21b      	sxth	r3, r3
 8002042:	e004      	b.n	800204e <TM_STMPE811_ReadX+0xa2>
 8002044:	89fb      	ldrh	r3, [r7, #14]
 8002046:	88fa      	ldrh	r2, [r7, #6]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	b29b      	uxth	r3, r3
 800204c:	b21b      	sxth	r3, r3
 800204e:	81bb      	strh	r3, [r7, #12]
    if (dx > 4) {
 8002050:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002054:	2b04      	cmp	r3, #4
 8002056:	dd01      	ble.n	800205c <TM_STMPE811_ReadX+0xb0>
        return val;
 8002058:	89fb      	ldrh	r3, [r7, #14]
 800205a:	e000      	b.n	800205e <TM_STMPE811_ReadX+0xb2>
    }
    return x;
 800205c:	88fb      	ldrh	r3, [r7, #6]
}
 800205e:	4618      	mov	r0, r3
 8002060:	3710      	adds	r7, #16
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	88888889 	.word	0x88888889

0800206c <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y) { // TM FUNCTION 
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	4603      	mov	r3, r0
 8002074:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 8002076:	204f      	movs	r0, #79	@ 0x4f
 8002078:	f7ff fda6 	bl	8001bc8 <STMPE811_Read>
 800207c:	4603      	mov	r3, r0
 800207e:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 8002080:	2050      	movs	r0, #80	@ 0x50
 8002082:	f7ff fda1 	bl	8001bc8 <STMPE811_Read>
 8002086:	4603      	mov	r3, r0
 8002088:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 800208a:	7a7b      	ldrb	r3, [r7, #9]
 800208c:	b21b      	sxth	r3, r3
 800208e:	021b      	lsls	r3, r3, #8
 8002090:	b21a      	sxth	r2, r3
 8002092:	7a3b      	ldrb	r3, [r7, #8]
 8002094:	b21b      	sxth	r3, r3
 8002096:	4313      	orrs	r3, r2
 8002098:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 800209a:	89fb      	ldrh	r3, [r7, #14]
 800209c:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 80020a4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80020a8:	4a18      	ldr	r2, [pc, #96]	@ (800210c <TM_STMPE811_ReadY+0xa0>)
 80020aa:	fb82 1203 	smull	r1, r2, r2, r3
 80020ae:	1052      	asrs	r2, r2, #1
 80020b0:	17db      	asrs	r3, r3, #31
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	81fb      	strh	r3, [r7, #14]

    if (val <= 0) {
 80020b6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	dc02      	bgt.n	80020c4 <TM_STMPE811_ReadY+0x58>
        val = 0;
 80020be:	2300      	movs	r3, #0
 80020c0:	81fb      	strh	r3, [r7, #14]
 80020c2:	e007      	b.n	80020d4 <TM_STMPE811_ReadY+0x68>
    } else if (val >= 320) {
 80020c4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80020c8:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80020cc:	db02      	blt.n	80020d4 <TM_STMPE811_ReadY+0x68>
        val = 319;
 80020ce:	f240 133f 	movw	r3, #319	@ 0x13f
 80020d2:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 80020d4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80020d8:	88fb      	ldrh	r3, [r7, #6]
 80020da:	429a      	cmp	r2, r3
 80020dc:	dd05      	ble.n	80020ea <TM_STMPE811_ReadY+0x7e>
 80020de:	89fa      	ldrh	r2, [r7, #14]
 80020e0:	88fb      	ldrh	r3, [r7, #6]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	b21b      	sxth	r3, r3
 80020e8:	e004      	b.n	80020f4 <TM_STMPE811_ReadY+0x88>
 80020ea:	89fb      	ldrh	r3, [r7, #14]
 80020ec:	88fa      	ldrh	r2, [r7, #6]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	b29b      	uxth	r3, r3
 80020f2:	b21b      	sxth	r3, r3
 80020f4:	81bb      	strh	r3, [r7, #12]
    if (dy > 4) {
 80020f6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80020fa:	2b04      	cmp	r3, #4
 80020fc:	dd01      	ble.n	8002102 <TM_STMPE811_ReadY+0x96>
        return val;
 80020fe:	89fb      	ldrh	r3, [r7, #14]
 8002100:	e000      	b.n	8002104 <TM_STMPE811_ReadY+0x98>
    }
    return y;
 8002102:	88fb      	ldrh	r3, [r7, #6]
}
 8002104:	4618      	mov	r0, r3
 8002106:	3710      	adds	r7, #16
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	2e8ba2e9 	.word	0x2e8ba2e9

08002110 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
}
 8002114:	bf00      	nop
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
	...

08002120 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002124:	4b06      	ldr	r3, [pc, #24]	@ (8002140 <SystemInit+0x20>)
 8002126:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800212a:	4a05      	ldr	r2, [pc, #20]	@ (8002140 <SystemInit+0x20>)
 800212c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002130:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002134:	bf00      	nop
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	e000ed00 	.word	0xe000ed00

08002144 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002144:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800217c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002148:	f7ff ffea 	bl	8002120 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800214c:	480c      	ldr	r0, [pc, #48]	@ (8002180 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800214e:	490d      	ldr	r1, [pc, #52]	@ (8002184 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002150:	4a0d      	ldr	r2, [pc, #52]	@ (8002188 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002152:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002154:	e002      	b.n	800215c <LoopCopyDataInit>

08002156 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002156:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002158:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800215a:	3304      	adds	r3, #4

0800215c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800215c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800215e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002160:	d3f9      	bcc.n	8002156 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002162:	4a0a      	ldr	r2, [pc, #40]	@ (800218c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002164:	4c0a      	ldr	r4, [pc, #40]	@ (8002190 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002166:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002168:	e001      	b.n	800216e <LoopFillZerobss>

0800216a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800216a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800216c:	3204      	adds	r2, #4

0800216e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800216e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002170:	d3fb      	bcc.n	800216a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002172:	f003 f8b3 	bl	80052dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002176:	f7ff f9b2 	bl	80014de <main>
  bx  lr    
 800217a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800217c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002180:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002184:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8002188:	08006e34 	.word	0x08006e34
  ldr r2, =_sbss
 800218c:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8002190:	20025a88 	.word	0x20025a88

08002194 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002194:	e7fe      	b.n	8002194 <ADC_IRQHandler>
	...

08002198 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800219c:	4b0e      	ldr	r3, [pc, #56]	@ (80021d8 <HAL_Init+0x40>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a0d      	ldr	r2, [pc, #52]	@ (80021d8 <HAL_Init+0x40>)
 80021a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021a8:	4b0b      	ldr	r3, [pc, #44]	@ (80021d8 <HAL_Init+0x40>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a0a      	ldr	r2, [pc, #40]	@ (80021d8 <HAL_Init+0x40>)
 80021ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80021b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021b4:	4b08      	ldr	r3, [pc, #32]	@ (80021d8 <HAL_Init+0x40>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a07      	ldr	r2, [pc, #28]	@ (80021d8 <HAL_Init+0x40>)
 80021ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021c0:	2003      	movs	r0, #3
 80021c2:	f000 f973 	bl	80024ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021c6:	2000      	movs	r0, #0
 80021c8:	f000 f808 	bl	80021dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021cc:	f7ff fa06 	bl	80015dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021d0:	2300      	movs	r3, #0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	40023c00 	.word	0x40023c00

080021dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021e4:	4b12      	ldr	r3, [pc, #72]	@ (8002230 <HAL_InitTick+0x54>)
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	4b12      	ldr	r3, [pc, #72]	@ (8002234 <HAL_InitTick+0x58>)
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	4619      	mov	r1, r3
 80021ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80021f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021fa:	4618      	mov	r0, r3
 80021fc:	f000 f999 	bl	8002532 <HAL_SYSTICK_Config>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e00e      	b.n	8002228 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2b0f      	cmp	r3, #15
 800220e:	d80a      	bhi.n	8002226 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002210:	2200      	movs	r2, #0
 8002212:	6879      	ldr	r1, [r7, #4]
 8002214:	f04f 30ff 	mov.w	r0, #4294967295
 8002218:	f000 f953 	bl	80024c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800221c:	4a06      	ldr	r2, [pc, #24]	@ (8002238 <HAL_InitTick+0x5c>)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002222:	2300      	movs	r3, #0
 8002224:	e000      	b.n	8002228 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
}
 8002228:	4618      	mov	r0, r3
 800222a:	3708      	adds	r7, #8
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	20000020 	.word	0x20000020
 8002234:	20000028 	.word	0x20000028
 8002238:	20000024 	.word	0x20000024

0800223c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002240:	4b06      	ldr	r3, [pc, #24]	@ (800225c <HAL_IncTick+0x20>)
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	461a      	mov	r2, r3
 8002246:	4b06      	ldr	r3, [pc, #24]	@ (8002260 <HAL_IncTick+0x24>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4413      	add	r3, r2
 800224c:	4a04      	ldr	r2, [pc, #16]	@ (8002260 <HAL_IncTick+0x24>)
 800224e:	6013      	str	r3, [r2, #0]
}
 8002250:	bf00      	nop
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	20000028 	.word	0x20000028
 8002260:	20025a84 	.word	0x20025a84

08002264 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  return uwTick;
 8002268:	4b03      	ldr	r3, [pc, #12]	@ (8002278 <HAL_GetTick+0x14>)
 800226a:	681b      	ldr	r3, [r3, #0]
}
 800226c:	4618      	mov	r0, r3
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	20025a84 	.word	0x20025a84

0800227c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002284:	f7ff ffee 	bl	8002264 <HAL_GetTick>
 8002288:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002294:	d005      	beq.n	80022a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002296:	4b0a      	ldr	r3, [pc, #40]	@ (80022c0 <HAL_Delay+0x44>)
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	461a      	mov	r2, r3
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	4413      	add	r3, r2
 80022a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80022a2:	bf00      	nop
 80022a4:	f7ff ffde 	bl	8002264 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	68fa      	ldr	r2, [r7, #12]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d8f7      	bhi.n	80022a4 <HAL_Delay+0x28>
  {
  }
}
 80022b4:	bf00      	nop
 80022b6:	bf00      	nop
 80022b8:	3710      	adds	r7, #16
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	20000028 	.word	0x20000028

080022c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b085      	sub	sp, #20
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f003 0307 	and.w	r3, r3, #7
 80022d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002308 <__NVIC_SetPriorityGrouping+0x44>)
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022da:	68ba      	ldr	r2, [r7, #8]
 80022dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022e0:	4013      	ands	r3, r2
 80022e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80022f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022f6:	4a04      	ldr	r2, [pc, #16]	@ (8002308 <__NVIC_SetPriorityGrouping+0x44>)
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	60d3      	str	r3, [r2, #12]
}
 80022fc:	bf00      	nop
 80022fe:	3714      	adds	r7, #20
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr
 8002308:	e000ed00 	.word	0xe000ed00

0800230c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002310:	4b04      	ldr	r3, [pc, #16]	@ (8002324 <__NVIC_GetPriorityGrouping+0x18>)
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	0a1b      	lsrs	r3, r3, #8
 8002316:	f003 0307 	and.w	r3, r3, #7
}
 800231a:	4618      	mov	r0, r3
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr
 8002324:	e000ed00 	.word	0xe000ed00

08002328 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	4603      	mov	r3, r0
 8002330:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002336:	2b00      	cmp	r3, #0
 8002338:	db0b      	blt.n	8002352 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800233a:	79fb      	ldrb	r3, [r7, #7]
 800233c:	f003 021f 	and.w	r2, r3, #31
 8002340:	4907      	ldr	r1, [pc, #28]	@ (8002360 <__NVIC_EnableIRQ+0x38>)
 8002342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002346:	095b      	lsrs	r3, r3, #5
 8002348:	2001      	movs	r0, #1
 800234a:	fa00 f202 	lsl.w	r2, r0, r2
 800234e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002352:	bf00      	nop
 8002354:	370c      	adds	r7, #12
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	e000e100 	.word	0xe000e100

08002364 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	4603      	mov	r3, r0
 800236c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800236e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002372:	2b00      	cmp	r3, #0
 8002374:	db12      	blt.n	800239c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002376:	79fb      	ldrb	r3, [r7, #7]
 8002378:	f003 021f 	and.w	r2, r3, #31
 800237c:	490a      	ldr	r1, [pc, #40]	@ (80023a8 <__NVIC_DisableIRQ+0x44>)
 800237e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002382:	095b      	lsrs	r3, r3, #5
 8002384:	2001      	movs	r0, #1
 8002386:	fa00 f202 	lsl.w	r2, r0, r2
 800238a:	3320      	adds	r3, #32
 800238c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002390:	f3bf 8f4f 	dsb	sy
}
 8002394:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002396:	f3bf 8f6f 	isb	sy
}
 800239a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800239c:	bf00      	nop
 800239e:	370c      	adds	r7, #12
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr
 80023a8:	e000e100 	.word	0xe000e100

080023ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	4603      	mov	r3, r0
 80023b4:	6039      	str	r1, [r7, #0]
 80023b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	db0a      	blt.n	80023d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	b2da      	uxtb	r2, r3
 80023c4:	490c      	ldr	r1, [pc, #48]	@ (80023f8 <__NVIC_SetPriority+0x4c>)
 80023c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ca:	0112      	lsls	r2, r2, #4
 80023cc:	b2d2      	uxtb	r2, r2
 80023ce:	440b      	add	r3, r1
 80023d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023d4:	e00a      	b.n	80023ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	b2da      	uxtb	r2, r3
 80023da:	4908      	ldr	r1, [pc, #32]	@ (80023fc <__NVIC_SetPriority+0x50>)
 80023dc:	79fb      	ldrb	r3, [r7, #7]
 80023de:	f003 030f 	and.w	r3, r3, #15
 80023e2:	3b04      	subs	r3, #4
 80023e4:	0112      	lsls	r2, r2, #4
 80023e6:	b2d2      	uxtb	r2, r2
 80023e8:	440b      	add	r3, r1
 80023ea:	761a      	strb	r2, [r3, #24]
}
 80023ec:	bf00      	nop
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr
 80023f8:	e000e100 	.word	0xe000e100
 80023fc:	e000ed00 	.word	0xe000ed00

08002400 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002400:	b480      	push	{r7}
 8002402:	b089      	sub	sp, #36	@ 0x24
 8002404:	af00      	add	r7, sp, #0
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	60b9      	str	r1, [r7, #8]
 800240a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f003 0307 	and.w	r3, r3, #7
 8002412:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	f1c3 0307 	rsb	r3, r3, #7
 800241a:	2b04      	cmp	r3, #4
 800241c:	bf28      	it	cs
 800241e:	2304      	movcs	r3, #4
 8002420:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	3304      	adds	r3, #4
 8002426:	2b06      	cmp	r3, #6
 8002428:	d902      	bls.n	8002430 <NVIC_EncodePriority+0x30>
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	3b03      	subs	r3, #3
 800242e:	e000      	b.n	8002432 <NVIC_EncodePriority+0x32>
 8002430:	2300      	movs	r3, #0
 8002432:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002434:	f04f 32ff 	mov.w	r2, #4294967295
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	fa02 f303 	lsl.w	r3, r2, r3
 800243e:	43da      	mvns	r2, r3
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	401a      	ands	r2, r3
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002448:	f04f 31ff 	mov.w	r1, #4294967295
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	fa01 f303 	lsl.w	r3, r1, r3
 8002452:	43d9      	mvns	r1, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002458:	4313      	orrs	r3, r2
         );
}
 800245a:	4618      	mov	r0, r3
 800245c:	3724      	adds	r7, #36	@ 0x24
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
	...

08002468 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	3b01      	subs	r3, #1
 8002474:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002478:	d301      	bcc.n	800247e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800247a:	2301      	movs	r3, #1
 800247c:	e00f      	b.n	800249e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800247e:	4a0a      	ldr	r2, [pc, #40]	@ (80024a8 <SysTick_Config+0x40>)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	3b01      	subs	r3, #1
 8002484:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002486:	210f      	movs	r1, #15
 8002488:	f04f 30ff 	mov.w	r0, #4294967295
 800248c:	f7ff ff8e 	bl	80023ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002490:	4b05      	ldr	r3, [pc, #20]	@ (80024a8 <SysTick_Config+0x40>)
 8002492:	2200      	movs	r2, #0
 8002494:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002496:	4b04      	ldr	r3, [pc, #16]	@ (80024a8 <SysTick_Config+0x40>)
 8002498:	2207      	movs	r2, #7
 800249a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3708      	adds	r7, #8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	e000e010 	.word	0xe000e010

080024ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f7ff ff05 	bl	80022c4 <__NVIC_SetPriorityGrouping>
}
 80024ba:	bf00      	nop
 80024bc:	3708      	adds	r7, #8
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024c2:	b580      	push	{r7, lr}
 80024c4:	b086      	sub	sp, #24
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	4603      	mov	r3, r0
 80024ca:	60b9      	str	r1, [r7, #8]
 80024cc:	607a      	str	r2, [r7, #4]
 80024ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024d0:	2300      	movs	r3, #0
 80024d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024d4:	f7ff ff1a 	bl	800230c <__NVIC_GetPriorityGrouping>
 80024d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	68b9      	ldr	r1, [r7, #8]
 80024de:	6978      	ldr	r0, [r7, #20]
 80024e0:	f7ff ff8e 	bl	8002400 <NVIC_EncodePriority>
 80024e4:	4602      	mov	r2, r0
 80024e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024ea:	4611      	mov	r1, r2
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7ff ff5d 	bl	80023ac <__NVIC_SetPriority>
}
 80024f2:	bf00      	nop
 80024f4:	3718      	adds	r7, #24
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}

080024fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024fa:	b580      	push	{r7, lr}
 80024fc:	b082      	sub	sp, #8
 80024fe:	af00      	add	r7, sp, #0
 8002500:	4603      	mov	r3, r0
 8002502:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002504:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002508:	4618      	mov	r0, r3
 800250a:	f7ff ff0d 	bl	8002328 <__NVIC_EnableIRQ>
}
 800250e:	bf00      	nop
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002516:	b580      	push	{r7, lr}
 8002518:	b082      	sub	sp, #8
 800251a:	af00      	add	r7, sp, #0
 800251c:	4603      	mov	r3, r0
 800251e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002520:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002524:	4618      	mov	r0, r3
 8002526:	f7ff ff1d 	bl	8002364 <__NVIC_DisableIRQ>
}
 800252a:	bf00      	nop
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}

08002532 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002532:	b580      	push	{r7, lr}
 8002534:	b082      	sub	sp, #8
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f7ff ff94 	bl	8002468 <SysTick_Config>
 8002540:	4603      	mov	r3, r0
}
 8002542:	4618      	mov	r0, r3
 8002544:	3708      	adds	r7, #8
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
	...

0800254c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800254c:	b480      	push	{r7}
 800254e:	b089      	sub	sp, #36	@ 0x24
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002556:	2300      	movs	r3, #0
 8002558:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800255a:	2300      	movs	r3, #0
 800255c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800255e:	2300      	movs	r3, #0
 8002560:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002562:	2300      	movs	r3, #0
 8002564:	61fb      	str	r3, [r7, #28]
 8002566:	e177      	b.n	8002858 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002568:	2201      	movs	r2, #1
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	697a      	ldr	r2, [r7, #20]
 8002578:	4013      	ands	r3, r2
 800257a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800257c:	693a      	ldr	r2, [r7, #16]
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	429a      	cmp	r2, r3
 8002582:	f040 8166 	bne.w	8002852 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f003 0303 	and.w	r3, r3, #3
 800258e:	2b01      	cmp	r3, #1
 8002590:	d005      	beq.n	800259e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800259a:	2b02      	cmp	r3, #2
 800259c:	d130      	bne.n	8002600 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	2203      	movs	r2, #3
 80025aa:	fa02 f303 	lsl.w	r3, r2, r3
 80025ae:	43db      	mvns	r3, r3
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	4013      	ands	r3, r2
 80025b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	68da      	ldr	r2, [r3, #12]
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	005b      	lsls	r3, r3, #1
 80025be:	fa02 f303 	lsl.w	r3, r2, r3
 80025c2:	69ba      	ldr	r2, [r7, #24]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	69ba      	ldr	r2, [r7, #24]
 80025cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025d4:	2201      	movs	r2, #1
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	fa02 f303 	lsl.w	r3, r2, r3
 80025dc:	43db      	mvns	r3, r3
 80025de:	69ba      	ldr	r2, [r7, #24]
 80025e0:	4013      	ands	r3, r2
 80025e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	091b      	lsrs	r3, r3, #4
 80025ea:	f003 0201 	and.w	r2, r3, #1
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f003 0303 	and.w	r3, r3, #3
 8002608:	2b03      	cmp	r3, #3
 800260a:	d017      	beq.n	800263c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	2203      	movs	r2, #3
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	43db      	mvns	r3, r3
 800261e:	69ba      	ldr	r2, [r7, #24]
 8002620:	4013      	ands	r3, r2
 8002622:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	689a      	ldr	r2, [r3, #8]
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	005b      	lsls	r3, r3, #1
 800262c:	fa02 f303 	lsl.w	r3, r2, r3
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	4313      	orrs	r3, r2
 8002634:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f003 0303 	and.w	r3, r3, #3
 8002644:	2b02      	cmp	r3, #2
 8002646:	d123      	bne.n	8002690 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	08da      	lsrs	r2, r3, #3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	3208      	adds	r2, #8
 8002650:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002654:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	f003 0307 	and.w	r3, r3, #7
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	220f      	movs	r2, #15
 8002660:	fa02 f303 	lsl.w	r3, r2, r3
 8002664:	43db      	mvns	r3, r3
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	4013      	ands	r3, r2
 800266a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	691a      	ldr	r2, [r3, #16]
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	f003 0307 	and.w	r3, r3, #7
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	fa02 f303 	lsl.w	r3, r2, r3
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	4313      	orrs	r3, r2
 8002680:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	08da      	lsrs	r2, r3, #3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	3208      	adds	r2, #8
 800268a:	69b9      	ldr	r1, [r7, #24]
 800268c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	005b      	lsls	r3, r3, #1
 800269a:	2203      	movs	r2, #3
 800269c:	fa02 f303 	lsl.w	r3, r2, r3
 80026a0:	43db      	mvns	r3, r3
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	4013      	ands	r3, r2
 80026a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f003 0203 	and.w	r2, r3, #3
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	005b      	lsls	r3, r3, #1
 80026b4:	fa02 f303 	lsl.w	r3, r2, r3
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	f000 80c0 	beq.w	8002852 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026d2:	2300      	movs	r3, #0
 80026d4:	60fb      	str	r3, [r7, #12]
 80026d6:	4b66      	ldr	r3, [pc, #408]	@ (8002870 <HAL_GPIO_Init+0x324>)
 80026d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026da:	4a65      	ldr	r2, [pc, #404]	@ (8002870 <HAL_GPIO_Init+0x324>)
 80026dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80026e2:	4b63      	ldr	r3, [pc, #396]	@ (8002870 <HAL_GPIO_Init+0x324>)
 80026e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026ea:	60fb      	str	r3, [r7, #12]
 80026ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026ee:	4a61      	ldr	r2, [pc, #388]	@ (8002874 <HAL_GPIO_Init+0x328>)
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	089b      	lsrs	r3, r3, #2
 80026f4:	3302      	adds	r3, #2
 80026f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	f003 0303 	and.w	r3, r3, #3
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	220f      	movs	r2, #15
 8002706:	fa02 f303 	lsl.w	r3, r2, r3
 800270a:	43db      	mvns	r3, r3
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	4013      	ands	r3, r2
 8002710:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a58      	ldr	r2, [pc, #352]	@ (8002878 <HAL_GPIO_Init+0x32c>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d037      	beq.n	800278a <HAL_GPIO_Init+0x23e>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a57      	ldr	r2, [pc, #348]	@ (800287c <HAL_GPIO_Init+0x330>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d031      	beq.n	8002786 <HAL_GPIO_Init+0x23a>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a56      	ldr	r2, [pc, #344]	@ (8002880 <HAL_GPIO_Init+0x334>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d02b      	beq.n	8002782 <HAL_GPIO_Init+0x236>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a55      	ldr	r2, [pc, #340]	@ (8002884 <HAL_GPIO_Init+0x338>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d025      	beq.n	800277e <HAL_GPIO_Init+0x232>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a54      	ldr	r2, [pc, #336]	@ (8002888 <HAL_GPIO_Init+0x33c>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d01f      	beq.n	800277a <HAL_GPIO_Init+0x22e>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a53      	ldr	r2, [pc, #332]	@ (800288c <HAL_GPIO_Init+0x340>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d019      	beq.n	8002776 <HAL_GPIO_Init+0x22a>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a52      	ldr	r2, [pc, #328]	@ (8002890 <HAL_GPIO_Init+0x344>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d013      	beq.n	8002772 <HAL_GPIO_Init+0x226>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a51      	ldr	r2, [pc, #324]	@ (8002894 <HAL_GPIO_Init+0x348>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d00d      	beq.n	800276e <HAL_GPIO_Init+0x222>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a50      	ldr	r2, [pc, #320]	@ (8002898 <HAL_GPIO_Init+0x34c>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d007      	beq.n	800276a <HAL_GPIO_Init+0x21e>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a4f      	ldr	r2, [pc, #316]	@ (800289c <HAL_GPIO_Init+0x350>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d101      	bne.n	8002766 <HAL_GPIO_Init+0x21a>
 8002762:	2309      	movs	r3, #9
 8002764:	e012      	b.n	800278c <HAL_GPIO_Init+0x240>
 8002766:	230a      	movs	r3, #10
 8002768:	e010      	b.n	800278c <HAL_GPIO_Init+0x240>
 800276a:	2308      	movs	r3, #8
 800276c:	e00e      	b.n	800278c <HAL_GPIO_Init+0x240>
 800276e:	2307      	movs	r3, #7
 8002770:	e00c      	b.n	800278c <HAL_GPIO_Init+0x240>
 8002772:	2306      	movs	r3, #6
 8002774:	e00a      	b.n	800278c <HAL_GPIO_Init+0x240>
 8002776:	2305      	movs	r3, #5
 8002778:	e008      	b.n	800278c <HAL_GPIO_Init+0x240>
 800277a:	2304      	movs	r3, #4
 800277c:	e006      	b.n	800278c <HAL_GPIO_Init+0x240>
 800277e:	2303      	movs	r3, #3
 8002780:	e004      	b.n	800278c <HAL_GPIO_Init+0x240>
 8002782:	2302      	movs	r3, #2
 8002784:	e002      	b.n	800278c <HAL_GPIO_Init+0x240>
 8002786:	2301      	movs	r3, #1
 8002788:	e000      	b.n	800278c <HAL_GPIO_Init+0x240>
 800278a:	2300      	movs	r3, #0
 800278c:	69fa      	ldr	r2, [r7, #28]
 800278e:	f002 0203 	and.w	r2, r2, #3
 8002792:	0092      	lsls	r2, r2, #2
 8002794:	4093      	lsls	r3, r2
 8002796:	69ba      	ldr	r2, [r7, #24]
 8002798:	4313      	orrs	r3, r2
 800279a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800279c:	4935      	ldr	r1, [pc, #212]	@ (8002874 <HAL_GPIO_Init+0x328>)
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	089b      	lsrs	r3, r3, #2
 80027a2:	3302      	adds	r3, #2
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027aa:	4b3d      	ldr	r3, [pc, #244]	@ (80028a0 <HAL_GPIO_Init+0x354>)
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	43db      	mvns	r3, r3
 80027b4:	69ba      	ldr	r2, [r7, #24]
 80027b6:	4013      	ands	r3, r2
 80027b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d003      	beq.n	80027ce <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80027c6:	69ba      	ldr	r2, [r7, #24]
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027ce:	4a34      	ldr	r2, [pc, #208]	@ (80028a0 <HAL_GPIO_Init+0x354>)
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027d4:	4b32      	ldr	r3, [pc, #200]	@ (80028a0 <HAL_GPIO_Init+0x354>)
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	43db      	mvns	r3, r3
 80027de:	69ba      	ldr	r2, [r7, #24]
 80027e0:	4013      	ands	r3, r2
 80027e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d003      	beq.n	80027f8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027f8:	4a29      	ldr	r2, [pc, #164]	@ (80028a0 <HAL_GPIO_Init+0x354>)
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027fe:	4b28      	ldr	r3, [pc, #160]	@ (80028a0 <HAL_GPIO_Init+0x354>)
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	43db      	mvns	r3, r3
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	4013      	ands	r3, r2
 800280c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d003      	beq.n	8002822 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800281a:	69ba      	ldr	r2, [r7, #24]
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	4313      	orrs	r3, r2
 8002820:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002822:	4a1f      	ldr	r2, [pc, #124]	@ (80028a0 <HAL_GPIO_Init+0x354>)
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002828:	4b1d      	ldr	r3, [pc, #116]	@ (80028a0 <HAL_GPIO_Init+0x354>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	43db      	mvns	r3, r3
 8002832:	69ba      	ldr	r2, [r7, #24]
 8002834:	4013      	ands	r3, r2
 8002836:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d003      	beq.n	800284c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002844:	69ba      	ldr	r2, [r7, #24]
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	4313      	orrs	r3, r2
 800284a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800284c:	4a14      	ldr	r2, [pc, #80]	@ (80028a0 <HAL_GPIO_Init+0x354>)
 800284e:	69bb      	ldr	r3, [r7, #24]
 8002850:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	3301      	adds	r3, #1
 8002856:	61fb      	str	r3, [r7, #28]
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	2b0f      	cmp	r3, #15
 800285c:	f67f ae84 	bls.w	8002568 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002860:	bf00      	nop
 8002862:	bf00      	nop
 8002864:	3724      	adds	r7, #36	@ 0x24
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop
 8002870:	40023800 	.word	0x40023800
 8002874:	40013800 	.word	0x40013800
 8002878:	40020000 	.word	0x40020000
 800287c:	40020400 	.word	0x40020400
 8002880:	40020800 	.word	0x40020800
 8002884:	40020c00 	.word	0x40020c00
 8002888:	40021000 	.word	0x40021000
 800288c:	40021400 	.word	0x40021400
 8002890:	40021800 	.word	0x40021800
 8002894:	40021c00 	.word	0x40021c00
 8002898:	40022000 	.word	0x40022000
 800289c:	40022400 	.word	0x40022400
 80028a0:	40013c00 	.word	0x40013c00

080028a4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b087      	sub	sp, #28
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80028ae:	2300      	movs	r3, #0
 80028b0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80028b2:	2300      	movs	r3, #0
 80028b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80028b6:	2300      	movs	r3, #0
 80028b8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028ba:	2300      	movs	r3, #0
 80028bc:	617b      	str	r3, [r7, #20]
 80028be:	e0d9      	b.n	8002a74 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80028c0:	2201      	movs	r2, #1
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	fa02 f303 	lsl.w	r3, r2, r3
 80028c8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80028ca:	683a      	ldr	r2, [r7, #0]
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	4013      	ands	r3, r2
 80028d0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80028d2:	68fa      	ldr	r2, [r7, #12]
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	429a      	cmp	r2, r3
 80028d8:	f040 80c9 	bne.w	8002a6e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80028dc:	4a6b      	ldr	r2, [pc, #428]	@ (8002a8c <HAL_GPIO_DeInit+0x1e8>)
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	089b      	lsrs	r3, r3, #2
 80028e2:	3302      	adds	r3, #2
 80028e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028e8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	f003 0303 	and.w	r3, r3, #3
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	220f      	movs	r2, #15
 80028f4:	fa02 f303 	lsl.w	r3, r2, r3
 80028f8:	68ba      	ldr	r2, [r7, #8]
 80028fa:	4013      	ands	r3, r2
 80028fc:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a63      	ldr	r2, [pc, #396]	@ (8002a90 <HAL_GPIO_DeInit+0x1ec>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d037      	beq.n	8002976 <HAL_GPIO_DeInit+0xd2>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a62      	ldr	r2, [pc, #392]	@ (8002a94 <HAL_GPIO_DeInit+0x1f0>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d031      	beq.n	8002972 <HAL_GPIO_DeInit+0xce>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a61      	ldr	r2, [pc, #388]	@ (8002a98 <HAL_GPIO_DeInit+0x1f4>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d02b      	beq.n	800296e <HAL_GPIO_DeInit+0xca>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a60      	ldr	r2, [pc, #384]	@ (8002a9c <HAL_GPIO_DeInit+0x1f8>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d025      	beq.n	800296a <HAL_GPIO_DeInit+0xc6>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a5f      	ldr	r2, [pc, #380]	@ (8002aa0 <HAL_GPIO_DeInit+0x1fc>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d01f      	beq.n	8002966 <HAL_GPIO_DeInit+0xc2>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a5e      	ldr	r2, [pc, #376]	@ (8002aa4 <HAL_GPIO_DeInit+0x200>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d019      	beq.n	8002962 <HAL_GPIO_DeInit+0xbe>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a5d      	ldr	r2, [pc, #372]	@ (8002aa8 <HAL_GPIO_DeInit+0x204>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d013      	beq.n	800295e <HAL_GPIO_DeInit+0xba>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a5c      	ldr	r2, [pc, #368]	@ (8002aac <HAL_GPIO_DeInit+0x208>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d00d      	beq.n	800295a <HAL_GPIO_DeInit+0xb6>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a5b      	ldr	r2, [pc, #364]	@ (8002ab0 <HAL_GPIO_DeInit+0x20c>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d007      	beq.n	8002956 <HAL_GPIO_DeInit+0xb2>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a5a      	ldr	r2, [pc, #360]	@ (8002ab4 <HAL_GPIO_DeInit+0x210>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d101      	bne.n	8002952 <HAL_GPIO_DeInit+0xae>
 800294e:	2309      	movs	r3, #9
 8002950:	e012      	b.n	8002978 <HAL_GPIO_DeInit+0xd4>
 8002952:	230a      	movs	r3, #10
 8002954:	e010      	b.n	8002978 <HAL_GPIO_DeInit+0xd4>
 8002956:	2308      	movs	r3, #8
 8002958:	e00e      	b.n	8002978 <HAL_GPIO_DeInit+0xd4>
 800295a:	2307      	movs	r3, #7
 800295c:	e00c      	b.n	8002978 <HAL_GPIO_DeInit+0xd4>
 800295e:	2306      	movs	r3, #6
 8002960:	e00a      	b.n	8002978 <HAL_GPIO_DeInit+0xd4>
 8002962:	2305      	movs	r3, #5
 8002964:	e008      	b.n	8002978 <HAL_GPIO_DeInit+0xd4>
 8002966:	2304      	movs	r3, #4
 8002968:	e006      	b.n	8002978 <HAL_GPIO_DeInit+0xd4>
 800296a:	2303      	movs	r3, #3
 800296c:	e004      	b.n	8002978 <HAL_GPIO_DeInit+0xd4>
 800296e:	2302      	movs	r3, #2
 8002970:	e002      	b.n	8002978 <HAL_GPIO_DeInit+0xd4>
 8002972:	2301      	movs	r3, #1
 8002974:	e000      	b.n	8002978 <HAL_GPIO_DeInit+0xd4>
 8002976:	2300      	movs	r3, #0
 8002978:	697a      	ldr	r2, [r7, #20]
 800297a:	f002 0203 	and.w	r2, r2, #3
 800297e:	0092      	lsls	r2, r2, #2
 8002980:	4093      	lsls	r3, r2
 8002982:	68ba      	ldr	r2, [r7, #8]
 8002984:	429a      	cmp	r2, r3
 8002986:	d132      	bne.n	80029ee <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002988:	4b4b      	ldr	r3, [pc, #300]	@ (8002ab8 <HAL_GPIO_DeInit+0x214>)
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	43db      	mvns	r3, r3
 8002990:	4949      	ldr	r1, [pc, #292]	@ (8002ab8 <HAL_GPIO_DeInit+0x214>)
 8002992:	4013      	ands	r3, r2
 8002994:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002996:	4b48      	ldr	r3, [pc, #288]	@ (8002ab8 <HAL_GPIO_DeInit+0x214>)
 8002998:	685a      	ldr	r2, [r3, #4]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	43db      	mvns	r3, r3
 800299e:	4946      	ldr	r1, [pc, #280]	@ (8002ab8 <HAL_GPIO_DeInit+0x214>)
 80029a0:	4013      	ands	r3, r2
 80029a2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80029a4:	4b44      	ldr	r3, [pc, #272]	@ (8002ab8 <HAL_GPIO_DeInit+0x214>)
 80029a6:	68da      	ldr	r2, [r3, #12]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	43db      	mvns	r3, r3
 80029ac:	4942      	ldr	r1, [pc, #264]	@ (8002ab8 <HAL_GPIO_DeInit+0x214>)
 80029ae:	4013      	ands	r3, r2
 80029b0:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80029b2:	4b41      	ldr	r3, [pc, #260]	@ (8002ab8 <HAL_GPIO_DeInit+0x214>)
 80029b4:	689a      	ldr	r2, [r3, #8]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	43db      	mvns	r3, r3
 80029ba:	493f      	ldr	r1, [pc, #252]	@ (8002ab8 <HAL_GPIO_DeInit+0x214>)
 80029bc:	4013      	ands	r3, r2
 80029be:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	f003 0303 	and.w	r3, r3, #3
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	220f      	movs	r2, #15
 80029ca:	fa02 f303 	lsl.w	r3, r2, r3
 80029ce:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80029d0:	4a2e      	ldr	r2, [pc, #184]	@ (8002a8c <HAL_GPIO_DeInit+0x1e8>)
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	089b      	lsrs	r3, r3, #2
 80029d6:	3302      	adds	r3, #2
 80029d8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	43da      	mvns	r2, r3
 80029e0:	482a      	ldr	r0, [pc, #168]	@ (8002a8c <HAL_GPIO_DeInit+0x1e8>)
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	089b      	lsrs	r3, r3, #2
 80029e6:	400a      	ands	r2, r1
 80029e8:	3302      	adds	r3, #2
 80029ea:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	005b      	lsls	r3, r3, #1
 80029f6:	2103      	movs	r1, #3
 80029f8:	fa01 f303 	lsl.w	r3, r1, r3
 80029fc:	43db      	mvns	r3, r3
 80029fe:	401a      	ands	r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	08da      	lsrs	r2, r3, #3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	3208      	adds	r2, #8
 8002a0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	f003 0307 	and.w	r3, r3, #7
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	220f      	movs	r2, #15
 8002a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1e:	43db      	mvns	r3, r3
 8002a20:	697a      	ldr	r2, [r7, #20]
 8002a22:	08d2      	lsrs	r2, r2, #3
 8002a24:	4019      	ands	r1, r3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	3208      	adds	r2, #8
 8002a2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	68da      	ldr	r2, [r3, #12]
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	005b      	lsls	r3, r3, #1
 8002a36:	2103      	movs	r1, #3
 8002a38:	fa01 f303 	lsl.w	r3, r1, r3
 8002a3c:	43db      	mvns	r3, r3
 8002a3e:	401a      	ands	r2, r3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	685a      	ldr	r2, [r3, #4]
 8002a48:	2101      	movs	r1, #1
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a50:	43db      	mvns	r3, r3
 8002a52:	401a      	ands	r2, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	689a      	ldr	r2, [r3, #8]
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	005b      	lsls	r3, r3, #1
 8002a60:	2103      	movs	r1, #3
 8002a62:	fa01 f303 	lsl.w	r3, r1, r3
 8002a66:	43db      	mvns	r3, r3
 8002a68:	401a      	ands	r2, r3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	3301      	adds	r3, #1
 8002a72:	617b      	str	r3, [r7, #20]
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	2b0f      	cmp	r3, #15
 8002a78:	f67f af22 	bls.w	80028c0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002a7c:	bf00      	nop
 8002a7e:	bf00      	nop
 8002a80:	371c      	adds	r7, #28
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	40013800 	.word	0x40013800
 8002a90:	40020000 	.word	0x40020000
 8002a94:	40020400 	.word	0x40020400
 8002a98:	40020800 	.word	0x40020800
 8002a9c:	40020c00 	.word	0x40020c00
 8002aa0:	40021000 	.word	0x40021000
 8002aa4:	40021400 	.word	0x40021400
 8002aa8:	40021800 	.word	0x40021800
 8002aac:	40021c00 	.word	0x40021c00
 8002ab0:	40022000 	.word	0x40022000
 8002ab4:	40022400 	.word	0x40022400
 8002ab8:	40013c00 	.word	0x40013c00

08002abc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	807b      	strh	r3, [r7, #2]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002acc:	787b      	ldrb	r3, [r7, #1]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d003      	beq.n	8002ada <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ad2:	887a      	ldrh	r2, [r7, #2]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ad8:	e003      	b.n	8002ae2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ada:	887b      	ldrh	r3, [r7, #2]
 8002adc:	041a      	lsls	r2, r3, #16
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	619a      	str	r2, [r3, #24]
}
 8002ae2:	bf00      	nop
 8002ae4:	370c      	adds	r7, #12
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr
	...

08002af0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d101      	bne.n	8002b02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e12b      	b.n	8002d5a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d106      	bne.n	8002b1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f7fe fd88 	bl	800162c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2224      	movs	r2, #36	@ 0x24
 8002b20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f022 0201 	bic.w	r2, r2, #1
 8002b32:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002b42:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002b52:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002b54:	f001 ff06 	bl	8004964 <HAL_RCC_GetPCLK1Freq>
 8002b58:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	4a81      	ldr	r2, [pc, #516]	@ (8002d64 <HAL_I2C_Init+0x274>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d807      	bhi.n	8002b74 <HAL_I2C_Init+0x84>
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	4a80      	ldr	r2, [pc, #512]	@ (8002d68 <HAL_I2C_Init+0x278>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	bf94      	ite	ls
 8002b6c:	2301      	movls	r3, #1
 8002b6e:	2300      	movhi	r3, #0
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	e006      	b.n	8002b82 <HAL_I2C_Init+0x92>
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	4a7d      	ldr	r2, [pc, #500]	@ (8002d6c <HAL_I2C_Init+0x27c>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	bf94      	ite	ls
 8002b7c:	2301      	movls	r3, #1
 8002b7e:	2300      	movhi	r3, #0
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e0e7      	b.n	8002d5a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	4a78      	ldr	r2, [pc, #480]	@ (8002d70 <HAL_I2C_Init+0x280>)
 8002b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b92:	0c9b      	lsrs	r3, r3, #18
 8002b94:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	68ba      	ldr	r2, [r7, #8]
 8002ba6:	430a      	orrs	r2, r1
 8002ba8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	6a1b      	ldr	r3, [r3, #32]
 8002bb0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	4a6a      	ldr	r2, [pc, #424]	@ (8002d64 <HAL_I2C_Init+0x274>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d802      	bhi.n	8002bc4 <HAL_I2C_Init+0xd4>
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	e009      	b.n	8002bd8 <HAL_I2C_Init+0xe8>
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002bca:	fb02 f303 	mul.w	r3, r2, r3
 8002bce:	4a69      	ldr	r2, [pc, #420]	@ (8002d74 <HAL_I2C_Init+0x284>)
 8002bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd4:	099b      	lsrs	r3, r3, #6
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	6812      	ldr	r2, [r2, #0]
 8002bdc:	430b      	orrs	r3, r1
 8002bde:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	69db      	ldr	r3, [r3, #28]
 8002be6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002bea:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	495c      	ldr	r1, [pc, #368]	@ (8002d64 <HAL_I2C_Init+0x274>)
 8002bf4:	428b      	cmp	r3, r1
 8002bf6:	d819      	bhi.n	8002c2c <HAL_I2C_Init+0x13c>
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	1e59      	subs	r1, r3, #1
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	005b      	lsls	r3, r3, #1
 8002c02:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c06:	1c59      	adds	r1, r3, #1
 8002c08:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002c0c:	400b      	ands	r3, r1
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d00a      	beq.n	8002c28 <HAL_I2C_Init+0x138>
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	1e59      	subs	r1, r3, #1
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	005b      	lsls	r3, r3, #1
 8002c1c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c20:	3301      	adds	r3, #1
 8002c22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c26:	e051      	b.n	8002ccc <HAL_I2C_Init+0x1dc>
 8002c28:	2304      	movs	r3, #4
 8002c2a:	e04f      	b.n	8002ccc <HAL_I2C_Init+0x1dc>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d111      	bne.n	8002c58 <HAL_I2C_Init+0x168>
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	1e58      	subs	r0, r3, #1
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6859      	ldr	r1, [r3, #4]
 8002c3c:	460b      	mov	r3, r1
 8002c3e:	005b      	lsls	r3, r3, #1
 8002c40:	440b      	add	r3, r1
 8002c42:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c46:	3301      	adds	r3, #1
 8002c48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	bf0c      	ite	eq
 8002c50:	2301      	moveq	r3, #1
 8002c52:	2300      	movne	r3, #0
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	e012      	b.n	8002c7e <HAL_I2C_Init+0x18e>
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	1e58      	subs	r0, r3, #1
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6859      	ldr	r1, [r3, #4]
 8002c60:	460b      	mov	r3, r1
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	440b      	add	r3, r1
 8002c66:	0099      	lsls	r1, r3, #2
 8002c68:	440b      	add	r3, r1
 8002c6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c6e:	3301      	adds	r3, #1
 8002c70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	bf0c      	ite	eq
 8002c78:	2301      	moveq	r3, #1
 8002c7a:	2300      	movne	r3, #0
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d001      	beq.n	8002c86 <HAL_I2C_Init+0x196>
 8002c82:	2301      	movs	r3, #1
 8002c84:	e022      	b.n	8002ccc <HAL_I2C_Init+0x1dc>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d10e      	bne.n	8002cac <HAL_I2C_Init+0x1bc>
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	1e58      	subs	r0, r3, #1
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6859      	ldr	r1, [r3, #4]
 8002c96:	460b      	mov	r3, r1
 8002c98:	005b      	lsls	r3, r3, #1
 8002c9a:	440b      	add	r3, r1
 8002c9c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ca6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002caa:	e00f      	b.n	8002ccc <HAL_I2C_Init+0x1dc>
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	1e58      	subs	r0, r3, #1
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6859      	ldr	r1, [r3, #4]
 8002cb4:	460b      	mov	r3, r1
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	440b      	add	r3, r1
 8002cba:	0099      	lsls	r1, r3, #2
 8002cbc:	440b      	add	r3, r1
 8002cbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cc8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002ccc:	6879      	ldr	r1, [r7, #4]
 8002cce:	6809      	ldr	r1, [r1, #0]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	69da      	ldr	r2, [r3, #28]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a1b      	ldr	r3, [r3, #32]
 8002ce6:	431a      	orrs	r2, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	430a      	orrs	r2, r1
 8002cee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002cfa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	6911      	ldr	r1, [r2, #16]
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	68d2      	ldr	r2, [r2, #12]
 8002d06:	4311      	orrs	r1, r2
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	6812      	ldr	r2, [r2, #0]
 8002d0c:	430b      	orrs	r3, r1
 8002d0e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	695a      	ldr	r2, [r3, #20]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	699b      	ldr	r3, [r3, #24]
 8002d22:	431a      	orrs	r2, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	430a      	orrs	r2, r1
 8002d2a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f042 0201 	orr.w	r2, r2, #1
 8002d3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2220      	movs	r2, #32
 8002d46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002d58:	2300      	movs	r3, #0
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3710      	adds	r7, #16
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	000186a0 	.word	0x000186a0
 8002d68:	001e847f 	.word	0x001e847f
 8002d6c:	003d08ff 	.word	0x003d08ff
 8002d70:	431bde83 	.word	0x431bde83
 8002d74:	10624dd3 	.word	0x10624dd3

08002d78 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b088      	sub	sp, #32
 8002d7c:	af02      	add	r7, sp, #8
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	4608      	mov	r0, r1
 8002d82:	4611      	mov	r1, r2
 8002d84:	461a      	mov	r2, r3
 8002d86:	4603      	mov	r3, r0
 8002d88:	817b      	strh	r3, [r7, #10]
 8002d8a:	460b      	mov	r3, r1
 8002d8c:	813b      	strh	r3, [r7, #8]
 8002d8e:	4613      	mov	r3, r2
 8002d90:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d92:	f7ff fa67 	bl	8002264 <HAL_GetTick>
 8002d96:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	2b20      	cmp	r3, #32
 8002da2:	f040 80d9 	bne.w	8002f58 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	9300      	str	r3, [sp, #0]
 8002daa:	2319      	movs	r3, #25
 8002dac:	2201      	movs	r2, #1
 8002dae:	496d      	ldr	r1, [pc, #436]	@ (8002f64 <HAL_I2C_Mem_Write+0x1ec>)
 8002db0:	68f8      	ldr	r0, [r7, #12]
 8002db2:	f000 fc8b 	bl	80036cc <I2C_WaitOnFlagUntilTimeout>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d001      	beq.n	8002dc0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002dbc:	2302      	movs	r3, #2
 8002dbe:	e0cc      	b.n	8002f5a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d101      	bne.n	8002dce <HAL_I2C_Mem_Write+0x56>
 8002dca:	2302      	movs	r3, #2
 8002dcc:	e0c5      	b.n	8002f5a <HAL_I2C_Mem_Write+0x1e2>
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0301 	and.w	r3, r3, #1
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d007      	beq.n	8002df4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f042 0201 	orr.w	r2, r2, #1
 8002df2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e02:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2221      	movs	r2, #33	@ 0x21
 8002e08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2240      	movs	r2, #64	@ 0x40
 8002e10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2200      	movs	r2, #0
 8002e18:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	6a3a      	ldr	r2, [r7, #32]
 8002e1e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002e24:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e2a:	b29a      	uxth	r2, r3
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	4a4d      	ldr	r2, [pc, #308]	@ (8002f68 <HAL_I2C_Mem_Write+0x1f0>)
 8002e34:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e36:	88f8      	ldrh	r0, [r7, #6]
 8002e38:	893a      	ldrh	r2, [r7, #8]
 8002e3a:	8979      	ldrh	r1, [r7, #10]
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	9301      	str	r3, [sp, #4]
 8002e40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e42:	9300      	str	r3, [sp, #0]
 8002e44:	4603      	mov	r3, r0
 8002e46:	68f8      	ldr	r0, [r7, #12]
 8002e48:	f000 fac2 	bl	80033d0 <I2C_RequestMemoryWrite>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d052      	beq.n	8002ef8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e081      	b.n	8002f5a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e56:	697a      	ldr	r2, [r7, #20]
 8002e58:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e5a:	68f8      	ldr	r0, [r7, #12]
 8002e5c:	f000 fd50 	bl	8003900 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d00d      	beq.n	8002e82 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e6a:	2b04      	cmp	r3, #4
 8002e6c:	d107      	bne.n	8002e7e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e7c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e06b      	b.n	8002f5a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e86:	781a      	ldrb	r2, [r3, #0]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e92:	1c5a      	adds	r2, r3, #1
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e9c:	3b01      	subs	r3, #1
 8002e9e:	b29a      	uxth	r2, r3
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	3b01      	subs	r3, #1
 8002eac:	b29a      	uxth	r2, r3
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	695b      	ldr	r3, [r3, #20]
 8002eb8:	f003 0304 	and.w	r3, r3, #4
 8002ebc:	2b04      	cmp	r3, #4
 8002ebe:	d11b      	bne.n	8002ef8 <HAL_I2C_Mem_Write+0x180>
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d017      	beq.n	8002ef8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ecc:	781a      	ldrb	r2, [r3, #0]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed8:	1c5a      	adds	r2, r3, #1
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ee2:	3b01      	subs	r3, #1
 8002ee4:	b29a      	uxth	r2, r3
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	3b01      	subs	r3, #1
 8002ef2:	b29a      	uxth	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d1aa      	bne.n	8002e56 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f00:	697a      	ldr	r2, [r7, #20]
 8002f02:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002f04:	68f8      	ldr	r0, [r7, #12]
 8002f06:	f000 fd43 	bl	8003990 <I2C_WaitOnBTFFlagUntilTimeout>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d00d      	beq.n	8002f2c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f14:	2b04      	cmp	r3, #4
 8002f16:	d107      	bne.n	8002f28 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f26:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e016      	b.n	8002f5a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2220      	movs	r2, #32
 8002f40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002f54:	2300      	movs	r3, #0
 8002f56:	e000      	b.n	8002f5a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002f58:	2302      	movs	r3, #2
  }
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3718      	adds	r7, #24
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	00100002 	.word	0x00100002
 8002f68:	ffff0000 	.word	0xffff0000

08002f6c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b08c      	sub	sp, #48	@ 0x30
 8002f70:	af02      	add	r7, sp, #8
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	4608      	mov	r0, r1
 8002f76:	4611      	mov	r1, r2
 8002f78:	461a      	mov	r2, r3
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	817b      	strh	r3, [r7, #10]
 8002f7e:	460b      	mov	r3, r1
 8002f80:	813b      	strh	r3, [r7, #8]
 8002f82:	4613      	mov	r3, r2
 8002f84:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f86:	f7ff f96d 	bl	8002264 <HAL_GetTick>
 8002f8a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	2b20      	cmp	r3, #32
 8002f96:	f040 8214 	bne.w	80033c2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f9c:	9300      	str	r3, [sp, #0]
 8002f9e:	2319      	movs	r3, #25
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	497b      	ldr	r1, [pc, #492]	@ (8003190 <HAL_I2C_Mem_Read+0x224>)
 8002fa4:	68f8      	ldr	r0, [r7, #12]
 8002fa6:	f000 fb91 	bl	80036cc <I2C_WaitOnFlagUntilTimeout>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d001      	beq.n	8002fb4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002fb0:	2302      	movs	r3, #2
 8002fb2:	e207      	b.n	80033c4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d101      	bne.n	8002fc2 <HAL_I2C_Mem_Read+0x56>
 8002fbe:	2302      	movs	r3, #2
 8002fc0:	e200      	b.n	80033c4 <HAL_I2C_Mem_Read+0x458>
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0301 	and.w	r3, r3, #1
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d007      	beq.n	8002fe8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f042 0201 	orr.w	r2, r2, #1
 8002fe6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ff6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2222      	movs	r2, #34	@ 0x22
 8002ffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2240      	movs	r2, #64	@ 0x40
 8003004:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2200      	movs	r2, #0
 800300c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003012:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003018:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800301e:	b29a      	uxth	r2, r3
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	4a5b      	ldr	r2, [pc, #364]	@ (8003194 <HAL_I2C_Mem_Read+0x228>)
 8003028:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800302a:	88f8      	ldrh	r0, [r7, #6]
 800302c:	893a      	ldrh	r2, [r7, #8]
 800302e:	8979      	ldrh	r1, [r7, #10]
 8003030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003032:	9301      	str	r3, [sp, #4]
 8003034:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003036:	9300      	str	r3, [sp, #0]
 8003038:	4603      	mov	r3, r0
 800303a:	68f8      	ldr	r0, [r7, #12]
 800303c:	f000 fa5e 	bl	80034fc <I2C_RequestMemoryRead>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d001      	beq.n	800304a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e1bc      	b.n	80033c4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800304e:	2b00      	cmp	r3, #0
 8003050:	d113      	bne.n	800307a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003052:	2300      	movs	r3, #0
 8003054:	623b      	str	r3, [r7, #32]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	695b      	ldr	r3, [r3, #20]
 800305c:	623b      	str	r3, [r7, #32]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	699b      	ldr	r3, [r3, #24]
 8003064:	623b      	str	r3, [r7, #32]
 8003066:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003076:	601a      	str	r2, [r3, #0]
 8003078:	e190      	b.n	800339c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800307e:	2b01      	cmp	r3, #1
 8003080:	d11b      	bne.n	80030ba <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003090:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003092:	2300      	movs	r3, #0
 8003094:	61fb      	str	r3, [r7, #28]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	695b      	ldr	r3, [r3, #20]
 800309c:	61fb      	str	r3, [r7, #28]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	699b      	ldr	r3, [r3, #24]
 80030a4:	61fb      	str	r3, [r7, #28]
 80030a6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030b6:	601a      	str	r2, [r3, #0]
 80030b8:	e170      	b.n	800339c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d11b      	bne.n	80030fa <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030d0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80030e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030e2:	2300      	movs	r3, #0
 80030e4:	61bb      	str	r3, [r7, #24]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	695b      	ldr	r3, [r3, #20]
 80030ec:	61bb      	str	r3, [r7, #24]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	699b      	ldr	r3, [r3, #24]
 80030f4:	61bb      	str	r3, [r7, #24]
 80030f6:	69bb      	ldr	r3, [r7, #24]
 80030f8:	e150      	b.n	800339c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030fa:	2300      	movs	r3, #0
 80030fc:	617b      	str	r3, [r7, #20]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	695b      	ldr	r3, [r3, #20]
 8003104:	617b      	str	r3, [r7, #20]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	699b      	ldr	r3, [r3, #24]
 800310c:	617b      	str	r3, [r7, #20]
 800310e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003110:	e144      	b.n	800339c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003116:	2b03      	cmp	r3, #3
 8003118:	f200 80f1 	bhi.w	80032fe <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003120:	2b01      	cmp	r3, #1
 8003122:	d123      	bne.n	800316c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003124:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003126:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003128:	68f8      	ldr	r0, [r7, #12]
 800312a:	f000 fc79 	bl	8003a20 <I2C_WaitOnRXNEFlagUntilTimeout>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d001      	beq.n	8003138 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e145      	b.n	80033c4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	691a      	ldr	r2, [r3, #16]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003142:	b2d2      	uxtb	r2, r2
 8003144:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800314a:	1c5a      	adds	r2, r3, #1
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003154:	3b01      	subs	r3, #1
 8003156:	b29a      	uxth	r2, r3
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003160:	b29b      	uxth	r3, r3
 8003162:	3b01      	subs	r3, #1
 8003164:	b29a      	uxth	r2, r3
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800316a:	e117      	b.n	800339c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003170:	2b02      	cmp	r3, #2
 8003172:	d14e      	bne.n	8003212 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003176:	9300      	str	r3, [sp, #0]
 8003178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800317a:	2200      	movs	r2, #0
 800317c:	4906      	ldr	r1, [pc, #24]	@ (8003198 <HAL_I2C_Mem_Read+0x22c>)
 800317e:	68f8      	ldr	r0, [r7, #12]
 8003180:	f000 faa4 	bl	80036cc <I2C_WaitOnFlagUntilTimeout>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d008      	beq.n	800319c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e11a      	b.n	80033c4 <HAL_I2C_Mem_Read+0x458>
 800318e:	bf00      	nop
 8003190:	00100002 	.word	0x00100002
 8003194:	ffff0000 	.word	0xffff0000
 8003198:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	691a      	ldr	r2, [r3, #16]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031b6:	b2d2      	uxtb	r2, r2
 80031b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031be:	1c5a      	adds	r2, r3, #1
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031c8:	3b01      	subs	r3, #1
 80031ca:	b29a      	uxth	r2, r3
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	3b01      	subs	r3, #1
 80031d8:	b29a      	uxth	r2, r3
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	691a      	ldr	r2, [r3, #16]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e8:	b2d2      	uxtb	r2, r2
 80031ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f0:	1c5a      	adds	r2, r3, #1
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031fa:	3b01      	subs	r3, #1
 80031fc:	b29a      	uxth	r2, r3
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003206:	b29b      	uxth	r3, r3
 8003208:	3b01      	subs	r3, #1
 800320a:	b29a      	uxth	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003210:	e0c4      	b.n	800339c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003214:	9300      	str	r3, [sp, #0]
 8003216:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003218:	2200      	movs	r2, #0
 800321a:	496c      	ldr	r1, [pc, #432]	@ (80033cc <HAL_I2C_Mem_Read+0x460>)
 800321c:	68f8      	ldr	r0, [r7, #12]
 800321e:	f000 fa55 	bl	80036cc <I2C_WaitOnFlagUntilTimeout>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d001      	beq.n	800322c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e0cb      	b.n	80033c4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800323a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	691a      	ldr	r2, [r3, #16]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003246:	b2d2      	uxtb	r2, r2
 8003248:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800324e:	1c5a      	adds	r2, r3, #1
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003258:	3b01      	subs	r3, #1
 800325a:	b29a      	uxth	r2, r3
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003264:	b29b      	uxth	r3, r3
 8003266:	3b01      	subs	r3, #1
 8003268:	b29a      	uxth	r2, r3
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800326e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003270:	9300      	str	r3, [sp, #0]
 8003272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003274:	2200      	movs	r2, #0
 8003276:	4955      	ldr	r1, [pc, #340]	@ (80033cc <HAL_I2C_Mem_Read+0x460>)
 8003278:	68f8      	ldr	r0, [r7, #12]
 800327a:	f000 fa27 	bl	80036cc <I2C_WaitOnFlagUntilTimeout>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d001      	beq.n	8003288 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e09d      	b.n	80033c4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003296:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	691a      	ldr	r2, [r3, #16]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032a2:	b2d2      	uxtb	r2, r2
 80032a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032aa:	1c5a      	adds	r2, r3, #1
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032b4:	3b01      	subs	r3, #1
 80032b6:	b29a      	uxth	r2, r3
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	3b01      	subs	r3, #1
 80032c4:	b29a      	uxth	r2, r3
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	691a      	ldr	r2, [r3, #16]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032d4:	b2d2      	uxtb	r2, r2
 80032d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032dc:	1c5a      	adds	r2, r3, #1
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032e6:	3b01      	subs	r3, #1
 80032e8:	b29a      	uxth	r2, r3
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	3b01      	subs	r3, #1
 80032f6:	b29a      	uxth	r2, r3
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80032fc:	e04e      	b.n	800339c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003300:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003302:	68f8      	ldr	r0, [r7, #12]
 8003304:	f000 fb8c 	bl	8003a20 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d001      	beq.n	8003312 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e058      	b.n	80033c4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	691a      	ldr	r2, [r3, #16]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800331c:	b2d2      	uxtb	r2, r2
 800331e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003324:	1c5a      	adds	r2, r3, #1
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800332e:	3b01      	subs	r3, #1
 8003330:	b29a      	uxth	r2, r3
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800333a:	b29b      	uxth	r3, r3
 800333c:	3b01      	subs	r3, #1
 800333e:	b29a      	uxth	r2, r3
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	695b      	ldr	r3, [r3, #20]
 800334a:	f003 0304 	and.w	r3, r3, #4
 800334e:	2b04      	cmp	r3, #4
 8003350:	d124      	bne.n	800339c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003356:	2b03      	cmp	r3, #3
 8003358:	d107      	bne.n	800336a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003368:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	691a      	ldr	r2, [r3, #16]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003374:	b2d2      	uxtb	r2, r2
 8003376:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800337c:	1c5a      	adds	r2, r3, #1
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003386:	3b01      	subs	r3, #1
 8003388:	b29a      	uxth	r2, r3
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003392:	b29b      	uxth	r3, r3
 8003394:	3b01      	subs	r3, #1
 8003396:	b29a      	uxth	r2, r3
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	f47f aeb6 	bne.w	8003112 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2220      	movs	r2, #32
 80033aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2200      	movs	r2, #0
 80033b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80033be:	2300      	movs	r3, #0
 80033c0:	e000      	b.n	80033c4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80033c2:	2302      	movs	r3, #2
  }
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3728      	adds	r7, #40	@ 0x28
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	00010004 	.word	0x00010004

080033d0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b088      	sub	sp, #32
 80033d4:	af02      	add	r7, sp, #8
 80033d6:	60f8      	str	r0, [r7, #12]
 80033d8:	4608      	mov	r0, r1
 80033da:	4611      	mov	r1, r2
 80033dc:	461a      	mov	r2, r3
 80033de:	4603      	mov	r3, r0
 80033e0:	817b      	strh	r3, [r7, #10]
 80033e2:	460b      	mov	r3, r1
 80033e4:	813b      	strh	r3, [r7, #8]
 80033e6:	4613      	mov	r3, r2
 80033e8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80033f8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033fc:	9300      	str	r3, [sp, #0]
 80033fe:	6a3b      	ldr	r3, [r7, #32]
 8003400:	2200      	movs	r2, #0
 8003402:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003406:	68f8      	ldr	r0, [r7, #12]
 8003408:	f000 f960 	bl	80036cc <I2C_WaitOnFlagUntilTimeout>
 800340c:	4603      	mov	r3, r0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d00d      	beq.n	800342e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800341c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003420:	d103      	bne.n	800342a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003428:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e05f      	b.n	80034ee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800342e:	897b      	ldrh	r3, [r7, #10]
 8003430:	b2db      	uxtb	r3, r3
 8003432:	461a      	mov	r2, r3
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800343c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800343e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003440:	6a3a      	ldr	r2, [r7, #32]
 8003442:	492d      	ldr	r1, [pc, #180]	@ (80034f8 <I2C_RequestMemoryWrite+0x128>)
 8003444:	68f8      	ldr	r0, [r7, #12]
 8003446:	f000 f9bb 	bl	80037c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d001      	beq.n	8003454 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e04c      	b.n	80034ee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003454:	2300      	movs	r3, #0
 8003456:	617b      	str	r3, [r7, #20]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	695b      	ldr	r3, [r3, #20]
 800345e:	617b      	str	r3, [r7, #20]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	699b      	ldr	r3, [r3, #24]
 8003466:	617b      	str	r3, [r7, #20]
 8003468:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800346a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800346c:	6a39      	ldr	r1, [r7, #32]
 800346e:	68f8      	ldr	r0, [r7, #12]
 8003470:	f000 fa46 	bl	8003900 <I2C_WaitOnTXEFlagUntilTimeout>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d00d      	beq.n	8003496 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800347e:	2b04      	cmp	r3, #4
 8003480:	d107      	bne.n	8003492 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003490:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e02b      	b.n	80034ee <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003496:	88fb      	ldrh	r3, [r7, #6]
 8003498:	2b01      	cmp	r3, #1
 800349a:	d105      	bne.n	80034a8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800349c:	893b      	ldrh	r3, [r7, #8]
 800349e:	b2da      	uxtb	r2, r3
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	611a      	str	r2, [r3, #16]
 80034a6:	e021      	b.n	80034ec <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80034a8:	893b      	ldrh	r3, [r7, #8]
 80034aa:	0a1b      	lsrs	r3, r3, #8
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	b2da      	uxtb	r2, r3
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034b8:	6a39      	ldr	r1, [r7, #32]
 80034ba:	68f8      	ldr	r0, [r7, #12]
 80034bc:	f000 fa20 	bl	8003900 <I2C_WaitOnTXEFlagUntilTimeout>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d00d      	beq.n	80034e2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ca:	2b04      	cmp	r3, #4
 80034cc:	d107      	bne.n	80034de <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034dc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e005      	b.n	80034ee <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80034e2:	893b      	ldrh	r3, [r7, #8]
 80034e4:	b2da      	uxtb	r2, r3
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80034ec:	2300      	movs	r3, #0
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3718      	adds	r7, #24
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	00010002 	.word	0x00010002

080034fc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b088      	sub	sp, #32
 8003500:	af02      	add	r7, sp, #8
 8003502:	60f8      	str	r0, [r7, #12]
 8003504:	4608      	mov	r0, r1
 8003506:	4611      	mov	r1, r2
 8003508:	461a      	mov	r2, r3
 800350a:	4603      	mov	r3, r0
 800350c:	817b      	strh	r3, [r7, #10]
 800350e:	460b      	mov	r3, r1
 8003510:	813b      	strh	r3, [r7, #8]
 8003512:	4613      	mov	r3, r2
 8003514:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003524:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003534:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003538:	9300      	str	r3, [sp, #0]
 800353a:	6a3b      	ldr	r3, [r7, #32]
 800353c:	2200      	movs	r2, #0
 800353e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003542:	68f8      	ldr	r0, [r7, #12]
 8003544:	f000 f8c2 	bl	80036cc <I2C_WaitOnFlagUntilTimeout>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00d      	beq.n	800356a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003558:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800355c:	d103      	bne.n	8003566 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003564:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e0aa      	b.n	80036c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800356a:	897b      	ldrh	r3, [r7, #10]
 800356c:	b2db      	uxtb	r3, r3
 800356e:	461a      	mov	r2, r3
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003578:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800357a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800357c:	6a3a      	ldr	r2, [r7, #32]
 800357e:	4952      	ldr	r1, [pc, #328]	@ (80036c8 <I2C_RequestMemoryRead+0x1cc>)
 8003580:	68f8      	ldr	r0, [r7, #12]
 8003582:	f000 f91d 	bl	80037c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d001      	beq.n	8003590 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e097      	b.n	80036c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003590:	2300      	movs	r3, #0
 8003592:	617b      	str	r3, [r7, #20]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	695b      	ldr	r3, [r3, #20]
 800359a:	617b      	str	r3, [r7, #20]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	699b      	ldr	r3, [r3, #24]
 80035a2:	617b      	str	r3, [r7, #20]
 80035a4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035a8:	6a39      	ldr	r1, [r7, #32]
 80035aa:	68f8      	ldr	r0, [r7, #12]
 80035ac:	f000 f9a8 	bl	8003900 <I2C_WaitOnTXEFlagUntilTimeout>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d00d      	beq.n	80035d2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ba:	2b04      	cmp	r3, #4
 80035bc:	d107      	bne.n	80035ce <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035cc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e076      	b.n	80036c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80035d2:	88fb      	ldrh	r3, [r7, #6]
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d105      	bne.n	80035e4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80035d8:	893b      	ldrh	r3, [r7, #8]
 80035da:	b2da      	uxtb	r2, r3
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	611a      	str	r2, [r3, #16]
 80035e2:	e021      	b.n	8003628 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80035e4:	893b      	ldrh	r3, [r7, #8]
 80035e6:	0a1b      	lsrs	r3, r3, #8
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	b2da      	uxtb	r2, r3
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035f4:	6a39      	ldr	r1, [r7, #32]
 80035f6:	68f8      	ldr	r0, [r7, #12]
 80035f8:	f000 f982 	bl	8003900 <I2C_WaitOnTXEFlagUntilTimeout>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00d      	beq.n	800361e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003606:	2b04      	cmp	r3, #4
 8003608:	d107      	bne.n	800361a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003618:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e050      	b.n	80036c0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800361e:	893b      	ldrh	r3, [r7, #8]
 8003620:	b2da      	uxtb	r2, r3
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003628:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800362a:	6a39      	ldr	r1, [r7, #32]
 800362c:	68f8      	ldr	r0, [r7, #12]
 800362e:	f000 f967 	bl	8003900 <I2C_WaitOnTXEFlagUntilTimeout>
 8003632:	4603      	mov	r3, r0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d00d      	beq.n	8003654 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800363c:	2b04      	cmp	r3, #4
 800363e:	d107      	bne.n	8003650 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800364e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e035      	b.n	80036c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003662:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003666:	9300      	str	r3, [sp, #0]
 8003668:	6a3b      	ldr	r3, [r7, #32]
 800366a:	2200      	movs	r2, #0
 800366c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003670:	68f8      	ldr	r0, [r7, #12]
 8003672:	f000 f82b 	bl	80036cc <I2C_WaitOnFlagUntilTimeout>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d00d      	beq.n	8003698 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003686:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800368a:	d103      	bne.n	8003694 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003692:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003694:	2303      	movs	r3, #3
 8003696:	e013      	b.n	80036c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003698:	897b      	ldrh	r3, [r7, #10]
 800369a:	b2db      	uxtb	r3, r3
 800369c:	f043 0301 	orr.w	r3, r3, #1
 80036a0:	b2da      	uxtb	r2, r3
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80036a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036aa:	6a3a      	ldr	r2, [r7, #32]
 80036ac:	4906      	ldr	r1, [pc, #24]	@ (80036c8 <I2C_RequestMemoryRead+0x1cc>)
 80036ae:	68f8      	ldr	r0, [r7, #12]
 80036b0:	f000 f886 	bl	80037c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d001      	beq.n	80036be <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e000      	b.n	80036c0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80036be:	2300      	movs	r3, #0
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3718      	adds	r7, #24
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	00010002 	.word	0x00010002

080036cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	603b      	str	r3, [r7, #0]
 80036d8:	4613      	mov	r3, r2
 80036da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036dc:	e048      	b.n	8003770 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036e4:	d044      	beq.n	8003770 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036e6:	f7fe fdbd 	bl	8002264 <HAL_GetTick>
 80036ea:	4602      	mov	r2, r0
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	683a      	ldr	r2, [r7, #0]
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d302      	bcc.n	80036fc <I2C_WaitOnFlagUntilTimeout+0x30>
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d139      	bne.n	8003770 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	0c1b      	lsrs	r3, r3, #16
 8003700:	b2db      	uxtb	r3, r3
 8003702:	2b01      	cmp	r3, #1
 8003704:	d10d      	bne.n	8003722 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	695b      	ldr	r3, [r3, #20]
 800370c:	43da      	mvns	r2, r3
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	4013      	ands	r3, r2
 8003712:	b29b      	uxth	r3, r3
 8003714:	2b00      	cmp	r3, #0
 8003716:	bf0c      	ite	eq
 8003718:	2301      	moveq	r3, #1
 800371a:	2300      	movne	r3, #0
 800371c:	b2db      	uxtb	r3, r3
 800371e:	461a      	mov	r2, r3
 8003720:	e00c      	b.n	800373c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	699b      	ldr	r3, [r3, #24]
 8003728:	43da      	mvns	r2, r3
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	4013      	ands	r3, r2
 800372e:	b29b      	uxth	r3, r3
 8003730:	2b00      	cmp	r3, #0
 8003732:	bf0c      	ite	eq
 8003734:	2301      	moveq	r3, #1
 8003736:	2300      	movne	r3, #0
 8003738:	b2db      	uxtb	r3, r3
 800373a:	461a      	mov	r2, r3
 800373c:	79fb      	ldrb	r3, [r7, #7]
 800373e:	429a      	cmp	r2, r3
 8003740:	d116      	bne.n	8003770 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2200      	movs	r2, #0
 8003746:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2220      	movs	r2, #32
 800374c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800375c:	f043 0220 	orr.w	r2, r3, #32
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2200      	movs	r2, #0
 8003768:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e023      	b.n	80037b8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	0c1b      	lsrs	r3, r3, #16
 8003774:	b2db      	uxtb	r3, r3
 8003776:	2b01      	cmp	r3, #1
 8003778:	d10d      	bne.n	8003796 <I2C_WaitOnFlagUntilTimeout+0xca>
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	695b      	ldr	r3, [r3, #20]
 8003780:	43da      	mvns	r2, r3
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	4013      	ands	r3, r2
 8003786:	b29b      	uxth	r3, r3
 8003788:	2b00      	cmp	r3, #0
 800378a:	bf0c      	ite	eq
 800378c:	2301      	moveq	r3, #1
 800378e:	2300      	movne	r3, #0
 8003790:	b2db      	uxtb	r3, r3
 8003792:	461a      	mov	r2, r3
 8003794:	e00c      	b.n	80037b0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	699b      	ldr	r3, [r3, #24]
 800379c:	43da      	mvns	r2, r3
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	4013      	ands	r3, r2
 80037a2:	b29b      	uxth	r3, r3
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	bf0c      	ite	eq
 80037a8:	2301      	moveq	r3, #1
 80037aa:	2300      	movne	r3, #0
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	461a      	mov	r2, r3
 80037b0:	79fb      	ldrb	r3, [r7, #7]
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d093      	beq.n	80036de <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80037b6:	2300      	movs	r3, #0
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3710      	adds	r7, #16
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	60b9      	str	r1, [r7, #8]
 80037ca:	607a      	str	r2, [r7, #4]
 80037cc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80037ce:	e071      	b.n	80038b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	695b      	ldr	r3, [r3, #20]
 80037d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037de:	d123      	bne.n	8003828 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037ee:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80037f8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2200      	movs	r2, #0
 80037fe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2220      	movs	r2, #32
 8003804:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2200      	movs	r2, #0
 800380c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003814:	f043 0204 	orr.w	r2, r3, #4
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2200      	movs	r2, #0
 8003820:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e067      	b.n	80038f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800382e:	d041      	beq.n	80038b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003830:	f7fe fd18 	bl	8002264 <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	429a      	cmp	r2, r3
 800383e:	d302      	bcc.n	8003846 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d136      	bne.n	80038b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	0c1b      	lsrs	r3, r3, #16
 800384a:	b2db      	uxtb	r3, r3
 800384c:	2b01      	cmp	r3, #1
 800384e:	d10c      	bne.n	800386a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	695b      	ldr	r3, [r3, #20]
 8003856:	43da      	mvns	r2, r3
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	4013      	ands	r3, r2
 800385c:	b29b      	uxth	r3, r3
 800385e:	2b00      	cmp	r3, #0
 8003860:	bf14      	ite	ne
 8003862:	2301      	movne	r3, #1
 8003864:	2300      	moveq	r3, #0
 8003866:	b2db      	uxtb	r3, r3
 8003868:	e00b      	b.n	8003882 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	699b      	ldr	r3, [r3, #24]
 8003870:	43da      	mvns	r2, r3
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	4013      	ands	r3, r2
 8003876:	b29b      	uxth	r3, r3
 8003878:	2b00      	cmp	r3, #0
 800387a:	bf14      	ite	ne
 800387c:	2301      	movne	r3, #1
 800387e:	2300      	moveq	r3, #0
 8003880:	b2db      	uxtb	r3, r3
 8003882:	2b00      	cmp	r3, #0
 8003884:	d016      	beq.n	80038b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2200      	movs	r2, #0
 800388a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2220      	movs	r2, #32
 8003890:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2200      	movs	r2, #0
 8003898:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038a0:	f043 0220 	orr.w	r2, r3, #32
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2200      	movs	r2, #0
 80038ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e021      	b.n	80038f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	0c1b      	lsrs	r3, r3, #16
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d10c      	bne.n	80038d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	695b      	ldr	r3, [r3, #20]
 80038c4:	43da      	mvns	r2, r3
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	4013      	ands	r3, r2
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	bf14      	ite	ne
 80038d0:	2301      	movne	r3, #1
 80038d2:	2300      	moveq	r3, #0
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	e00b      	b.n	80038f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	699b      	ldr	r3, [r3, #24]
 80038de:	43da      	mvns	r2, r3
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	4013      	ands	r3, r2
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	bf14      	ite	ne
 80038ea:	2301      	movne	r3, #1
 80038ec:	2300      	moveq	r3, #0
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	f47f af6d 	bne.w	80037d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80038f6:	2300      	movs	r3, #0
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3710      	adds	r7, #16
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	60f8      	str	r0, [r7, #12]
 8003908:	60b9      	str	r1, [r7, #8]
 800390a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800390c:	e034      	b.n	8003978 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800390e:	68f8      	ldr	r0, [r7, #12]
 8003910:	f000 f8e3 	bl	8003ada <I2C_IsAcknowledgeFailed>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d001      	beq.n	800391e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e034      	b.n	8003988 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003924:	d028      	beq.n	8003978 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003926:	f7fe fc9d 	bl	8002264 <HAL_GetTick>
 800392a:	4602      	mov	r2, r0
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	68ba      	ldr	r2, [r7, #8]
 8003932:	429a      	cmp	r2, r3
 8003934:	d302      	bcc.n	800393c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d11d      	bne.n	8003978 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	695b      	ldr	r3, [r3, #20]
 8003942:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003946:	2b80      	cmp	r3, #128	@ 0x80
 8003948:	d016      	beq.n	8003978 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2200      	movs	r2, #0
 800394e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2220      	movs	r2, #32
 8003954:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2200      	movs	r2, #0
 800395c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003964:	f043 0220 	orr.w	r2, r3, #32
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2200      	movs	r2, #0
 8003970:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e007      	b.n	8003988 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	695b      	ldr	r3, [r3, #20]
 800397e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003982:	2b80      	cmp	r3, #128	@ 0x80
 8003984:	d1c3      	bne.n	800390e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003986:	2300      	movs	r3, #0
}
 8003988:	4618      	mov	r0, r3
 800398a:	3710      	adds	r7, #16
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}

08003990 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	60f8      	str	r0, [r7, #12]
 8003998:	60b9      	str	r1, [r7, #8]
 800399a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800399c:	e034      	b.n	8003a08 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800399e:	68f8      	ldr	r0, [r7, #12]
 80039a0:	f000 f89b 	bl	8003ada <I2C_IsAcknowledgeFailed>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d001      	beq.n	80039ae <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e034      	b.n	8003a18 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039b4:	d028      	beq.n	8003a08 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039b6:	f7fe fc55 	bl	8002264 <HAL_GetTick>
 80039ba:	4602      	mov	r2, r0
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	68ba      	ldr	r2, [r7, #8]
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d302      	bcc.n	80039cc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d11d      	bne.n	8003a08 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	695b      	ldr	r3, [r3, #20]
 80039d2:	f003 0304 	and.w	r3, r3, #4
 80039d6:	2b04      	cmp	r3, #4
 80039d8:	d016      	beq.n	8003a08 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2200      	movs	r2, #0
 80039de:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2220      	movs	r2, #32
 80039e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039f4:	f043 0220 	orr.w	r2, r3, #32
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2200      	movs	r2, #0
 8003a00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e007      	b.n	8003a18 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	695b      	ldr	r3, [r3, #20]
 8003a0e:	f003 0304 	and.w	r3, r3, #4
 8003a12:	2b04      	cmp	r3, #4
 8003a14:	d1c3      	bne.n	800399e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003a16:	2300      	movs	r3, #0
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3710      	adds	r7, #16
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}

08003a20 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	60f8      	str	r0, [r7, #12]
 8003a28:	60b9      	str	r1, [r7, #8]
 8003a2a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a2c:	e049      	b.n	8003ac2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	695b      	ldr	r3, [r3, #20]
 8003a34:	f003 0310 	and.w	r3, r3, #16
 8003a38:	2b10      	cmp	r3, #16
 8003a3a:	d119      	bne.n	8003a70 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f06f 0210 	mvn.w	r2, #16
 8003a44:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2220      	movs	r2, #32
 8003a50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2200      	movs	r2, #0
 8003a68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e030      	b.n	8003ad2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a70:	f7fe fbf8 	bl	8002264 <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	68ba      	ldr	r2, [r7, #8]
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d302      	bcc.n	8003a86 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d11d      	bne.n	8003ac2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	695b      	ldr	r3, [r3, #20]
 8003a8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a90:	2b40      	cmp	r3, #64	@ 0x40
 8003a92:	d016      	beq.n	8003ac2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2200      	movs	r2, #0
 8003a98:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2220      	movs	r2, #32
 8003a9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aae:	f043 0220 	orr.w	r2, r3, #32
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e007      	b.n	8003ad2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	695b      	ldr	r3, [r3, #20]
 8003ac8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003acc:	2b40      	cmp	r3, #64	@ 0x40
 8003ace:	d1ae      	bne.n	8003a2e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ad0:	2300      	movs	r3, #0
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3710      	adds	r7, #16
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}

08003ada <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003ada:	b480      	push	{r7}
 8003adc:	b083      	sub	sp, #12
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	695b      	ldr	r3, [r3, #20]
 8003ae8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003aec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003af0:	d11b      	bne.n	8003b2a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003afa:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2220      	movs	r2, #32
 8003b06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b16:	f043 0204 	orr.w	r2, r3, #4
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e000      	b.n	8003b2c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003b2a:	2300      	movs	r3, #0
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	370c      	adds	r7, #12
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d101      	bne.n	8003b4a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e0bf      	b.n	8003cca <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d106      	bne.n	8003b64 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f7fd fdce 	bl	8001700 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2202      	movs	r2, #2
 8003b68:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	699a      	ldr	r2, [r3, #24]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8003b7a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	6999      	ldr	r1, [r3, #24]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	685a      	ldr	r2, [r3, #4]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003b90:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	691b      	ldr	r3, [r3, #16]
 8003b96:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	430a      	orrs	r2, r1
 8003b9e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	6899      	ldr	r1, [r3, #8]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	4b4a      	ldr	r3, [pc, #296]	@ (8003cd4 <HAL_LTDC_Init+0x19c>)
 8003bac:	400b      	ands	r3, r1
 8003bae:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	695b      	ldr	r3, [r3, #20]
 8003bb4:	041b      	lsls	r3, r3, #16
 8003bb6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	6899      	ldr	r1, [r3, #8]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	699a      	ldr	r2, [r3, #24]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	431a      	orrs	r2, r3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	430a      	orrs	r2, r1
 8003bcc:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68d9      	ldr	r1, [r3, #12]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	4b3e      	ldr	r3, [pc, #248]	@ (8003cd4 <HAL_LTDC_Init+0x19c>)
 8003bda:	400b      	ands	r3, r1
 8003bdc:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	69db      	ldr	r3, [r3, #28]
 8003be2:	041b      	lsls	r3, r3, #16
 8003be4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	68d9      	ldr	r1, [r3, #12]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a1a      	ldr	r2, [r3, #32]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	431a      	orrs	r2, r3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	430a      	orrs	r2, r1
 8003bfa:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	6919      	ldr	r1, [r3, #16]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	4b33      	ldr	r3, [pc, #204]	@ (8003cd4 <HAL_LTDC_Init+0x19c>)
 8003c08:	400b      	ands	r3, r1
 8003c0a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c10:	041b      	lsls	r3, r3, #16
 8003c12:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	6919      	ldr	r1, [r3, #16]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	431a      	orrs	r2, r3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	430a      	orrs	r2, r1
 8003c28:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	6959      	ldr	r1, [r3, #20]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	4b27      	ldr	r3, [pc, #156]	@ (8003cd4 <HAL_LTDC_Init+0x19c>)
 8003c36:	400b      	ands	r3, r1
 8003c38:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c3e:	041b      	lsls	r3, r3, #16
 8003c40:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	6959      	ldr	r1, [r3, #20]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	431a      	orrs	r2, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	430a      	orrs	r2, r1
 8003c56:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003c5e:	021b      	lsls	r3, r3, #8
 8003c60:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8003c68:	041b      	lsls	r3, r3, #16
 8003c6a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8003c7a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003c82:	68ba      	ldr	r2, [r7, #8]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8003c8e:	431a      	orrs	r2, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	430a      	orrs	r2, r1
 8003c96:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f042 0206 	orr.w	r2, r2, #6
 8003ca6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	699a      	ldr	r2, [r3, #24]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f042 0201 	orr.w	r2, r2, #1
 8003cb6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3710      	adds	r7, #16
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	f000f800 	.word	0xf000f800

08003cd8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003cd8:	b5b0      	push	{r4, r5, r7, lr}
 8003cda:	b084      	sub	sp, #16
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	60b9      	str	r1, [r7, #8]
 8003ce2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d101      	bne.n	8003cf2 <HAL_LTDC_ConfigLayer+0x1a>
 8003cee:	2302      	movs	r3, #2
 8003cf0:	e02c      	b.n	8003d4c <HAL_LTDC_ConfigLayer+0x74>
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2202      	movs	r2, #2
 8003cfe:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2134      	movs	r1, #52	@ 0x34
 8003d08:	fb01 f303 	mul.w	r3, r1, r3
 8003d0c:	4413      	add	r3, r2
 8003d0e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	4614      	mov	r4, r2
 8003d16:	461d      	mov	r5, r3
 8003d18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003d1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003d20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003d24:	682b      	ldr	r3, [r5, #0]
 8003d26:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	68b9      	ldr	r1, [r7, #8]
 8003d2c:	68f8      	ldr	r0, [r7, #12]
 8003d2e:	f000 f811 	bl	8003d54 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	2201      	movs	r2, #1
 8003d38:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8003d4a:	2300      	movs	r3, #0
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3710      	adds	r7, #16
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bdb0      	pop	{r4, r5, r7, pc}

08003d54 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b089      	sub	sp, #36	@ 0x24
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	60b9      	str	r1, [r7, #8]
 8003d5e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	685a      	ldr	r2, [r3, #4]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	68db      	ldr	r3, [r3, #12]
 8003d6a:	0c1b      	lsrs	r3, r3, #16
 8003d6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d70:	4413      	add	r3, r2
 8003d72:	041b      	lsls	r3, r3, #16
 8003d74:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	01db      	lsls	r3, r3, #7
 8003d80:	4413      	add	r3, r2
 8003d82:	3384      	adds	r3, #132	@ 0x84
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	68fa      	ldr	r2, [r7, #12]
 8003d88:	6812      	ldr	r2, [r2, #0]
 8003d8a:	4611      	mov	r1, r2
 8003d8c:	687a      	ldr	r2, [r7, #4]
 8003d8e:	01d2      	lsls	r2, r2, #7
 8003d90:	440a      	add	r2, r1
 8003d92:	3284      	adds	r2, #132	@ 0x84
 8003d94:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8003d98:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	0c1b      	lsrs	r3, r3, #16
 8003da6:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003daa:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003dac:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4619      	mov	r1, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	01db      	lsls	r3, r3, #7
 8003db8:	440b      	add	r3, r1
 8003dba:	3384      	adds	r3, #132	@ 0x84
 8003dbc:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003dc2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	68da      	ldr	r2, [r3, #12]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003dd2:	4413      	add	r3, r2
 8003dd4:	041b      	lsls	r3, r3, #16
 8003dd6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	461a      	mov	r2, r3
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	01db      	lsls	r3, r3, #7
 8003de2:	4413      	add	r3, r2
 8003de4:	3384      	adds	r3, #132	@ 0x84
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	68fa      	ldr	r2, [r7, #12]
 8003dea:	6812      	ldr	r2, [r2, #0]
 8003dec:	4611      	mov	r1, r2
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	01d2      	lsls	r2, r2, #7
 8003df2:	440a      	add	r2, r1
 8003df4:	3284      	adds	r2, #132	@ 0x84
 8003df6:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8003dfa:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	689a      	ldr	r2, [r3, #8]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e0a:	4413      	add	r3, r2
 8003e0c:	1c5a      	adds	r2, r3, #1
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4619      	mov	r1, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	01db      	lsls	r3, r3, #7
 8003e18:	440b      	add	r3, r1
 8003e1a:	3384      	adds	r3, #132	@ 0x84
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	461a      	mov	r2, r3
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	01db      	lsls	r3, r3, #7
 8003e2e:	4413      	add	r3, r2
 8003e30:	3384      	adds	r3, #132	@ 0x84
 8003e32:	691b      	ldr	r3, [r3, #16]
 8003e34:	68fa      	ldr	r2, [r7, #12]
 8003e36:	6812      	ldr	r2, [r2, #0]
 8003e38:	4611      	mov	r1, r2
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	01d2      	lsls	r2, r2, #7
 8003e3e:	440a      	add	r2, r1
 8003e40:	3284      	adds	r2, #132	@ 0x84
 8003e42:	f023 0307 	bic.w	r3, r3, #7
 8003e46:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	01db      	lsls	r3, r3, #7
 8003e52:	4413      	add	r3, r2
 8003e54:	3384      	adds	r3, #132	@ 0x84
 8003e56:	461a      	mov	r2, r3
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	691b      	ldr	r3, [r3, #16]
 8003e5c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003e64:	021b      	lsls	r3, r3, #8
 8003e66:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8003e6e:	041b      	lsls	r3, r3, #16
 8003e70:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	699b      	ldr	r3, [r3, #24]
 8003e76:	061b      	lsls	r3, r3, #24
 8003e78:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	461a      	mov	r2, r3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	01db      	lsls	r3, r3, #7
 8003e84:	4413      	add	r3, r2
 8003e86:	3384      	adds	r3, #132	@ 0x84
 8003e88:	699b      	ldr	r3, [r3, #24]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	461a      	mov	r2, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	01db      	lsls	r3, r3, #7
 8003e94:	4413      	add	r3, r2
 8003e96:	3384      	adds	r3, #132	@ 0x84
 8003e98:	461a      	mov	r2, r3
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	431a      	orrs	r2, r3
 8003eaa:	69bb      	ldr	r3, [r7, #24]
 8003eac:	431a      	orrs	r2, r3
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4619      	mov	r1, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	01db      	lsls	r3, r3, #7
 8003eb8:	440b      	add	r3, r1
 8003eba:	3384      	adds	r3, #132	@ 0x84
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	461a      	mov	r2, r3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	01db      	lsls	r3, r3, #7
 8003ece:	4413      	add	r3, r2
 8003ed0:	3384      	adds	r3, #132	@ 0x84
 8003ed2:	695b      	ldr	r3, [r3, #20]
 8003ed4:	68fa      	ldr	r2, [r7, #12]
 8003ed6:	6812      	ldr	r2, [r2, #0]
 8003ed8:	4611      	mov	r1, r2
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	01d2      	lsls	r2, r2, #7
 8003ede:	440a      	add	r2, r1
 8003ee0:	3284      	adds	r2, #132	@ 0x84
 8003ee2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003ee6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	461a      	mov	r2, r3
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	01db      	lsls	r3, r3, #7
 8003ef2:	4413      	add	r3, r2
 8003ef4:	3384      	adds	r3, #132	@ 0x84
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	695b      	ldr	r3, [r3, #20]
 8003efc:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	461a      	mov	r2, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	01db      	lsls	r3, r3, #7
 8003f08:	4413      	add	r3, r2
 8003f0a:	3384      	adds	r3, #132	@ 0x84
 8003f0c:	69db      	ldr	r3, [r3, #28]
 8003f0e:	68fa      	ldr	r2, [r7, #12]
 8003f10:	6812      	ldr	r2, [r2, #0]
 8003f12:	4611      	mov	r1, r2
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	01d2      	lsls	r2, r2, #7
 8003f18:	440a      	add	r2, r1
 8003f1a:	3284      	adds	r2, #132	@ 0x84
 8003f1c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003f20:	f023 0307 	bic.w	r3, r3, #7
 8003f24:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	69da      	ldr	r2, [r3, #28]
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	6a1b      	ldr	r3, [r3, #32]
 8003f2e:	68f9      	ldr	r1, [r7, #12]
 8003f30:	6809      	ldr	r1, [r1, #0]
 8003f32:	4608      	mov	r0, r1
 8003f34:	6879      	ldr	r1, [r7, #4]
 8003f36:	01c9      	lsls	r1, r1, #7
 8003f38:	4401      	add	r1, r0
 8003f3a:	3184      	adds	r1, #132	@ 0x84
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	461a      	mov	r2, r3
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	01db      	lsls	r3, r3, #7
 8003f4a:	4413      	add	r3, r2
 8003f4c:	3384      	adds	r3, #132	@ 0x84
 8003f4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	461a      	mov	r2, r3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	01db      	lsls	r3, r3, #7
 8003f5a:	4413      	add	r3, r2
 8003f5c:	3384      	adds	r3, #132	@ 0x84
 8003f5e:	461a      	mov	r2, r3
 8003f60:	2300      	movs	r3, #0
 8003f62:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	461a      	mov	r2, r3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	01db      	lsls	r3, r3, #7
 8003f6e:	4413      	add	r3, r2
 8003f70:	3384      	adds	r3, #132	@ 0x84
 8003f72:	461a      	mov	r2, r3
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f78:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	691b      	ldr	r3, [r3, #16]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d102      	bne.n	8003f88 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8003f82:	2304      	movs	r3, #4
 8003f84:	61fb      	str	r3, [r7, #28]
 8003f86:	e01b      	b.n	8003fc0 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	691b      	ldr	r3, [r3, #16]
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d102      	bne.n	8003f96 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8003f90:	2303      	movs	r3, #3
 8003f92:	61fb      	str	r3, [r7, #28]
 8003f94:	e014      	b.n	8003fc0 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	691b      	ldr	r3, [r3, #16]
 8003f9a:	2b04      	cmp	r3, #4
 8003f9c:	d00b      	beq.n	8003fb6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003fa2:	2b02      	cmp	r3, #2
 8003fa4:	d007      	beq.n	8003fb6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003faa:	2b03      	cmp	r3, #3
 8003fac:	d003      	beq.n	8003fb6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003fb2:	2b07      	cmp	r3, #7
 8003fb4:	d102      	bne.n	8003fbc <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8003fb6:	2302      	movs	r3, #2
 8003fb8:	61fb      	str	r3, [r7, #28]
 8003fba:	e001      	b.n	8003fc0 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	461a      	mov	r2, r3
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	01db      	lsls	r3, r3, #7
 8003fca:	4413      	add	r3, r2
 8003fcc:	3384      	adds	r3, #132	@ 0x84
 8003fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fd0:	68fa      	ldr	r2, [r7, #12]
 8003fd2:	6812      	ldr	r2, [r2, #0]
 8003fd4:	4611      	mov	r1, r2
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	01d2      	lsls	r2, r2, #7
 8003fda:	440a      	add	r2, r1
 8003fdc:	3284      	adds	r2, #132	@ 0x84
 8003fde:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8003fe2:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fe8:	69fa      	ldr	r2, [r7, #28]
 8003fea:	fb02 f303 	mul.w	r3, r2, r3
 8003fee:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	6859      	ldr	r1, [r3, #4]
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	1acb      	subs	r3, r1, r3
 8003ffa:	69f9      	ldr	r1, [r7, #28]
 8003ffc:	fb01 f303 	mul.w	r3, r1, r3
 8004000:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004002:	68f9      	ldr	r1, [r7, #12]
 8004004:	6809      	ldr	r1, [r1, #0]
 8004006:	4608      	mov	r0, r1
 8004008:	6879      	ldr	r1, [r7, #4]
 800400a:	01c9      	lsls	r1, r1, #7
 800400c:	4401      	add	r1, r0
 800400e:	3184      	adds	r1, #132	@ 0x84
 8004010:	4313      	orrs	r3, r2
 8004012:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	461a      	mov	r2, r3
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	01db      	lsls	r3, r3, #7
 800401e:	4413      	add	r3, r2
 8004020:	3384      	adds	r3, #132	@ 0x84
 8004022:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004024:	68fa      	ldr	r2, [r7, #12]
 8004026:	6812      	ldr	r2, [r2, #0]
 8004028:	4611      	mov	r1, r2
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	01d2      	lsls	r2, r2, #7
 800402e:	440a      	add	r2, r1
 8004030:	3284      	adds	r2, #132	@ 0x84
 8004032:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004036:	f023 0307 	bic.w	r3, r3, #7
 800403a:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	461a      	mov	r2, r3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	01db      	lsls	r3, r3, #7
 8004046:	4413      	add	r3, r2
 8004048:	3384      	adds	r3, #132	@ 0x84
 800404a:	461a      	mov	r2, r3
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004050:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	461a      	mov	r2, r3
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	01db      	lsls	r3, r3, #7
 800405c:	4413      	add	r3, r2
 800405e:	3384      	adds	r3, #132	@ 0x84
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	68fa      	ldr	r2, [r7, #12]
 8004064:	6812      	ldr	r2, [r2, #0]
 8004066:	4611      	mov	r1, r2
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	01d2      	lsls	r2, r2, #7
 800406c:	440a      	add	r2, r1
 800406e:	3284      	adds	r2, #132	@ 0x84
 8004070:	f043 0301 	orr.w	r3, r3, #1
 8004074:	6013      	str	r3, [r2, #0]
}
 8004076:	bf00      	nop
 8004078:	3724      	adds	r7, #36	@ 0x24
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr
	...

08004084 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b086      	sub	sp, #24
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d101      	bne.n	8004096 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e267      	b.n	8004566 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0301 	and.w	r3, r3, #1
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d075      	beq.n	800418e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80040a2:	4b88      	ldr	r3, [pc, #544]	@ (80042c4 <HAL_RCC_OscConfig+0x240>)
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	f003 030c 	and.w	r3, r3, #12
 80040aa:	2b04      	cmp	r3, #4
 80040ac:	d00c      	beq.n	80040c8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040ae:	4b85      	ldr	r3, [pc, #532]	@ (80042c4 <HAL_RCC_OscConfig+0x240>)
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80040b6:	2b08      	cmp	r3, #8
 80040b8:	d112      	bne.n	80040e0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040ba:	4b82      	ldr	r3, [pc, #520]	@ (80042c4 <HAL_RCC_OscConfig+0x240>)
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80040c6:	d10b      	bne.n	80040e0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040c8:	4b7e      	ldr	r3, [pc, #504]	@ (80042c4 <HAL_RCC_OscConfig+0x240>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d05b      	beq.n	800418c <HAL_RCC_OscConfig+0x108>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d157      	bne.n	800418c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e242      	b.n	8004566 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040e8:	d106      	bne.n	80040f8 <HAL_RCC_OscConfig+0x74>
 80040ea:	4b76      	ldr	r3, [pc, #472]	@ (80042c4 <HAL_RCC_OscConfig+0x240>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a75      	ldr	r2, [pc, #468]	@ (80042c4 <HAL_RCC_OscConfig+0x240>)
 80040f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040f4:	6013      	str	r3, [r2, #0]
 80040f6:	e01d      	b.n	8004134 <HAL_RCC_OscConfig+0xb0>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004100:	d10c      	bne.n	800411c <HAL_RCC_OscConfig+0x98>
 8004102:	4b70      	ldr	r3, [pc, #448]	@ (80042c4 <HAL_RCC_OscConfig+0x240>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a6f      	ldr	r2, [pc, #444]	@ (80042c4 <HAL_RCC_OscConfig+0x240>)
 8004108:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800410c:	6013      	str	r3, [r2, #0]
 800410e:	4b6d      	ldr	r3, [pc, #436]	@ (80042c4 <HAL_RCC_OscConfig+0x240>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a6c      	ldr	r2, [pc, #432]	@ (80042c4 <HAL_RCC_OscConfig+0x240>)
 8004114:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004118:	6013      	str	r3, [r2, #0]
 800411a:	e00b      	b.n	8004134 <HAL_RCC_OscConfig+0xb0>
 800411c:	4b69      	ldr	r3, [pc, #420]	@ (80042c4 <HAL_RCC_OscConfig+0x240>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a68      	ldr	r2, [pc, #416]	@ (80042c4 <HAL_RCC_OscConfig+0x240>)
 8004122:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004126:	6013      	str	r3, [r2, #0]
 8004128:	4b66      	ldr	r3, [pc, #408]	@ (80042c4 <HAL_RCC_OscConfig+0x240>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a65      	ldr	r2, [pc, #404]	@ (80042c4 <HAL_RCC_OscConfig+0x240>)
 800412e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004132:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d013      	beq.n	8004164 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800413c:	f7fe f892 	bl	8002264 <HAL_GetTick>
 8004140:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004142:	e008      	b.n	8004156 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004144:	f7fe f88e 	bl	8002264 <HAL_GetTick>
 8004148:	4602      	mov	r2, r0
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	2b64      	cmp	r3, #100	@ 0x64
 8004150:	d901      	bls.n	8004156 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e207      	b.n	8004566 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004156:	4b5b      	ldr	r3, [pc, #364]	@ (80042c4 <HAL_RCC_OscConfig+0x240>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d0f0      	beq.n	8004144 <HAL_RCC_OscConfig+0xc0>
 8004162:	e014      	b.n	800418e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004164:	f7fe f87e 	bl	8002264 <HAL_GetTick>
 8004168:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800416a:	e008      	b.n	800417e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800416c:	f7fe f87a 	bl	8002264 <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	2b64      	cmp	r3, #100	@ 0x64
 8004178:	d901      	bls.n	800417e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	e1f3      	b.n	8004566 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800417e:	4b51      	ldr	r3, [pc, #324]	@ (80042c4 <HAL_RCC_OscConfig+0x240>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d1f0      	bne.n	800416c <HAL_RCC_OscConfig+0xe8>
 800418a:	e000      	b.n	800418e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800418c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0302 	and.w	r3, r3, #2
 8004196:	2b00      	cmp	r3, #0
 8004198:	d063      	beq.n	8004262 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800419a:	4b4a      	ldr	r3, [pc, #296]	@ (80042c4 <HAL_RCC_OscConfig+0x240>)
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	f003 030c 	and.w	r3, r3, #12
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d00b      	beq.n	80041be <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041a6:	4b47      	ldr	r3, [pc, #284]	@ (80042c4 <HAL_RCC_OscConfig+0x240>)
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80041ae:	2b08      	cmp	r3, #8
 80041b0:	d11c      	bne.n	80041ec <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041b2:	4b44      	ldr	r3, [pc, #272]	@ (80042c4 <HAL_RCC_OscConfig+0x240>)
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d116      	bne.n	80041ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041be:	4b41      	ldr	r3, [pc, #260]	@ (80042c4 <HAL_RCC_OscConfig+0x240>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0302 	and.w	r3, r3, #2
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d005      	beq.n	80041d6 <HAL_RCC_OscConfig+0x152>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d001      	beq.n	80041d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e1c7      	b.n	8004566 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041d6:	4b3b      	ldr	r3, [pc, #236]	@ (80042c4 <HAL_RCC_OscConfig+0x240>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	00db      	lsls	r3, r3, #3
 80041e4:	4937      	ldr	r1, [pc, #220]	@ (80042c4 <HAL_RCC_OscConfig+0x240>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041ea:	e03a      	b.n	8004262 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d020      	beq.n	8004236 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041f4:	4b34      	ldr	r3, [pc, #208]	@ (80042c8 <HAL_RCC_OscConfig+0x244>)
 80041f6:	2201      	movs	r2, #1
 80041f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041fa:	f7fe f833 	bl	8002264 <HAL_GetTick>
 80041fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004200:	e008      	b.n	8004214 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004202:	f7fe f82f 	bl	8002264 <HAL_GetTick>
 8004206:	4602      	mov	r2, r0
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	1ad3      	subs	r3, r2, r3
 800420c:	2b02      	cmp	r3, #2
 800420e:	d901      	bls.n	8004214 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004210:	2303      	movs	r3, #3
 8004212:	e1a8      	b.n	8004566 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004214:	4b2b      	ldr	r3, [pc, #172]	@ (80042c4 <HAL_RCC_OscConfig+0x240>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0302 	and.w	r3, r3, #2
 800421c:	2b00      	cmp	r3, #0
 800421e:	d0f0      	beq.n	8004202 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004220:	4b28      	ldr	r3, [pc, #160]	@ (80042c4 <HAL_RCC_OscConfig+0x240>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	691b      	ldr	r3, [r3, #16]
 800422c:	00db      	lsls	r3, r3, #3
 800422e:	4925      	ldr	r1, [pc, #148]	@ (80042c4 <HAL_RCC_OscConfig+0x240>)
 8004230:	4313      	orrs	r3, r2
 8004232:	600b      	str	r3, [r1, #0]
 8004234:	e015      	b.n	8004262 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004236:	4b24      	ldr	r3, [pc, #144]	@ (80042c8 <HAL_RCC_OscConfig+0x244>)
 8004238:	2200      	movs	r2, #0
 800423a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800423c:	f7fe f812 	bl	8002264 <HAL_GetTick>
 8004240:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004242:	e008      	b.n	8004256 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004244:	f7fe f80e 	bl	8002264 <HAL_GetTick>
 8004248:	4602      	mov	r2, r0
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	2b02      	cmp	r3, #2
 8004250:	d901      	bls.n	8004256 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	e187      	b.n	8004566 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004256:	4b1b      	ldr	r3, [pc, #108]	@ (80042c4 <HAL_RCC_OscConfig+0x240>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0302 	and.w	r3, r3, #2
 800425e:	2b00      	cmp	r3, #0
 8004260:	d1f0      	bne.n	8004244 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 0308 	and.w	r3, r3, #8
 800426a:	2b00      	cmp	r3, #0
 800426c:	d036      	beq.n	80042dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	695b      	ldr	r3, [r3, #20]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d016      	beq.n	80042a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004276:	4b15      	ldr	r3, [pc, #84]	@ (80042cc <HAL_RCC_OscConfig+0x248>)
 8004278:	2201      	movs	r2, #1
 800427a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800427c:	f7fd fff2 	bl	8002264 <HAL_GetTick>
 8004280:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004282:	e008      	b.n	8004296 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004284:	f7fd ffee 	bl	8002264 <HAL_GetTick>
 8004288:	4602      	mov	r2, r0
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	2b02      	cmp	r3, #2
 8004290:	d901      	bls.n	8004296 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	e167      	b.n	8004566 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004296:	4b0b      	ldr	r3, [pc, #44]	@ (80042c4 <HAL_RCC_OscConfig+0x240>)
 8004298:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800429a:	f003 0302 	and.w	r3, r3, #2
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d0f0      	beq.n	8004284 <HAL_RCC_OscConfig+0x200>
 80042a2:	e01b      	b.n	80042dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042a4:	4b09      	ldr	r3, [pc, #36]	@ (80042cc <HAL_RCC_OscConfig+0x248>)
 80042a6:	2200      	movs	r2, #0
 80042a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042aa:	f7fd ffdb 	bl	8002264 <HAL_GetTick>
 80042ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042b0:	e00e      	b.n	80042d0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042b2:	f7fd ffd7 	bl	8002264 <HAL_GetTick>
 80042b6:	4602      	mov	r2, r0
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	2b02      	cmp	r3, #2
 80042be:	d907      	bls.n	80042d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80042c0:	2303      	movs	r3, #3
 80042c2:	e150      	b.n	8004566 <HAL_RCC_OscConfig+0x4e2>
 80042c4:	40023800 	.word	0x40023800
 80042c8:	42470000 	.word	0x42470000
 80042cc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042d0:	4b88      	ldr	r3, [pc, #544]	@ (80044f4 <HAL_RCC_OscConfig+0x470>)
 80042d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042d4:	f003 0302 	and.w	r3, r3, #2
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d1ea      	bne.n	80042b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 0304 	and.w	r3, r3, #4
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	f000 8097 	beq.w	8004418 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042ea:	2300      	movs	r3, #0
 80042ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042ee:	4b81      	ldr	r3, [pc, #516]	@ (80044f4 <HAL_RCC_OscConfig+0x470>)
 80042f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d10f      	bne.n	800431a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042fa:	2300      	movs	r3, #0
 80042fc:	60bb      	str	r3, [r7, #8]
 80042fe:	4b7d      	ldr	r3, [pc, #500]	@ (80044f4 <HAL_RCC_OscConfig+0x470>)
 8004300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004302:	4a7c      	ldr	r2, [pc, #496]	@ (80044f4 <HAL_RCC_OscConfig+0x470>)
 8004304:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004308:	6413      	str	r3, [r2, #64]	@ 0x40
 800430a:	4b7a      	ldr	r3, [pc, #488]	@ (80044f4 <HAL_RCC_OscConfig+0x470>)
 800430c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800430e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004312:	60bb      	str	r3, [r7, #8]
 8004314:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004316:	2301      	movs	r3, #1
 8004318:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800431a:	4b77      	ldr	r3, [pc, #476]	@ (80044f8 <HAL_RCC_OscConfig+0x474>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004322:	2b00      	cmp	r3, #0
 8004324:	d118      	bne.n	8004358 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004326:	4b74      	ldr	r3, [pc, #464]	@ (80044f8 <HAL_RCC_OscConfig+0x474>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a73      	ldr	r2, [pc, #460]	@ (80044f8 <HAL_RCC_OscConfig+0x474>)
 800432c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004330:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004332:	f7fd ff97 	bl	8002264 <HAL_GetTick>
 8004336:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004338:	e008      	b.n	800434c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800433a:	f7fd ff93 	bl	8002264 <HAL_GetTick>
 800433e:	4602      	mov	r2, r0
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	2b02      	cmp	r3, #2
 8004346:	d901      	bls.n	800434c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004348:	2303      	movs	r3, #3
 800434a:	e10c      	b.n	8004566 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800434c:	4b6a      	ldr	r3, [pc, #424]	@ (80044f8 <HAL_RCC_OscConfig+0x474>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004354:	2b00      	cmp	r3, #0
 8004356:	d0f0      	beq.n	800433a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	2b01      	cmp	r3, #1
 800435e:	d106      	bne.n	800436e <HAL_RCC_OscConfig+0x2ea>
 8004360:	4b64      	ldr	r3, [pc, #400]	@ (80044f4 <HAL_RCC_OscConfig+0x470>)
 8004362:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004364:	4a63      	ldr	r2, [pc, #396]	@ (80044f4 <HAL_RCC_OscConfig+0x470>)
 8004366:	f043 0301 	orr.w	r3, r3, #1
 800436a:	6713      	str	r3, [r2, #112]	@ 0x70
 800436c:	e01c      	b.n	80043a8 <HAL_RCC_OscConfig+0x324>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	2b05      	cmp	r3, #5
 8004374:	d10c      	bne.n	8004390 <HAL_RCC_OscConfig+0x30c>
 8004376:	4b5f      	ldr	r3, [pc, #380]	@ (80044f4 <HAL_RCC_OscConfig+0x470>)
 8004378:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800437a:	4a5e      	ldr	r2, [pc, #376]	@ (80044f4 <HAL_RCC_OscConfig+0x470>)
 800437c:	f043 0304 	orr.w	r3, r3, #4
 8004380:	6713      	str	r3, [r2, #112]	@ 0x70
 8004382:	4b5c      	ldr	r3, [pc, #368]	@ (80044f4 <HAL_RCC_OscConfig+0x470>)
 8004384:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004386:	4a5b      	ldr	r2, [pc, #364]	@ (80044f4 <HAL_RCC_OscConfig+0x470>)
 8004388:	f043 0301 	orr.w	r3, r3, #1
 800438c:	6713      	str	r3, [r2, #112]	@ 0x70
 800438e:	e00b      	b.n	80043a8 <HAL_RCC_OscConfig+0x324>
 8004390:	4b58      	ldr	r3, [pc, #352]	@ (80044f4 <HAL_RCC_OscConfig+0x470>)
 8004392:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004394:	4a57      	ldr	r2, [pc, #348]	@ (80044f4 <HAL_RCC_OscConfig+0x470>)
 8004396:	f023 0301 	bic.w	r3, r3, #1
 800439a:	6713      	str	r3, [r2, #112]	@ 0x70
 800439c:	4b55      	ldr	r3, [pc, #340]	@ (80044f4 <HAL_RCC_OscConfig+0x470>)
 800439e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043a0:	4a54      	ldr	r2, [pc, #336]	@ (80044f4 <HAL_RCC_OscConfig+0x470>)
 80043a2:	f023 0304 	bic.w	r3, r3, #4
 80043a6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d015      	beq.n	80043dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043b0:	f7fd ff58 	bl	8002264 <HAL_GetTick>
 80043b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043b6:	e00a      	b.n	80043ce <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043b8:	f7fd ff54 	bl	8002264 <HAL_GetTick>
 80043bc:	4602      	mov	r2, r0
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d901      	bls.n	80043ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	e0cb      	b.n	8004566 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043ce:	4b49      	ldr	r3, [pc, #292]	@ (80044f4 <HAL_RCC_OscConfig+0x470>)
 80043d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043d2:	f003 0302 	and.w	r3, r3, #2
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d0ee      	beq.n	80043b8 <HAL_RCC_OscConfig+0x334>
 80043da:	e014      	b.n	8004406 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043dc:	f7fd ff42 	bl	8002264 <HAL_GetTick>
 80043e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043e2:	e00a      	b.n	80043fa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043e4:	f7fd ff3e 	bl	8002264 <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d901      	bls.n	80043fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e0b5      	b.n	8004566 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043fa:	4b3e      	ldr	r3, [pc, #248]	@ (80044f4 <HAL_RCC_OscConfig+0x470>)
 80043fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043fe:	f003 0302 	and.w	r3, r3, #2
 8004402:	2b00      	cmp	r3, #0
 8004404:	d1ee      	bne.n	80043e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004406:	7dfb      	ldrb	r3, [r7, #23]
 8004408:	2b01      	cmp	r3, #1
 800440a:	d105      	bne.n	8004418 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800440c:	4b39      	ldr	r3, [pc, #228]	@ (80044f4 <HAL_RCC_OscConfig+0x470>)
 800440e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004410:	4a38      	ldr	r2, [pc, #224]	@ (80044f4 <HAL_RCC_OscConfig+0x470>)
 8004412:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004416:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	699b      	ldr	r3, [r3, #24]
 800441c:	2b00      	cmp	r3, #0
 800441e:	f000 80a1 	beq.w	8004564 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004422:	4b34      	ldr	r3, [pc, #208]	@ (80044f4 <HAL_RCC_OscConfig+0x470>)
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	f003 030c 	and.w	r3, r3, #12
 800442a:	2b08      	cmp	r3, #8
 800442c:	d05c      	beq.n	80044e8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	2b02      	cmp	r3, #2
 8004434:	d141      	bne.n	80044ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004436:	4b31      	ldr	r3, [pc, #196]	@ (80044fc <HAL_RCC_OscConfig+0x478>)
 8004438:	2200      	movs	r2, #0
 800443a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800443c:	f7fd ff12 	bl	8002264 <HAL_GetTick>
 8004440:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004442:	e008      	b.n	8004456 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004444:	f7fd ff0e 	bl	8002264 <HAL_GetTick>
 8004448:	4602      	mov	r2, r0
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	2b02      	cmp	r3, #2
 8004450:	d901      	bls.n	8004456 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e087      	b.n	8004566 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004456:	4b27      	ldr	r3, [pc, #156]	@ (80044f4 <HAL_RCC_OscConfig+0x470>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d1f0      	bne.n	8004444 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	69da      	ldr	r2, [r3, #28]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a1b      	ldr	r3, [r3, #32]
 800446a:	431a      	orrs	r2, r3
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004470:	019b      	lsls	r3, r3, #6
 8004472:	431a      	orrs	r2, r3
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004478:	085b      	lsrs	r3, r3, #1
 800447a:	3b01      	subs	r3, #1
 800447c:	041b      	lsls	r3, r3, #16
 800447e:	431a      	orrs	r2, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004484:	061b      	lsls	r3, r3, #24
 8004486:	491b      	ldr	r1, [pc, #108]	@ (80044f4 <HAL_RCC_OscConfig+0x470>)
 8004488:	4313      	orrs	r3, r2
 800448a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800448c:	4b1b      	ldr	r3, [pc, #108]	@ (80044fc <HAL_RCC_OscConfig+0x478>)
 800448e:	2201      	movs	r2, #1
 8004490:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004492:	f7fd fee7 	bl	8002264 <HAL_GetTick>
 8004496:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004498:	e008      	b.n	80044ac <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800449a:	f7fd fee3 	bl	8002264 <HAL_GetTick>
 800449e:	4602      	mov	r2, r0
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	1ad3      	subs	r3, r2, r3
 80044a4:	2b02      	cmp	r3, #2
 80044a6:	d901      	bls.n	80044ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80044a8:	2303      	movs	r3, #3
 80044aa:	e05c      	b.n	8004566 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044ac:	4b11      	ldr	r3, [pc, #68]	@ (80044f4 <HAL_RCC_OscConfig+0x470>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d0f0      	beq.n	800449a <HAL_RCC_OscConfig+0x416>
 80044b8:	e054      	b.n	8004564 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044ba:	4b10      	ldr	r3, [pc, #64]	@ (80044fc <HAL_RCC_OscConfig+0x478>)
 80044bc:	2200      	movs	r2, #0
 80044be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044c0:	f7fd fed0 	bl	8002264 <HAL_GetTick>
 80044c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044c6:	e008      	b.n	80044da <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044c8:	f7fd fecc 	bl	8002264 <HAL_GetTick>
 80044cc:	4602      	mov	r2, r0
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	2b02      	cmp	r3, #2
 80044d4:	d901      	bls.n	80044da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e045      	b.n	8004566 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044da:	4b06      	ldr	r3, [pc, #24]	@ (80044f4 <HAL_RCC_OscConfig+0x470>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d1f0      	bne.n	80044c8 <HAL_RCC_OscConfig+0x444>
 80044e6:	e03d      	b.n	8004564 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	699b      	ldr	r3, [r3, #24]
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d107      	bne.n	8004500 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e038      	b.n	8004566 <HAL_RCC_OscConfig+0x4e2>
 80044f4:	40023800 	.word	0x40023800
 80044f8:	40007000 	.word	0x40007000
 80044fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004500:	4b1b      	ldr	r3, [pc, #108]	@ (8004570 <HAL_RCC_OscConfig+0x4ec>)
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	699b      	ldr	r3, [r3, #24]
 800450a:	2b01      	cmp	r3, #1
 800450c:	d028      	beq.n	8004560 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004518:	429a      	cmp	r2, r3
 800451a:	d121      	bne.n	8004560 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004526:	429a      	cmp	r2, r3
 8004528:	d11a      	bne.n	8004560 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800452a:	68fa      	ldr	r2, [r7, #12]
 800452c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004530:	4013      	ands	r3, r2
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004536:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004538:	4293      	cmp	r3, r2
 800453a:	d111      	bne.n	8004560 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004546:	085b      	lsrs	r3, r3, #1
 8004548:	3b01      	subs	r3, #1
 800454a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800454c:	429a      	cmp	r2, r3
 800454e:	d107      	bne.n	8004560 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800455a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800455c:	429a      	cmp	r2, r3
 800455e:	d001      	beq.n	8004564 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e000      	b.n	8004566 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004564:	2300      	movs	r3, #0
}
 8004566:	4618      	mov	r0, r3
 8004568:	3718      	adds	r7, #24
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
 800456e:	bf00      	nop
 8004570:	40023800 	.word	0x40023800

08004574 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d101      	bne.n	8004588 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	e0cc      	b.n	8004722 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004588:	4b68      	ldr	r3, [pc, #416]	@ (800472c <HAL_RCC_ClockConfig+0x1b8>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 030f 	and.w	r3, r3, #15
 8004590:	683a      	ldr	r2, [r7, #0]
 8004592:	429a      	cmp	r2, r3
 8004594:	d90c      	bls.n	80045b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004596:	4b65      	ldr	r3, [pc, #404]	@ (800472c <HAL_RCC_ClockConfig+0x1b8>)
 8004598:	683a      	ldr	r2, [r7, #0]
 800459a:	b2d2      	uxtb	r2, r2
 800459c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800459e:	4b63      	ldr	r3, [pc, #396]	@ (800472c <HAL_RCC_ClockConfig+0x1b8>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 030f 	and.w	r3, r3, #15
 80045a6:	683a      	ldr	r2, [r7, #0]
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d001      	beq.n	80045b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e0b8      	b.n	8004722 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 0302 	and.w	r3, r3, #2
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d020      	beq.n	80045fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0304 	and.w	r3, r3, #4
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d005      	beq.n	80045d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045c8:	4b59      	ldr	r3, [pc, #356]	@ (8004730 <HAL_RCC_ClockConfig+0x1bc>)
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	4a58      	ldr	r2, [pc, #352]	@ (8004730 <HAL_RCC_ClockConfig+0x1bc>)
 80045ce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80045d2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0308 	and.w	r3, r3, #8
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d005      	beq.n	80045ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045e0:	4b53      	ldr	r3, [pc, #332]	@ (8004730 <HAL_RCC_ClockConfig+0x1bc>)
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	4a52      	ldr	r2, [pc, #328]	@ (8004730 <HAL_RCC_ClockConfig+0x1bc>)
 80045e6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80045ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045ec:	4b50      	ldr	r3, [pc, #320]	@ (8004730 <HAL_RCC_ClockConfig+0x1bc>)
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	494d      	ldr	r1, [pc, #308]	@ (8004730 <HAL_RCC_ClockConfig+0x1bc>)
 80045fa:	4313      	orrs	r3, r2
 80045fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 0301 	and.w	r3, r3, #1
 8004606:	2b00      	cmp	r3, #0
 8004608:	d044      	beq.n	8004694 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	2b01      	cmp	r3, #1
 8004610:	d107      	bne.n	8004622 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004612:	4b47      	ldr	r3, [pc, #284]	@ (8004730 <HAL_RCC_ClockConfig+0x1bc>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d119      	bne.n	8004652 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e07f      	b.n	8004722 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	2b02      	cmp	r3, #2
 8004628:	d003      	beq.n	8004632 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800462e:	2b03      	cmp	r3, #3
 8004630:	d107      	bne.n	8004642 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004632:	4b3f      	ldr	r3, [pc, #252]	@ (8004730 <HAL_RCC_ClockConfig+0x1bc>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d109      	bne.n	8004652 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e06f      	b.n	8004722 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004642:	4b3b      	ldr	r3, [pc, #236]	@ (8004730 <HAL_RCC_ClockConfig+0x1bc>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 0302 	and.w	r3, r3, #2
 800464a:	2b00      	cmp	r3, #0
 800464c:	d101      	bne.n	8004652 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e067      	b.n	8004722 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004652:	4b37      	ldr	r3, [pc, #220]	@ (8004730 <HAL_RCC_ClockConfig+0x1bc>)
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	f023 0203 	bic.w	r2, r3, #3
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	4934      	ldr	r1, [pc, #208]	@ (8004730 <HAL_RCC_ClockConfig+0x1bc>)
 8004660:	4313      	orrs	r3, r2
 8004662:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004664:	f7fd fdfe 	bl	8002264 <HAL_GetTick>
 8004668:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800466a:	e00a      	b.n	8004682 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800466c:	f7fd fdfa 	bl	8002264 <HAL_GetTick>
 8004670:	4602      	mov	r2, r0
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	f241 3288 	movw	r2, #5000	@ 0x1388
 800467a:	4293      	cmp	r3, r2
 800467c:	d901      	bls.n	8004682 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	e04f      	b.n	8004722 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004682:	4b2b      	ldr	r3, [pc, #172]	@ (8004730 <HAL_RCC_ClockConfig+0x1bc>)
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	f003 020c 	and.w	r2, r3, #12
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	429a      	cmp	r2, r3
 8004692:	d1eb      	bne.n	800466c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004694:	4b25      	ldr	r3, [pc, #148]	@ (800472c <HAL_RCC_ClockConfig+0x1b8>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 030f 	and.w	r3, r3, #15
 800469c:	683a      	ldr	r2, [r7, #0]
 800469e:	429a      	cmp	r2, r3
 80046a0:	d20c      	bcs.n	80046bc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046a2:	4b22      	ldr	r3, [pc, #136]	@ (800472c <HAL_RCC_ClockConfig+0x1b8>)
 80046a4:	683a      	ldr	r2, [r7, #0]
 80046a6:	b2d2      	uxtb	r2, r2
 80046a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046aa:	4b20      	ldr	r3, [pc, #128]	@ (800472c <HAL_RCC_ClockConfig+0x1b8>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 030f 	and.w	r3, r3, #15
 80046b2:	683a      	ldr	r2, [r7, #0]
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d001      	beq.n	80046bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	e032      	b.n	8004722 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 0304 	and.w	r3, r3, #4
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d008      	beq.n	80046da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046c8:	4b19      	ldr	r3, [pc, #100]	@ (8004730 <HAL_RCC_ClockConfig+0x1bc>)
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	4916      	ldr	r1, [pc, #88]	@ (8004730 <HAL_RCC_ClockConfig+0x1bc>)
 80046d6:	4313      	orrs	r3, r2
 80046d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 0308 	and.w	r3, r3, #8
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d009      	beq.n	80046fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046e6:	4b12      	ldr	r3, [pc, #72]	@ (8004730 <HAL_RCC_ClockConfig+0x1bc>)
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	691b      	ldr	r3, [r3, #16]
 80046f2:	00db      	lsls	r3, r3, #3
 80046f4:	490e      	ldr	r1, [pc, #56]	@ (8004730 <HAL_RCC_ClockConfig+0x1bc>)
 80046f6:	4313      	orrs	r3, r2
 80046f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80046fa:	f000 f821 	bl	8004740 <HAL_RCC_GetSysClockFreq>
 80046fe:	4602      	mov	r2, r0
 8004700:	4b0b      	ldr	r3, [pc, #44]	@ (8004730 <HAL_RCC_ClockConfig+0x1bc>)
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	091b      	lsrs	r3, r3, #4
 8004706:	f003 030f 	and.w	r3, r3, #15
 800470a:	490a      	ldr	r1, [pc, #40]	@ (8004734 <HAL_RCC_ClockConfig+0x1c0>)
 800470c:	5ccb      	ldrb	r3, [r1, r3]
 800470e:	fa22 f303 	lsr.w	r3, r2, r3
 8004712:	4a09      	ldr	r2, [pc, #36]	@ (8004738 <HAL_RCC_ClockConfig+0x1c4>)
 8004714:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004716:	4b09      	ldr	r3, [pc, #36]	@ (800473c <HAL_RCC_ClockConfig+0x1c8>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4618      	mov	r0, r3
 800471c:	f7fd fd5e 	bl	80021dc <HAL_InitTick>

  return HAL_OK;
 8004720:	2300      	movs	r3, #0
}
 8004722:	4618      	mov	r0, r3
 8004724:	3710      	adds	r7, #16
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
 800472a:	bf00      	nop
 800472c:	40023c00 	.word	0x40023c00
 8004730:	40023800 	.word	0x40023800
 8004734:	08006e0c 	.word	0x08006e0c
 8004738:	20000020 	.word	0x20000020
 800473c:	20000024 	.word	0x20000024

08004740 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004740:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004744:	b094      	sub	sp, #80	@ 0x50
 8004746:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004748:	2300      	movs	r3, #0
 800474a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800474c:	2300      	movs	r3, #0
 800474e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004750:	2300      	movs	r3, #0
 8004752:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004754:	2300      	movs	r3, #0
 8004756:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004758:	4b79      	ldr	r3, [pc, #484]	@ (8004940 <HAL_RCC_GetSysClockFreq+0x200>)
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	f003 030c 	and.w	r3, r3, #12
 8004760:	2b08      	cmp	r3, #8
 8004762:	d00d      	beq.n	8004780 <HAL_RCC_GetSysClockFreq+0x40>
 8004764:	2b08      	cmp	r3, #8
 8004766:	f200 80e1 	bhi.w	800492c <HAL_RCC_GetSysClockFreq+0x1ec>
 800476a:	2b00      	cmp	r3, #0
 800476c:	d002      	beq.n	8004774 <HAL_RCC_GetSysClockFreq+0x34>
 800476e:	2b04      	cmp	r3, #4
 8004770:	d003      	beq.n	800477a <HAL_RCC_GetSysClockFreq+0x3a>
 8004772:	e0db      	b.n	800492c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004774:	4b73      	ldr	r3, [pc, #460]	@ (8004944 <HAL_RCC_GetSysClockFreq+0x204>)
 8004776:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004778:	e0db      	b.n	8004932 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800477a:	4b73      	ldr	r3, [pc, #460]	@ (8004948 <HAL_RCC_GetSysClockFreq+0x208>)
 800477c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800477e:	e0d8      	b.n	8004932 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004780:	4b6f      	ldr	r3, [pc, #444]	@ (8004940 <HAL_RCC_GetSysClockFreq+0x200>)
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004788:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800478a:	4b6d      	ldr	r3, [pc, #436]	@ (8004940 <HAL_RCC_GetSysClockFreq+0x200>)
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d063      	beq.n	800485e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004796:	4b6a      	ldr	r3, [pc, #424]	@ (8004940 <HAL_RCC_GetSysClockFreq+0x200>)
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	099b      	lsrs	r3, r3, #6
 800479c:	2200      	movs	r2, #0
 800479e:	63bb      	str	r3, [r7, #56]	@ 0x38
 80047a0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80047a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80047aa:	2300      	movs	r3, #0
 80047ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80047ae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80047b2:	4622      	mov	r2, r4
 80047b4:	462b      	mov	r3, r5
 80047b6:	f04f 0000 	mov.w	r0, #0
 80047ba:	f04f 0100 	mov.w	r1, #0
 80047be:	0159      	lsls	r1, r3, #5
 80047c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047c4:	0150      	lsls	r0, r2, #5
 80047c6:	4602      	mov	r2, r0
 80047c8:	460b      	mov	r3, r1
 80047ca:	4621      	mov	r1, r4
 80047cc:	1a51      	subs	r1, r2, r1
 80047ce:	6139      	str	r1, [r7, #16]
 80047d0:	4629      	mov	r1, r5
 80047d2:	eb63 0301 	sbc.w	r3, r3, r1
 80047d6:	617b      	str	r3, [r7, #20]
 80047d8:	f04f 0200 	mov.w	r2, #0
 80047dc:	f04f 0300 	mov.w	r3, #0
 80047e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80047e4:	4659      	mov	r1, fp
 80047e6:	018b      	lsls	r3, r1, #6
 80047e8:	4651      	mov	r1, sl
 80047ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80047ee:	4651      	mov	r1, sl
 80047f0:	018a      	lsls	r2, r1, #6
 80047f2:	4651      	mov	r1, sl
 80047f4:	ebb2 0801 	subs.w	r8, r2, r1
 80047f8:	4659      	mov	r1, fp
 80047fa:	eb63 0901 	sbc.w	r9, r3, r1
 80047fe:	f04f 0200 	mov.w	r2, #0
 8004802:	f04f 0300 	mov.w	r3, #0
 8004806:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800480a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800480e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004812:	4690      	mov	r8, r2
 8004814:	4699      	mov	r9, r3
 8004816:	4623      	mov	r3, r4
 8004818:	eb18 0303 	adds.w	r3, r8, r3
 800481c:	60bb      	str	r3, [r7, #8]
 800481e:	462b      	mov	r3, r5
 8004820:	eb49 0303 	adc.w	r3, r9, r3
 8004824:	60fb      	str	r3, [r7, #12]
 8004826:	f04f 0200 	mov.w	r2, #0
 800482a:	f04f 0300 	mov.w	r3, #0
 800482e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004832:	4629      	mov	r1, r5
 8004834:	024b      	lsls	r3, r1, #9
 8004836:	4621      	mov	r1, r4
 8004838:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800483c:	4621      	mov	r1, r4
 800483e:	024a      	lsls	r2, r1, #9
 8004840:	4610      	mov	r0, r2
 8004842:	4619      	mov	r1, r3
 8004844:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004846:	2200      	movs	r2, #0
 8004848:	62bb      	str	r3, [r7, #40]	@ 0x28
 800484a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800484c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004850:	f7fb fccc 	bl	80001ec <__aeabi_uldivmod>
 8004854:	4602      	mov	r2, r0
 8004856:	460b      	mov	r3, r1
 8004858:	4613      	mov	r3, r2
 800485a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800485c:	e058      	b.n	8004910 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800485e:	4b38      	ldr	r3, [pc, #224]	@ (8004940 <HAL_RCC_GetSysClockFreq+0x200>)
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	099b      	lsrs	r3, r3, #6
 8004864:	2200      	movs	r2, #0
 8004866:	4618      	mov	r0, r3
 8004868:	4611      	mov	r1, r2
 800486a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800486e:	623b      	str	r3, [r7, #32]
 8004870:	2300      	movs	r3, #0
 8004872:	627b      	str	r3, [r7, #36]	@ 0x24
 8004874:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004878:	4642      	mov	r2, r8
 800487a:	464b      	mov	r3, r9
 800487c:	f04f 0000 	mov.w	r0, #0
 8004880:	f04f 0100 	mov.w	r1, #0
 8004884:	0159      	lsls	r1, r3, #5
 8004886:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800488a:	0150      	lsls	r0, r2, #5
 800488c:	4602      	mov	r2, r0
 800488e:	460b      	mov	r3, r1
 8004890:	4641      	mov	r1, r8
 8004892:	ebb2 0a01 	subs.w	sl, r2, r1
 8004896:	4649      	mov	r1, r9
 8004898:	eb63 0b01 	sbc.w	fp, r3, r1
 800489c:	f04f 0200 	mov.w	r2, #0
 80048a0:	f04f 0300 	mov.w	r3, #0
 80048a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80048a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80048ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80048b0:	ebb2 040a 	subs.w	r4, r2, sl
 80048b4:	eb63 050b 	sbc.w	r5, r3, fp
 80048b8:	f04f 0200 	mov.w	r2, #0
 80048bc:	f04f 0300 	mov.w	r3, #0
 80048c0:	00eb      	lsls	r3, r5, #3
 80048c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80048c6:	00e2      	lsls	r2, r4, #3
 80048c8:	4614      	mov	r4, r2
 80048ca:	461d      	mov	r5, r3
 80048cc:	4643      	mov	r3, r8
 80048ce:	18e3      	adds	r3, r4, r3
 80048d0:	603b      	str	r3, [r7, #0]
 80048d2:	464b      	mov	r3, r9
 80048d4:	eb45 0303 	adc.w	r3, r5, r3
 80048d8:	607b      	str	r3, [r7, #4]
 80048da:	f04f 0200 	mov.w	r2, #0
 80048de:	f04f 0300 	mov.w	r3, #0
 80048e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80048e6:	4629      	mov	r1, r5
 80048e8:	028b      	lsls	r3, r1, #10
 80048ea:	4621      	mov	r1, r4
 80048ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80048f0:	4621      	mov	r1, r4
 80048f2:	028a      	lsls	r2, r1, #10
 80048f4:	4610      	mov	r0, r2
 80048f6:	4619      	mov	r1, r3
 80048f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80048fa:	2200      	movs	r2, #0
 80048fc:	61bb      	str	r3, [r7, #24]
 80048fe:	61fa      	str	r2, [r7, #28]
 8004900:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004904:	f7fb fc72 	bl	80001ec <__aeabi_uldivmod>
 8004908:	4602      	mov	r2, r0
 800490a:	460b      	mov	r3, r1
 800490c:	4613      	mov	r3, r2
 800490e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004910:	4b0b      	ldr	r3, [pc, #44]	@ (8004940 <HAL_RCC_GetSysClockFreq+0x200>)
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	0c1b      	lsrs	r3, r3, #16
 8004916:	f003 0303 	and.w	r3, r3, #3
 800491a:	3301      	adds	r3, #1
 800491c:	005b      	lsls	r3, r3, #1
 800491e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004920:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004922:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004924:	fbb2 f3f3 	udiv	r3, r2, r3
 8004928:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800492a:	e002      	b.n	8004932 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800492c:	4b05      	ldr	r3, [pc, #20]	@ (8004944 <HAL_RCC_GetSysClockFreq+0x204>)
 800492e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004930:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004932:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004934:	4618      	mov	r0, r3
 8004936:	3750      	adds	r7, #80	@ 0x50
 8004938:	46bd      	mov	sp, r7
 800493a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800493e:	bf00      	nop
 8004940:	40023800 	.word	0x40023800
 8004944:	00f42400 	.word	0x00f42400
 8004948:	007a1200 	.word	0x007a1200

0800494c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800494c:	b480      	push	{r7}
 800494e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004950:	4b03      	ldr	r3, [pc, #12]	@ (8004960 <HAL_RCC_GetHCLKFreq+0x14>)
 8004952:	681b      	ldr	r3, [r3, #0]
}
 8004954:	4618      	mov	r0, r3
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr
 800495e:	bf00      	nop
 8004960:	20000020 	.word	0x20000020

08004964 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004968:	f7ff fff0 	bl	800494c <HAL_RCC_GetHCLKFreq>
 800496c:	4602      	mov	r2, r0
 800496e:	4b05      	ldr	r3, [pc, #20]	@ (8004984 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	0a9b      	lsrs	r3, r3, #10
 8004974:	f003 0307 	and.w	r3, r3, #7
 8004978:	4903      	ldr	r1, [pc, #12]	@ (8004988 <HAL_RCC_GetPCLK1Freq+0x24>)
 800497a:	5ccb      	ldrb	r3, [r1, r3]
 800497c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004980:	4618      	mov	r0, r3
 8004982:	bd80      	pop	{r7, pc}
 8004984:	40023800 	.word	0x40023800
 8004988:	08006e1c 	.word	0x08006e1c

0800498c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b086      	sub	sp, #24
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004994:	2300      	movs	r3, #0
 8004996:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004998:	2300      	movs	r3, #0
 800499a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 0301 	and.w	r3, r3, #1
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d10b      	bne.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d105      	bne.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d075      	beq.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80049c0:	4b91      	ldr	r3, [pc, #580]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80049c2:	2200      	movs	r2, #0
 80049c4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80049c6:	f7fd fc4d 	bl	8002264 <HAL_GetTick>
 80049ca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80049cc:	e008      	b.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80049ce:	f7fd fc49 	bl	8002264 <HAL_GetTick>
 80049d2:	4602      	mov	r2, r0
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	1ad3      	subs	r3, r2, r3
 80049d8:	2b02      	cmp	r3, #2
 80049da:	d901      	bls.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049dc:	2303      	movs	r3, #3
 80049de:	e189      	b.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80049e0:	4b8a      	ldr	r3, [pc, #552]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d1f0      	bne.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 0301 	and.w	r3, r3, #1
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d009      	beq.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	019a      	lsls	r2, r3, #6
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	071b      	lsls	r3, r3, #28
 8004a04:	4981      	ldr	r1, [pc, #516]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a06:	4313      	orrs	r3, r2
 8004a08:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 0302 	and.w	r3, r3, #2
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d01f      	beq.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004a18:	4b7c      	ldr	r3, [pc, #496]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a1e:	0f1b      	lsrs	r3, r3, #28
 8004a20:	f003 0307 	and.w	r3, r3, #7
 8004a24:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	019a      	lsls	r2, r3, #6
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	061b      	lsls	r3, r3, #24
 8004a32:	431a      	orrs	r2, r3
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	071b      	lsls	r3, r3, #28
 8004a38:	4974      	ldr	r1, [pc, #464]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004a40:	4b72      	ldr	r3, [pc, #456]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a42:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a46:	f023 021f 	bic.w	r2, r3, #31
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	69db      	ldr	r3, [r3, #28]
 8004a4e:	3b01      	subs	r3, #1
 8004a50:	496e      	ldr	r1, [pc, #440]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a52:	4313      	orrs	r3, r2
 8004a54:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d00d      	beq.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	019a      	lsls	r2, r3, #6
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	061b      	lsls	r3, r3, #24
 8004a70:	431a      	orrs	r2, r3
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	071b      	lsls	r3, r3, #28
 8004a78:	4964      	ldr	r1, [pc, #400]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004a80:	4b61      	ldr	r3, [pc, #388]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004a82:	2201      	movs	r2, #1
 8004a84:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004a86:	f7fd fbed 	bl	8002264 <HAL_GetTick>
 8004a8a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a8c:	e008      	b.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004a8e:	f7fd fbe9 	bl	8002264 <HAL_GetTick>
 8004a92:	4602      	mov	r2, r0
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	1ad3      	subs	r3, r2, r3
 8004a98:	2b02      	cmp	r3, #2
 8004a9a:	d901      	bls.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a9c:	2303      	movs	r3, #3
 8004a9e:	e129      	b.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004aa0:	4b5a      	ldr	r3, [pc, #360]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d0f0      	beq.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 0304 	and.w	r3, r3, #4
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d105      	bne.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d079      	beq.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004ac4:	4b52      	ldr	r3, [pc, #328]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004aca:	f7fd fbcb 	bl	8002264 <HAL_GetTick>
 8004ace:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004ad0:	e008      	b.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004ad2:	f7fd fbc7 	bl	8002264 <HAL_GetTick>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	1ad3      	subs	r3, r2, r3
 8004adc:	2b02      	cmp	r3, #2
 8004ade:	d901      	bls.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ae0:	2303      	movs	r3, #3
 8004ae2:	e107      	b.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004ae4:	4b49      	ldr	r3, [pc, #292]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004aec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004af0:	d0ef      	beq.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 0304 	and.w	r3, r3, #4
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d020      	beq.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004afe:	4b43      	ldr	r3, [pc, #268]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b04:	0f1b      	lsrs	r3, r3, #28
 8004b06:	f003 0307 	and.w	r3, r3, #7
 8004b0a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	691b      	ldr	r3, [r3, #16]
 8004b10:	019a      	lsls	r2, r3, #6
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	695b      	ldr	r3, [r3, #20]
 8004b16:	061b      	lsls	r3, r3, #24
 8004b18:	431a      	orrs	r2, r3
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	071b      	lsls	r3, r3, #28
 8004b1e:	493b      	ldr	r1, [pc, #236]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b20:	4313      	orrs	r3, r2
 8004b22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004b26:	4b39      	ldr	r3, [pc, #228]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b2c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6a1b      	ldr	r3, [r3, #32]
 8004b34:	3b01      	subs	r3, #1
 8004b36:	021b      	lsls	r3, r3, #8
 8004b38:	4934      	ldr	r1, [pc, #208]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0308 	and.w	r3, r3, #8
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d01e      	beq.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004b4c:	4b2f      	ldr	r3, [pc, #188]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b52:	0e1b      	lsrs	r3, r3, #24
 8004b54:	f003 030f 	and.w	r3, r3, #15
 8004b58:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	019a      	lsls	r2, r3, #6
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	061b      	lsls	r3, r3, #24
 8004b64:	431a      	orrs	r2, r3
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	699b      	ldr	r3, [r3, #24]
 8004b6a:	071b      	lsls	r3, r3, #28
 8004b6c:	4927      	ldr	r1, [pc, #156]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004b74:	4b25      	ldr	r3, [pc, #148]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b76:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b7a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b82:	4922      	ldr	r1, [pc, #136]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b84:	4313      	orrs	r3, r2
 8004b86:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004b8a:	4b21      	ldr	r3, [pc, #132]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004b90:	f7fd fb68 	bl	8002264 <HAL_GetTick>
 8004b94:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004b96:	e008      	b.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004b98:	f7fd fb64 	bl	8002264 <HAL_GetTick>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	1ad3      	subs	r3, r2, r3
 8004ba2:	2b02      	cmp	r3, #2
 8004ba4:	d901      	bls.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	e0a4      	b.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004baa:	4b18      	ldr	r3, [pc, #96]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004bb2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004bb6:	d1ef      	bne.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 0320 	and.w	r3, r3, #32
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	f000 808b 	beq.w	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	60fb      	str	r3, [r7, #12]
 8004bca:	4b10      	ldr	r3, [pc, #64]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bce:	4a0f      	ldr	r2, [pc, #60]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004bd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004bd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8004bd6:	4b0d      	ldr	r3, [pc, #52]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bde:	60fb      	str	r3, [r7, #12]
 8004be0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004be2:	4b0c      	ldr	r3, [pc, #48]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a0b      	ldr	r2, [pc, #44]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004be8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bec:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004bee:	f7fd fb39 	bl	8002264 <HAL_GetTick>
 8004bf2:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004bf4:	e010      	b.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bf6:	f7fd fb35 	bl	8002264 <HAL_GetTick>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	2b02      	cmp	r3, #2
 8004c02:	d909      	bls.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8004c04:	2303      	movs	r3, #3
 8004c06:	e075      	b.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8004c08:	42470068 	.word	0x42470068
 8004c0c:	40023800 	.word	0x40023800
 8004c10:	42470070 	.word	0x42470070
 8004c14:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004c18:	4b38      	ldr	r3, [pc, #224]	@ (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d0e8      	beq.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c24:	4b36      	ldr	r3, [pc, #216]	@ (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004c26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c28:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c2c:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d02f      	beq.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c38:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c3c:	693a      	ldr	r2, [r7, #16]
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d028      	beq.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c42:	4b2f      	ldr	r3, [pc, #188]	@ (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004c44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c4a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c4c:	4b2d      	ldr	r3, [pc, #180]	@ (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004c4e:	2201      	movs	r2, #1
 8004c50:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c52:	4b2c      	ldr	r3, [pc, #176]	@ (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004c54:	2200      	movs	r2, #0
 8004c56:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004c58:	4a29      	ldr	r2, [pc, #164]	@ (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004c5e:	4b28      	ldr	r3, [pc, #160]	@ (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004c60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c62:	f003 0301 	and.w	r3, r3, #1
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d114      	bne.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004c6a:	f7fd fafb 	bl	8002264 <HAL_GetTick>
 8004c6e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c70:	e00a      	b.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c72:	f7fd faf7 	bl	8002264 <HAL_GetTick>
 8004c76:	4602      	mov	r2, r0
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	1ad3      	subs	r3, r2, r3
 8004c7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d901      	bls.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8004c84:	2303      	movs	r3, #3
 8004c86:	e035      	b.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c88:	4b1d      	ldr	r3, [pc, #116]	@ (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004c8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c8c:	f003 0302 	and.w	r3, r3, #2
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d0ee      	beq.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c98:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c9c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ca0:	d10d      	bne.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x332>
 8004ca2:	4b17      	ldr	r3, [pc, #92]	@ (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cae:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004cb2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cb6:	4912      	ldr	r1, [pc, #72]	@ (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	608b      	str	r3, [r1, #8]
 8004cbc:	e005      	b.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8004cbe:	4b10      	ldr	r3, [pc, #64]	@ (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	4a0f      	ldr	r2, [pc, #60]	@ (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004cc4:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004cc8:	6093      	str	r3, [r2, #8]
 8004cca:	4b0d      	ldr	r3, [pc, #52]	@ (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004ccc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cd6:	490a      	ldr	r1, [pc, #40]	@ (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 0310 	and.w	r3, r3, #16
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d004      	beq.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8004cee:	4b06      	ldr	r3, [pc, #24]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004cf0:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8004cf2:	2300      	movs	r3, #0
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3718      	adds	r7, #24
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}
 8004cfc:	40007000 	.word	0x40007000
 8004d00:	40023800 	.word	0x40023800
 8004d04:	42470e40 	.word	0x42470e40
 8004d08:	424711e0 	.word	0x424711e0

08004d0c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b082      	sub	sp, #8
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d101      	bne.n	8004d1e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e07b      	b.n	8004e16 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d108      	bne.n	8004d38 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d2e:	d009      	beq.n	8004d44 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	61da      	str	r2, [r3, #28]
 8004d36:	e005      	b.n	8004d44 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2200      	movs	r2, #0
 8004d42:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2200      	movs	r2, #0
 8004d48:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d106      	bne.n	8004d64 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f7fc fdf6 	bl	8001950 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2202      	movs	r2, #2
 8004d68:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d7a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004d8c:	431a      	orrs	r2, r3
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	68db      	ldr	r3, [r3, #12]
 8004d92:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d96:	431a      	orrs	r2, r3
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	691b      	ldr	r3, [r3, #16]
 8004d9c:	f003 0302 	and.w	r3, r3, #2
 8004da0:	431a      	orrs	r2, r3
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	695b      	ldr	r3, [r3, #20]
 8004da6:	f003 0301 	and.w	r3, r3, #1
 8004daa:	431a      	orrs	r2, r3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	699b      	ldr	r3, [r3, #24]
 8004db0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004db4:	431a      	orrs	r2, r3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	69db      	ldr	r3, [r3, #28]
 8004dba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004dbe:	431a      	orrs	r2, r3
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6a1b      	ldr	r3, [r3, #32]
 8004dc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dc8:	ea42 0103 	orr.w	r1, r2, r3
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dd0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	430a      	orrs	r2, r1
 8004dda:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	699b      	ldr	r3, [r3, #24]
 8004de0:	0c1b      	lsrs	r3, r3, #16
 8004de2:	f003 0104 	and.w	r1, r3, #4
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dea:	f003 0210 	and.w	r2, r3, #16
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	430a      	orrs	r2, r1
 8004df4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	69da      	ldr	r2, [r3, #28]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004e04:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004e14:	2300      	movs	r3, #0
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3708      	adds	r7, #8
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}

08004e1e <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8004e1e:	b580      	push	{r7, lr}
 8004e20:	b082      	sub	sp, #8
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d101      	bne.n	8004e30 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e01a      	b.n	8004e66 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2202      	movs	r2, #2
 8004e34:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e46:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	f7fc fdc9 	bl	80019e0 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2200      	movs	r2, #0
 8004e52:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8004e64:	2300      	movs	r3, #0
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3708      	adds	r7, #8
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}

08004e6e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e6e:	b580      	push	{r7, lr}
 8004e70:	b088      	sub	sp, #32
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	60f8      	str	r0, [r7, #12]
 8004e76:	60b9      	str	r1, [r7, #8]
 8004e78:	603b      	str	r3, [r7, #0]
 8004e7a:	4613      	mov	r3, r2
 8004e7c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e7e:	f7fd f9f1 	bl	8002264 <HAL_GetTick>
 8004e82:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004e84:	88fb      	ldrh	r3, [r7, #6]
 8004e86:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d001      	beq.n	8004e98 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004e94:	2302      	movs	r3, #2
 8004e96:	e12a      	b.n	80050ee <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d002      	beq.n	8004ea4 <HAL_SPI_Transmit+0x36>
 8004e9e:	88fb      	ldrh	r3, [r7, #6]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d101      	bne.n	8004ea8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e122      	b.n	80050ee <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d101      	bne.n	8004eb6 <HAL_SPI_Transmit+0x48>
 8004eb2:	2302      	movs	r3, #2
 8004eb4:	e11b      	b.n	80050ee <HAL_SPI_Transmit+0x280>
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2201      	movs	r2, #1
 8004eba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2203      	movs	r2, #3
 8004ec2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	68ba      	ldr	r2, [r7, #8]
 8004ed0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	88fa      	ldrh	r2, [r7, #6]
 8004ed6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	88fa      	ldrh	r2, [r7, #6]
 8004edc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2200      	movs	r2, #0
 8004eee:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f04:	d10f      	bne.n	8004f26 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f14:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004f24:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f30:	2b40      	cmp	r3, #64	@ 0x40
 8004f32:	d007      	beq.n	8004f44 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004f42:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f4c:	d152      	bne.n	8004ff4 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d002      	beq.n	8004f5c <HAL_SPI_Transmit+0xee>
 8004f56:	8b7b      	ldrh	r3, [r7, #26]
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d145      	bne.n	8004fe8 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f60:	881a      	ldrh	r2, [r3, #0]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f6c:	1c9a      	adds	r2, r3, #2
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	3b01      	subs	r3, #1
 8004f7a:	b29a      	uxth	r2, r3
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004f80:	e032      	b.n	8004fe8 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	f003 0302 	and.w	r3, r3, #2
 8004f8c:	2b02      	cmp	r3, #2
 8004f8e:	d112      	bne.n	8004fb6 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f94:	881a      	ldrh	r2, [r3, #0]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fa0:	1c9a      	adds	r2, r3, #2
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	3b01      	subs	r3, #1
 8004fae:	b29a      	uxth	r2, r3
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004fb4:	e018      	b.n	8004fe8 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004fb6:	f7fd f955 	bl	8002264 <HAL_GetTick>
 8004fba:	4602      	mov	r2, r0
 8004fbc:	69fb      	ldr	r3, [r7, #28]
 8004fbe:	1ad3      	subs	r3, r2, r3
 8004fc0:	683a      	ldr	r2, [r7, #0]
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d803      	bhi.n	8004fce <HAL_SPI_Transmit+0x160>
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fcc:	d102      	bne.n	8004fd4 <HAL_SPI_Transmit+0x166>
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d109      	bne.n	8004fe8 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004fe4:	2303      	movs	r3, #3
 8004fe6:	e082      	b.n	80050ee <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d1c7      	bne.n	8004f82 <HAL_SPI_Transmit+0x114>
 8004ff2:	e053      	b.n	800509c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d002      	beq.n	8005002 <HAL_SPI_Transmit+0x194>
 8004ffc:	8b7b      	ldrh	r3, [r7, #26]
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d147      	bne.n	8005092 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	330c      	adds	r3, #12
 800500c:	7812      	ldrb	r2, [r2, #0]
 800500e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005014:	1c5a      	adds	r2, r3, #1
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800501e:	b29b      	uxth	r3, r3
 8005020:	3b01      	subs	r3, #1
 8005022:	b29a      	uxth	r2, r3
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005028:	e033      	b.n	8005092 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	f003 0302 	and.w	r3, r3, #2
 8005034:	2b02      	cmp	r3, #2
 8005036:	d113      	bne.n	8005060 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	330c      	adds	r3, #12
 8005042:	7812      	ldrb	r2, [r2, #0]
 8005044:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800504a:	1c5a      	adds	r2, r3, #1
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005054:	b29b      	uxth	r3, r3
 8005056:	3b01      	subs	r3, #1
 8005058:	b29a      	uxth	r2, r3
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800505e:	e018      	b.n	8005092 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005060:	f7fd f900 	bl	8002264 <HAL_GetTick>
 8005064:	4602      	mov	r2, r0
 8005066:	69fb      	ldr	r3, [r7, #28]
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	683a      	ldr	r2, [r7, #0]
 800506c:	429a      	cmp	r2, r3
 800506e:	d803      	bhi.n	8005078 <HAL_SPI_Transmit+0x20a>
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005076:	d102      	bne.n	800507e <HAL_SPI_Transmit+0x210>
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d109      	bne.n	8005092 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2201      	movs	r2, #1
 8005082:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2200      	movs	r2, #0
 800508a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800508e:	2303      	movs	r3, #3
 8005090:	e02d      	b.n	80050ee <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005096:	b29b      	uxth	r3, r3
 8005098:	2b00      	cmp	r3, #0
 800509a:	d1c6      	bne.n	800502a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800509c:	69fa      	ldr	r2, [r7, #28]
 800509e:	6839      	ldr	r1, [r7, #0]
 80050a0:	68f8      	ldr	r0, [r7, #12]
 80050a2:	f000 f8bf 	bl	8005224 <SPI_EndRxTxTransaction>
 80050a6:	4603      	mov	r3, r0
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d002      	beq.n	80050b2 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2220      	movs	r2, #32
 80050b0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d10a      	bne.n	80050d0 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80050ba:	2300      	movs	r3, #0
 80050bc:	617b      	str	r3, [r7, #20]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	617b      	str	r3, [r7, #20]
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	617b      	str	r3, [r7, #20]
 80050ce:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2200      	movs	r2, #0
 80050dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d001      	beq.n	80050ec <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	e000      	b.n	80050ee <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80050ec:	2300      	movs	r3, #0
  }
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3720      	adds	r7, #32
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}

080050f6 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 80050f6:	b480      	push	{r7}
 80050f8:	b083      	sub	sp, #12
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005104:	b2db      	uxtb	r3, r3
}
 8005106:	4618      	mov	r0, r3
 8005108:	370c      	adds	r7, #12
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr
	...

08005114 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b088      	sub	sp, #32
 8005118:	af00      	add	r7, sp, #0
 800511a:	60f8      	str	r0, [r7, #12]
 800511c:	60b9      	str	r1, [r7, #8]
 800511e:	603b      	str	r3, [r7, #0]
 8005120:	4613      	mov	r3, r2
 8005122:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005124:	f7fd f89e 	bl	8002264 <HAL_GetTick>
 8005128:	4602      	mov	r2, r0
 800512a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800512c:	1a9b      	subs	r3, r3, r2
 800512e:	683a      	ldr	r2, [r7, #0]
 8005130:	4413      	add	r3, r2
 8005132:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005134:	f7fd f896 	bl	8002264 <HAL_GetTick>
 8005138:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800513a:	4b39      	ldr	r3, [pc, #228]	@ (8005220 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	015b      	lsls	r3, r3, #5
 8005140:	0d1b      	lsrs	r3, r3, #20
 8005142:	69fa      	ldr	r2, [r7, #28]
 8005144:	fb02 f303 	mul.w	r3, r2, r3
 8005148:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800514a:	e054      	b.n	80051f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005152:	d050      	beq.n	80051f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005154:	f7fd f886 	bl	8002264 <HAL_GetTick>
 8005158:	4602      	mov	r2, r0
 800515a:	69bb      	ldr	r3, [r7, #24]
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	69fa      	ldr	r2, [r7, #28]
 8005160:	429a      	cmp	r2, r3
 8005162:	d902      	bls.n	800516a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d13d      	bne.n	80051e6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	685a      	ldr	r2, [r3, #4]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005178:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005182:	d111      	bne.n	80051a8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800518c:	d004      	beq.n	8005198 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005196:	d107      	bne.n	80051a8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80051a6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051b0:	d10f      	bne.n	80051d2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80051c0:	601a      	str	r2, [r3, #0]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80051d0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2201      	movs	r2, #1
 80051d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2200      	movs	r2, #0
 80051de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80051e2:	2303      	movs	r3, #3
 80051e4:	e017      	b.n	8005216 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d101      	bne.n	80051f0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80051ec:	2300      	movs	r3, #0
 80051ee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	3b01      	subs	r3, #1
 80051f4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	689a      	ldr	r2, [r3, #8]
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	4013      	ands	r3, r2
 8005200:	68ba      	ldr	r2, [r7, #8]
 8005202:	429a      	cmp	r2, r3
 8005204:	bf0c      	ite	eq
 8005206:	2301      	moveq	r3, #1
 8005208:	2300      	movne	r3, #0
 800520a:	b2db      	uxtb	r3, r3
 800520c:	461a      	mov	r2, r3
 800520e:	79fb      	ldrb	r3, [r7, #7]
 8005210:	429a      	cmp	r2, r3
 8005212:	d19b      	bne.n	800514c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005214:	2300      	movs	r3, #0
}
 8005216:	4618      	mov	r0, r3
 8005218:	3720      	adds	r7, #32
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
 800521e:	bf00      	nop
 8005220:	20000020 	.word	0x20000020

08005224 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b088      	sub	sp, #32
 8005228:	af02      	add	r7, sp, #8
 800522a:	60f8      	str	r0, [r7, #12]
 800522c:	60b9      	str	r1, [r7, #8]
 800522e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	9300      	str	r3, [sp, #0]
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	2201      	movs	r2, #1
 8005238:	2102      	movs	r1, #2
 800523a:	68f8      	ldr	r0, [r7, #12]
 800523c:	f7ff ff6a 	bl	8005114 <SPI_WaitFlagStateUntilTimeout>
 8005240:	4603      	mov	r3, r0
 8005242:	2b00      	cmp	r3, #0
 8005244:	d007      	beq.n	8005256 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800524a:	f043 0220 	orr.w	r2, r3, #32
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005252:	2303      	movs	r3, #3
 8005254:	e032      	b.n	80052bc <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005256:	4b1b      	ldr	r3, [pc, #108]	@ (80052c4 <SPI_EndRxTxTransaction+0xa0>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a1b      	ldr	r2, [pc, #108]	@ (80052c8 <SPI_EndRxTxTransaction+0xa4>)
 800525c:	fba2 2303 	umull	r2, r3, r2, r3
 8005260:	0d5b      	lsrs	r3, r3, #21
 8005262:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005266:	fb02 f303 	mul.w	r3, r2, r3
 800526a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005274:	d112      	bne.n	800529c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	9300      	str	r3, [sp, #0]
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	2200      	movs	r2, #0
 800527e:	2180      	movs	r1, #128	@ 0x80
 8005280:	68f8      	ldr	r0, [r7, #12]
 8005282:	f7ff ff47 	bl	8005114 <SPI_WaitFlagStateUntilTimeout>
 8005286:	4603      	mov	r3, r0
 8005288:	2b00      	cmp	r3, #0
 800528a:	d016      	beq.n	80052ba <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005290:	f043 0220 	orr.w	r2, r3, #32
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005298:	2303      	movs	r3, #3
 800529a:	e00f      	b.n	80052bc <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d00a      	beq.n	80052b8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	3b01      	subs	r3, #1
 80052a6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052b2:	2b80      	cmp	r3, #128	@ 0x80
 80052b4:	d0f2      	beq.n	800529c <SPI_EndRxTxTransaction+0x78>
 80052b6:	e000      	b.n	80052ba <SPI_EndRxTxTransaction+0x96>
        break;
 80052b8:	bf00      	nop
  }

  return HAL_OK;
 80052ba:	2300      	movs	r3, #0
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3718      	adds	r7, #24
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}
 80052c4:	20000020 	.word	0x20000020
 80052c8:	165e9f81 	.word	0x165e9f81

080052cc <memset>:
 80052cc:	4402      	add	r2, r0
 80052ce:	4603      	mov	r3, r0
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d100      	bne.n	80052d6 <memset+0xa>
 80052d4:	4770      	bx	lr
 80052d6:	f803 1b01 	strb.w	r1, [r3], #1
 80052da:	e7f9      	b.n	80052d0 <memset+0x4>

080052dc <__libc_init_array>:
 80052dc:	b570      	push	{r4, r5, r6, lr}
 80052de:	4d0d      	ldr	r5, [pc, #52]	@ (8005314 <__libc_init_array+0x38>)
 80052e0:	4c0d      	ldr	r4, [pc, #52]	@ (8005318 <__libc_init_array+0x3c>)
 80052e2:	1b64      	subs	r4, r4, r5
 80052e4:	10a4      	asrs	r4, r4, #2
 80052e6:	2600      	movs	r6, #0
 80052e8:	42a6      	cmp	r6, r4
 80052ea:	d109      	bne.n	8005300 <__libc_init_array+0x24>
 80052ec:	4d0b      	ldr	r5, [pc, #44]	@ (800531c <__libc_init_array+0x40>)
 80052ee:	4c0c      	ldr	r4, [pc, #48]	@ (8005320 <__libc_init_array+0x44>)
 80052f0:	f000 f818 	bl	8005324 <_init>
 80052f4:	1b64      	subs	r4, r4, r5
 80052f6:	10a4      	asrs	r4, r4, #2
 80052f8:	2600      	movs	r6, #0
 80052fa:	42a6      	cmp	r6, r4
 80052fc:	d105      	bne.n	800530a <__libc_init_array+0x2e>
 80052fe:	bd70      	pop	{r4, r5, r6, pc}
 8005300:	f855 3b04 	ldr.w	r3, [r5], #4
 8005304:	4798      	blx	r3
 8005306:	3601      	adds	r6, #1
 8005308:	e7ee      	b.n	80052e8 <__libc_init_array+0xc>
 800530a:	f855 3b04 	ldr.w	r3, [r5], #4
 800530e:	4798      	blx	r3
 8005310:	3601      	adds	r6, #1
 8005312:	e7f2      	b.n	80052fa <__libc_init_array+0x1e>
 8005314:	08006e2c 	.word	0x08006e2c
 8005318:	08006e2c 	.word	0x08006e2c
 800531c:	08006e2c 	.word	0x08006e2c
 8005320:	08006e30 	.word	0x08006e30

08005324 <_init>:
 8005324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005326:	bf00      	nop
 8005328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800532a:	bc08      	pop	{r3}
 800532c:	469e      	mov	lr, r3
 800532e:	4770      	bx	lr

08005330 <_fini>:
 8005330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005332:	bf00      	nop
 8005334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005336:	bc08      	pop	{r3}
 8005338:	469e      	mov	lr, r3
 800533a:	4770      	bx	lr
