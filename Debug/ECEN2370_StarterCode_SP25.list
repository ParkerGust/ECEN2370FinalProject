
ECEN2370_StarterCode_SP25.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007348  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ae8  080074f4  080074f4  000084f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008fdc  08008fdc  0000a028  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008fdc  08008fdc  00009fdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008fe4  08008fe4  0000a028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008fe4  08008fe4  00009fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008fe8  08008fe8  00009fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000028  20000000  08008fec  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a028  2**0
                  CONTENTS
 10 .bss          00025bfc  20000028  20000028  0000a028  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20025c24  20025c24  0000a028  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a028  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001483d  00000000  00000000  0000a058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034c1  00000000  00000000  0001e895  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001490  00000000  00000000  00021d58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fe0  00000000  00000000  000231e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027431  00000000  00000000  000241c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018d8d  00000000  00000000  0004b5f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e312e  00000000  00000000  00064386  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001474b4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000055dc  00000000  00000000  001474f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  0014cad4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000028 	.word	0x20000028
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080074dc 	.word	0x080074dc

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000002c 	.word	0x2000002c
 80001e8:	080074dc 	.word	0x080074dc

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b988 	b.w	8000514 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	468e      	mov	lr, r1
 8000224:	4604      	mov	r4, r0
 8000226:	4688      	mov	r8, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d962      	bls.n	80002f8 <__udivmoddi4+0xdc>
 8000232:	fab2 f682 	clz	r6, r2
 8000236:	b14e      	cbz	r6, 800024c <__udivmoddi4+0x30>
 8000238:	f1c6 0320 	rsb	r3, r6, #32
 800023c:	fa01 f806 	lsl.w	r8, r1, r6
 8000240:	fa20 f303 	lsr.w	r3, r0, r3
 8000244:	40b7      	lsls	r7, r6
 8000246:	ea43 0808 	orr.w	r8, r3, r8
 800024a:	40b4      	lsls	r4, r6
 800024c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000250:	fa1f fc87 	uxth.w	ip, r7
 8000254:	fbb8 f1fe 	udiv	r1, r8, lr
 8000258:	0c23      	lsrs	r3, r4, #16
 800025a:	fb0e 8811 	mls	r8, lr, r1, r8
 800025e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000262:	fb01 f20c 	mul.w	r2, r1, ip
 8000266:	429a      	cmp	r2, r3
 8000268:	d909      	bls.n	800027e <__udivmoddi4+0x62>
 800026a:	18fb      	adds	r3, r7, r3
 800026c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000270:	f080 80ea 	bcs.w	8000448 <__udivmoddi4+0x22c>
 8000274:	429a      	cmp	r2, r3
 8000276:	f240 80e7 	bls.w	8000448 <__udivmoddi4+0x22c>
 800027a:	3902      	subs	r1, #2
 800027c:	443b      	add	r3, r7
 800027e:	1a9a      	subs	r2, r3, r2
 8000280:	b2a3      	uxth	r3, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800028e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000292:	459c      	cmp	ip, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x8e>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f100 32ff 	add.w	r2, r0, #4294967295
 800029c:	f080 80d6 	bcs.w	800044c <__udivmoddi4+0x230>
 80002a0:	459c      	cmp	ip, r3
 80002a2:	f240 80d3 	bls.w	800044c <__udivmoddi4+0x230>
 80002a6:	443b      	add	r3, r7
 80002a8:	3802      	subs	r0, #2
 80002aa:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002ae:	eba3 030c 	sub.w	r3, r3, ip
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11d      	cbz	r5, 80002be <__udivmoddi4+0xa2>
 80002b6:	40f3      	lsrs	r3, r6
 80002b8:	2200      	movs	r2, #0
 80002ba:	e9c5 3200 	strd	r3, r2, [r5]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d905      	bls.n	80002d2 <__udivmoddi4+0xb6>
 80002c6:	b10d      	cbz	r5, 80002cc <__udivmoddi4+0xb0>
 80002c8:	e9c5 0100 	strd	r0, r1, [r5]
 80002cc:	2100      	movs	r1, #0
 80002ce:	4608      	mov	r0, r1
 80002d0:	e7f5      	b.n	80002be <__udivmoddi4+0xa2>
 80002d2:	fab3 f183 	clz	r1, r3
 80002d6:	2900      	cmp	r1, #0
 80002d8:	d146      	bne.n	8000368 <__udivmoddi4+0x14c>
 80002da:	4573      	cmp	r3, lr
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xc8>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 8105 	bhi.w	80004ee <__udivmoddi4+0x2d2>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	4690      	mov	r8, r2
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e5      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f2:	e9c5 4800 	strd	r4, r8, [r5]
 80002f6:	e7e2      	b.n	80002be <__udivmoddi4+0xa2>
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f000 8090 	beq.w	800041e <__udivmoddi4+0x202>
 80002fe:	fab2 f682 	clz	r6, r2
 8000302:	2e00      	cmp	r6, #0
 8000304:	f040 80a4 	bne.w	8000450 <__udivmoddi4+0x234>
 8000308:	1a8a      	subs	r2, r1, r2
 800030a:	0c03      	lsrs	r3, r0, #16
 800030c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000310:	b280      	uxth	r0, r0
 8000312:	b2bc      	uxth	r4, r7
 8000314:	2101      	movs	r1, #1
 8000316:	fbb2 fcfe 	udiv	ip, r2, lr
 800031a:	fb0e 221c 	mls	r2, lr, ip, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb04 f20c 	mul.w	r2, r4, ip
 8000326:	429a      	cmp	r2, r3
 8000328:	d907      	bls.n	800033a <__udivmoddi4+0x11e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000330:	d202      	bcs.n	8000338 <__udivmoddi4+0x11c>
 8000332:	429a      	cmp	r2, r3
 8000334:	f200 80e0 	bhi.w	80004f8 <__udivmoddi4+0x2dc>
 8000338:	46c4      	mov	ip, r8
 800033a:	1a9b      	subs	r3, r3, r2
 800033c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000340:	fb0e 3312 	mls	r3, lr, r2, r3
 8000344:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000348:	fb02 f404 	mul.w	r4, r2, r4
 800034c:	429c      	cmp	r4, r3
 800034e:	d907      	bls.n	8000360 <__udivmoddi4+0x144>
 8000350:	18fb      	adds	r3, r7, r3
 8000352:	f102 30ff 	add.w	r0, r2, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x142>
 8000358:	429c      	cmp	r4, r3
 800035a:	f200 80ca 	bhi.w	80004f2 <__udivmoddi4+0x2d6>
 800035e:	4602      	mov	r2, r0
 8000360:	1b1b      	subs	r3, r3, r4
 8000362:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000366:	e7a5      	b.n	80002b4 <__udivmoddi4+0x98>
 8000368:	f1c1 0620 	rsb	r6, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 f706 	lsr.w	r7, r2, r6
 8000372:	431f      	orrs	r7, r3
 8000374:	fa0e f401 	lsl.w	r4, lr, r1
 8000378:	fa20 f306 	lsr.w	r3, r0, r6
 800037c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000380:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	fa1f fc87 	uxth.w	ip, r7
 800038e:	fbbe f0f9 	udiv	r0, lr, r9
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	fb09 ee10 	mls	lr, r9, r0, lr
 8000398:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800039c:	fb00 fe0c 	mul.w	lr, r0, ip
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	fa02 f201 	lsl.w	r2, r2, r1
 80003a6:	d909      	bls.n	80003bc <__udivmoddi4+0x1a0>
 80003a8:	193c      	adds	r4, r7, r4
 80003aa:	f100 3aff 	add.w	sl, r0, #4294967295
 80003ae:	f080 809c 	bcs.w	80004ea <__udivmoddi4+0x2ce>
 80003b2:	45a6      	cmp	lr, r4
 80003b4:	f240 8099 	bls.w	80004ea <__udivmoddi4+0x2ce>
 80003b8:	3802      	subs	r0, #2
 80003ba:	443c      	add	r4, r7
 80003bc:	eba4 040e 	sub.w	r4, r4, lr
 80003c0:	fa1f fe83 	uxth.w	lr, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003d0:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d4:	45a4      	cmp	ip, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1ce>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f103 3eff 	add.w	lr, r3, #4294967295
 80003de:	f080 8082 	bcs.w	80004e6 <__udivmoddi4+0x2ca>
 80003e2:	45a4      	cmp	ip, r4
 80003e4:	d97f      	bls.n	80004e6 <__udivmoddi4+0x2ca>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	443c      	add	r4, r7
 80003ea:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ee:	eba4 040c 	sub.w	r4, r4, ip
 80003f2:	fba0 ec02 	umull	lr, ip, r0, r2
 80003f6:	4564      	cmp	r4, ip
 80003f8:	4673      	mov	r3, lr
 80003fa:	46e1      	mov	r9, ip
 80003fc:	d362      	bcc.n	80004c4 <__udivmoddi4+0x2a8>
 80003fe:	d05f      	beq.n	80004c0 <__udivmoddi4+0x2a4>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x1fe>
 8000402:	ebb8 0203 	subs.w	r2, r8, r3
 8000406:	eb64 0409 	sbc.w	r4, r4, r9
 800040a:	fa04 f606 	lsl.w	r6, r4, r6
 800040e:	fa22 f301 	lsr.w	r3, r2, r1
 8000412:	431e      	orrs	r6, r3
 8000414:	40cc      	lsrs	r4, r1
 8000416:	e9c5 6400 	strd	r6, r4, [r5]
 800041a:	2100      	movs	r1, #0
 800041c:	e74f      	b.n	80002be <__udivmoddi4+0xa2>
 800041e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000422:	0c01      	lsrs	r1, r0, #16
 8000424:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000428:	b280      	uxth	r0, r0
 800042a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800042e:	463b      	mov	r3, r7
 8000430:	4638      	mov	r0, r7
 8000432:	463c      	mov	r4, r7
 8000434:	46b8      	mov	r8, r7
 8000436:	46be      	mov	lr, r7
 8000438:	2620      	movs	r6, #32
 800043a:	fbb1 f1f7 	udiv	r1, r1, r7
 800043e:	eba2 0208 	sub.w	r2, r2, r8
 8000442:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000446:	e766      	b.n	8000316 <__udivmoddi4+0xfa>
 8000448:	4601      	mov	r1, r0
 800044a:	e718      	b.n	800027e <__udivmoddi4+0x62>
 800044c:	4610      	mov	r0, r2
 800044e:	e72c      	b.n	80002aa <__udivmoddi4+0x8e>
 8000450:	f1c6 0220 	rsb	r2, r6, #32
 8000454:	fa2e f302 	lsr.w	r3, lr, r2
 8000458:	40b7      	lsls	r7, r6
 800045a:	40b1      	lsls	r1, r6
 800045c:	fa20 f202 	lsr.w	r2, r0, r2
 8000460:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000464:	430a      	orrs	r2, r1
 8000466:	fbb3 f8fe 	udiv	r8, r3, lr
 800046a:	b2bc      	uxth	r4, r7
 800046c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000470:	0c11      	lsrs	r1, r2, #16
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb08 f904 	mul.w	r9, r8, r4
 800047a:	40b0      	lsls	r0, r6
 800047c:	4589      	cmp	r9, r1
 800047e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000482:	b280      	uxth	r0, r0
 8000484:	d93e      	bls.n	8000504 <__udivmoddi4+0x2e8>
 8000486:	1879      	adds	r1, r7, r1
 8000488:	f108 3cff 	add.w	ip, r8, #4294967295
 800048c:	d201      	bcs.n	8000492 <__udivmoddi4+0x276>
 800048e:	4589      	cmp	r9, r1
 8000490:	d81f      	bhi.n	80004d2 <__udivmoddi4+0x2b6>
 8000492:	eba1 0109 	sub.w	r1, r1, r9
 8000496:	fbb1 f9fe 	udiv	r9, r1, lr
 800049a:	fb09 f804 	mul.w	r8, r9, r4
 800049e:	fb0e 1119 	mls	r1, lr, r9, r1
 80004a2:	b292      	uxth	r2, r2
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	4542      	cmp	r2, r8
 80004aa:	d229      	bcs.n	8000500 <__udivmoddi4+0x2e4>
 80004ac:	18ba      	adds	r2, r7, r2
 80004ae:	f109 31ff 	add.w	r1, r9, #4294967295
 80004b2:	d2c4      	bcs.n	800043e <__udivmoddi4+0x222>
 80004b4:	4542      	cmp	r2, r8
 80004b6:	d2c2      	bcs.n	800043e <__udivmoddi4+0x222>
 80004b8:	f1a9 0102 	sub.w	r1, r9, #2
 80004bc:	443a      	add	r2, r7
 80004be:	e7be      	b.n	800043e <__udivmoddi4+0x222>
 80004c0:	45f0      	cmp	r8, lr
 80004c2:	d29d      	bcs.n	8000400 <__udivmoddi4+0x1e4>
 80004c4:	ebbe 0302 	subs.w	r3, lr, r2
 80004c8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004cc:	3801      	subs	r0, #1
 80004ce:	46e1      	mov	r9, ip
 80004d0:	e796      	b.n	8000400 <__udivmoddi4+0x1e4>
 80004d2:	eba7 0909 	sub.w	r9, r7, r9
 80004d6:	4449      	add	r1, r9
 80004d8:	f1a8 0c02 	sub.w	ip, r8, #2
 80004dc:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e0:	fb09 f804 	mul.w	r8, r9, r4
 80004e4:	e7db      	b.n	800049e <__udivmoddi4+0x282>
 80004e6:	4673      	mov	r3, lr
 80004e8:	e77f      	b.n	80003ea <__udivmoddi4+0x1ce>
 80004ea:	4650      	mov	r0, sl
 80004ec:	e766      	b.n	80003bc <__udivmoddi4+0x1a0>
 80004ee:	4608      	mov	r0, r1
 80004f0:	e6fd      	b.n	80002ee <__udivmoddi4+0xd2>
 80004f2:	443b      	add	r3, r7
 80004f4:	3a02      	subs	r2, #2
 80004f6:	e733      	b.n	8000360 <__udivmoddi4+0x144>
 80004f8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004fc:	443b      	add	r3, r7
 80004fe:	e71c      	b.n	800033a <__udivmoddi4+0x11e>
 8000500:	4649      	mov	r1, r9
 8000502:	e79c      	b.n	800043e <__udivmoddi4+0x222>
 8000504:	eba1 0109 	sub.w	r1, r1, r9
 8000508:	46c4      	mov	ip, r8
 800050a:	fbb1 f9fe 	udiv	r9, r1, lr
 800050e:	fb09 f804 	mul.w	r8, r9, r4
 8000512:	e7c4      	b.n	800049e <__udivmoddi4+0x282>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <ApplicationInit>:

#define FIRST_NAME_LENGTH 6


void ApplicationInit(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
    LTCD__Init();
 800051c:	f001 fb6e 	bl	8001bfc <LTCD__Init>
    LTCD_Layer_Init(0);
 8000520:	2000      	movs	r0, #0
 8000522:	f001 fb2b 	bl	8001b7c <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_WHITE);
 8000526:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800052a:	2000      	movs	r0, #0
 800052c:	f001 fc36 	bl	8001d9c <LCD_Clear>
	InitializeLCDTouch();
 8000530:	f001 fd0c 	bl	8001f4c <InitializeLCDTouch>
	Gyro_Init();
 8000534:	f001 f8c2 	bl	80016bc <Gyro_Init>
    HAL_Delay(100);
 8000538:	2064      	movs	r0, #100	@ 0x64
 800053a:	f003 fa3d 	bl	80039b8 <HAL_Delay>
	Button_Init_Interrupt();
 800053e:	f001 f893 	bl	8001668 <Button_Init_Interrupt>
	startGame();
 8000542:	f000 f803 	bl	800054c <startGame>
}
 8000546:	bf00      	nop
 8000548:	bd80      	pop	{r7, pc}
	...

0800054c <startGame>:

void startGame(void){
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
	Screen1_Display();
 8000550:	f000 fa38 	bl	80009c4 <Screen1_Display>
	checkPlayerMode();
 8000554:	f000 f860 	bl	8000618 <checkPlayerMode>
	startTimer();
 8000558:	f000 fa12 	bl	8000980 <startTimer>
	winner = 0;
 800055c:	4b05      	ldr	r3, [pc, #20]	@ (8000574 <startGame+0x28>)
 800055e:	2200      	movs	r2, #0
 8000560:	701a      	strb	r2, [r3, #0]
	newGame();
 8000562:	f000 f877 	bl	8000654 <newGame>
	Screen2_DisplayBoard();
 8000566:	f000 fae7 	bl	8000b38 <Screen2_DisplayBoard>
	playGame();
 800056a:	f000 f805 	bl	8000578 <playGame>
}
 800056e:	bf00      	nop
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	20000044 	.word	0x20000044

08000578 <playGame>:

void playGame(void){
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
	while (winner == 0){
 800057c:	e024      	b.n	80005c8 <playGame+0x50>
		Screen2_DisplayMoveChip();
 800057e:	f000 fb87 	bl	8000c90 <Screen2_DisplayMoveChip>
		if(TwoPlayerMode == false && player1turn == false){
 8000582:	4b1f      	ldr	r3, [pc, #124]	@ (8000600 <playGame+0x88>)
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	f083 0301 	eor.w	r3, r3, #1
 800058a:	b2db      	uxtb	r3, r3
 800058c:	2b00      	cmp	r3, #0
 800058e:	d011      	beq.n	80005b4 <playGame+0x3c>
 8000590:	4b1c      	ldr	r3, [pc, #112]	@ (8000604 <playGame+0x8c>)
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	f083 0301 	eor.w	r3, r3, #1
 8000598:	b2db      	uxtb	r3, r3
 800059a:	2b00      	cmp	r3, #0
 800059c:	d00a      	beq.n	80005b4 <playGame+0x3c>
			chipLoc = moveAI();
 800059e:	f000 fe17 	bl	80011d0 <moveAI>
 80005a2:	4603      	mov	r3, r0
 80005a4:	461a      	mov	r2, r3
 80005a6:	4b18      	ldr	r3, [pc, #96]	@ (8000608 <playGame+0x90>)
 80005a8:	701a      	strb	r2, [r3, #0]
			drop();
 80005aa:	f000 f893 	bl	80006d4 <drop>
			Screen2_DisplayBoard();
 80005ae:	f000 fac3 	bl	8000b38 <Screen2_DisplayBoard>
 80005b2:	e001      	b.n	80005b8 <playGame+0x40>
		}
		else{
			moveGyro();
 80005b4:	f000 f8e6 	bl	8000784 <moveGyro>
		}
		Screen2_DisplayMoveChip();
 80005b8:	f000 fb6a 	bl	8000c90 <Screen2_DisplayMoveChip>
		winner = checkState();
 80005bc:	f000 f920 	bl	8000800 <checkState>
 80005c0:	4603      	mov	r3, r0
 80005c2:	461a      	mov	r2, r3
 80005c4:	4b11      	ldr	r3, [pc, #68]	@ (800060c <playGame+0x94>)
 80005c6:	701a      	strb	r2, [r3, #0]
	while (winner == 0){
 80005c8:	4b10      	ldr	r3, [pc, #64]	@ (800060c <playGame+0x94>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d0d6      	beq.n	800057e <playGame+0x6>
	}
	if(winner == 1){
 80005d0:	4b0e      	ldr	r3, [pc, #56]	@ (800060c <playGame+0x94>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	2b01      	cmp	r3, #1
 80005d6:	d106      	bne.n	80005e6 <playGame+0x6e>
		player1_Score++;
 80005d8:	4b0d      	ldr	r3, [pc, #52]	@ (8000610 <playGame+0x98>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	3301      	adds	r3, #1
 80005de:	b2da      	uxtb	r2, r3
 80005e0:	4b0b      	ldr	r3, [pc, #44]	@ (8000610 <playGame+0x98>)
 80005e2:	701a      	strb	r2, [r3, #0]
 80005e4:	e005      	b.n	80005f2 <playGame+0x7a>
	}
	else{
		player2_Score++;
 80005e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000614 <playGame+0x9c>)
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	3301      	adds	r3, #1
 80005ec:	b2da      	uxtb	r2, r3
 80005ee:	4b09      	ldr	r3, [pc, #36]	@ (8000614 <playGame+0x9c>)
 80005f0:	701a      	strb	r2, [r3, #0]
	}
	endTimer();
 80005f2:	f000 f9d1 	bl	8000998 <endTimer>
	Screen3_Display();
 80005f6:	f000 fb95 	bl	8000d24 <Screen3_Display>
}
 80005fa:	bf00      	nop
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	20000054 	.word	0x20000054
 8000604:	20000001 	.word	0x20000001
 8000608:	20000000 	.word	0x20000000
 800060c:	20000044 	.word	0x20000044
 8000610:	20000045 	.word	0x20000045
 8000614:	20000046 	.word	0x20000046

08000618 <checkPlayerMode>:


void checkPlayerMode(void){
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
	STMPE811_TouchData touch;
	touch.pressed = STMPE811_State_Released;
 800061e:	2301      	movs	r3, #1
 8000620:	713b      	strb	r3, [r7, #4]
	while(touch.pressed == STMPE811_State_Released){
 8000622:	e003      	b.n	800062c <checkPlayerMode+0x14>
		returnTouchStateAndLocation(&touch);
 8000624:	463b      	mov	r3, r7
 8000626:	4618      	mov	r0, r3
 8000628:	f001 fc9b 	bl	8001f62 <returnTouchStateAndLocation>
	while(touch.pressed == STMPE811_State_Released){
 800062c:	793b      	ldrb	r3, [r7, #4]
 800062e:	2b01      	cmp	r3, #1
 8000630:	d0f8      	beq.n	8000624 <checkPlayerMode+0xc>
	}
	if (touch.x > LCD_PIXEL_WIDTH/2){
 8000632:	883b      	ldrh	r3, [r7, #0]
 8000634:	2b78      	cmp	r3, #120	@ 0x78
 8000636:	d903      	bls.n	8000640 <checkPlayerMode+0x28>
		TwoPlayerMode = LEFT_TOUCH;
 8000638:	4b05      	ldr	r3, [pc, #20]	@ (8000650 <checkPlayerMode+0x38>)
 800063a:	2200      	movs	r2, #0
 800063c:	701a      	strb	r2, [r3, #0]
	}
	else{
		TwoPlayerMode = RIGHT_TOUCH;
	}
}
 800063e:	e002      	b.n	8000646 <checkPlayerMode+0x2e>
		TwoPlayerMode = RIGHT_TOUCH;
 8000640:	4b03      	ldr	r3, [pc, #12]	@ (8000650 <checkPlayerMode+0x38>)
 8000642:	2201      	movs	r2, #1
 8000644:	701a      	strb	r2, [r3, #0]
}
 8000646:	bf00      	nop
 8000648:	3708      	adds	r7, #8
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	20000054 	.word	0x20000054

08000654 <newGame>:

void newGame(void){
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
	startTimer();
 800065a:	f000 f991 	bl	8000980 <startTimer>
	LCD_Clear(0, LCD_COLOR_GREY);
 800065e:	f24f 71de 	movw	r1, #63454	@ 0xf7de
 8000662:	2000      	movs	r0, #0
 8000664:	f001 fb9a 	bl	8001d9c <LCD_Clear>
	if (startPlayer1 == true){
 8000668:	4b17      	ldr	r3, [pc, #92]	@ (80006c8 <newGame+0x74>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d003      	beq.n	8000678 <newGame+0x24>
		startPlayer1 = false;
 8000670:	4b15      	ldr	r3, [pc, #84]	@ (80006c8 <newGame+0x74>)
 8000672:	2200      	movs	r2, #0
 8000674:	701a      	strb	r2, [r3, #0]
 8000676:	e002      	b.n	800067e <newGame+0x2a>
	}
	else{
		startPlayer1 = true;
 8000678:	4b13      	ldr	r3, [pc, #76]	@ (80006c8 <newGame+0x74>)
 800067a:	2201      	movs	r2, #1
 800067c:	701a      	strb	r2, [r3, #0]
	}
	winner = 0;
 800067e:	4b13      	ldr	r3, [pc, #76]	@ (80006cc <newGame+0x78>)
 8000680:	2200      	movs	r2, #0
 8000682:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i<boardColumns; i++){
 8000684:	2300      	movs	r3, #0
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	e016      	b.n	80006b8 <newGame+0x64>
		for (int j = 0; j<boardRows; j++){
 800068a:	2300      	movs	r3, #0
 800068c:	603b      	str	r3, [r7, #0]
 800068e:	e00d      	b.n	80006ac <newGame+0x58>
	        gameBoard[i][j] = 0;
 8000690:	490f      	ldr	r1, [pc, #60]	@ (80006d0 <newGame+0x7c>)
 8000692:	687a      	ldr	r2, [r7, #4]
 8000694:	4613      	mov	r3, r2
 8000696:	005b      	lsls	r3, r3, #1
 8000698:	4413      	add	r3, r2
 800069a:	005b      	lsls	r3, r3, #1
 800069c:	18ca      	adds	r2, r1, r3
 800069e:	683b      	ldr	r3, [r7, #0]
 80006a0:	4413      	add	r3, r2
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j<boardRows; j++){
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	3301      	adds	r3, #1
 80006aa:	603b      	str	r3, [r7, #0]
 80006ac:	683b      	ldr	r3, [r7, #0]
 80006ae:	2b05      	cmp	r3, #5
 80006b0:	ddee      	ble.n	8000690 <newGame+0x3c>
	for (int i = 0; i<boardColumns; i++){
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	3301      	adds	r3, #1
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	2b06      	cmp	r3, #6
 80006bc:	dde5      	ble.n	800068a <newGame+0x36>
		}
	}
}
 80006be:	bf00      	nop
 80006c0:	bf00      	nop
 80006c2:	3708      	adds	r7, #8
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	20000002 	.word	0x20000002
 80006cc:	20000044 	.word	0x20000044
 80006d0:	20000058 	.word	0x20000058

080006d4 <drop>:


void drop(void){
 80006d4:	b480      	push	{r7}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0
    int j = 0;
 80006da:	2300      	movs	r3, #0
 80006dc:	607b      	str	r3, [r7, #4]
    while (gameBoard[chipLoc][j] == 0 && j<6){
 80006de:	e002      	b.n	80006e6 <drop+0x12>
        j++;
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	3301      	adds	r3, #1
 80006e4:	607b      	str	r3, [r7, #4]
    while (gameBoard[chipLoc][j] == 0 && j<6){
 80006e6:	4b23      	ldr	r3, [pc, #140]	@ (8000774 <drop+0xa0>)
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	4619      	mov	r1, r3
 80006ec:	4a22      	ldr	r2, [pc, #136]	@ (8000778 <drop+0xa4>)
 80006ee:	460b      	mov	r3, r1
 80006f0:	005b      	lsls	r3, r3, #1
 80006f2:	440b      	add	r3, r1
 80006f4:	005b      	lsls	r3, r3, #1
 80006f6:	441a      	add	r2, r3
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	4413      	add	r3, r2
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d102      	bne.n	8000708 <drop+0x34>
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	2b05      	cmp	r3, #5
 8000706:	ddeb      	ble.n	80006e0 <drop+0xc>
    }
    if(j>0){
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	2b00      	cmp	r3, #0
 800070c:	dd2c      	ble.n	8000768 <drop+0x94>
		if (player1turn){
 800070e:	4b1b      	ldr	r3, [pc, #108]	@ (800077c <drop+0xa8>)
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d011      	beq.n	800073a <drop+0x66>
			gameBoard[chipLoc][j-1] = 1;
 8000716:	4b17      	ldr	r3, [pc, #92]	@ (8000774 <drop+0xa0>)
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	4618      	mov	r0, r3
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	1e5a      	subs	r2, r3, #1
 8000720:	4915      	ldr	r1, [pc, #84]	@ (8000778 <drop+0xa4>)
 8000722:	4603      	mov	r3, r0
 8000724:	005b      	lsls	r3, r3, #1
 8000726:	4403      	add	r3, r0
 8000728:	005b      	lsls	r3, r3, #1
 800072a:	440b      	add	r3, r1
 800072c:	4413      	add	r3, r2
 800072e:	2201      	movs	r2, #1
 8000730:	701a      	strb	r2, [r3, #0]
			player1turn = false;
 8000732:	4b12      	ldr	r3, [pc, #72]	@ (800077c <drop+0xa8>)
 8000734:	2200      	movs	r2, #0
 8000736:	701a      	strb	r2, [r3, #0]
 8000738:	e010      	b.n	800075c <drop+0x88>
		}
		else{
			gameBoard[chipLoc][j-1] = 2;
 800073a:	4b0e      	ldr	r3, [pc, #56]	@ (8000774 <drop+0xa0>)
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	4618      	mov	r0, r3
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	1e5a      	subs	r2, r3, #1
 8000744:	490c      	ldr	r1, [pc, #48]	@ (8000778 <drop+0xa4>)
 8000746:	4603      	mov	r3, r0
 8000748:	005b      	lsls	r3, r3, #1
 800074a:	4403      	add	r3, r0
 800074c:	005b      	lsls	r3, r3, #1
 800074e:	440b      	add	r3, r1
 8000750:	4413      	add	r3, r2
 8000752:	2202      	movs	r2, #2
 8000754:	701a      	strb	r2, [r3, #0]
			player1turn = true;
 8000756:	4b09      	ldr	r3, [pc, #36]	@ (800077c <drop+0xa8>)
 8000758:	2201      	movs	r2, #1
 800075a:	701a      	strb	r2, [r3, #0]
		}
		chipLoc = 3;
 800075c:	4b05      	ldr	r3, [pc, #20]	@ (8000774 <drop+0xa0>)
 800075e:	2203      	movs	r2, #3
 8000760:	701a      	strb	r2, [r3, #0]
		dropped = true;
 8000762:	4b07      	ldr	r3, [pc, #28]	@ (8000780 <drop+0xac>)
 8000764:	2201      	movs	r2, #1
 8000766:	701a      	strb	r2, [r3, #0]
    }
}
 8000768:	bf00      	nop
 800076a:	370c      	adds	r7, #12
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr
 8000774:	20000000 	.word	0x20000000
 8000778:	20000058 	.word	0x20000058
 800077c:	20000001 	.word	0x20000001
 8000780:	20000055 	.word	0x20000055

08000784 <moveGyro>:
    }
}



void moveGyro(void) {
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
    int16_t gyroLoc = Gyro_GetYLoc();
 800078a:	f001 f873 	bl	8001874 <Gyro_GetYLoc>
 800078e:	4603      	mov	r3, r0
 8000790:	80fb      	strh	r3, [r7, #6]
    uint32_t now = HAL_GetTick();
 8000792:	f003 f905 	bl	80039a0 <HAL_GetTick>
 8000796:	6038      	str	r0, [r7, #0]

    if (now - lastMoveTime > DEBOUNCE_TIME) {
 8000798:	4b17      	ldr	r3, [pc, #92]	@ (80007f8 <moveGyro+0x74>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	683a      	ldr	r2, [r7, #0]
 800079e:	1ad3      	subs	r3, r2, r3
 80007a0:	2b50      	cmp	r3, #80	@ 0x50
 80007a2:	d924      	bls.n	80007ee <moveGyro+0x6a>
        if (gyroLoc > MOVE_THRESHOLD && chipLoc < 6) {
 80007a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007a8:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80007ac:	dd0d      	ble.n	80007ca <moveGyro+0x46>
 80007ae:	4b13      	ldr	r3, [pc, #76]	@ (80007fc <moveGyro+0x78>)
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	2b05      	cmp	r3, #5
 80007b4:	d809      	bhi.n	80007ca <moveGyro+0x46>
            chipLoc++;
 80007b6:	4b11      	ldr	r3, [pc, #68]	@ (80007fc <moveGyro+0x78>)
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	3301      	adds	r3, #1
 80007bc:	b2da      	uxtb	r2, r3
 80007be:	4b0f      	ldr	r3, [pc, #60]	@ (80007fc <moveGyro+0x78>)
 80007c0:	701a      	strb	r2, [r3, #0]
            lastMoveTime = now;
 80007c2:	4a0d      	ldr	r2, [pc, #52]	@ (80007f8 <moveGyro+0x74>)
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	6013      	str	r3, [r2, #0]
        } else if (gyroLoc < -MOVE_THRESHOLD && chipLoc > 0) {
            chipLoc--;
            lastMoveTime = now;
        }
    }
}
 80007c8:	e011      	b.n	80007ee <moveGyro+0x6a>
        } else if (gyroLoc < -MOVE_THRESHOLD && chipLoc > 0) {
 80007ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007ce:	f513 6ffa 	cmn.w	r3, #2000	@ 0x7d0
 80007d2:	da0c      	bge.n	80007ee <moveGyro+0x6a>
 80007d4:	4b09      	ldr	r3, [pc, #36]	@ (80007fc <moveGyro+0x78>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d008      	beq.n	80007ee <moveGyro+0x6a>
            chipLoc--;
 80007dc:	4b07      	ldr	r3, [pc, #28]	@ (80007fc <moveGyro+0x78>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	3b01      	subs	r3, #1
 80007e2:	b2da      	uxtb	r2, r3
 80007e4:	4b05      	ldr	r3, [pc, #20]	@ (80007fc <moveGyro+0x78>)
 80007e6:	701a      	strb	r2, [r3, #0]
            lastMoveTime = now;
 80007e8:	4a03      	ldr	r2, [pc, #12]	@ (80007f8 <moveGyro+0x74>)
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	6013      	str	r3, [r2, #0]
}
 80007ee:	bf00      	nop
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	20000084 	.word	0x20000084
 80007fc:	20000000 	.word	0x20000000

08000800 <checkState>:
uint8_t checkState(void){
 8000800:	b580      	push	{r7, lr}
 8000802:	b084      	sub	sp, #16
 8000804:	af00      	add	r7, sp, #0
    int playerChecking = 0;
 8000806:	2300      	movs	r3, #0
 8000808:	607b      	str	r3, [r7, #4]
    dropped = false;
 800080a:	4b2c      	ldr	r3, [pc, #176]	@ (80008bc <checkState+0xbc>)
 800080c:	2200      	movs	r2, #0
 800080e:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i< boardColumns; i++){
 8000810:	2300      	movs	r3, #0
 8000812:	60fb      	str	r3, [r7, #12]
 8000814:	e049      	b.n	80008aa <checkState+0xaa>
        for (int j = 0; j < boardRows; j++){
 8000816:	2300      	movs	r3, #0
 8000818:	60bb      	str	r3, [r7, #8]
 800081a:	e040      	b.n	800089e <checkState+0x9e>
            playerChecking = gameBoard[i][j];
 800081c:	4928      	ldr	r1, [pc, #160]	@ (80008c0 <checkState+0xc0>)
 800081e:	68fa      	ldr	r2, [r7, #12]
 8000820:	4613      	mov	r3, r2
 8000822:	005b      	lsls	r3, r3, #1
 8000824:	4413      	add	r3, r2
 8000826:	005b      	lsls	r3, r3, #1
 8000828:	18ca      	adds	r2, r1, r3
 800082a:	68bb      	ldr	r3, [r7, #8]
 800082c:	4413      	add	r3, r2
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	607b      	str	r3, [r7, #4]
            if (playerChecking != 0){
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d02f      	beq.n	8000898 <checkState+0x98>
                if (checkDirection(i, j, 1, 0)|| //checking horizontal
 8000838:	2300      	movs	r3, #0
 800083a:	2201      	movs	r2, #1
 800083c:	68b9      	ldr	r1, [r7, #8]
 800083e:	68f8      	ldr	r0, [r7, #12]
 8000840:	f000 f840 	bl	80008c4 <checkDirection>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d11b      	bne.n	8000882 <checkState+0x82>
                    checkDirection(i, j, 0, 1)|| //checking vertical 
 800084a:	2301      	movs	r3, #1
 800084c:	2200      	movs	r2, #0
 800084e:	68b9      	ldr	r1, [r7, #8]
 8000850:	68f8      	ldr	r0, [r7, #12]
 8000852:	f000 f837 	bl	80008c4 <checkDirection>
 8000856:	4603      	mov	r3, r0
                if (checkDirection(i, j, 1, 0)|| //checking horizontal
 8000858:	2b00      	cmp	r3, #0
 800085a:	d112      	bne.n	8000882 <checkState+0x82>
                    checkDirection(i, j, 1, 1)|| //checking / diagonal
 800085c:	2301      	movs	r3, #1
 800085e:	2201      	movs	r2, #1
 8000860:	68b9      	ldr	r1, [r7, #8]
 8000862:	68f8      	ldr	r0, [r7, #12]
 8000864:	f000 f82e 	bl	80008c4 <checkDirection>
 8000868:	4603      	mov	r3, r0
                    checkDirection(i, j, 0, 1)|| //checking vertical 
 800086a:	2b00      	cmp	r3, #0
 800086c:	d109      	bne.n	8000882 <checkState+0x82>
                    checkDirection(i, j, 1, -1)){ //checking \ diagonal
 800086e:	f04f 33ff 	mov.w	r3, #4294967295
 8000872:	2201      	movs	r2, #1
 8000874:	68b9      	ldr	r1, [r7, #8]
 8000876:	68f8      	ldr	r0, [r7, #12]
 8000878:	f000 f824 	bl	80008c4 <checkDirection>
 800087c:	4603      	mov	r3, r0
                    checkDirection(i, j, 1, 1)|| //checking / diagonal
 800087e:	2b00      	cmp	r3, #0
 8000880:	d00a      	beq.n	8000898 <checkState+0x98>
                        return gameBoard[i][j];
 8000882:	490f      	ldr	r1, [pc, #60]	@ (80008c0 <checkState+0xc0>)
 8000884:	68fa      	ldr	r2, [r7, #12]
 8000886:	4613      	mov	r3, r2
 8000888:	005b      	lsls	r3, r3, #1
 800088a:	4413      	add	r3, r2
 800088c:	005b      	lsls	r3, r3, #1
 800088e:	18ca      	adds	r2, r1, r3
 8000890:	68bb      	ldr	r3, [r7, #8]
 8000892:	4413      	add	r3, r2
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	e00c      	b.n	80008b2 <checkState+0xb2>
        for (int j = 0; j < boardRows; j++){
 8000898:	68bb      	ldr	r3, [r7, #8]
 800089a:	3301      	adds	r3, #1
 800089c:	60bb      	str	r3, [r7, #8]
 800089e:	68bb      	ldr	r3, [r7, #8]
 80008a0:	2b05      	cmp	r3, #5
 80008a2:	ddbb      	ble.n	800081c <checkState+0x1c>
    for (int i = 0; i< boardColumns; i++){
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	3301      	adds	r3, #1
 80008a8:	60fb      	str	r3, [r7, #12]
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	2b06      	cmp	r3, #6
 80008ae:	ddb2      	ble.n	8000816 <checkState+0x16>
                }
            }
        }
    }
	return 0;
 80008b0:	2300      	movs	r3, #0
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	3710      	adds	r7, #16
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	20000055 	.word	0x20000055
 80008c0:	20000058 	.word	0x20000058

080008c4 <checkDirection>:
bool checkDirection(int i, int j, int dir_i, int dir_j){
 80008c4:	b490      	push	{r4, r7}
 80008c6:	b086      	sub	sp, #24
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	60f8      	str	r0, [r7, #12]
 80008cc:	60b9      	str	r1, [r7, #8]
 80008ce:	607a      	str	r2, [r7, #4]
 80008d0:	603b      	str	r3, [r7, #0]
    for (int k = 1; k < 4; k++){
 80008d2:	2301      	movs	r3, #1
 80008d4:	617b      	str	r3, [r7, #20]
 80008d6:	e048      	b.n	800096a <checkDirection+0xa6>
        if ((i+dir_i*k)>boardColumns || (i+dir_i*k)<0){
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	697a      	ldr	r2, [r7, #20]
 80008dc:	fb03 f202 	mul.w	r2, r3, r2
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	4413      	add	r3, r2
 80008e4:	2b07      	cmp	r3, #7
 80008e6:	dc07      	bgt.n	80008f8 <checkDirection+0x34>
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	697a      	ldr	r2, [r7, #20]
 80008ec:	fb03 f202 	mul.w	r2, r3, r2
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	4413      	add	r3, r2
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	da01      	bge.n	80008fc <checkDirection+0x38>
            return false;
 80008f8:	2300      	movs	r3, #0
 80008fa:	e03a      	b.n	8000972 <checkDirection+0xae>
        } 
        if ((j+dir_j*k)>boardRows || (j+dir_j*k)<0){
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	697a      	ldr	r2, [r7, #20]
 8000900:	fb03 f202 	mul.w	r2, r3, r2
 8000904:	68bb      	ldr	r3, [r7, #8]
 8000906:	4413      	add	r3, r2
 8000908:	2b06      	cmp	r3, #6
 800090a:	dc07      	bgt.n	800091c <checkDirection+0x58>
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	697a      	ldr	r2, [r7, #20]
 8000910:	fb03 f202 	mul.w	r2, r3, r2
 8000914:	68bb      	ldr	r3, [r7, #8]
 8000916:	4413      	add	r3, r2
 8000918:	2b00      	cmp	r3, #0
 800091a:	da01      	bge.n	8000920 <checkDirection+0x5c>
            return false;
 800091c:	2300      	movs	r3, #0
 800091e:	e028      	b.n	8000972 <checkDirection+0xae>
        } 
        if (gameBoard[i][j] != gameBoard[i+dir_i*k][j+dir_j*k]){
 8000920:	4916      	ldr	r1, [pc, #88]	@ (800097c <checkDirection+0xb8>)
 8000922:	68fa      	ldr	r2, [r7, #12]
 8000924:	4613      	mov	r3, r2
 8000926:	005b      	lsls	r3, r3, #1
 8000928:	4413      	add	r3, r2
 800092a:	005b      	lsls	r3, r3, #1
 800092c:	18ca      	adds	r2, r1, r3
 800092e:	68bb      	ldr	r3, [r7, #8]
 8000930:	4413      	add	r3, r2
 8000932:	7819      	ldrb	r1, [r3, #0]
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	697a      	ldr	r2, [r7, #20]
 8000938:	fb03 f202 	mul.w	r2, r3, r2
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	441a      	add	r2, r3
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	6978      	ldr	r0, [r7, #20]
 8000944:	fb03 f000 	mul.w	r0, r3, r0
 8000948:	68bb      	ldr	r3, [r7, #8]
 800094a:	4418      	add	r0, r3
 800094c:	4c0b      	ldr	r4, [pc, #44]	@ (800097c <checkDirection+0xb8>)
 800094e:	4613      	mov	r3, r2
 8000950:	005b      	lsls	r3, r3, #1
 8000952:	4413      	add	r3, r2
 8000954:	005b      	lsls	r3, r3, #1
 8000956:	4423      	add	r3, r4
 8000958:	4403      	add	r3, r0
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	4299      	cmp	r1, r3
 800095e:	d001      	beq.n	8000964 <checkDirection+0xa0>
            return false;
 8000960:	2300      	movs	r3, #0
 8000962:	e006      	b.n	8000972 <checkDirection+0xae>
    for (int k = 1; k < 4; k++){
 8000964:	697b      	ldr	r3, [r7, #20]
 8000966:	3301      	adds	r3, #1
 8000968:	617b      	str	r3, [r7, #20]
 800096a:	697b      	ldr	r3, [r7, #20]
 800096c:	2b03      	cmp	r3, #3
 800096e:	ddb3      	ble.n	80008d8 <checkDirection+0x14>
        }

    }
    return true;
 8000970:	2301      	movs	r3, #1

}
 8000972:	4618      	mov	r0, r3
 8000974:	3718      	adds	r7, #24
 8000976:	46bd      	mov	sp, r7
 8000978:	bc90      	pop	{r4, r7}
 800097a:	4770      	bx	lr
 800097c:	20000058 	.word	0x20000058

08000980 <startTimer>:

void startTimer(void){
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
	startTime = HAL_GetTick();
 8000984:	f003 f80c 	bl	80039a0 <HAL_GetTick>
 8000988:	4603      	mov	r3, r0
 800098a:	4a02      	ldr	r2, [pc, #8]	@ (8000994 <startTimer+0x14>)
 800098c:	6013      	str	r3, [r2, #0]
}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	20000048 	.word	0x20000048

08000998 <endTimer>:

void endTimer(){
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
    endTime = HAL_GetTick();
 800099c:	f003 f800 	bl	80039a0 <HAL_GetTick>
 80009a0:	4603      	mov	r3, r0
 80009a2:	4a05      	ldr	r2, [pc, #20]	@ (80009b8 <endTimer+0x20>)
 80009a4:	6013      	str	r3, [r2, #0]
	timePlayed = endTime-startTime;
 80009a6:	4b04      	ldr	r3, [pc, #16]	@ (80009b8 <endTimer+0x20>)
 80009a8:	681a      	ldr	r2, [r3, #0]
 80009aa:	4b04      	ldr	r3, [pc, #16]	@ (80009bc <endTimer+0x24>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	1ad3      	subs	r3, r2, r3
 80009b0:	4a03      	ldr	r2, [pc, #12]	@ (80009c0 <endTimer+0x28>)
 80009b2:	6013      	str	r3, [r2, #0]
}
 80009b4:	bf00      	nop
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	2000004c 	.word	0x2000004c
 80009bc:	20000048 	.word	0x20000048
 80009c0:	20000050 	.word	0x20000050

080009c4 <Screen1_Display>:


void Screen1_Display(void){
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
    LCD_Clear(0, LCD_COLOR_GREY);
 80009c8:	f24f 71de 	movw	r1, #63454	@ 0xf7de
 80009cc:	2000      	movs	r0, #0
 80009ce:	f001 f9e5 	bl	8001d9c <LCD_Clear>
    
    LCD_SetFont(&Font16x24);
 80009d2:	4857      	ldr	r0, [pc, #348]	@ (8000b30 <Screen1_Display+0x16c>)
 80009d4:	f001 fa14 	bl	8001e00 <LCD_SetFont>
    LCD_SetTextColor(LCD_COLOR_BLACK);
 80009d8:	2000      	movs	r0, #0
 80009da:	f001 fa01 	bl	8001de0 <LCD_SetTextColor>
    LCD_DisplayChar(20, 25, 'C');
 80009de:	2243      	movs	r2, #67	@ 0x43
 80009e0:	2119      	movs	r1, #25
 80009e2:	2014      	movs	r0, #20
 80009e4:	f001 fa8a 	bl	8001efc <LCD_DisplayChar>
    LCD_DisplayChar(40, 25, 'O');
 80009e8:	224f      	movs	r2, #79	@ 0x4f
 80009ea:	2119      	movs	r1, #25
 80009ec:	2028      	movs	r0, #40	@ 0x28
 80009ee:	f001 fa85 	bl	8001efc <LCD_DisplayChar>
    LCD_DisplayChar(60, 25, 'N');
 80009f2:	224e      	movs	r2, #78	@ 0x4e
 80009f4:	2119      	movs	r1, #25
 80009f6:	203c      	movs	r0, #60	@ 0x3c
 80009f8:	f001 fa80 	bl	8001efc <LCD_DisplayChar>
    LCD_DisplayChar(80, 25, 'N');
 80009fc:	224e      	movs	r2, #78	@ 0x4e
 80009fe:	2119      	movs	r1, #25
 8000a00:	2050      	movs	r0, #80	@ 0x50
 8000a02:	f001 fa7b 	bl	8001efc <LCD_DisplayChar>
    LCD_DisplayChar(100, 25, 'E');
 8000a06:	2245      	movs	r2, #69	@ 0x45
 8000a08:	2119      	movs	r1, #25
 8000a0a:	2064      	movs	r0, #100	@ 0x64
 8000a0c:	f001 fa76 	bl	8001efc <LCD_DisplayChar>
    LCD_DisplayChar(120, 25, 'C');
 8000a10:	2243      	movs	r2, #67	@ 0x43
 8000a12:	2119      	movs	r1, #25
 8000a14:	2078      	movs	r0, #120	@ 0x78
 8000a16:	f001 fa71 	bl	8001efc <LCD_DisplayChar>
    LCD_DisplayChar(140, 25, 'T');
 8000a1a:	2254      	movs	r2, #84	@ 0x54
 8000a1c:	2119      	movs	r1, #25
 8000a1e:	208c      	movs	r0, #140	@ 0x8c
 8000a20:	f001 fa6c 	bl	8001efc <LCD_DisplayChar>
    LCD_DisplayChar(180, 25, '4');
 8000a24:	2234      	movs	r2, #52	@ 0x34
 8000a26:	2119      	movs	r1, #25
 8000a28:	20b4      	movs	r0, #180	@ 0xb4
 8000a2a:	f001 fa67 	bl	8001efc <LCD_DisplayChar>

    LCD_SetFont(&Font12x12);
 8000a2e:	4841      	ldr	r0, [pc, #260]	@ (8000b34 <Screen1_Display+0x170>)
 8000a30:	f001 f9e6 	bl	8001e00 <LCD_SetFont>
    LCD_DisplayChar(20, 110, '1');
 8000a34:	2231      	movs	r2, #49	@ 0x31
 8000a36:	216e      	movs	r1, #110	@ 0x6e
 8000a38:	2014      	movs	r0, #20
 8000a3a:	f001 fa5f 	bl	8001efc <LCD_DisplayChar>
    LCD_DisplayChar(35, 110, 'P');
 8000a3e:	2250      	movs	r2, #80	@ 0x50
 8000a40:	216e      	movs	r1, #110	@ 0x6e
 8000a42:	2023      	movs	r0, #35	@ 0x23
 8000a44:	f001 fa5a 	bl	8001efc <LCD_DisplayChar>
    LCD_DisplayChar(45, 110, 'L');
 8000a48:	224c      	movs	r2, #76	@ 0x4c
 8000a4a:	216e      	movs	r1, #110	@ 0x6e
 8000a4c:	202d      	movs	r0, #45	@ 0x2d
 8000a4e:	f001 fa55 	bl	8001efc <LCD_DisplayChar>
    LCD_DisplayChar(55, 110, 'A');
 8000a52:	2241      	movs	r2, #65	@ 0x41
 8000a54:	216e      	movs	r1, #110	@ 0x6e
 8000a56:	2037      	movs	r0, #55	@ 0x37
 8000a58:	f001 fa50 	bl	8001efc <LCD_DisplayChar>
    LCD_DisplayChar(65, 110, 'Y');
 8000a5c:	2259      	movs	r2, #89	@ 0x59
 8000a5e:	216e      	movs	r1, #110	@ 0x6e
 8000a60:	2041      	movs	r0, #65	@ 0x41
 8000a62:	f001 fa4b 	bl	8001efc <LCD_DisplayChar>
    LCD_DisplayChar(75, 110, 'E');
 8000a66:	2245      	movs	r2, #69	@ 0x45
 8000a68:	216e      	movs	r1, #110	@ 0x6e
 8000a6a:	204b      	movs	r0, #75	@ 0x4b
 8000a6c:	f001 fa46 	bl	8001efc <LCD_DisplayChar>
    LCD_DisplayChar(85, 110, 'R');
 8000a70:	2252      	movs	r2, #82	@ 0x52
 8000a72:	216e      	movs	r1, #110	@ 0x6e
 8000a74:	2055      	movs	r0, #85	@ 0x55
 8000a76:	f001 fa41 	bl	8001efc <LCD_DisplayChar>
    LCD_DisplayChar(40, 125, 'M');
 8000a7a:	224d      	movs	r2, #77	@ 0x4d
 8000a7c:	217d      	movs	r1, #125	@ 0x7d
 8000a7e:	2028      	movs	r0, #40	@ 0x28
 8000a80:	f001 fa3c 	bl	8001efc <LCD_DisplayChar>
    LCD_DisplayChar(50, 125, 'O');
 8000a84:	224f      	movs	r2, #79	@ 0x4f
 8000a86:	217d      	movs	r1, #125	@ 0x7d
 8000a88:	2032      	movs	r0, #50	@ 0x32
 8000a8a:	f001 fa37 	bl	8001efc <LCD_DisplayChar>
    LCD_DisplayChar(60, 125, 'D');
 8000a8e:	2244      	movs	r2, #68	@ 0x44
 8000a90:	217d      	movs	r1, #125	@ 0x7d
 8000a92:	203c      	movs	r0, #60	@ 0x3c
 8000a94:	f001 fa32 	bl	8001efc <LCD_DisplayChar>
    LCD_DisplayChar(70, 125, 'E');
 8000a98:	2245      	movs	r2, #69	@ 0x45
 8000a9a:	217d      	movs	r1, #125	@ 0x7d
 8000a9c:	2046      	movs	r0, #70	@ 0x46
 8000a9e:	f001 fa2d 	bl	8001efc <LCD_DisplayChar>

    LCD_DisplayChar(140, 110, '2');
 8000aa2:	2232      	movs	r2, #50	@ 0x32
 8000aa4:	216e      	movs	r1, #110	@ 0x6e
 8000aa6:	208c      	movs	r0, #140	@ 0x8c
 8000aa8:	f001 fa28 	bl	8001efc <LCD_DisplayChar>
    LCD_DisplayChar(155, 110, 'P');
 8000aac:	2250      	movs	r2, #80	@ 0x50
 8000aae:	216e      	movs	r1, #110	@ 0x6e
 8000ab0:	209b      	movs	r0, #155	@ 0x9b
 8000ab2:	f001 fa23 	bl	8001efc <LCD_DisplayChar>
    LCD_DisplayChar(165, 110, 'L');
 8000ab6:	224c      	movs	r2, #76	@ 0x4c
 8000ab8:	216e      	movs	r1, #110	@ 0x6e
 8000aba:	20a5      	movs	r0, #165	@ 0xa5
 8000abc:	f001 fa1e 	bl	8001efc <LCD_DisplayChar>
    LCD_DisplayChar(175, 110, 'A');
 8000ac0:	2241      	movs	r2, #65	@ 0x41
 8000ac2:	216e      	movs	r1, #110	@ 0x6e
 8000ac4:	20af      	movs	r0, #175	@ 0xaf
 8000ac6:	f001 fa19 	bl	8001efc <LCD_DisplayChar>
    LCD_DisplayChar(185, 110, 'Y');
 8000aca:	2259      	movs	r2, #89	@ 0x59
 8000acc:	216e      	movs	r1, #110	@ 0x6e
 8000ace:	20b9      	movs	r0, #185	@ 0xb9
 8000ad0:	f001 fa14 	bl	8001efc <LCD_DisplayChar>
    LCD_DisplayChar(195, 110, 'E');
 8000ad4:	2245      	movs	r2, #69	@ 0x45
 8000ad6:	216e      	movs	r1, #110	@ 0x6e
 8000ad8:	20c3      	movs	r0, #195	@ 0xc3
 8000ada:	f001 fa0f 	bl	8001efc <LCD_DisplayChar>
    LCD_DisplayChar(205, 110, 'R');
 8000ade:	2252      	movs	r2, #82	@ 0x52
 8000ae0:	216e      	movs	r1, #110	@ 0x6e
 8000ae2:	20cd      	movs	r0, #205	@ 0xcd
 8000ae4:	f001 fa0a 	bl	8001efc <LCD_DisplayChar>
    LCD_DisplayChar(160, 125, 'M');
 8000ae8:	224d      	movs	r2, #77	@ 0x4d
 8000aea:	217d      	movs	r1, #125	@ 0x7d
 8000aec:	20a0      	movs	r0, #160	@ 0xa0
 8000aee:	f001 fa05 	bl	8001efc <LCD_DisplayChar>
    LCD_DisplayChar(170, 125, 'O');
 8000af2:	224f      	movs	r2, #79	@ 0x4f
 8000af4:	217d      	movs	r1, #125	@ 0x7d
 8000af6:	20aa      	movs	r0, #170	@ 0xaa
 8000af8:	f001 fa00 	bl	8001efc <LCD_DisplayChar>
    LCD_DisplayChar(180, 125, 'D');
 8000afc:	2244      	movs	r2, #68	@ 0x44
 8000afe:	217d      	movs	r1, #125	@ 0x7d
 8000b00:	20b4      	movs	r0, #180	@ 0xb4
 8000b02:	f001 f9fb 	bl	8001efc <LCD_DisplayChar>
    LCD_DisplayChar(190, 125, 'E');
 8000b06:	2245      	movs	r2, #69	@ 0x45
 8000b08:	217d      	movs	r1, #125	@ 0x7d
 8000b0a:	20be      	movs	r0, #190	@ 0xbe
 8000b0c:	f001 f9f6 	bl	8001efc <LCD_DisplayChar>


    LCD_Draw_Circle_Fill(60, (LCD_PIXEL_HEIGHT/2)+20, 40, LCD_COLOR_RED);
 8000b10:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000b14:	2228      	movs	r2, #40	@ 0x28
 8000b16:	21b4      	movs	r1, #180	@ 0xb4
 8000b18:	203c      	movs	r0, #60	@ 0x3c
 8000b1a:	f001 f8eb 	bl	8001cf4 <LCD_Draw_Circle_Fill>
    LCD_Draw_Circle_Fill(LCD_PIXEL_WIDTH-60, (LCD_PIXEL_HEIGHT/2)+20, 40, LCD_COLOR_BLUE);
 8000b1e:	231f      	movs	r3, #31
 8000b20:	2228      	movs	r2, #40	@ 0x28
 8000b22:	21b4      	movs	r1, #180	@ 0xb4
 8000b24:	20b4      	movs	r0, #180	@ 0xb4
 8000b26:	f001 f8e5 	bl	8001cf4 <LCD_Draw_Circle_Fill>
}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	20000008 	.word	0x20000008
 8000b34:	20000010 	.word	0x20000010

08000b38 <Screen2_DisplayBoard>:

void Screen2_DisplayBoard(void){
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
    LCD_Clear(0, LCD_COLOR_GREY);
 8000b3e:	f24f 71de 	movw	r1, #63454	@ 0xf7de
 8000b42:	2000      	movs	r0, #0
 8000b44:	f001 f92a 	bl	8001d9c <LCD_Clear>
    
    LCD_SetFont(&Font16x24);
 8000b48:	484f      	ldr	r0, [pc, #316]	@ (8000c88 <Screen2_DisplayBoard+0x150>)
 8000b4a:	f001 f959 	bl	8001e00 <LCD_SetFont>
    LCD_SetTextColor(LCD_COLOR_BLACK);
 8000b4e:	2000      	movs	r0, #0
 8000b50:	f001 f946 	bl	8001de0 <LCD_SetTextColor>
    LCD_DisplayChar(20, 15, 'C');
 8000b54:	2243      	movs	r2, #67	@ 0x43
 8000b56:	210f      	movs	r1, #15
 8000b58:	2014      	movs	r0, #20
 8000b5a:	f001 f9cf 	bl	8001efc <LCD_DisplayChar>
    LCD_DisplayChar(40, 15, 'O');
 8000b5e:	224f      	movs	r2, #79	@ 0x4f
 8000b60:	210f      	movs	r1, #15
 8000b62:	2028      	movs	r0, #40	@ 0x28
 8000b64:	f001 f9ca 	bl	8001efc <LCD_DisplayChar>
    LCD_DisplayChar(60, 15, 'N');
 8000b68:	224e      	movs	r2, #78	@ 0x4e
 8000b6a:	210f      	movs	r1, #15
 8000b6c:	203c      	movs	r0, #60	@ 0x3c
 8000b6e:	f001 f9c5 	bl	8001efc <LCD_DisplayChar>
    LCD_DisplayChar(80, 15, 'N');
 8000b72:	224e      	movs	r2, #78	@ 0x4e
 8000b74:	210f      	movs	r1, #15
 8000b76:	2050      	movs	r0, #80	@ 0x50
 8000b78:	f001 f9c0 	bl	8001efc <LCD_DisplayChar>
    LCD_DisplayChar(100, 15, 'E');
 8000b7c:	2245      	movs	r2, #69	@ 0x45
 8000b7e:	210f      	movs	r1, #15
 8000b80:	2064      	movs	r0, #100	@ 0x64
 8000b82:	f001 f9bb 	bl	8001efc <LCD_DisplayChar>
    LCD_DisplayChar(120, 15, 'C');
 8000b86:	2243      	movs	r2, #67	@ 0x43
 8000b88:	210f      	movs	r1, #15
 8000b8a:	2078      	movs	r0, #120	@ 0x78
 8000b8c:	f001 f9b6 	bl	8001efc <LCD_DisplayChar>
    LCD_DisplayChar(140, 15, 'T');
 8000b90:	2254      	movs	r2, #84	@ 0x54
 8000b92:	210f      	movs	r1, #15
 8000b94:	208c      	movs	r0, #140	@ 0x8c
 8000b96:	f001 f9b1 	bl	8001efc <LCD_DisplayChar>
    LCD_DisplayChar(180, 15, '4');
 8000b9a:	2234      	movs	r2, #52	@ 0x34
 8000b9c:	210f      	movs	r1, #15
 8000b9e:	20b4      	movs	r0, #180	@ 0xb4
 8000ba0:	f001 f9ac 	bl	8001efc <LCD_DisplayChar>

    for (int i = 0; i<boardColumns; i++){
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	607b      	str	r3, [r7, #4]
 8000ba8:	e065      	b.n	8000c76 <Screen2_DisplayBoard+0x13e>
        for (int j = 0; j<boardRows; j++){
 8000baa:	2300      	movs	r3, #0
 8000bac:	603b      	str	r3, [r7, #0]
 8000bae:	e05c      	b.n	8000c6a <Screen2_DisplayBoard+0x132>
            if (gameBoard[i][j] == 1){
 8000bb0:	4936      	ldr	r1, [pc, #216]	@ (8000c8c <Screen2_DisplayBoard+0x154>)
 8000bb2:	687a      	ldr	r2, [r7, #4]
 8000bb4:	4613      	mov	r3, r2
 8000bb6:	005b      	lsls	r3, r3, #1
 8000bb8:	4413      	add	r3, r2
 8000bba:	005b      	lsls	r3, r3, #1
 8000bbc:	18ca      	adds	r2, r1, r3
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	4413      	add	r3, r2
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	2b01      	cmp	r3, #1
 8000bc6:	d115      	bne.n	8000bf4 <Screen2_DisplayBoard+0xbc>
                LCD_Draw_Circle_Fill((i*30)+30, (j*30)+115, 12, LCD_COLOR_BLUE);
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	3301      	adds	r3, #1
 8000bcc:	b29b      	uxth	r3, r3
 8000bce:	461a      	mov	r2, r3
 8000bd0:	0112      	lsls	r2, r2, #4
 8000bd2:	1ad3      	subs	r3, r2, r3
 8000bd4:	005b      	lsls	r3, r3, #1
 8000bd6:	b298      	uxth	r0, r3
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	b29b      	uxth	r3, r3
 8000bdc:	461a      	mov	r2, r3
 8000bde:	0112      	lsls	r2, r2, #4
 8000be0:	1ad3      	subs	r3, r2, r3
 8000be2:	005b      	lsls	r3, r3, #1
 8000be4:	b29b      	uxth	r3, r3
 8000be6:	3373      	adds	r3, #115	@ 0x73
 8000be8:	b299      	uxth	r1, r3
 8000bea:	231f      	movs	r3, #31
 8000bec:	220c      	movs	r2, #12
 8000bee:	f001 f881 	bl	8001cf4 <LCD_Draw_Circle_Fill>
 8000bf2:	e037      	b.n	8000c64 <Screen2_DisplayBoard+0x12c>
            }
            else if (gameBoard[i][j] == 2){
 8000bf4:	4925      	ldr	r1, [pc, #148]	@ (8000c8c <Screen2_DisplayBoard+0x154>)
 8000bf6:	687a      	ldr	r2, [r7, #4]
 8000bf8:	4613      	mov	r3, r2
 8000bfa:	005b      	lsls	r3, r3, #1
 8000bfc:	4413      	add	r3, r2
 8000bfe:	005b      	lsls	r3, r3, #1
 8000c00:	18ca      	adds	r2, r1, r3
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	4413      	add	r3, r2
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	2b02      	cmp	r3, #2
 8000c0a:	d116      	bne.n	8000c3a <Screen2_DisplayBoard+0x102>
                LCD_Draw_Circle_Fill((i*30)+30, (j*30)+115, 12, LCD_COLOR_RED);
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	3301      	adds	r3, #1
 8000c10:	b29b      	uxth	r3, r3
 8000c12:	461a      	mov	r2, r3
 8000c14:	0112      	lsls	r2, r2, #4
 8000c16:	1ad3      	subs	r3, r2, r3
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	b298      	uxth	r0, r3
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	b29b      	uxth	r3, r3
 8000c20:	461a      	mov	r2, r3
 8000c22:	0112      	lsls	r2, r2, #4
 8000c24:	1ad3      	subs	r3, r2, r3
 8000c26:	005b      	lsls	r3, r3, #1
 8000c28:	b29b      	uxth	r3, r3
 8000c2a:	3373      	adds	r3, #115	@ 0x73
 8000c2c:	b299      	uxth	r1, r3
 8000c2e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000c32:	220c      	movs	r2, #12
 8000c34:	f001 f85e 	bl	8001cf4 <LCD_Draw_Circle_Fill>
 8000c38:	e014      	b.n	8000c64 <Screen2_DisplayBoard+0x12c>
            }
            else{
                LCD_Draw_Circle_Fill((i*30)+30, (j*30)+115, 12, LCD_COLOR_BLACK);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	b29b      	uxth	r3, r3
 8000c40:	461a      	mov	r2, r3
 8000c42:	0112      	lsls	r2, r2, #4
 8000c44:	1ad3      	subs	r3, r2, r3
 8000c46:	005b      	lsls	r3, r3, #1
 8000c48:	b298      	uxth	r0, r3
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	b29b      	uxth	r3, r3
 8000c4e:	461a      	mov	r2, r3
 8000c50:	0112      	lsls	r2, r2, #4
 8000c52:	1ad3      	subs	r3, r2, r3
 8000c54:	005b      	lsls	r3, r3, #1
 8000c56:	b29b      	uxth	r3, r3
 8000c58:	3373      	adds	r3, #115	@ 0x73
 8000c5a:	b299      	uxth	r1, r3
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	220c      	movs	r2, #12
 8000c60:	f001 f848 	bl	8001cf4 <LCD_Draw_Circle_Fill>
        for (int j = 0; j<boardRows; j++){
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	3301      	adds	r3, #1
 8000c68:	603b      	str	r3, [r7, #0]
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	2b05      	cmp	r3, #5
 8000c6e:	dd9f      	ble.n	8000bb0 <Screen2_DisplayBoard+0x78>
    for (int i = 0; i<boardColumns; i++){
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	3301      	adds	r3, #1
 8000c74:	607b      	str	r3, [r7, #4]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2b06      	cmp	r3, #6
 8000c7a:	dd96      	ble.n	8000baa <Screen2_DisplayBoard+0x72>
            }
        }
    }
}
 8000c7c:	bf00      	nop
 8000c7e:	bf00      	nop
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	20000008 	.word	0x20000008
 8000c8c:	20000058 	.word	0x20000058

08000c90 <Screen2_DisplayMoveChip>:

void Screen2_DisplayMoveChip(void){
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
    for (int i = 0; i<boardColumns; i++){
 8000c96:	2300      	movs	r3, #0
 8000c98:	607b      	str	r3, [r7, #4]
 8000c9a:	e037      	b.n	8000d0c <Screen2_DisplayMoveChip+0x7c>
        if (i == chipLoc){
 8000c9c:	4b1f      	ldr	r3, [pc, #124]	@ (8000d1c <Screen2_DisplayMoveChip+0x8c>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	d120      	bne.n	8000cea <Screen2_DisplayMoveChip+0x5a>
            if (player1turn){
 8000ca8:	4b1d      	ldr	r3, [pc, #116]	@ (8000d20 <Screen2_DisplayMoveChip+0x90>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d00d      	beq.n	8000ccc <Screen2_DisplayMoveChip+0x3c>
                LCD_Draw_Circle_Fill((i*30)+30, 80, 12, LCD_COLOR_BLUE);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	b29b      	uxth	r3, r3
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	0112      	lsls	r2, r2, #4
 8000cba:	1ad3      	subs	r3, r2, r3
 8000cbc:	005b      	lsls	r3, r3, #1
 8000cbe:	b298      	uxth	r0, r3
 8000cc0:	231f      	movs	r3, #31
 8000cc2:	220c      	movs	r2, #12
 8000cc4:	2150      	movs	r1, #80	@ 0x50
 8000cc6:	f001 f815 	bl	8001cf4 <LCD_Draw_Circle_Fill>
 8000cca:	e01c      	b.n	8000d06 <Screen2_DisplayMoveChip+0x76>
            }
            else{
                LCD_Draw_Circle_Fill((i*30)+30, 80, 12, LCD_COLOR_RED);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	3301      	adds	r3, #1
 8000cd0:	b29b      	uxth	r3, r3
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	0112      	lsls	r2, r2, #4
 8000cd6:	1ad3      	subs	r3, r2, r3
 8000cd8:	005b      	lsls	r3, r3, #1
 8000cda:	b298      	uxth	r0, r3
 8000cdc:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000ce0:	220c      	movs	r2, #12
 8000ce2:	2150      	movs	r1, #80	@ 0x50
 8000ce4:	f001 f806 	bl	8001cf4 <LCD_Draw_Circle_Fill>
 8000ce8:	e00d      	b.n	8000d06 <Screen2_DisplayMoveChip+0x76>
            }
        }
        else{
            LCD_Draw_Circle_Fill((i*30)+30, 80, 12, LCD_COLOR_GREY);
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	3301      	adds	r3, #1
 8000cee:	b29b      	uxth	r3, r3
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	0112      	lsls	r2, r2, #4
 8000cf4:	1ad3      	subs	r3, r2, r3
 8000cf6:	005b      	lsls	r3, r3, #1
 8000cf8:	b298      	uxth	r0, r3
 8000cfa:	f24f 73de 	movw	r3, #63454	@ 0xf7de
 8000cfe:	220c      	movs	r2, #12
 8000d00:	2150      	movs	r1, #80	@ 0x50
 8000d02:	f000 fff7 	bl	8001cf4 <LCD_Draw_Circle_Fill>
    for (int i = 0; i<boardColumns; i++){
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	3301      	adds	r3, #1
 8000d0a:	607b      	str	r3, [r7, #4]
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2b06      	cmp	r3, #6
 8000d10:	ddc4      	ble.n	8000c9c <Screen2_DisplayMoveChip+0xc>
        }
    }

}
 8000d12:	bf00      	nop
 8000d14:	bf00      	nop
 8000d16:	3708      	adds	r7, #8
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	20000000 	.word	0x20000000
 8000d20:	20000001 	.word	0x20000001

08000d24 <Screen3_Display>:

void Screen3_Display(void){
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b086      	sub	sp, #24
 8000d28:	af00      	add	r7, sp, #0
    LCD_Clear(0, LCD_COLOR_GREY);
 8000d2a:	f24f 71de 	movw	r1, #63454	@ 0xf7de
 8000d2e:	2000      	movs	r0, #0
 8000d30:	f001 f834 	bl	8001d9c <LCD_Clear>
    
    LCD_SetFont(&Font16x24);
 8000d34:	48e3      	ldr	r0, [pc, #908]	@ (80010c4 <Screen3_Display+0x3a0>)
 8000d36:	f001 f863 	bl	8001e00 <LCD_SetFont>
    LCD_SetTextColor(LCD_COLOR_BLACK);
 8000d3a:	2000      	movs	r0, #0
 8000d3c:	f001 f850 	bl	8001de0 <LCD_SetTextColor>
    LCD_DisplayChar(20, 15, 'C');
 8000d40:	2243      	movs	r2, #67	@ 0x43
 8000d42:	210f      	movs	r1, #15
 8000d44:	2014      	movs	r0, #20
 8000d46:	f001 f8d9 	bl	8001efc <LCD_DisplayChar>
    LCD_DisplayChar(40, 15, 'O');
 8000d4a:	224f      	movs	r2, #79	@ 0x4f
 8000d4c:	210f      	movs	r1, #15
 8000d4e:	2028      	movs	r0, #40	@ 0x28
 8000d50:	f001 f8d4 	bl	8001efc <LCD_DisplayChar>
    LCD_DisplayChar(60, 15, 'N');
 8000d54:	224e      	movs	r2, #78	@ 0x4e
 8000d56:	210f      	movs	r1, #15
 8000d58:	203c      	movs	r0, #60	@ 0x3c
 8000d5a:	f001 f8cf 	bl	8001efc <LCD_DisplayChar>
    LCD_DisplayChar(80, 15, 'N');
 8000d5e:	224e      	movs	r2, #78	@ 0x4e
 8000d60:	210f      	movs	r1, #15
 8000d62:	2050      	movs	r0, #80	@ 0x50
 8000d64:	f001 f8ca 	bl	8001efc <LCD_DisplayChar>
    LCD_DisplayChar(100, 15, 'E');
 8000d68:	2245      	movs	r2, #69	@ 0x45
 8000d6a:	210f      	movs	r1, #15
 8000d6c:	2064      	movs	r0, #100	@ 0x64
 8000d6e:	f001 f8c5 	bl	8001efc <LCD_DisplayChar>
    LCD_DisplayChar(120, 15, 'C');
 8000d72:	2243      	movs	r2, #67	@ 0x43
 8000d74:	210f      	movs	r1, #15
 8000d76:	2078      	movs	r0, #120	@ 0x78
 8000d78:	f001 f8c0 	bl	8001efc <LCD_DisplayChar>
    LCD_DisplayChar(140, 15, 'T');
 8000d7c:	2254      	movs	r2, #84	@ 0x54
 8000d7e:	210f      	movs	r1, #15
 8000d80:	208c      	movs	r0, #140	@ 0x8c
 8000d82:	f001 f8bb 	bl	8001efc <LCD_DisplayChar>
    LCD_DisplayChar(180, 15, '4');
 8000d86:	2234      	movs	r2, #52	@ 0x34
 8000d88:	210f      	movs	r1, #15
 8000d8a:	20b4      	movs	r0, #180	@ 0xb4
 8000d8c:	f001 f8b6 	bl	8001efc <LCD_DisplayChar>

    char score1 = (char)(player1_Score+48);
 8000d90:	4bcd      	ldr	r3, [pc, #820]	@ (80010c8 <Screen3_Display+0x3a4>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	3330      	adds	r3, #48	@ 0x30
 8000d96:	73fb      	strb	r3, [r7, #15]
	char score2 = (char)(player2_Score+48);
 8000d98:	4bcc      	ldr	r3, [pc, #816]	@ (80010cc <Screen3_Display+0x3a8>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	3330      	adds	r3, #48	@ 0x30
 8000d9e:	73bb      	strb	r3, [r7, #14]

    LCD_SetFont(&Font12x12);
 8000da0:	48cb      	ldr	r0, [pc, #812]	@ (80010d0 <Screen3_Display+0x3ac>)
 8000da2:	f001 f82d 	bl	8001e00 <LCD_SetFont>
	LCD_DisplayChar(20, 40, 'P');
 8000da6:	2250      	movs	r2, #80	@ 0x50
 8000da8:	2128      	movs	r1, #40	@ 0x28
 8000daa:	2014      	movs	r0, #20
 8000dac:	f001 f8a6 	bl	8001efc <LCD_DisplayChar>
    LCD_DisplayChar(30, 40, 'L');
 8000db0:	224c      	movs	r2, #76	@ 0x4c
 8000db2:	2128      	movs	r1, #40	@ 0x28
 8000db4:	201e      	movs	r0, #30
 8000db6:	f001 f8a1 	bl	8001efc <LCD_DisplayChar>
    LCD_DisplayChar(40, 40, 'A');
 8000dba:	2241      	movs	r2, #65	@ 0x41
 8000dbc:	2128      	movs	r1, #40	@ 0x28
 8000dbe:	2028      	movs	r0, #40	@ 0x28
 8000dc0:	f001 f89c 	bl	8001efc <LCD_DisplayChar>
    LCD_DisplayChar(50, 40, 'Y');
 8000dc4:	2259      	movs	r2, #89	@ 0x59
 8000dc6:	2128      	movs	r1, #40	@ 0x28
 8000dc8:	2032      	movs	r0, #50	@ 0x32
 8000dca:	f001 f897 	bl	8001efc <LCD_DisplayChar>
    LCD_DisplayChar(60, 40, 'E');
 8000dce:	2245      	movs	r2, #69	@ 0x45
 8000dd0:	2128      	movs	r1, #40	@ 0x28
 8000dd2:	203c      	movs	r0, #60	@ 0x3c
 8000dd4:	f001 f892 	bl	8001efc <LCD_DisplayChar>
    LCD_DisplayChar(70, 40, 'R');
 8000dd8:	2252      	movs	r2, #82	@ 0x52
 8000dda:	2128      	movs	r1, #40	@ 0x28
 8000ddc:	2046      	movs	r0, #70	@ 0x46
 8000dde:	f001 f88d 	bl	8001efc <LCD_DisplayChar>
    LCD_DisplayChar(85, 40, '1');
 8000de2:	2231      	movs	r2, #49	@ 0x31
 8000de4:	2128      	movs	r1, #40	@ 0x28
 8000de6:	2055      	movs	r0, #85	@ 0x55
 8000de8:	f001 f888 	bl	8001efc <LCD_DisplayChar>
    LCD_DisplayChar(25, 55, 'S');
 8000dec:	2253      	movs	r2, #83	@ 0x53
 8000dee:	2137      	movs	r1, #55	@ 0x37
 8000df0:	2019      	movs	r0, #25
 8000df2:	f001 f883 	bl	8001efc <LCD_DisplayChar>
    LCD_DisplayChar(35, 55, 'C');
 8000df6:	2243      	movs	r2, #67	@ 0x43
 8000df8:	2137      	movs	r1, #55	@ 0x37
 8000dfa:	2023      	movs	r0, #35	@ 0x23
 8000dfc:	f001 f87e 	bl	8001efc <LCD_DisplayChar>
    LCD_DisplayChar(45, 55, 'O');
 8000e00:	224f      	movs	r2, #79	@ 0x4f
 8000e02:	2137      	movs	r1, #55	@ 0x37
 8000e04:	202d      	movs	r0, #45	@ 0x2d
 8000e06:	f001 f879 	bl	8001efc <LCD_DisplayChar>
    LCD_DisplayChar(55, 55, 'R');
 8000e0a:	2252      	movs	r2, #82	@ 0x52
 8000e0c:	2137      	movs	r1, #55	@ 0x37
 8000e0e:	2037      	movs	r0, #55	@ 0x37
 8000e10:	f001 f874 	bl	8001efc <LCD_DisplayChar>
	LCD_DisplayChar(65, 55, 'E');
 8000e14:	2245      	movs	r2, #69	@ 0x45
 8000e16:	2137      	movs	r1, #55	@ 0x37
 8000e18:	2041      	movs	r0, #65	@ 0x41
 8000e1a:	f001 f86f 	bl	8001efc <LCD_DisplayChar>
	LCD_DisplayChar(75, 55, ':');
 8000e1e:	223a      	movs	r2, #58	@ 0x3a
 8000e20:	2137      	movs	r1, #55	@ 0x37
 8000e22:	204b      	movs	r0, #75	@ 0x4b
 8000e24:	f001 f86a 	bl	8001efc <LCD_DisplayChar>
	LCD_DisplayChar(85, 55, score1);
 8000e28:	7bfb      	ldrb	r3, [r7, #15]
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	2137      	movs	r1, #55	@ 0x37
 8000e2e:	2055      	movs	r0, #85	@ 0x55
 8000e30:	f001 f864 	bl	8001efc <LCD_DisplayChar>

    LCD_DisplayChar(140, 40, 'P');
 8000e34:	2250      	movs	r2, #80	@ 0x50
 8000e36:	2128      	movs	r1, #40	@ 0x28
 8000e38:	208c      	movs	r0, #140	@ 0x8c
 8000e3a:	f001 f85f 	bl	8001efc <LCD_DisplayChar>
    LCD_DisplayChar(150, 40, 'L');
 8000e3e:	224c      	movs	r2, #76	@ 0x4c
 8000e40:	2128      	movs	r1, #40	@ 0x28
 8000e42:	2096      	movs	r0, #150	@ 0x96
 8000e44:	f001 f85a 	bl	8001efc <LCD_DisplayChar>
    LCD_DisplayChar(160, 40, 'A');
 8000e48:	2241      	movs	r2, #65	@ 0x41
 8000e4a:	2128      	movs	r1, #40	@ 0x28
 8000e4c:	20a0      	movs	r0, #160	@ 0xa0
 8000e4e:	f001 f855 	bl	8001efc <LCD_DisplayChar>
    LCD_DisplayChar(170, 40, 'Y');
 8000e52:	2259      	movs	r2, #89	@ 0x59
 8000e54:	2128      	movs	r1, #40	@ 0x28
 8000e56:	20aa      	movs	r0, #170	@ 0xaa
 8000e58:	f001 f850 	bl	8001efc <LCD_DisplayChar>
    LCD_DisplayChar(180, 40, 'E');
 8000e5c:	2245      	movs	r2, #69	@ 0x45
 8000e5e:	2128      	movs	r1, #40	@ 0x28
 8000e60:	20b4      	movs	r0, #180	@ 0xb4
 8000e62:	f001 f84b 	bl	8001efc <LCD_DisplayChar>
    LCD_DisplayChar(190, 40, 'R');
 8000e66:	2252      	movs	r2, #82	@ 0x52
 8000e68:	2128      	movs	r1, #40	@ 0x28
 8000e6a:	20be      	movs	r0, #190	@ 0xbe
 8000e6c:	f001 f846 	bl	8001efc <LCD_DisplayChar>
    LCD_DisplayChar(205, 40, '2');
 8000e70:	2232      	movs	r2, #50	@ 0x32
 8000e72:	2128      	movs	r1, #40	@ 0x28
 8000e74:	20cd      	movs	r0, #205	@ 0xcd
 8000e76:	f001 f841 	bl	8001efc <LCD_DisplayChar>
    LCD_DisplayChar(145, 55, 'S');
 8000e7a:	2253      	movs	r2, #83	@ 0x53
 8000e7c:	2137      	movs	r1, #55	@ 0x37
 8000e7e:	2091      	movs	r0, #145	@ 0x91
 8000e80:	f001 f83c 	bl	8001efc <LCD_DisplayChar>
    LCD_DisplayChar(155, 55, 'C');
 8000e84:	2243      	movs	r2, #67	@ 0x43
 8000e86:	2137      	movs	r1, #55	@ 0x37
 8000e88:	209b      	movs	r0, #155	@ 0x9b
 8000e8a:	f001 f837 	bl	8001efc <LCD_DisplayChar>
    LCD_DisplayChar(165, 55, 'O');
 8000e8e:	224f      	movs	r2, #79	@ 0x4f
 8000e90:	2137      	movs	r1, #55	@ 0x37
 8000e92:	20a5      	movs	r0, #165	@ 0xa5
 8000e94:	f001 f832 	bl	8001efc <LCD_DisplayChar>
    LCD_DisplayChar(175, 55, 'R');
 8000e98:	2252      	movs	r2, #82	@ 0x52
 8000e9a:	2137      	movs	r1, #55	@ 0x37
 8000e9c:	20af      	movs	r0, #175	@ 0xaf
 8000e9e:	f001 f82d 	bl	8001efc <LCD_DisplayChar>
	LCD_DisplayChar(185, 55, 'E');
 8000ea2:	2245      	movs	r2, #69	@ 0x45
 8000ea4:	2137      	movs	r1, #55	@ 0x37
 8000ea6:	20b9      	movs	r0, #185	@ 0xb9
 8000ea8:	f001 f828 	bl	8001efc <LCD_DisplayChar>
	LCD_DisplayChar(195, 55, ':');
 8000eac:	223a      	movs	r2, #58	@ 0x3a
 8000eae:	2137      	movs	r1, #55	@ 0x37
 8000eb0:	20c3      	movs	r0, #195	@ 0xc3
 8000eb2:	f001 f823 	bl	8001efc <LCD_DisplayChar>
	LCD_DisplayChar(205, 55, score2);
 8000eb6:	7bbb      	ldrb	r3, [r7, #14]
 8000eb8:	461a      	mov	r2, r3
 8000eba:	2137      	movs	r1, #55	@ 0x37
 8000ebc:	20cd      	movs	r0, #205	@ 0xcd
 8000ebe:	f001 f81d 	bl	8001efc <LCD_DisplayChar>

	LCD_DisplayChar(40, 70, 'T');
 8000ec2:	2254      	movs	r2, #84	@ 0x54
 8000ec4:	2146      	movs	r1, #70	@ 0x46
 8000ec6:	2028      	movs	r0, #40	@ 0x28
 8000ec8:	f001 f818 	bl	8001efc <LCD_DisplayChar>
	LCD_DisplayChar(50, 70, 'I');
 8000ecc:	2249      	movs	r2, #73	@ 0x49
 8000ece:	2146      	movs	r1, #70	@ 0x46
 8000ed0:	2032      	movs	r0, #50	@ 0x32
 8000ed2:	f001 f813 	bl	8001efc <LCD_DisplayChar>
	LCD_DisplayChar(55, 70, 'M');
 8000ed6:	224d      	movs	r2, #77	@ 0x4d
 8000ed8:	2146      	movs	r1, #70	@ 0x46
 8000eda:	2037      	movs	r0, #55	@ 0x37
 8000edc:	f001 f80e 	bl	8001efc <LCD_DisplayChar>
	LCD_DisplayChar(65, 70, 'E');
 8000ee0:	2245      	movs	r2, #69	@ 0x45
 8000ee2:	2146      	movs	r1, #70	@ 0x46
 8000ee4:	2041      	movs	r0, #65	@ 0x41
 8000ee6:	f001 f809 	bl	8001efc <LCD_DisplayChar>
	LCD_DisplayChar(80, 70, 'P');
 8000eea:	2250      	movs	r2, #80	@ 0x50
 8000eec:	2146      	movs	r1, #70	@ 0x46
 8000eee:	2050      	movs	r0, #80	@ 0x50
 8000ef0:	f001 f804 	bl	8001efc <LCD_DisplayChar>
	LCD_DisplayChar(90, 70, 'L');
 8000ef4:	224c      	movs	r2, #76	@ 0x4c
 8000ef6:	2146      	movs	r1, #70	@ 0x46
 8000ef8:	205a      	movs	r0, #90	@ 0x5a
 8000efa:	f000 ffff 	bl	8001efc <LCD_DisplayChar>
	LCD_DisplayChar(100, 70, 'A');
 8000efe:	2241      	movs	r2, #65	@ 0x41
 8000f00:	2146      	movs	r1, #70	@ 0x46
 8000f02:	2064      	movs	r0, #100	@ 0x64
 8000f04:	f000 fffa 	bl	8001efc <LCD_DisplayChar>
	LCD_DisplayChar(110, 70, 'Y');
 8000f08:	2259      	movs	r2, #89	@ 0x59
 8000f0a:	2146      	movs	r1, #70	@ 0x46
 8000f0c:	206e      	movs	r0, #110	@ 0x6e
 8000f0e:	f000 fff5 	bl	8001efc <LCD_DisplayChar>
	LCD_DisplayChar(120, 70, 'E');
 8000f12:	2245      	movs	r2, #69	@ 0x45
 8000f14:	2146      	movs	r1, #70	@ 0x46
 8000f16:	2078      	movs	r0, #120	@ 0x78
 8000f18:	f000 fff0 	bl	8001efc <LCD_DisplayChar>
	LCD_DisplayChar(130, 70, 'D');
 8000f1c:	2244      	movs	r2, #68	@ 0x44
 8000f1e:	2146      	movs	r1, #70	@ 0x46
 8000f20:	2082      	movs	r0, #130	@ 0x82
 8000f22:	f000 ffeb 	bl	8001efc <LCD_DisplayChar>

	uint32_t seconds = timePlayed/1000;
 8000f26:	4b6b      	ldr	r3, [pc, #428]	@ (80010d4 <Screen3_Display+0x3b0>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a6b      	ldr	r2, [pc, #428]	@ (80010d8 <Screen3_Display+0x3b4>)
 8000f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8000f30:	099b      	lsrs	r3, r3, #6
 8000f32:	60bb      	str	r3, [r7, #8]
	uint32_t minutes = seconds/60;
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	4a69      	ldr	r2, [pc, #420]	@ (80010dc <Screen3_Display+0x3b8>)
 8000f38:	fba2 2303 	umull	r2, r3, r2, r3
 8000f3c:	095b      	lsrs	r3, r3, #5
 8000f3e:	607b      	str	r3, [r7, #4]
	seconds = seconds-(minutes*60);
 8000f40:	687a      	ldr	r2, [r7, #4]
 8000f42:	4613      	mov	r3, r2
 8000f44:	011b      	lsls	r3, r3, #4
 8000f46:	1a9b      	subs	r3, r3, r2
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	1a9b      	subs	r3, r3, r2
 8000f50:	60bb      	str	r3, [r7, #8]
	char msb_min = (char)((minutes/10)+48);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a62      	ldr	r2, [pc, #392]	@ (80010e0 <Screen3_Display+0x3bc>)
 8000f56:	fba2 2303 	umull	r2, r3, r2, r3
 8000f5a:	08db      	lsrs	r3, r3, #3
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	3330      	adds	r3, #48	@ 0x30
 8000f60:	70fb      	strb	r3, [r7, #3]
	char lsb_min = (char)((minutes-((minutes/10)*10))+48);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	b2da      	uxtb	r2, r3
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	495d      	ldr	r1, [pc, #372]	@ (80010e0 <Screen3_Display+0x3bc>)
 8000f6a:	fba1 1303 	umull	r1, r3, r1, r3
 8000f6e:	08db      	lsrs	r3, r3, #3
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	4619      	mov	r1, r3
 8000f74:	0089      	lsls	r1, r1, #2
 8000f76:	440b      	add	r3, r1
 8000f78:	005b      	lsls	r3, r3, #1
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	1ad3      	subs	r3, r2, r3
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	3330      	adds	r3, #48	@ 0x30
 8000f82:	70bb      	strb	r3, [r7, #2]
	char msb_sec = (char)((seconds/10)+48);
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	4a56      	ldr	r2, [pc, #344]	@ (80010e0 <Screen3_Display+0x3bc>)
 8000f88:	fba2 2303 	umull	r2, r3, r2, r3
 8000f8c:	08db      	lsrs	r3, r3, #3
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	3330      	adds	r3, #48	@ 0x30
 8000f92:	707b      	strb	r3, [r7, #1]
	char lsb_sec = (char)((seconds-((seconds/10)*10))+48);
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	b2da      	uxtb	r2, r3
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	4951      	ldr	r1, [pc, #324]	@ (80010e0 <Screen3_Display+0x3bc>)
 8000f9c:	fba1 1303 	umull	r1, r3, r1, r3
 8000fa0:	08db      	lsrs	r3, r3, #3
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	0089      	lsls	r1, r1, #2
 8000fa8:	440b      	add	r3, r1
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	1ad3      	subs	r3, r2, r3
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	3330      	adds	r3, #48	@ 0x30
 8000fb4:	703b      	strb	r3, [r7, #0]
	LCD_DisplayChar(150, 70, msb_min);
 8000fb6:	78fb      	ldrb	r3, [r7, #3]
 8000fb8:	461a      	mov	r2, r3
 8000fba:	2146      	movs	r1, #70	@ 0x46
 8000fbc:	2096      	movs	r0, #150	@ 0x96
 8000fbe:	f000 ff9d 	bl	8001efc <LCD_DisplayChar>
	LCD_DisplayChar(160, 70, lsb_min);
 8000fc2:	78bb      	ldrb	r3, [r7, #2]
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	2146      	movs	r1, #70	@ 0x46
 8000fc8:	20a0      	movs	r0, #160	@ 0xa0
 8000fca:	f000 ff97 	bl	8001efc <LCD_DisplayChar>
	LCD_DisplayChar(167, 70, ':');
 8000fce:	223a      	movs	r2, #58	@ 0x3a
 8000fd0:	2146      	movs	r1, #70	@ 0x46
 8000fd2:	20a7      	movs	r0, #167	@ 0xa7
 8000fd4:	f000 ff92 	bl	8001efc <LCD_DisplayChar>
	LCD_DisplayChar(170, 70, msb_sec);
 8000fd8:	787b      	ldrb	r3, [r7, #1]
 8000fda:	461a      	mov	r2, r3
 8000fdc:	2146      	movs	r1, #70	@ 0x46
 8000fde:	20aa      	movs	r0, #170	@ 0xaa
 8000fe0:	f000 ff8c 	bl	8001efc <LCD_DisplayChar>
	LCD_DisplayChar(180, 70, lsb_sec);
 8000fe4:	783b      	ldrb	r3, [r7, #0]
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	2146      	movs	r1, #70	@ 0x46
 8000fea:	20b4      	movs	r0, #180	@ 0xb4
 8000fec:	f000 ff86 	bl	8001efc <LCD_DisplayChar>
    
    LCD_DisplayChar(15, 85, 'P');
 8000ff0:	2250      	movs	r2, #80	@ 0x50
 8000ff2:	2155      	movs	r1, #85	@ 0x55
 8000ff4:	200f      	movs	r0, #15
 8000ff6:	f000 ff81 	bl	8001efc <LCD_DisplayChar>
	LCD_DisplayChar(25, 85, 'R');
 8000ffa:	2252      	movs	r2, #82	@ 0x52
 8000ffc:	2155      	movs	r1, #85	@ 0x55
 8000ffe:	2019      	movs	r0, #25
 8001000:	f000 ff7c 	bl	8001efc <LCD_DisplayChar>
	LCD_DisplayChar(35, 85, 'E');
 8001004:	2245      	movs	r2, #69	@ 0x45
 8001006:	2155      	movs	r1, #85	@ 0x55
 8001008:	2023      	movs	r0, #35	@ 0x23
 800100a:	f000 ff77 	bl	8001efc <LCD_DisplayChar>
	LCD_DisplayChar(45, 85, 'S');
 800100e:	2253      	movs	r2, #83	@ 0x53
 8001010:	2155      	movs	r1, #85	@ 0x55
 8001012:	202d      	movs	r0, #45	@ 0x2d
 8001014:	f000 ff72 	bl	8001efc <LCD_DisplayChar>
	LCD_DisplayChar(55, 85, 'S');
 8001018:	2253      	movs	r2, #83	@ 0x53
 800101a:	2155      	movs	r1, #85	@ 0x55
 800101c:	2037      	movs	r0, #55	@ 0x37
 800101e:	f000 ff6d 	bl	8001efc <LCD_DisplayChar>
	LCD_DisplayChar(70, 85, 'B');
 8001022:	2242      	movs	r2, #66	@ 0x42
 8001024:	2155      	movs	r1, #85	@ 0x55
 8001026:	2046      	movs	r0, #70	@ 0x46
 8001028:	f000 ff68 	bl	8001efc <LCD_DisplayChar>
	LCD_DisplayChar(80, 85, 'U');
 800102c:	2255      	movs	r2, #85	@ 0x55
 800102e:	2155      	movs	r1, #85	@ 0x55
 8001030:	2050      	movs	r0, #80	@ 0x50
 8001032:	f000 ff63 	bl	8001efc <LCD_DisplayChar>
	LCD_DisplayChar(90, 85, 'T');
 8001036:	2254      	movs	r2, #84	@ 0x54
 8001038:	2155      	movs	r1, #85	@ 0x55
 800103a:	205a      	movs	r0, #90	@ 0x5a
 800103c:	f000 ff5e 	bl	8001efc <LCD_DisplayChar>
	LCD_DisplayChar(100, 85, 'T');
 8001040:	2254      	movs	r2, #84	@ 0x54
 8001042:	2155      	movs	r1, #85	@ 0x55
 8001044:	2064      	movs	r0, #100	@ 0x64
 8001046:	f000 ff59 	bl	8001efc <LCD_DisplayChar>
	LCD_DisplayChar(110, 85, 'O');
 800104a:	224f      	movs	r2, #79	@ 0x4f
 800104c:	2155      	movs	r1, #85	@ 0x55
 800104e:	206e      	movs	r0, #110	@ 0x6e
 8001050:	f000 ff54 	bl	8001efc <LCD_DisplayChar>
    LCD_DisplayChar(120, 85, 'N');
 8001054:	224e      	movs	r2, #78	@ 0x4e
 8001056:	2155      	movs	r1, #85	@ 0x55
 8001058:	2078      	movs	r0, #120	@ 0x78
 800105a:	f000 ff4f 	bl	8001efc <LCD_DisplayChar>
    LCD_DisplayChar(135, 85, 'T');
 800105e:	2254      	movs	r2, #84	@ 0x54
 8001060:	2155      	movs	r1, #85	@ 0x55
 8001062:	2087      	movs	r0, #135	@ 0x87
 8001064:	f000 ff4a 	bl	8001efc <LCD_DisplayChar>
    LCD_DisplayChar(145, 85, 'O');
 8001068:	224f      	movs	r2, #79	@ 0x4f
 800106a:	2155      	movs	r1, #85	@ 0x55
 800106c:	2091      	movs	r0, #145	@ 0x91
 800106e:	f000 ff45 	bl	8001efc <LCD_DisplayChar>
    LCD_DisplayChar(160, 85, 'R');
 8001072:	2252      	movs	r2, #82	@ 0x52
 8001074:	2155      	movs	r1, #85	@ 0x55
 8001076:	20a0      	movs	r0, #160	@ 0xa0
 8001078:	f000 ff40 	bl	8001efc <LCD_DisplayChar>
    LCD_DisplayChar(170, 85, 'E');
 800107c:	2245      	movs	r2, #69	@ 0x45
 800107e:	2155      	movs	r1, #85	@ 0x55
 8001080:	20aa      	movs	r0, #170	@ 0xaa
 8001082:	f000 ff3b 	bl	8001efc <LCD_DisplayChar>
    LCD_DisplayChar(180, 85, 'S');
 8001086:	2253      	movs	r2, #83	@ 0x53
 8001088:	2155      	movs	r1, #85	@ 0x55
 800108a:	20b4      	movs	r0, #180	@ 0xb4
 800108c:	f000 ff36 	bl	8001efc <LCD_DisplayChar>
    LCD_DisplayChar(190, 85, 'T');
 8001090:	2254      	movs	r2, #84	@ 0x54
 8001092:	2155      	movs	r1, #85	@ 0x55
 8001094:	20be      	movs	r0, #190	@ 0xbe
 8001096:	f000 ff31 	bl	8001efc <LCD_DisplayChar>
    LCD_DisplayChar(200, 85, 'A');
 800109a:	2241      	movs	r2, #65	@ 0x41
 800109c:	2155      	movs	r1, #85	@ 0x55
 800109e:	20c8      	movs	r0, #200	@ 0xc8
 80010a0:	f000 ff2c 	bl	8001efc <LCD_DisplayChar>
    LCD_DisplayChar(210, 85, 'R');
 80010a4:	2252      	movs	r2, #82	@ 0x52
 80010a6:	2155      	movs	r1, #85	@ 0x55
 80010a8:	20d2      	movs	r0, #210	@ 0xd2
 80010aa:	f000 ff27 	bl	8001efc <LCD_DisplayChar>
    LCD_DisplayChar(220, 85, 'T');
 80010ae:	2254      	movs	r2, #84	@ 0x54
 80010b0:	2155      	movs	r1, #85	@ 0x55
 80010b2:	20dc      	movs	r0, #220	@ 0xdc
 80010b4:	f000 ff22 	bl	8001efc <LCD_DisplayChar>

    for (int i = 0; i<boardColumns; i++){
 80010b8:	2300      	movs	r3, #0
 80010ba:	617b      	str	r3, [r7, #20]
 80010bc:	e075      	b.n	80011aa <Screen3_Display+0x486>
        for (int j = 0; j<boardRows; j++){
 80010be:	2300      	movs	r3, #0
 80010c0:	613b      	str	r3, [r7, #16]
 80010c2:	e06c      	b.n	800119e <Screen3_Display+0x47a>
 80010c4:	20000008 	.word	0x20000008
 80010c8:	20000045 	.word	0x20000045
 80010cc:	20000046 	.word	0x20000046
 80010d0:	20000010 	.word	0x20000010
 80010d4:	20000050 	.word	0x20000050
 80010d8:	10624dd3 	.word	0x10624dd3
 80010dc:	88888889 	.word	0x88888889
 80010e0:	cccccccd 	.word	0xcccccccd
            if (gameBoard[i][j] == 1){
 80010e4:	4938      	ldr	r1, [pc, #224]	@ (80011c8 <Screen3_Display+0x4a4>)
 80010e6:	697a      	ldr	r2, [r7, #20]
 80010e8:	4613      	mov	r3, r2
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	4413      	add	r3, r2
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	18ca      	adds	r2, r1, r3
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	4413      	add	r3, r2
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d115      	bne.n	8001128 <Screen3_Display+0x404>
                LCD_Draw_Circle_Fill((i*30)+30, (j*30)+115, 12, LCD_COLOR_BLUE);
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	3301      	adds	r3, #1
 8001100:	b29b      	uxth	r3, r3
 8001102:	461a      	mov	r2, r3
 8001104:	0112      	lsls	r2, r2, #4
 8001106:	1ad3      	subs	r3, r2, r3
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	b298      	uxth	r0, r3
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	b29b      	uxth	r3, r3
 8001110:	461a      	mov	r2, r3
 8001112:	0112      	lsls	r2, r2, #4
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	b29b      	uxth	r3, r3
 800111a:	3373      	adds	r3, #115	@ 0x73
 800111c:	b299      	uxth	r1, r3
 800111e:	231f      	movs	r3, #31
 8001120:	220c      	movs	r2, #12
 8001122:	f000 fde7 	bl	8001cf4 <LCD_Draw_Circle_Fill>
 8001126:	e037      	b.n	8001198 <Screen3_Display+0x474>
            }
            else if (gameBoard[i][j] == 2){
 8001128:	4927      	ldr	r1, [pc, #156]	@ (80011c8 <Screen3_Display+0x4a4>)
 800112a:	697a      	ldr	r2, [r7, #20]
 800112c:	4613      	mov	r3, r2
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	4413      	add	r3, r2
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	18ca      	adds	r2, r1, r3
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	4413      	add	r3, r2
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	2b02      	cmp	r3, #2
 800113e:	d116      	bne.n	800116e <Screen3_Display+0x44a>
                LCD_Draw_Circle_Fill((i*30)+30, (j*30)+115, 12, LCD_COLOR_RED);
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	3301      	adds	r3, #1
 8001144:	b29b      	uxth	r3, r3
 8001146:	461a      	mov	r2, r3
 8001148:	0112      	lsls	r2, r2, #4
 800114a:	1ad3      	subs	r3, r2, r3
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	b298      	uxth	r0, r3
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	b29b      	uxth	r3, r3
 8001154:	461a      	mov	r2, r3
 8001156:	0112      	lsls	r2, r2, #4
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	b29b      	uxth	r3, r3
 800115e:	3373      	adds	r3, #115	@ 0x73
 8001160:	b299      	uxth	r1, r3
 8001162:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001166:	220c      	movs	r2, #12
 8001168:	f000 fdc4 	bl	8001cf4 <LCD_Draw_Circle_Fill>
 800116c:	e014      	b.n	8001198 <Screen3_Display+0x474>
            }
            else{
                LCD_Draw_Circle_Fill((i*30)+30, (j*30)+115, 12, LCD_COLOR_BLACK);
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	3301      	adds	r3, #1
 8001172:	b29b      	uxth	r3, r3
 8001174:	461a      	mov	r2, r3
 8001176:	0112      	lsls	r2, r2, #4
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	b298      	uxth	r0, r3
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	b29b      	uxth	r3, r3
 8001182:	461a      	mov	r2, r3
 8001184:	0112      	lsls	r2, r2, #4
 8001186:	1ad3      	subs	r3, r2, r3
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	b29b      	uxth	r3, r3
 800118c:	3373      	adds	r3, #115	@ 0x73
 800118e:	b299      	uxth	r1, r3
 8001190:	2300      	movs	r3, #0
 8001192:	220c      	movs	r2, #12
 8001194:	f000 fdae 	bl	8001cf4 <LCD_Draw_Circle_Fill>
        for (int j = 0; j<boardRows; j++){
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	3301      	adds	r3, #1
 800119c:	613b      	str	r3, [r7, #16]
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	2b05      	cmp	r3, #5
 80011a2:	dd9f      	ble.n	80010e4 <Screen3_Display+0x3c0>
    for (int i = 0; i<boardColumns; i++){
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	3301      	adds	r3, #1
 80011a8:	617b      	str	r3, [r7, #20]
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	2b06      	cmp	r3, #6
 80011ae:	dd86      	ble.n	80010be <Screen3_Display+0x39a>
            }
        }
    }
    while (winner != 0);
 80011b0:	bf00      	nop
 80011b2:	4b06      	ldr	r3, [pc, #24]	@ (80011cc <Screen3_Display+0x4a8>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d1fb      	bne.n	80011b2 <Screen3_Display+0x48e>
    playGame();
 80011ba:	f7ff f9dd 	bl	8000578 <playGame>
}
 80011be:	bf00      	nop
 80011c0:	3718      	adds	r7, #24
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	20000058 	.word	0x20000058
 80011cc:	20000044 	.word	0x20000044

080011d0 <moveAI>:

uint8_t moveAI(){
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b086      	sub	sp, #24
 80011d4:	af00      	add	r7, sp, #0
	uint8_t playerChecking =0;
 80011d6:	2300      	movs	r3, #0
 80011d8:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i< boardColumns; i++){
 80011da:	2300      	movs	r3, #0
 80011dc:	617b      	str	r3, [r7, #20]
 80011de:	e02e      	b.n	800123e <moveAI+0x6e>
        for (int j = 0; j < boardRows; j++){
 80011e0:	2300      	movs	r3, #0
 80011e2:	613b      	str	r3, [r7, #16]
 80011e4:	e025      	b.n	8001232 <moveAI+0x62>
            playerChecking = gameBoard[i][j];
 80011e6:	4934      	ldr	r1, [pc, #208]	@ (80012b8 <moveAI+0xe8>)
 80011e8:	697a      	ldr	r2, [r7, #20]
 80011ea:	4613      	mov	r3, r2
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	4413      	add	r3, r2
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	18ca      	adds	r2, r1, r3
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	4413      	add	r3, r2
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	71fb      	strb	r3, [r7, #7]
            if (playerChecking != 0){
 80011fc:	79fb      	ldrb	r3, [r7, #7]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d014      	beq.n	800122c <moveAI+0x5c>
                if(WinOrBlock(i, j)<8){
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	b2db      	uxtb	r3, r3
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	b2d2      	uxtb	r2, r2
 800120a:	4611      	mov	r1, r2
 800120c:	4618      	mov	r0, r3
 800120e:	f000 f855 	bl	80012bc <WinOrBlock>
 8001212:	4603      	mov	r3, r0
 8001214:	2b07      	cmp	r3, #7
 8001216:	d809      	bhi.n	800122c <moveAI+0x5c>
                    return WinOrBlock(i, j);
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	b2db      	uxtb	r3, r3
 800121c:	693a      	ldr	r2, [r7, #16]
 800121e:	b2d2      	uxtb	r2, r2
 8001220:	4611      	mov	r1, r2
 8001222:	4618      	mov	r0, r3
 8001224:	f000 f84a 	bl	80012bc <WinOrBlock>
 8001228:	4603      	mov	r3, r0
 800122a:	e041      	b.n	80012b0 <moveAI+0xe0>
        for (int j = 0; j < boardRows; j++){
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	3301      	adds	r3, #1
 8001230:	613b      	str	r3, [r7, #16]
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	2b05      	cmp	r3, #5
 8001236:	ddd6      	ble.n	80011e6 <moveAI+0x16>
	for (int i = 0; i< boardColumns; i++){
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	3301      	adds	r3, #1
 800123c:	617b      	str	r3, [r7, #20]
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	2b06      	cmp	r3, #6
 8001242:	ddcd      	ble.n	80011e0 <moveAI+0x10>
                }
            }
        }
    }
	for (int i = 0; i< boardColumns; i++){
 8001244:	2300      	movs	r3, #0
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	e02e      	b.n	80012a8 <moveAI+0xd8>
        for (int j = 0; j < boardRows; j++){
 800124a:	2300      	movs	r3, #0
 800124c:	60bb      	str	r3, [r7, #8]
 800124e:	e025      	b.n	800129c <moveAI+0xcc>
            playerChecking = gameBoard[i][j];
 8001250:	4919      	ldr	r1, [pc, #100]	@ (80012b8 <moveAI+0xe8>)
 8001252:	68fa      	ldr	r2, [r7, #12]
 8001254:	4613      	mov	r3, r2
 8001256:	005b      	lsls	r3, r3, #1
 8001258:	4413      	add	r3, r2
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	18ca      	adds	r2, r1, r3
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	4413      	add	r3, r2
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	71fb      	strb	r3, [r7, #7]
            if (playerChecking != 0){
 8001266:	79fb      	ldrb	r3, [r7, #7]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d014      	beq.n	8001296 <moveAI+0xc6>
				if(twoAway(i, j)<8){
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	b2db      	uxtb	r3, r3
 8001270:	68ba      	ldr	r2, [r7, #8]
 8001272:	b2d2      	uxtb	r2, r2
 8001274:	4611      	mov	r1, r2
 8001276:	4618      	mov	r0, r3
 8001278:	f000 f8f8 	bl	800146c <twoAway>
 800127c:	4603      	mov	r3, r0
 800127e:	2b07      	cmp	r3, #7
 8001280:	d809      	bhi.n	8001296 <moveAI+0xc6>
					return twoAway(i, j);
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	b2db      	uxtb	r3, r3
 8001286:	68ba      	ldr	r2, [r7, #8]
 8001288:	b2d2      	uxtb	r2, r2
 800128a:	4611      	mov	r1, r2
 800128c:	4618      	mov	r0, r3
 800128e:	f000 f8ed 	bl	800146c <twoAway>
 8001292:	4603      	mov	r3, r0
 8001294:	e00c      	b.n	80012b0 <moveAI+0xe0>
        for (int j = 0; j < boardRows; j++){
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	3301      	adds	r3, #1
 800129a:	60bb      	str	r3, [r7, #8]
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	2b05      	cmp	r3, #5
 80012a0:	ddd6      	ble.n	8001250 <moveAI+0x80>
	for (int i = 0; i< boardColumns; i++){
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	3301      	adds	r3, #1
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	2b06      	cmp	r3, #6
 80012ac:	ddcd      	ble.n	800124a <moveAI+0x7a>
				}
            }
        }
    }
	return 3;
 80012ae:	2303      	movs	r3, #3
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3718      	adds	r7, #24
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	20000058 	.word	0x20000058

080012bc <WinOrBlock>:

uint8_t WinOrBlock(uint8_t i, uint8_t j){
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	4603      	mov	r3, r0
 80012c4:	460a      	mov	r2, r1
 80012c6:	71fb      	strb	r3, [r7, #7]
 80012c8:	4613      	mov	r3, r2
 80012ca:	71bb      	strb	r3, [r7, #6]
	if(CheckWinningMove(i, j, 1, 0)<8){
 80012cc:	79f8      	ldrb	r0, [r7, #7]
 80012ce:	79b9      	ldrb	r1, [r7, #6]
 80012d0:	2300      	movs	r3, #0
 80012d2:	2201      	movs	r2, #1
 80012d4:	f000 f844 	bl	8001360 <CheckWinningMove>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b07      	cmp	r3, #7
 80012dc:	d807      	bhi.n	80012ee <WinOrBlock+0x32>
		return CheckWinningMove(i, j, 1, 0);
 80012de:	79f8      	ldrb	r0, [r7, #7]
 80012e0:	79b9      	ldrb	r1, [r7, #6]
 80012e2:	2300      	movs	r3, #0
 80012e4:	2201      	movs	r2, #1
 80012e6:	f000 f83b 	bl	8001360 <CheckWinningMove>
 80012ea:	4603      	mov	r3, r0
 80012ec:	e034      	b.n	8001358 <WinOrBlock+0x9c>
	}
	if(CheckWinningMove(i, j, 0, 1)<8){
 80012ee:	79f8      	ldrb	r0, [r7, #7]
 80012f0:	79b9      	ldrb	r1, [r7, #6]
 80012f2:	2301      	movs	r3, #1
 80012f4:	2200      	movs	r2, #0
 80012f6:	f000 f833 	bl	8001360 <CheckWinningMove>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b07      	cmp	r3, #7
 80012fe:	d807      	bhi.n	8001310 <WinOrBlock+0x54>
		return CheckWinningMove(i, j, 0, 1);
 8001300:	79f8      	ldrb	r0, [r7, #7]
 8001302:	79b9      	ldrb	r1, [r7, #6]
 8001304:	2301      	movs	r3, #1
 8001306:	2200      	movs	r2, #0
 8001308:	f000 f82a 	bl	8001360 <CheckWinningMove>
 800130c:	4603      	mov	r3, r0
 800130e:	e023      	b.n	8001358 <WinOrBlock+0x9c>
	}
	if(CheckWinningMove(i, j, 1, 1)<8){
 8001310:	79f8      	ldrb	r0, [r7, #7]
 8001312:	79b9      	ldrb	r1, [r7, #6]
 8001314:	2301      	movs	r3, #1
 8001316:	2201      	movs	r2, #1
 8001318:	f000 f822 	bl	8001360 <CheckWinningMove>
 800131c:	4603      	mov	r3, r0
 800131e:	2b07      	cmp	r3, #7
 8001320:	d807      	bhi.n	8001332 <WinOrBlock+0x76>
		return CheckWinningMove(i, j, 1, 1);
 8001322:	79f8      	ldrb	r0, [r7, #7]
 8001324:	79b9      	ldrb	r1, [r7, #6]
 8001326:	2301      	movs	r3, #1
 8001328:	2201      	movs	r2, #1
 800132a:	f000 f819 	bl	8001360 <CheckWinningMove>
 800132e:	4603      	mov	r3, r0
 8001330:	e012      	b.n	8001358 <WinOrBlock+0x9c>
	}
	if(CheckWinningMove(i, j, 1, -1)){
 8001332:	79f8      	ldrb	r0, [r7, #7]
 8001334:	79b9      	ldrb	r1, [r7, #6]
 8001336:	f04f 33ff 	mov.w	r3, #4294967295
 800133a:	2201      	movs	r2, #1
 800133c:	f000 f810 	bl	8001360 <CheckWinningMove>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d007      	beq.n	8001356 <WinOrBlock+0x9a>
		return CheckWinningMove(i, j, 1, 0);
 8001346:	79f8      	ldrb	r0, [r7, #7]
 8001348:	79b9      	ldrb	r1, [r7, #6]
 800134a:	2300      	movs	r3, #0
 800134c:	2201      	movs	r2, #1
 800134e:	f000 f807 	bl	8001360 <CheckWinningMove>
 8001352:	4603      	mov	r3, r0
 8001354:	e000      	b.n	8001358 <WinOrBlock+0x9c>
	}
	return 8;
 8001356:	2308      	movs	r3, #8
}
 8001358:	4618      	mov	r0, r3
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}

08001360 <CheckWinningMove>:

uint8_t CheckWinningMove(int i, int j, int dir_i, int dir_j){
 8001360:	b490      	push	{r4, r7}
 8001362:	b086      	sub	sp, #24
 8001364:	af00      	add	r7, sp, #0
 8001366:	60f8      	str	r0, [r7, #12]
 8001368:	60b9      	str	r1, [r7, #8]
 800136a:	607a      	str	r2, [r7, #4]
 800136c:	603b      	str	r3, [r7, #0]
    for (int k = 1; k < 3; k++){
 800136e:	2301      	movs	r3, #1
 8001370:	617b      	str	r3, [r7, #20]
 8001372:	e048      	b.n	8001406 <CheckWinningMove+0xa6>
        if ((i+dir_i*k)>boardColumns || (i+dir_i*k)<0){
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	697a      	ldr	r2, [r7, #20]
 8001378:	fb03 f202 	mul.w	r2, r3, r2
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	4413      	add	r3, r2
 8001380:	2b07      	cmp	r3, #7
 8001382:	dc07      	bgt.n	8001394 <CheckWinningMove+0x34>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	697a      	ldr	r2, [r7, #20]
 8001388:	fb03 f202 	mul.w	r2, r3, r2
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	4413      	add	r3, r2
 8001390:	2b00      	cmp	r3, #0
 8001392:	da01      	bge.n	8001398 <CheckWinningMove+0x38>
            return 8;
 8001394:	2308      	movs	r3, #8
 8001396:	e061      	b.n	800145c <CheckWinningMove+0xfc>
        }
        if ((j+dir_j*k)>boardRows || (j+dir_j*k)<0){
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	697a      	ldr	r2, [r7, #20]
 800139c:	fb03 f202 	mul.w	r2, r3, r2
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	4413      	add	r3, r2
 80013a4:	2b06      	cmp	r3, #6
 80013a6:	dc07      	bgt.n	80013b8 <CheckWinningMove+0x58>
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	697a      	ldr	r2, [r7, #20]
 80013ac:	fb03 f202 	mul.w	r2, r3, r2
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	4413      	add	r3, r2
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	da01      	bge.n	80013bc <CheckWinningMove+0x5c>
            return 8;
 80013b8:	2308      	movs	r3, #8
 80013ba:	e04f      	b.n	800145c <CheckWinningMove+0xfc>
        }
        if (gameBoard[i][j] != gameBoard[i+dir_i*k][j+dir_j*k]){
 80013bc:	492a      	ldr	r1, [pc, #168]	@ (8001468 <CheckWinningMove+0x108>)
 80013be:	68fa      	ldr	r2, [r7, #12]
 80013c0:	4613      	mov	r3, r2
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	4413      	add	r3, r2
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	18ca      	adds	r2, r1, r3
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	4413      	add	r3, r2
 80013ce:	7819      	ldrb	r1, [r3, #0]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	697a      	ldr	r2, [r7, #20]
 80013d4:	fb03 f202 	mul.w	r2, r3, r2
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	441a      	add	r2, r3
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	6978      	ldr	r0, [r7, #20]
 80013e0:	fb03 f000 	mul.w	r0, r3, r0
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	4418      	add	r0, r3
 80013e8:	4c1f      	ldr	r4, [pc, #124]	@ (8001468 <CheckWinningMove+0x108>)
 80013ea:	4613      	mov	r3, r2
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	4413      	add	r3, r2
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	4423      	add	r3, r4
 80013f4:	4403      	add	r3, r0
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	4299      	cmp	r1, r3
 80013fa:	d001      	beq.n	8001400 <CheckWinningMove+0xa0>
            return 8;
 80013fc:	2308      	movs	r3, #8
 80013fe:	e02d      	b.n	800145c <CheckWinningMove+0xfc>
    for (int k = 1; k < 3; k++){
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	3301      	adds	r3, #1
 8001404:	617b      	str	r3, [r7, #20]
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	2b02      	cmp	r3, #2
 800140a:	ddb3      	ble.n	8001374 <CheckWinningMove+0x14>
        }
    }
	if((i+dir_i*4)>boardColumns || (j+dir_j*4)>boardRows || gameBoard[i+dir_i*4][j+dir_j*4] != 0){
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	009a      	lsls	r2, r3, #2
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	4413      	add	r3, r2
 8001414:	2b07      	cmp	r3, #7
 8001416:	dc17      	bgt.n	8001448 <CheckWinningMove+0xe8>
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	009a      	lsls	r2, r3, #2
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	4413      	add	r3, r2
 8001420:	2b06      	cmp	r3, #6
 8001422:	dc11      	bgt.n	8001448 <CheckWinningMove+0xe8>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	009a      	lsls	r2, r3, #2
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	441a      	add	r2, r3
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	0099      	lsls	r1, r3, #2
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	4419      	add	r1, r3
 8001434:	480c      	ldr	r0, [pc, #48]	@ (8001468 <CheckWinningMove+0x108>)
 8001436:	4613      	mov	r3, r2
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	4413      	add	r3, r2
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	4403      	add	r3, r0
 8001440:	440b      	add	r3, r1
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <CheckWinningMove+0xec>
		return 8;
 8001448:	2308      	movs	r3, #8
 800144a:	e007      	b.n	800145c <CheckWinningMove+0xfc>
	}
    return i+dir_i*4;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	b2db      	uxtb	r3, r3
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	b2da      	uxtb	r2, r3
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	b2db      	uxtb	r3, r3
 8001458:	4413      	add	r3, r2
 800145a:	b2db      	uxtb	r3, r3

}
 800145c:	4618      	mov	r0, r3
 800145e:	3718      	adds	r7, #24
 8001460:	46bd      	mov	sp, r7
 8001462:	bc90      	pop	{r4, r7}
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	20000058 	.word	0x20000058

0800146c <twoAway>:

uint8_t twoAway(uint8_t i, uint8_t j){
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	4603      	mov	r3, r0
 8001474:	460a      	mov	r2, r1
 8001476:	71fb      	strb	r3, [r7, #7]
 8001478:	4613      	mov	r3, r2
 800147a:	71bb      	strb	r3, [r7, #6]
	if(CheckTwoAway(i, j, 1, 0)<8){
 800147c:	79f8      	ldrb	r0, [r7, #7]
 800147e:	79b9      	ldrb	r1, [r7, #6]
 8001480:	2300      	movs	r3, #0
 8001482:	2201      	movs	r2, #1
 8001484:	f000 f844 	bl	8001510 <CheckTwoAway>
 8001488:	4603      	mov	r3, r0
 800148a:	2b07      	cmp	r3, #7
 800148c:	d807      	bhi.n	800149e <twoAway+0x32>
		return CheckTwoAway(i, j, 1, 0);
 800148e:	79f8      	ldrb	r0, [r7, #7]
 8001490:	79b9      	ldrb	r1, [r7, #6]
 8001492:	2300      	movs	r3, #0
 8001494:	2201      	movs	r2, #1
 8001496:	f000 f83b 	bl	8001510 <CheckTwoAway>
 800149a:	4603      	mov	r3, r0
 800149c:	e034      	b.n	8001508 <twoAway+0x9c>
	}
	if(CheckTwoAway(i, j, 0, 1)<8){
 800149e:	79f8      	ldrb	r0, [r7, #7]
 80014a0:	79b9      	ldrb	r1, [r7, #6]
 80014a2:	2301      	movs	r3, #1
 80014a4:	2200      	movs	r2, #0
 80014a6:	f000 f833 	bl	8001510 <CheckTwoAway>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b07      	cmp	r3, #7
 80014ae:	d807      	bhi.n	80014c0 <twoAway+0x54>
		return CheckTwoAway(i, j, 0, 1);
 80014b0:	79f8      	ldrb	r0, [r7, #7]
 80014b2:	79b9      	ldrb	r1, [r7, #6]
 80014b4:	2301      	movs	r3, #1
 80014b6:	2200      	movs	r2, #0
 80014b8:	f000 f82a 	bl	8001510 <CheckTwoAway>
 80014bc:	4603      	mov	r3, r0
 80014be:	e023      	b.n	8001508 <twoAway+0x9c>
	}
	if(CheckTwoAway(i, j, 1, 1)<8){
 80014c0:	79f8      	ldrb	r0, [r7, #7]
 80014c2:	79b9      	ldrb	r1, [r7, #6]
 80014c4:	2301      	movs	r3, #1
 80014c6:	2201      	movs	r2, #1
 80014c8:	f000 f822 	bl	8001510 <CheckTwoAway>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b07      	cmp	r3, #7
 80014d0:	d807      	bhi.n	80014e2 <twoAway+0x76>
		return CheckTwoAway(i, j, 1, 1);
 80014d2:	79f8      	ldrb	r0, [r7, #7]
 80014d4:	79b9      	ldrb	r1, [r7, #6]
 80014d6:	2301      	movs	r3, #1
 80014d8:	2201      	movs	r2, #1
 80014da:	f000 f819 	bl	8001510 <CheckTwoAway>
 80014de:	4603      	mov	r3, r0
 80014e0:	e012      	b.n	8001508 <twoAway+0x9c>
	}
	if(CheckTwoAway(i, j, 1, -1)){
 80014e2:	79f8      	ldrb	r0, [r7, #7]
 80014e4:	79b9      	ldrb	r1, [r7, #6]
 80014e6:	f04f 33ff 	mov.w	r3, #4294967295
 80014ea:	2201      	movs	r2, #1
 80014ec:	f000 f810 	bl	8001510 <CheckTwoAway>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d007      	beq.n	8001506 <twoAway+0x9a>
		return CheckTwoAway(i, j, 1, 0);
 80014f6:	79f8      	ldrb	r0, [r7, #7]
 80014f8:	79b9      	ldrb	r1, [r7, #6]
 80014fa:	2300      	movs	r3, #0
 80014fc:	2201      	movs	r2, #1
 80014fe:	f000 f807 	bl	8001510 <CheckTwoAway>
 8001502:	4603      	mov	r3, r0
 8001504:	e000      	b.n	8001508 <twoAway+0x9c>
	}
	return 8;
 8001506:	2308      	movs	r3, #8
}
 8001508:	4618      	mov	r0, r3
 800150a:	3708      	adds	r7, #8
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}

08001510 <CheckTwoAway>:

uint8_t CheckTwoAway(int i, int j, int dir_i, int dir_j){
 8001510:	b490      	push	{r4, r7}
 8001512:	b086      	sub	sp, #24
 8001514:	af00      	add	r7, sp, #0
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	60b9      	str	r1, [r7, #8]
 800151a:	607a      	str	r2, [r7, #4]
 800151c:	603b      	str	r3, [r7, #0]
    for (int k = 1; k < 2; k++){
 800151e:	2301      	movs	r3, #1
 8001520:	617b      	str	r3, [r7, #20]
 8001522:	e048      	b.n	80015b6 <CheckTwoAway+0xa6>
        if ((i+dir_i*k)>boardColumns || (i+dir_i*k)<0){
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	697a      	ldr	r2, [r7, #20]
 8001528:	fb03 f202 	mul.w	r2, r3, r2
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	4413      	add	r3, r2
 8001530:	2b07      	cmp	r3, #7
 8001532:	dc07      	bgt.n	8001544 <CheckTwoAway+0x34>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	697a      	ldr	r2, [r7, #20]
 8001538:	fb03 f202 	mul.w	r2, r3, r2
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	4413      	add	r3, r2
 8001540:	2b00      	cmp	r3, #0
 8001542:	da01      	bge.n	8001548 <CheckTwoAway+0x38>
            return 8;
 8001544:	2308      	movs	r3, #8
 8001546:	e06b      	b.n	8001620 <CheckTwoAway+0x110>
        }
        if ((j+dir_j*k)>boardRows || (j+dir_j*k)<0){
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	697a      	ldr	r2, [r7, #20]
 800154c:	fb03 f202 	mul.w	r2, r3, r2
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	4413      	add	r3, r2
 8001554:	2b06      	cmp	r3, #6
 8001556:	dc07      	bgt.n	8001568 <CheckTwoAway+0x58>
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	697a      	ldr	r2, [r7, #20]
 800155c:	fb03 f202 	mul.w	r2, r3, r2
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	4413      	add	r3, r2
 8001564:	2b00      	cmp	r3, #0
 8001566:	da01      	bge.n	800156c <CheckTwoAway+0x5c>
            return 8;
 8001568:	2308      	movs	r3, #8
 800156a:	e059      	b.n	8001620 <CheckTwoAway+0x110>
        }
        if (gameBoard[i][j] != gameBoard[i+dir_i*k][j+dir_j*k]){
 800156c:	492f      	ldr	r1, [pc, #188]	@ (800162c <CheckTwoAway+0x11c>)
 800156e:	68fa      	ldr	r2, [r7, #12]
 8001570:	4613      	mov	r3, r2
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	4413      	add	r3, r2
 8001576:	005b      	lsls	r3, r3, #1
 8001578:	18ca      	adds	r2, r1, r3
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	4413      	add	r3, r2
 800157e:	7819      	ldrb	r1, [r3, #0]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	697a      	ldr	r2, [r7, #20]
 8001584:	fb03 f202 	mul.w	r2, r3, r2
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	441a      	add	r2, r3
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	6978      	ldr	r0, [r7, #20]
 8001590:	fb03 f000 	mul.w	r0, r3, r0
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	4418      	add	r0, r3
 8001598:	4c24      	ldr	r4, [pc, #144]	@ (800162c <CheckTwoAway+0x11c>)
 800159a:	4613      	mov	r3, r2
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	4413      	add	r3, r2
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	4423      	add	r3, r4
 80015a4:	4403      	add	r3, r0
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	4299      	cmp	r1, r3
 80015aa:	d001      	beq.n	80015b0 <CheckTwoAway+0xa0>
            return 8;
 80015ac:	2308      	movs	r3, #8
 80015ae:	e037      	b.n	8001620 <CheckTwoAway+0x110>
    for (int k = 1; k < 2; k++){
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	3301      	adds	r3, #1
 80015b4:	617b      	str	r3, [r7, #20]
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	ddb3      	ble.n	8001524 <CheckTwoAway+0x14>
        }
    }
	if((i+dir_i*3)>boardColumns || (j+dir_j*3)>boardRows || gameBoard[i+dir_i*3][j+dir_j*3] != 0){
 80015bc:	687a      	ldr	r2, [r7, #4]
 80015be:	4613      	mov	r3, r2
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	441a      	add	r2, r3
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	4413      	add	r3, r2
 80015c8:	2b07      	cmp	r3, #7
 80015ca:	dc1d      	bgt.n	8001608 <CheckTwoAway+0xf8>
 80015cc:	683a      	ldr	r2, [r7, #0]
 80015ce:	4613      	mov	r3, r2
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	441a      	add	r2, r3
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	4413      	add	r3, r2
 80015d8:	2b06      	cmp	r3, #6
 80015da:	dc15      	bgt.n	8001608 <CheckTwoAway+0xf8>
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	4613      	mov	r3, r2
 80015e0:	005b      	lsls	r3, r3, #1
 80015e2:	441a      	add	r2, r3
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	441a      	add	r2, r3
 80015e8:	6839      	ldr	r1, [r7, #0]
 80015ea:	460b      	mov	r3, r1
 80015ec:	005b      	lsls	r3, r3, #1
 80015ee:	4419      	add	r1, r3
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	4419      	add	r1, r3
 80015f4:	480d      	ldr	r0, [pc, #52]	@ (800162c <CheckTwoAway+0x11c>)
 80015f6:	4613      	mov	r3, r2
 80015f8:	005b      	lsls	r3, r3, #1
 80015fa:	4413      	add	r3, r2
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	4403      	add	r3, r0
 8001600:	440b      	add	r3, r1
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <CheckTwoAway+0xfc>
		return 8;
 8001608:	2308      	movs	r3, #8
 800160a:	e009      	b.n	8001620 <CheckTwoAway+0x110>
	}
    return i+dir_i*3;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	b2db      	uxtb	r3, r3
 8001610:	461a      	mov	r2, r3
 8001612:	0052      	lsls	r2, r2, #1
 8001614:	4413      	add	r3, r2
 8001616:	b2da      	uxtb	r2, r3
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	b2db      	uxtb	r3, r3
 800161c:	4413      	add	r3, r2
 800161e:	b2db      	uxtb	r3, r3

}
 8001620:	4618      	mov	r0, r3
 8001622:	3718      	adds	r7, #24
 8001624:	46bd      	mov	sp, r7
 8001626:	bc90      	pop	{r4, r7}
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	20000058 	.word	0x20000058

08001630 <EXTI0_IRQHandler>:
		}
	}
}

	
void EXTI0_IRQHandler(){
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8001634:	2006      	movs	r0, #6
 8001636:	f002 fb0c 	bl	8003c52 <HAL_NVIC_DisableIRQ>
	if(winner == 0){
 800163a:	4b09      	ldr	r3, [pc, #36]	@ (8001660 <EXTI0_IRQHandler+0x30>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d104      	bne.n	800164c <EXTI0_IRQHandler+0x1c>
		drop();
 8001642:	f7ff f847 	bl	80006d4 <drop>
        Screen2_DisplayBoard();
 8001646:	f7ff fa77 	bl	8000b38 <Screen2_DisplayBoard>
 800164a:	e001      	b.n	8001650 <EXTI0_IRQHandler+0x20>
	}
	else{
		newGame();
 800164c:	f7ff f802 	bl	8000654 <newGame>
	}
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);
 8001650:	4b04      	ldr	r3, [pc, #16]	@ (8001664 <EXTI0_IRQHandler+0x34>)
 8001652:	2201      	movs	r2, #1
 8001654:	615a      	str	r2, [r3, #20]
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001656:	2006      	movs	r0, #6
 8001658:	f002 faed 	bl	8003c36 <HAL_NVIC_EnableIRQ>
}
 800165c:	bf00      	nop
 800165e:	bd80      	pop	{r7, pc}
 8001660:	20000044 	.word	0x20000044
 8001664:	40013c00 	.word	0x40013c00

08001668 <Button_Init_Interrupt>:
#include "Button_Driver.h"



void Button_Init_Interrupt(){
 8001668:	b580      	push	{r7, lr}
 800166a:	b086      	sub	sp, #24
 800166c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef PinConfig;
	PinConfig.Mode = GPIO_MODE_IT_RISING;
 800166e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001672:	60bb      	str	r3, [r7, #8]
	PinConfig.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001674:	2301      	movs	r3, #1
 8001676:	613b      	str	r3, [r7, #16]
	PinConfig.Pull = GPIO_NOPULL;
 8001678:	2300      	movs	r3, #0
 800167a:	60fb      	str	r3, [r7, #12]
	PinConfig.Pin = GPIO_PIN_0;
 800167c:	2301      	movs	r3, #1
 800167e:	607b      	str	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001680:	2300      	movs	r3, #0
 8001682:	603b      	str	r3, [r7, #0]
 8001684:	4b0b      	ldr	r3, [pc, #44]	@ (80016b4 <Button_Init_Interrupt+0x4c>)
 8001686:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001688:	4a0a      	ldr	r2, [pc, #40]	@ (80016b4 <Button_Init_Interrupt+0x4c>)
 800168a:	f043 0301 	orr.w	r3, r3, #1
 800168e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001690:	4b08      	ldr	r3, [pc, #32]	@ (80016b4 <Button_Init_Interrupt+0x4c>)
 8001692:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001694:	f003 0301 	and.w	r3, r3, #1
 8001698:	603b      	str	r3, [r7, #0]
 800169a:	683b      	ldr	r3, [r7, #0]
	HAL_GPIO_Init(GPIOA, &PinConfig);
 800169c:	1d3b      	adds	r3, r7, #4
 800169e:	4619      	mov	r1, r3
 80016a0:	4805      	ldr	r0, [pc, #20]	@ (80016b8 <Button_Init_Interrupt+0x50>)
 80016a2:	f002 faf1 	bl	8003c88 <HAL_GPIO_Init>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80016a6:	2006      	movs	r0, #6
 80016a8:	f002 fac5 	bl	8003c36 <HAL_NVIC_EnableIRQ>
}
 80016ac:	bf00      	nop
 80016ae:	3718      	adds	r7, #24
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	40023800 	.word	0x40023800
 80016b8:	40020000 	.word	0x40020000

080016bc <Gyro_Init>:

static HAL_StatusTypeDef HAL_Status;

static SPI_HandleTypeDef hspi5;

void Gyro_Init(){
 80016bc:	b580      	push	{r7, lr}
 80016be:	b098      	sub	sp, #96	@ 0x60
 80016c0:	af00      	add	r7, sp, #0
		__HAL_RCC_GPIOF_CLK_ENABLE();
 80016c2:	2300      	movs	r3, #0
 80016c4:	60bb      	str	r3, [r7, #8]
 80016c6:	4b65      	ldr	r3, [pc, #404]	@ (800185c <Gyro_Init+0x1a0>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ca:	4a64      	ldr	r2, [pc, #400]	@ (800185c <Gyro_Init+0x1a0>)
 80016cc:	f043 0320 	orr.w	r3, r3, #32
 80016d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016d2:	4b62      	ldr	r3, [pc, #392]	@ (800185c <Gyro_Init+0x1a0>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d6:	f003 0320 	and.w	r3, r3, #32
 80016da:	60bb      	str	r3, [r7, #8]
 80016dc:	68bb      	ldr	r3, [r7, #8]
		__HAL_RCC_GPIOC_CLK_ENABLE();
 80016de:	2300      	movs	r3, #0
 80016e0:	607b      	str	r3, [r7, #4]
 80016e2:	4b5e      	ldr	r3, [pc, #376]	@ (800185c <Gyro_Init+0x1a0>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e6:	4a5d      	ldr	r2, [pc, #372]	@ (800185c <Gyro_Init+0x1a0>)
 80016e8:	f043 0304 	orr.w	r3, r3, #4
 80016ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ee:	4b5b      	ldr	r3, [pc, #364]	@ (800185c <Gyro_Init+0x1a0>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f2:	f003 0304 	and.w	r3, r3, #4
 80016f6:	607b      	str	r3, [r7, #4]
 80016f8:	687b      	ldr	r3, [r7, #4]
		__HAL_RCC_SPI5_CLK_ENABLE();
 80016fa:	2300      	movs	r3, #0
 80016fc:	603b      	str	r3, [r7, #0]
 80016fe:	4b57      	ldr	r3, [pc, #348]	@ (800185c <Gyro_Init+0x1a0>)
 8001700:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001702:	4a56      	ldr	r2, [pc, #344]	@ (800185c <Gyro_Init+0x1a0>)
 8001704:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001708:	6453      	str	r3, [r2, #68]	@ 0x44
 800170a:	4b54      	ldr	r3, [pc, #336]	@ (800185c <Gyro_Init+0x1a0>)
 800170c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800170e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001712:	603b      	str	r3, [r7, #0]
 8001714:	683b      	ldr	r3, [r7, #0]

	GPIO_InitTypeDef PinConfig0;
	PinConfig0.Mode = GPIO_MODE_AF_PP;
 8001716:	2302      	movs	r3, #2
 8001718:	64fb      	str	r3, [r7, #76]	@ 0x4c
	PinConfig0.Pull = GPIO_NOPULL;
 800171a:	2300      	movs	r3, #0
 800171c:	653b      	str	r3, [r7, #80]	@ 0x50
	PinConfig0.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800171e:	2301      	movs	r3, #1
 8001720:	657b      	str	r3, [r7, #84]	@ 0x54
	PinConfig0.Alternate = GPIO_AF5_SPI5;
 8001722:	2305      	movs	r3, #5
 8001724:	65bb      	str	r3, [r7, #88]	@ 0x58
	PinConfig0.Pin = GPIO_PIN_7;
 8001726:	2380      	movs	r3, #128	@ 0x80
 8001728:	64bb      	str	r3, [r7, #72]	@ 0x48
	HAL_GPIO_Init(GPIOF, &PinConfig0);
 800172a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800172e:	4619      	mov	r1, r3
 8001730:	484b      	ldr	r0, [pc, #300]	@ (8001860 <Gyro_Init+0x1a4>)
 8001732:	f002 faa9 	bl	8003c88 <HAL_GPIO_Init>

	GPIO_InitTypeDef PinConfig1;
	PinConfig1.Mode = GPIO_MODE_AF_PP;
 8001736:	2302      	movs	r3, #2
 8001738:	63bb      	str	r3, [r7, #56]	@ 0x38
	PinConfig1.Pull = GPIO_NOPULL;
 800173a:	2300      	movs	r3, #0
 800173c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	PinConfig1.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800173e:	2301      	movs	r3, #1
 8001740:	643b      	str	r3, [r7, #64]	@ 0x40
	PinConfig1.Alternate = GPIO_AF5_SPI5;
 8001742:	2305      	movs	r3, #5
 8001744:	647b      	str	r3, [r7, #68]	@ 0x44
	PinConfig1.Pin = GPIO_PIN_8;
 8001746:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800174a:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(GPIOF, &PinConfig1);
 800174c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001750:	4619      	mov	r1, r3
 8001752:	4843      	ldr	r0, [pc, #268]	@ (8001860 <Gyro_Init+0x1a4>)
 8001754:	f002 fa98 	bl	8003c88 <HAL_GPIO_Init>

	GPIO_InitTypeDef PinConfig2;
	PinConfig2.Mode = GPIO_MODE_AF_PP;
 8001758:	2302      	movs	r3, #2
 800175a:	627b      	str	r3, [r7, #36]	@ 0x24
	PinConfig2.Pull = GPIO_NOPULL;
 800175c:	2300      	movs	r3, #0
 800175e:	62bb      	str	r3, [r7, #40]	@ 0x28
	PinConfig2.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001760:	2301      	movs	r3, #1
 8001762:	62fb      	str	r3, [r7, #44]	@ 0x2c
	PinConfig2.Alternate = GPIO_AF5_SPI5;
 8001764:	2305      	movs	r3, #5
 8001766:	633b      	str	r3, [r7, #48]	@ 0x30
	PinConfig2.Pin = GPIO_PIN_9;
 8001768:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800176c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOF, &PinConfig2);
 800176e:	f107 0320 	add.w	r3, r7, #32
 8001772:	4619      	mov	r1, r3
 8001774:	483a      	ldr	r0, [pc, #232]	@ (8001860 <Gyro_Init+0x1a4>)
 8001776:	f002 fa87 	bl	8003c88 <HAL_GPIO_Init>

	GPIO_InitTypeDef PinConfig3;
	PinConfig3.Mode = GPIO_MODE_OUTPUT_PP;
 800177a:	2301      	movs	r3, #1
 800177c:	613b      	str	r3, [r7, #16]
	PinConfig3.Pull = GPIO_NOPULL;
 800177e:	2300      	movs	r3, #0
 8001780:	617b      	str	r3, [r7, #20]
	PinConfig3.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001782:	2301      	movs	r3, #1
 8001784:	61bb      	str	r3, [r7, #24]
	PinConfig3.Pin = GPIO_PIN_1;
 8001786:	2302      	movs	r3, #2
 8001788:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOC, &PinConfig3);
 800178a:	f107 030c 	add.w	r3, r7, #12
 800178e:	4619      	mov	r1, r3
 8001790:	4834      	ldr	r0, [pc, #208]	@ (8001864 <Gyro_Init+0x1a8>)
 8001792:	f002 fa79 	bl	8003c88 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 1);
 8001796:	2201      	movs	r2, #1
 8001798:	2102      	movs	r1, #2
 800179a:	4832      	ldr	r0, [pc, #200]	@ (8001864 <Gyro_Init+0x1a8>)
 800179c:	f002 fd44 	bl	8004228 <HAL_GPIO_WritePin>

	hspi5.Instance = SPI5;
 80017a0:	4b31      	ldr	r3, [pc, #196]	@ (8001868 <Gyro_Init+0x1ac>)
 80017a2:	4a32      	ldr	r2, [pc, #200]	@ (800186c <Gyro_Init+0x1b0>)
 80017a4:	601a      	str	r2, [r3, #0]
	hspi5.Init.Mode = SPI_MODE_MASTER;
 80017a6:	4b30      	ldr	r3, [pc, #192]	@ (8001868 <Gyro_Init+0x1ac>)
 80017a8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80017ac:	605a      	str	r2, [r3, #4]
	hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80017ae:	4b2e      	ldr	r3, [pc, #184]	@ (8001868 <Gyro_Init+0x1ac>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	609a      	str	r2, [r3, #8]
	hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80017b4:	4b2c      	ldr	r3, [pc, #176]	@ (8001868 <Gyro_Init+0x1ac>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	60da      	str	r2, [r3, #12]
	hspi5.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80017ba:	4b2b      	ldr	r3, [pc, #172]	@ (8001868 <Gyro_Init+0x1ac>)
 80017bc:	2202      	movs	r2, #2
 80017be:	611a      	str	r2, [r3, #16]
	hspi5.Init.CLKPhase = SPI_PHASE_2EDGE;
 80017c0:	4b29      	ldr	r3, [pc, #164]	@ (8001868 <Gyro_Init+0x1ac>)
 80017c2:	2201      	movs	r2, #1
 80017c4:	615a      	str	r2, [r3, #20]
	hspi5.Init.NSS = SPI_NSS_SOFT;
 80017c6:	4b28      	ldr	r3, [pc, #160]	@ (8001868 <Gyro_Init+0x1ac>)
 80017c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017cc:	619a      	str	r2, [r3, #24]
	hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80017ce:	4b26      	ldr	r3, [pc, #152]	@ (8001868 <Gyro_Init+0x1ac>)
 80017d0:	2210      	movs	r2, #16
 80017d2:	61da      	str	r2, [r3, #28]
	hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017d4:	4b24      	ldr	r3, [pc, #144]	@ (8001868 <Gyro_Init+0x1ac>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	621a      	str	r2, [r3, #32]
	hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80017da:	4b23      	ldr	r3, [pc, #140]	@ (8001868 <Gyro_Init+0x1ac>)
 80017dc:	2200      	movs	r2, #0
 80017de:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_Status = HAL_SPI_Init(&hspi5);
 80017e0:	4821      	ldr	r0, [pc, #132]	@ (8001868 <Gyro_Init+0x1ac>)
 80017e2:	f004 feef 	bl	80065c4 <HAL_SPI_Init>
 80017e6:	4603      	mov	r3, r0
 80017e8:	461a      	mov	r2, r3
 80017ea:	4b21      	ldr	r3, [pc, #132]	@ (8001870 <Gyro_Init+0x1b4>)
 80017ec:	701a      	strb	r2, [r3, #0]

	Gyro_Power();
 80017ee:	f000 f85d 	bl	80018ac <Gyro_Power>
	uint8_t CR5_Config = 0;
 80017f2:	2300      	movs	r3, #0
 80017f4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	CR5_Config |= (GYRO_CR5_REBOOTMEMCONTENT);
 80017f8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80017fc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001800:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	CR5_Config |= (GYRO_CR5_FIFO);
 8001804:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8001808:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800180c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	Gyro_ConfigureReg(GYRO_CR5, CR5_Config);
 8001810:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8001814:	4619      	mov	r1, r3
 8001816:	2024      	movs	r0, #36	@ 0x24
 8001818:	f000 f85e 	bl	80018d8 <Gyro_ConfigureReg>
	uint8_t CR1_Config = 0;
 800181c:	2300      	movs	r3, #0
 800181e:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
	CR1_Config |= GYRO_CR1_POWERDOWN_NORMAL_ENABLE;
 8001822:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8001826:	f043 0308 	orr.w	r3, r3, #8
 800182a:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
	CR1_Config |= GYRO_CR1_BANDWIDTH_SET;
 800182e:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8001832:	f043 0310 	orr.w	r3, r3, #16
 8001836:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
	CR1_Config |= GYRO_CR1_Y_ENABLE;
 800183a:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 800183e:	f043 0302 	orr.w	r3, r3, #2
 8001842:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
	Gyro_ConfigureReg(GYRO_CR1, CR1_Config);
 8001846:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 800184a:	4619      	mov	r1, r3
 800184c:	2020      	movs	r0, #32
 800184e:	f000 f843 	bl	80018d8 <Gyro_ConfigureReg>
}
 8001852:	bf00      	nop
 8001854:	3760      	adds	r7, #96	@ 0x60
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	40023800 	.word	0x40023800
 8001860:	40021400 	.word	0x40021400
 8001864:	40020800 	.word	0x40020800
 8001868:	2000008c 	.word	0x2000008c
 800186c:	40015000 	.word	0x40015000
 8001870:	20000088 	.word	0x20000088

08001874 <Gyro_GetYLoc>:
int16_t Gyro_GetYLoc(){
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
	uint8_t yLow = Gyro_ReadReg(GYRO_OUT_Y_L);
 800187a:	202a      	movs	r0, #42	@ 0x2a
 800187c:	f000 f854 	bl	8001928 <Gyro_ReadReg>
 8001880:	4603      	mov	r3, r0
 8001882:	71fb      	strb	r3, [r7, #7]
	uint16_t yHigh = Gyro_ReadReg(GYRO_OUT_Y_H);
 8001884:	202b      	movs	r0, #43	@ 0x2b
 8001886:	f000 f84f 	bl	8001928 <Gyro_ReadReg>
 800188a:	4603      	mov	r3, r0
 800188c:	80bb      	strh	r3, [r7, #4]
	yHigh = yHigh << 8;
 800188e:	88bb      	ldrh	r3, [r7, #4]
 8001890:	021b      	lsls	r3, r3, #8
 8001892:	80bb      	strh	r3, [r7, #4]
	int16_t yLoc = (int16_t)(yLow | yHigh);
 8001894:	79fb      	ldrb	r3, [r7, #7]
 8001896:	b29a      	uxth	r2, r3
 8001898:	88bb      	ldrh	r3, [r7, #4]
 800189a:	4313      	orrs	r3, r2
 800189c:	b29b      	uxth	r3, r3
 800189e:	807b      	strh	r3, [r7, #2]
	return yLoc;
 80018a0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3708      	adds	r7, #8
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}

080018ac <Gyro_Power>:
void Gyro_GetPrintID	(){
	uint8_t ID = Gyro_ReadReg(GYRO_WHO_AM_I);
	printf("Gyro ID: 0x%02X\n", ID);
}

void Gyro_Power(){
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
	uint8_t CR1_Config = 0;
 80018b2:	2300      	movs	r3, #0
 80018b4:	71fb      	strb	r3, [r7, #7]
	CR1_Config |= GYRO_CR1_POWERDOWN_NORMAL_ENABLE;
 80018b6:	79fb      	ldrb	r3, [r7, #7]
 80018b8:	f043 0308 	orr.w	r3, r3, #8
 80018bc:	71fb      	strb	r3, [r7, #7]
	Gyro_ConfigureReg(GYRO_CR1, CR1_Config);
 80018be:	79fb      	ldrb	r3, [r7, #7]
 80018c0:	4619      	mov	r1, r3
 80018c2:	2020      	movs	r0, #32
 80018c4:	f000 f808 	bl	80018d8 <Gyro_ConfigureReg>
	HAL_Delay(100);
 80018c8:	2064      	movs	r0, #100	@ 0x64
 80018ca:	f002 f875 	bl	80039b8 <HAL_Delay>
}
 80018ce:	bf00      	nop
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
	...

080018d8 <Gyro_ConfigureReg>:
void Gyro_GetPrintTemp(){
	uint8_t Temp = Gyro_ReadReg(GYRO_OUT_TEMP);
	printf("Temperature: %d\n", Temp);
}

void Gyro_ConfigureReg(uint16_t Reg, uint8_t data){
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	4603      	mov	r3, r0
 80018e0:	460a      	mov	r2, r1
 80018e2:	80fb      	strh	r3, [r7, #6]
 80018e4:	4613      	mov	r3, r2
 80018e6:	717b      	strb	r3, [r7, #5]
	uint16_t package = 0;
 80018e8:	2300      	movs	r3, #0
 80018ea:	81fb      	strh	r3, [r7, #14]
	package = SPI_WRITE | Reg ;
 80018ec:	88fb      	ldrh	r3, [r7, #6]
 80018ee:	81fb      	strh	r3, [r7, #14]
	package |= (data << SPI_DATA_OFFSET);
 80018f0:	797b      	ldrb	r3, [r7, #5]
 80018f2:	b21b      	sxth	r3, r3
 80018f4:	021b      	lsls	r3, r3, #8
 80018f6:	b21a      	sxth	r2, r3
 80018f8:	89fb      	ldrh	r3, [r7, #14]
 80018fa:	b21b      	sxth	r3, r3
 80018fc:	4313      	orrs	r3, r2
 80018fe:	b21b      	sxth	r3, r3
 8001900:	b29b      	uxth	r3, r3
 8001902:	81fb      	strh	r3, [r7, #14]
	Gyro_EnableSlaveConnection();
 8001904:	f000 f85a 	bl	80019bc <Gyro_EnableSlaveConnection>

	HAL_SPI_Transmit(&hspi5, (uint8_t*) &package, 2, timeout);
 8001908:	f107 010e 	add.w	r1, r7, #14
 800190c:	f640 2328 	movw	r3, #2600	@ 0xa28
 8001910:	2202      	movs	r2, #2
 8001912:	4804      	ldr	r0, [pc, #16]	@ (8001924 <Gyro_ConfigureReg+0x4c>)
 8001914:	f004 ff07 	bl	8006726 <HAL_SPI_Transmit>

	Gyro_DisableSlaveConnection();
 8001918:	f000 f85c 	bl	80019d4 <Gyro_DisableSlaveConnection>

}
 800191c:	bf00      	nop
 800191e:	3710      	adds	r7, #16
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	2000008c 	.word	0x2000008c

08001928 <Gyro_ReadReg>:

uint16_t Gyro_ReadReg(uint16_t Reg){
 8001928:	b580      	push	{r7, lr}
 800192a:	b086      	sub	sp, #24
 800192c:	af02      	add	r7, sp, #8
 800192e:	4603      	mov	r3, r0
 8001930:	80fb      	strh	r3, [r7, #6]
	uint8_t package = 0;
 8001932:	2300      	movs	r3, #0
 8001934:	737b      	strb	r3, [r7, #13]
	package = SPI_READ | Reg;
 8001936:	88fb      	ldrh	r3, [r7, #6]
 8001938:	b2db      	uxtb	r3, r3
 800193a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800193e:	b2db      	uxtb	r3, r3
 8001940:	737b      	strb	r3, [r7, #13]
	uint16_t data = 0;
 8001942:	2300      	movs	r3, #0
 8001944:	817b      	strh	r3, [r7, #10]
	Gyro_EnableSlaveConnection();
 8001946:	f000 f839 	bl	80019bc <Gyro_EnableSlaveConnection>

	while (HAL_GPIO_ReadPin(GYRO_CS_PORT, GYRO_CS_PIN) != GPIO_PIN_RESET);
 800194a:	bf00      	nop
 800194c:	2102      	movs	r1, #2
 800194e:	4810      	ldr	r0, [pc, #64]	@ (8001990 <Gyro_ReadReg+0x68>)
 8001950:	f002 fc52 	bl	80041f8 <HAL_GPIO_ReadPin>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d1f8      	bne.n	800194c <Gyro_ReadReg+0x24>
	HAL_Status = HAL_SPI_TransmitReceive(&hspi5, &package,(uint8_t*) &data, 2, timeout);
 800195a:	f107 020a 	add.w	r2, r7, #10
 800195e:	f107 010d 	add.w	r1, r7, #13
 8001962:	f640 2328 	movw	r3, #2600	@ 0xa28
 8001966:	9300      	str	r3, [sp, #0]
 8001968:	2302      	movs	r3, #2
 800196a:	480a      	ldr	r0, [pc, #40]	@ (8001994 <Gyro_ReadReg+0x6c>)
 800196c:	f005 f81f 	bl	80069ae <HAL_SPI_TransmitReceive>
 8001970:	4603      	mov	r3, r0
 8001972:	461a      	mov	r2, r3
 8001974:	4b08      	ldr	r3, [pc, #32]	@ (8001998 <Gyro_ReadReg+0x70>)
 8001976:	701a      	strb	r2, [r3, #0]
	Gyro_VerifyHAL();
 8001978:	f000 f810 	bl	800199c <Gyro_VerifyHAL>
	uint16_t DataReturned = (0xFF00 & data) >> 8;
 800197c:	897b      	ldrh	r3, [r7, #10]
 800197e:	0a1b      	lsrs	r3, r3, #8
 8001980:	81fb      	strh	r3, [r7, #14]
	Gyro_DisableSlaveConnection();
 8001982:	f000 f827 	bl	80019d4 <Gyro_DisableSlaveConnection>
	return DataReturned;
 8001986:	89fb      	ldrh	r3, [r7, #14]

}
 8001988:	4618      	mov	r0, r3
 800198a:	3710      	adds	r7, #16
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	40020800 	.word	0x40020800
 8001994:	2000008c 	.word	0x2000008c
 8001998:	20000088 	.word	0x20000088

0800199c <Gyro_VerifyHAL>:

void Gyro_VerifyHAL(){
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
	while(HAL_Status != HAL_OK);
 80019a0:	bf00      	nop
 80019a2:	4b05      	ldr	r3, [pc, #20]	@ (80019b8 <Gyro_VerifyHAL+0x1c>)
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d1fb      	bne.n	80019a2 <Gyro_VerifyHAL+0x6>
}
 80019aa:	bf00      	nop
 80019ac:	bf00      	nop
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	20000088 	.word	0x20000088

080019bc <Gyro_EnableSlaveConnection>:

void Gyro_EnableSlaveConnection(){
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GYRO_CS_PORT, GYRO_CS_PIN, 0);
 80019c0:	2200      	movs	r2, #0
 80019c2:	2102      	movs	r1, #2
 80019c4:	4802      	ldr	r0, [pc, #8]	@ (80019d0 <Gyro_EnableSlaveConnection+0x14>)
 80019c6:	f002 fc2f 	bl	8004228 <HAL_GPIO_WritePin>
}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	40020800 	.word	0x40020800

080019d4 <Gyro_DisableSlaveConnection>:

void Gyro_DisableSlaveConnection(){
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GYRO_CS_PORT, GYRO_CS_PIN, 1);
 80019d8:	2201      	movs	r2, #1
 80019da:	2102      	movs	r1, #2
 80019dc:	4802      	ldr	r0, [pc, #8]	@ (80019e8 <Gyro_DisableSlaveConnection+0x14>)
 80019de:	f002 fc23 	bl	8004228 <HAL_GPIO_WritePin>
}
 80019e2:	bf00      	nop
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	40020800 	.word	0x40020800

080019ec <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b08c      	sub	sp, #48	@ 0x30
 80019f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80019f2:	2300      	movs	r3, #0
 80019f4:	61bb      	str	r3, [r7, #24]
 80019f6:	4b5a      	ldr	r3, [pc, #360]	@ (8001b60 <LCD_GPIO_Init+0x174>)
 80019f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019fa:	4a59      	ldr	r2, [pc, #356]	@ (8001b60 <LCD_GPIO_Init+0x174>)
 80019fc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001a00:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a02:	4b57      	ldr	r3, [pc, #348]	@ (8001b60 <LCD_GPIO_Init+0x174>)
 8001a04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a06:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001a0a:	61bb      	str	r3, [r7, #24]
 8001a0c:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a0e:	2300      	movs	r3, #0
 8001a10:	617b      	str	r3, [r7, #20]
 8001a12:	4b53      	ldr	r3, [pc, #332]	@ (8001b60 <LCD_GPIO_Init+0x174>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a16:	4a52      	ldr	r2, [pc, #328]	@ (8001b60 <LCD_GPIO_Init+0x174>)
 8001a18:	f043 0301 	orr.w	r3, r3, #1
 8001a1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a1e:	4b50      	ldr	r3, [pc, #320]	@ (8001b60 <LCD_GPIO_Init+0x174>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	617b      	str	r3, [r7, #20]
 8001a28:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	613b      	str	r3, [r7, #16]
 8001a2e:	4b4c      	ldr	r3, [pc, #304]	@ (8001b60 <LCD_GPIO_Init+0x174>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a32:	4a4b      	ldr	r2, [pc, #300]	@ (8001b60 <LCD_GPIO_Init+0x174>)
 8001a34:	f043 0302 	orr.w	r3, r3, #2
 8001a38:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a3a:	4b49      	ldr	r3, [pc, #292]	@ (8001b60 <LCD_GPIO_Init+0x174>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a3e:	f003 0302 	and.w	r3, r3, #2
 8001a42:	613b      	str	r3, [r7, #16]
 8001a44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a46:	2300      	movs	r3, #0
 8001a48:	60fb      	str	r3, [r7, #12]
 8001a4a:	4b45      	ldr	r3, [pc, #276]	@ (8001b60 <LCD_GPIO_Init+0x174>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a4e:	4a44      	ldr	r2, [pc, #272]	@ (8001b60 <LCD_GPIO_Init+0x174>)
 8001a50:	f043 0304 	orr.w	r3, r3, #4
 8001a54:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a56:	4b42      	ldr	r3, [pc, #264]	@ (8001b60 <LCD_GPIO_Init+0x174>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a5a:	f003 0304 	and.w	r3, r3, #4
 8001a5e:	60fb      	str	r3, [r7, #12]
 8001a60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	60bb      	str	r3, [r7, #8]
 8001a66:	4b3e      	ldr	r3, [pc, #248]	@ (8001b60 <LCD_GPIO_Init+0x174>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6a:	4a3d      	ldr	r2, [pc, #244]	@ (8001b60 <LCD_GPIO_Init+0x174>)
 8001a6c:	f043 0308 	orr.w	r3, r3, #8
 8001a70:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a72:	4b3b      	ldr	r3, [pc, #236]	@ (8001b60 <LCD_GPIO_Init+0x174>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a76:	f003 0308 	and.w	r3, r3, #8
 8001a7a:	60bb      	str	r3, [r7, #8]
 8001a7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a7e:	2300      	movs	r3, #0
 8001a80:	607b      	str	r3, [r7, #4]
 8001a82:	4b37      	ldr	r3, [pc, #220]	@ (8001b60 <LCD_GPIO_Init+0x174>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a86:	4a36      	ldr	r2, [pc, #216]	@ (8001b60 <LCD_GPIO_Init+0x174>)
 8001a88:	f043 0320 	orr.w	r3, r3, #32
 8001a8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a8e:	4b34      	ldr	r3, [pc, #208]	@ (8001b60 <LCD_GPIO_Init+0x174>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a92:	f003 0320 	and.w	r3, r3, #32
 8001a96:	607b      	str	r3, [r7, #4]
 8001a98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	603b      	str	r3, [r7, #0]
 8001a9e:	4b30      	ldr	r3, [pc, #192]	@ (8001b60 <LCD_GPIO_Init+0x174>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa2:	4a2f      	ldr	r2, [pc, #188]	@ (8001b60 <LCD_GPIO_Init+0x174>)
 8001aa4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001aa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aaa:	4b2d      	ldr	r3, [pc, #180]	@ (8001b60 <LCD_GPIO_Init+0x174>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ab2:	603b      	str	r3, [r7, #0]
 8001ab4:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8001ab6:	f641 0358 	movw	r3, #6232	@ 0x1858
 8001aba:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8001abc:	2302      	movs	r3, #2
 8001abe:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8001ac8:	230e      	movs	r3, #14
 8001aca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001acc:	f107 031c 	add.w	r3, r7, #28
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	4824      	ldr	r0, [pc, #144]	@ (8001b64 <LCD_GPIO_Init+0x178>)
 8001ad4:	f002 f8d8 	bl	8003c88 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8001ad8:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001adc:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001ade:	f107 031c 	add.w	r3, r7, #28
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4820      	ldr	r0, [pc, #128]	@ (8001b68 <LCD_GPIO_Init+0x17c>)
 8001ae6:	f002 f8cf 	bl	8003c88 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8001aea:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8001aee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001af0:	f107 031c 	add.w	r3, r7, #28
 8001af4:	4619      	mov	r1, r3
 8001af6:	481d      	ldr	r0, [pc, #116]	@ (8001b6c <LCD_GPIO_Init+0x180>)
 8001af8:	f002 f8c6 	bl	8003c88 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8001afc:	2348      	movs	r3, #72	@ 0x48
 8001afe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001b00:	f107 031c 	add.w	r3, r7, #28
 8001b04:	4619      	mov	r1, r3
 8001b06:	481a      	ldr	r0, [pc, #104]	@ (8001b70 <LCD_GPIO_Init+0x184>)
 8001b08:	f002 f8be 	bl	8003c88 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8001b0c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b10:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8001b12:	f107 031c 	add.w	r3, r7, #28
 8001b16:	4619      	mov	r1, r3
 8001b18:	4816      	ldr	r0, [pc, #88]	@ (8001b74 <LCD_GPIO_Init+0x188>)
 8001b1a:	f002 f8b5 	bl	8003c88 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8001b1e:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8001b22:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001b24:	f107 031c 	add.w	r3, r7, #28
 8001b28:	4619      	mov	r1, r3
 8001b2a:	4813      	ldr	r0, [pc, #76]	@ (8001b78 <LCD_GPIO_Init+0x18c>)
 8001b2c:	f002 f8ac 	bl	8003c88 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8001b30:	2303      	movs	r3, #3
 8001b32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8001b34:	2309      	movs	r3, #9
 8001b36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001b38:	f107 031c 	add.w	r3, r7, #28
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	480a      	ldr	r0, [pc, #40]	@ (8001b68 <LCD_GPIO_Init+0x17c>)
 8001b40:	f002 f8a2 	bl	8003c88 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8001b44:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001b48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001b4a:	f107 031c 	add.w	r3, r7, #28
 8001b4e:	4619      	mov	r1, r3
 8001b50:	4809      	ldr	r0, [pc, #36]	@ (8001b78 <LCD_GPIO_Init+0x18c>)
 8001b52:	f002 f899 	bl	8003c88 <HAL_GPIO_Init>
}
 8001b56:	bf00      	nop
 8001b58:	3730      	adds	r7, #48	@ 0x30
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40023800 	.word	0x40023800
 8001b64:	40020000 	.word	0x40020000
 8001b68:	40020400 	.word	0x40020400
 8001b6c:	40020800 	.word	0x40020800
 8001b70:	40020c00 	.word	0x40020c00
 8001b74:	40021400 	.word	0x40021400
 8001b78:	40021800 	.word	0x40021800

08001b7c <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b090      	sub	sp, #64	@ 0x40
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	4603      	mov	r3, r0
 8001b84:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 8001b86:	2300      	movs	r3, #0
 8001b88:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 8001b8a:	23f0      	movs	r3, #240	@ 0xf0
 8001b8c:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 8001b8e:	2300      	movs	r3, #0
 8001b90:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 8001b92:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001b96:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 8001b98:	2302      	movs	r3, #2
 8001b9a:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8001b9c:	23ff      	movs	r3, #255	@ 0xff
 8001b9e:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001ba4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ba8:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001baa:	2305      	movs	r3, #5
 8001bac:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 8001bae:	79fb      	ldrb	r3, [r7, #7]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d101      	bne.n	8001bb8 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 8001bb4:	4b0f      	ldr	r3, [pc, #60]	@ (8001bf4 <LTCD_Layer_Init+0x78>)
 8001bb6:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 8001bb8:	23f0      	movs	r3, #240	@ 0xf0
 8001bba:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8001bbc:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001bc0:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 8001bd4:	79fa      	ldrb	r2, [r7, #7]
 8001bd6:	f107 030c 	add.w	r3, r7, #12
 8001bda:	4619      	mov	r1, r3
 8001bdc:	4806      	ldr	r0, [pc, #24]	@ (8001bf8 <LTCD_Layer_Init+0x7c>)
 8001bde:	f003 fcad 	bl	800553c <HAL_LTDC_ConfigLayer>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d001      	beq.n	8001bec <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 8001be8:	f000 f9aa 	bl	8001f40 <LCD_Error_Handler>
	}
}
 8001bec:	bf00      	nop
 8001bee:	3740      	adds	r7, #64	@ 0x40
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	200001c0 	.word	0x200001c0
 8001bf8:	200000e4 	.word	0x200000e4

08001bfc <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 8001c00:	4b2a      	ldr	r3, [pc, #168]	@ (8001cac <LTCD__Init+0xb0>)
 8001c02:	4a2b      	ldr	r2, [pc, #172]	@ (8001cb0 <LTCD__Init+0xb4>)
 8001c04:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 8001c06:	4b29      	ldr	r3, [pc, #164]	@ (8001cac <LTCD__Init+0xb0>)
 8001c08:	2209      	movs	r2, #9
 8001c0a:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 8001c0c:	4b27      	ldr	r3, [pc, #156]	@ (8001cac <LTCD__Init+0xb0>)
 8001c0e:	2201      	movs	r2, #1
 8001c10:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 8001c12:	4b26      	ldr	r3, [pc, #152]	@ (8001cac <LTCD__Init+0xb0>)
 8001c14:	221d      	movs	r2, #29
 8001c16:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8001c18:	4b24      	ldr	r3, [pc, #144]	@ (8001cac <LTCD__Init+0xb0>)
 8001c1a:	2203      	movs	r2, #3
 8001c1c:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 8001c1e:	4b23      	ldr	r3, [pc, #140]	@ (8001cac <LTCD__Init+0xb0>)
 8001c20:	f240 120d 	movw	r2, #269	@ 0x10d
 8001c24:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 8001c26:	4b21      	ldr	r3, [pc, #132]	@ (8001cac <LTCD__Init+0xb0>)
 8001c28:	f240 1243 	movw	r2, #323	@ 0x143
 8001c2c:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 8001c2e:	4b1f      	ldr	r3, [pc, #124]	@ (8001cac <LTCD__Init+0xb0>)
 8001c30:	f240 1217 	movw	r2, #279	@ 0x117
 8001c34:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 8001c36:	4b1d      	ldr	r3, [pc, #116]	@ (8001cac <LTCD__Init+0xb0>)
 8001c38:	f240 1247 	movw	r2, #327	@ 0x147
 8001c3c:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 8001c3e:	4b1b      	ldr	r3, [pc, #108]	@ (8001cac <LTCD__Init+0xb0>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 8001c46:	4b19      	ldr	r3, [pc, #100]	@ (8001cac <LTCD__Init+0xb0>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 8001c4e:	4b17      	ldr	r3, [pc, #92]	@ (8001cac <LTCD__Init+0xb0>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001c56:	4b17      	ldr	r3, [pc, #92]	@ (8001cb4 <LTCD__Init+0xb8>)
 8001c58:	2208      	movs	r2, #8
 8001c5a:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001c5c:	4b15      	ldr	r3, [pc, #84]	@ (8001cb4 <LTCD__Init+0xb8>)
 8001c5e:	22c0      	movs	r2, #192	@ 0xc0
 8001c60:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8001c62:	4b14      	ldr	r3, [pc, #80]	@ (8001cb4 <LTCD__Init+0xb8>)
 8001c64:	2204      	movs	r2, #4
 8001c66:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001c68:	4b12      	ldr	r3, [pc, #72]	@ (8001cb4 <LTCD__Init+0xb8>)
 8001c6a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001c6e:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8001c70:	4810      	ldr	r0, [pc, #64]	@ (8001cb4 <LTCD__Init+0xb8>)
 8001c72:	f004 fabd 	bl	80061f0 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001c76:	4b0d      	ldr	r3, [pc, #52]	@ (8001cac <LTCD__Init+0xb0>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001c7c:	4b0b      	ldr	r3, [pc, #44]	@ (8001cac <LTCD__Init+0xb0>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001c82:	4b0a      	ldr	r3, [pc, #40]	@ (8001cac <LTCD__Init+0xb0>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001c88:	4b08      	ldr	r3, [pc, #32]	@ (8001cac <LTCD__Init+0xb0>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 8001c8e:	f7ff fead 	bl	80019ec <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001c92:	4806      	ldr	r0, [pc, #24]	@ (8001cac <LTCD__Init+0xb0>)
 8001c94:	f003 fb82 	bl	800539c <HAL_LTDC_Init>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 8001c9e:	f000 f94f 	bl	8001f40 <LCD_Error_Handler>
	 }

	ili9341_Init();
 8001ca2:	f000 f96a 	bl	8001f7a <ili9341_Init>
}
 8001ca6:	bf00      	nop
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	200000e4 	.word	0x200000e4
 8001cb0:	40016800 	.word	0x40016800
 8001cb4:	2000018c 	.word	0x2000018c

08001cb8 <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	80fb      	strh	r3, [r7, #6]
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	80bb      	strh	r3, [r7, #4]
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 8001cca:	88ba      	ldrh	r2, [r7, #4]
 8001ccc:	4613      	mov	r3, r2
 8001cce:	011b      	lsls	r3, r3, #4
 8001cd0:	1a9b      	subs	r3, r3, r2
 8001cd2:	011b      	lsls	r3, r3, #4
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	88fb      	ldrh	r3, [r7, #6]
 8001cd8:	4413      	add	r3, r2
 8001cda:	4905      	ldr	r1, [pc, #20]	@ (8001cf0 <LCD_Draw_Pixel+0x38>)
 8001cdc:	887a      	ldrh	r2, [r7, #2]
 8001cde:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8001ce2:	bf00      	nop
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	200001c0 	.word	0x200001c0

08001cf4 <LCD_Draw_Circle_Fill>:
 * These functions are simple examples. Most computer graphics like OpenGl and stm's graphics library use a state machine. Where you first call some function like SetColor(color), SetPosition(x,y), then DrawSqure(size)
 * Instead all of these are explicit where color, size, and position are passed in.
 * There is tons of ways to handle drawing. I dont think it matters too much.
 */
void LCD_Draw_Circle_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t radius, uint16_t color)
{
 8001cf4:	b590      	push	{r4, r7, lr}
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	4604      	mov	r4, r0
 8001cfc:	4608      	mov	r0, r1
 8001cfe:	4611      	mov	r1, r2
 8001d00:	461a      	mov	r2, r3
 8001d02:	4623      	mov	r3, r4
 8001d04:	80fb      	strh	r3, [r7, #6]
 8001d06:	4603      	mov	r3, r0
 8001d08:	80bb      	strh	r3, [r7, #4]
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	807b      	strh	r3, [r7, #2]
 8001d0e:	4613      	mov	r3, r2
 8001d10:	803b      	strh	r3, [r7, #0]
    for(int16_t y=-radius; y<=radius; y++)
 8001d12:	887b      	ldrh	r3, [r7, #2]
 8001d14:	425b      	negs	r3, r3
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	81fb      	strh	r3, [r7, #14]
 8001d1a:	e034      	b.n	8001d86 <LCD_Draw_Circle_Fill+0x92>
    {
        for(int16_t x=-radius; x<=radius; x++)
 8001d1c:	887b      	ldrh	r3, [r7, #2]
 8001d1e:	425b      	negs	r3, r3
 8001d20:	b29b      	uxth	r3, r3
 8001d22:	81bb      	strh	r3, [r7, #12]
 8001d24:	e024      	b.n	8001d70 <LCD_Draw_Circle_Fill+0x7c>
        {
            if(x*x+y*y <= radius*radius)
 8001d26:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001d2a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001d2e:	fb03 f202 	mul.w	r2, r3, r2
 8001d32:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001d36:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8001d3a:	fb01 f303 	mul.w	r3, r1, r3
 8001d3e:	441a      	add	r2, r3
 8001d40:	887b      	ldrh	r3, [r7, #2]
 8001d42:	8879      	ldrh	r1, [r7, #2]
 8001d44:	fb01 f303 	mul.w	r3, r1, r3
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	dc0b      	bgt.n	8001d64 <LCD_Draw_Circle_Fill+0x70>
            {
            	LCD_Draw_Pixel(x+Xpos, y+Ypos, color);
 8001d4c:	89ba      	ldrh	r2, [r7, #12]
 8001d4e:	88fb      	ldrh	r3, [r7, #6]
 8001d50:	4413      	add	r3, r2
 8001d52:	b298      	uxth	r0, r3
 8001d54:	89fa      	ldrh	r2, [r7, #14]
 8001d56:	88bb      	ldrh	r3, [r7, #4]
 8001d58:	4413      	add	r3, r2
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	883a      	ldrh	r2, [r7, #0]
 8001d5e:	4619      	mov	r1, r3
 8001d60:	f7ff ffaa 	bl	8001cb8 <LCD_Draw_Pixel>
        for(int16_t x=-radius; x<=radius; x++)
 8001d64:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	b29b      	uxth	r3, r3
 8001d6e:	81bb      	strh	r3, [r7, #12]
 8001d70:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001d74:	887b      	ldrh	r3, [r7, #2]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	ddd5      	ble.n	8001d26 <LCD_Draw_Circle_Fill+0x32>
    for(int16_t y=-radius; y<=radius; y++)
 8001d7a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	3301      	adds	r3, #1
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	81fb      	strh	r3, [r7, #14]
 8001d86:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001d8a:	887b      	ldrh	r3, [r7, #2]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	ddc5      	ble.n	8001d1c <LCD_Draw_Circle_Fill+0x28>
            }
        }
    }
}
 8001d90:	bf00      	nop
 8001d92:	bf00      	nop
 8001d94:	3714      	adds	r7, #20
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd90      	pop	{r4, r7, pc}
	...

08001d9c <LCD_Clear>:
	  LCD_Draw_Pixel(x, i+y, color);
  }
}

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	4603      	mov	r3, r0
 8001da4:	460a      	mov	r2, r1
 8001da6:	71fb      	strb	r3, [r7, #7]
 8001da8:	4613      	mov	r3, r2
 8001daa:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 8001dac:	79fb      	ldrb	r3, [r7, #7]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d10e      	bne.n	8001dd0 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8001db2:	2300      	movs	r3, #0
 8001db4:	60fb      	str	r3, [r7, #12]
 8001db6:	e007      	b.n	8001dc8 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 8001db8:	4908      	ldr	r1, [pc, #32]	@ (8001ddc <LCD_Clear+0x40>)
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	88ba      	ldrh	r2, [r7, #4]
 8001dbe:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	60fb      	str	r3, [r7, #12]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8001dce:	d3f3      	bcc.n	8001db8 <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 8001dd0:	bf00      	nop
 8001dd2:	3714      	adds	r7, #20
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr
 8001ddc:	200001c0 	.word	0x200001c0

08001de0 <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	4603      	mov	r3, r0
 8001de8:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 8001dea:	4a04      	ldr	r2, [pc, #16]	@ (8001dfc <LCD_SetTextColor+0x1c>)
 8001dec:	88fb      	ldrh	r3, [r7, #6]
 8001dee:	8013      	strh	r3, [r2, #0]
}
 8001df0:	bf00      	nop
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr
 8001dfc:	20000004 	.word	0x20000004

08001e00 <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8001e08:	4a04      	ldr	r2, [pc, #16]	@ (8001e1c <LCD_SetFont+0x1c>)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6013      	str	r3, [r2, #0]
}
 8001e0e:	bf00      	nop
 8001e10:	370c      	adds	r7, #12
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	200001bc 	.word	0x200001bc

08001e20 <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	4603      	mov	r3, r0
 8001e28:	603a      	str	r2, [r7, #0]
 8001e2a:	80fb      	strh	r3, [r7, #6]
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 8001e30:	2300      	movs	r3, #0
 8001e32:	60fb      	str	r3, [r7, #12]
 8001e34:	2300      	movs	r3, #0
 8001e36:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8001e38:	2300      	movs	r3, #0
 8001e3a:	60fb      	str	r3, [r7, #12]
 8001e3c:	e04c      	b.n	8001ed8 <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8001e3e:	2300      	movs	r3, #0
 8001e40:	60bb      	str	r3, [r7, #8]
 8001e42:	e03f      	b.n	8001ec4 <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	683a      	ldr	r2, [r7, #0]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	881b      	ldrh	r3, [r3, #0]
 8001e4e:	4619      	mov	r1, r3
 8001e50:	4b27      	ldr	r3, [pc, #156]	@ (8001ef0 <LCD_Draw_Char+0xd0>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	889b      	ldrh	r3, [r3, #4]
 8001e56:	4a27      	ldr	r2, [pc, #156]	@ (8001ef4 <LCD_Draw_Char+0xd4>)
 8001e58:	fba2 2303 	umull	r2, r3, r2, r3
 8001e5c:	08db      	lsrs	r3, r3, #3
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	00db      	lsls	r3, r3, #3
 8001e62:	2280      	movs	r2, #128	@ 0x80
 8001e64:	409a      	lsls	r2, r3
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	fa42 f303 	asr.w	r3, r2, r3
 8001e6c:	400b      	ands	r3, r1
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d104      	bne.n	8001e7c <LCD_Draw_Char+0x5c>
 8001e72:	4b1f      	ldr	r3, [pc, #124]	@ (8001ef0 <LCD_Draw_Char+0xd0>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	889b      	ldrh	r3, [r3, #4]
 8001e78:	2b0c      	cmp	r3, #12
 8001e7a:	d920      	bls.n	8001ebe <LCD_Draw_Char+0x9e>
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	683a      	ldr	r2, [r7, #0]
 8001e82:	4413      	add	r3, r2
 8001e84:	881b      	ldrh	r3, [r3, #0]
 8001e86:	461a      	mov	r2, r3
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	fa42 f303 	asr.w	r3, r2, r3
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d104      	bne.n	8001ea0 <LCD_Draw_Char+0x80>
 8001e96:	4b16      	ldr	r3, [pc, #88]	@ (8001ef0 <LCD_Draw_Char+0xd0>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	889b      	ldrh	r3, [r3, #4]
 8001e9c:	2b0c      	cmp	r3, #12
 8001e9e:	d80e      	bhi.n	8001ebe <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	b29a      	uxth	r2, r3
 8001ea4:	88fb      	ldrh	r3, [r7, #6]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	b298      	uxth	r0, r3
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	b29a      	uxth	r2, r3
 8001eae:	88bb      	ldrh	r3, [r7, #4]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	4a10      	ldr	r2, [pc, #64]	@ (8001ef8 <LCD_Draw_Char+0xd8>)
 8001eb6:	8812      	ldrh	r2, [r2, #0]
 8001eb8:	4619      	mov	r1, r3
 8001eba:	f7ff fefd 	bl	8001cb8 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	60bb      	str	r3, [r7, #8]
 8001ec4:	4b0a      	ldr	r3, [pc, #40]	@ (8001ef0 <LCD_Draw_Char+0xd0>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	889b      	ldrh	r3, [r3, #4]
 8001eca:	461a      	mov	r2, r3
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d3b8      	bcc.n	8001e44 <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	60fb      	str	r3, [r7, #12]
 8001ed8:	4b05      	ldr	r3, [pc, #20]	@ (8001ef0 <LCD_Draw_Char+0xd0>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	88db      	ldrh	r3, [r3, #6]
 8001ede:	461a      	mov	r2, r3
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d3ab      	bcc.n	8001e3e <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 8001ee6:	bf00      	nop
 8001ee8:	bf00      	nop
 8001eea:	3710      	adds	r7, #16
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	200001bc 	.word	0x200001bc
 8001ef4:	aaaaaaab 	.word	0xaaaaaaab
 8001ef8:	20000004 	.word	0x20000004

08001efc <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	4603      	mov	r3, r0
 8001f04:	80fb      	strh	r3, [r7, #6]
 8001f06:	460b      	mov	r3, r1
 8001f08:	80bb      	strh	r3, [r7, #4]
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8001f0e:	78fb      	ldrb	r3, [r7, #3]
 8001f10:	3b20      	subs	r3, #32
 8001f12:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8001f14:	4b09      	ldr	r3, [pc, #36]	@ (8001f3c <LCD_DisplayChar+0x40>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	78fb      	ldrb	r3, [r7, #3]
 8001f1c:	4907      	ldr	r1, [pc, #28]	@ (8001f3c <LCD_DisplayChar+0x40>)
 8001f1e:	6809      	ldr	r1, [r1, #0]
 8001f20:	88c9      	ldrh	r1, [r1, #6]
 8001f22:	fb01 f303 	mul.w	r3, r1, r3
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	441a      	add	r2, r3
 8001f2a:	88b9      	ldrh	r1, [r7, #4]
 8001f2c:	88fb      	ldrh	r3, [r7, #6]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7ff ff76 	bl	8001e20 <LCD_Draw_Char>
}
 8001f34:	bf00      	nop
 8001f36:	3708      	adds	r7, #8
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	200001bc 	.word	0x200001bc

08001f40 <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f44:	b672      	cpsid	i
}
 8001f46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f48:	bf00      	nop
 8001f4a:	e7fd      	b.n	8001f48 <LCD_Error_Handler+0x8>

08001f4c <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 8001f50:	f001 f931 	bl	80031b6 <STMPE811_Init>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d001      	beq.n	8001f5e <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialzation
 8001f5a:	bf00      	nop
 8001f5c:	e7fd      	b.n	8001f5a <InitializeLCDTouch+0xe>
  }
}
 8001f5e:	bf00      	nop
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <returnTouchStateAndLocation>:

STMPE811_State_t returnTouchStateAndLocation(STMPE811_TouchData * touchStruct)
{
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b082      	sub	sp, #8
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
	return STMPE811_ReadTouch(touchStruct);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f001 f9db 	bl	8003326 <STMPE811_ReadTouch>
 8001f70:	4603      	mov	r3, r0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001f7e:	f000 f9ff 	bl	8002380 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 8001f82:	20ca      	movs	r0, #202	@ 0xca
 8001f84:	f000 f943 	bl	800220e <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 8001f88:	20c3      	movs	r0, #195	@ 0xc3
 8001f8a:	f000 f94d 	bl	8002228 <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 8001f8e:	2008      	movs	r0, #8
 8001f90:	f000 f94a 	bl	8002228 <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 8001f94:	2050      	movs	r0, #80	@ 0x50
 8001f96:	f000 f947 	bl	8002228 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 8001f9a:	20cf      	movs	r0, #207	@ 0xcf
 8001f9c:	f000 f937 	bl	800220e <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 8001fa0:	2000      	movs	r0, #0
 8001fa2:	f000 f941 	bl	8002228 <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8001fa6:	20c1      	movs	r0, #193	@ 0xc1
 8001fa8:	f000 f93e 	bl	8002228 <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 8001fac:	2030      	movs	r0, #48	@ 0x30
 8001fae:	f000 f93b 	bl	8002228 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 8001fb2:	20ed      	movs	r0, #237	@ 0xed
 8001fb4:	f000 f92b 	bl	800220e <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 8001fb8:	2064      	movs	r0, #100	@ 0x64
 8001fba:	f000 f935 	bl	8002228 <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 8001fbe:	2003      	movs	r0, #3
 8001fc0:	f000 f932 	bl	8002228 <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 8001fc4:	2012      	movs	r0, #18
 8001fc6:	f000 f92f 	bl	8002228 <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8001fca:	2081      	movs	r0, #129	@ 0x81
 8001fcc:	f000 f92c 	bl	8002228 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 8001fd0:	20e8      	movs	r0, #232	@ 0xe8
 8001fd2:	f000 f91c 	bl	800220e <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8001fd6:	2085      	movs	r0, #133	@ 0x85
 8001fd8:	f000 f926 	bl	8002228 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001fdc:	2000      	movs	r0, #0
 8001fde:	f000 f923 	bl	8002228 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001fe2:	2078      	movs	r0, #120	@ 0x78
 8001fe4:	f000 f920 	bl	8002228 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8001fe8:	20cb      	movs	r0, #203	@ 0xcb
 8001fea:	f000 f910 	bl	800220e <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 8001fee:	2039      	movs	r0, #57	@ 0x39
 8001ff0:	f000 f91a 	bl	8002228 <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 8001ff4:	202c      	movs	r0, #44	@ 0x2c
 8001ff6:	f000 f917 	bl	8002228 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001ffa:	2000      	movs	r0, #0
 8001ffc:	f000 f914 	bl	8002228 <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 8002000:	2034      	movs	r0, #52	@ 0x34
 8002002:	f000 f911 	bl	8002228 <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8002006:	2002      	movs	r0, #2
 8002008:	f000 f90e 	bl	8002228 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 800200c:	20f7      	movs	r0, #247	@ 0xf7
 800200e:	f000 f8fe 	bl	800220e <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 8002012:	2020      	movs	r0, #32
 8002014:	f000 f908 	bl	8002228 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8002018:	20ea      	movs	r0, #234	@ 0xea
 800201a:	f000 f8f8 	bl	800220e <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800201e:	2000      	movs	r0, #0
 8002020:	f000 f902 	bl	8002228 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002024:	2000      	movs	r0, #0
 8002026:	f000 f8ff 	bl	8002228 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 800202a:	20b1      	movs	r0, #177	@ 0xb1
 800202c:	f000 f8ef 	bl	800220e <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8002030:	2000      	movs	r0, #0
 8002032:	f000 f8f9 	bl	8002228 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8002036:	201b      	movs	r0, #27
 8002038:	f000 f8f6 	bl	8002228 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 800203c:	20b6      	movs	r0, #182	@ 0xb6
 800203e:	f000 f8e6 	bl	800220e <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8002042:	200a      	movs	r0, #10
 8002044:	f000 f8f0 	bl	8002228 <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 8002048:	20a2      	movs	r0, #162	@ 0xa2
 800204a:	f000 f8ed 	bl	8002228 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 800204e:	20c0      	movs	r0, #192	@ 0xc0
 8002050:	f000 f8dd 	bl	800220e <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8002054:	2010      	movs	r0, #16
 8002056:	f000 f8e7 	bl	8002228 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 800205a:	20c1      	movs	r0, #193	@ 0xc1
 800205c:	f000 f8d7 	bl	800220e <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8002060:	2010      	movs	r0, #16
 8002062:	f000 f8e1 	bl	8002228 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 8002066:	20c5      	movs	r0, #197	@ 0xc5
 8002068:	f000 f8d1 	bl	800220e <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 800206c:	2045      	movs	r0, #69	@ 0x45
 800206e:	f000 f8db 	bl	8002228 <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 8002072:	2015      	movs	r0, #21
 8002074:	f000 f8d8 	bl	8002228 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 8002078:	20c7      	movs	r0, #199	@ 0xc7
 800207a:	f000 f8c8 	bl	800220e <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 800207e:	2090      	movs	r0, #144	@ 0x90
 8002080:	f000 f8d2 	bl	8002228 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 8002084:	2036      	movs	r0, #54	@ 0x36
 8002086:	f000 f8c2 	bl	800220e <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 800208a:	20c8      	movs	r0, #200	@ 0xc8
 800208c:	f000 f8cc 	bl	8002228 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 8002090:	20f2      	movs	r0, #242	@ 0xf2
 8002092:	f000 f8bc 	bl	800220e <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8002096:	2000      	movs	r0, #0
 8002098:	f000 f8c6 	bl	8002228 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 800209c:	20b0      	movs	r0, #176	@ 0xb0
 800209e:	f000 f8b6 	bl	800220e <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 80020a2:	20c2      	movs	r0, #194	@ 0xc2
 80020a4:	f000 f8c0 	bl	8002228 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 80020a8:	20b6      	movs	r0, #182	@ 0xb6
 80020aa:	f000 f8b0 	bl	800220e <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 80020ae:	200a      	movs	r0, #10
 80020b0:	f000 f8ba 	bl	8002228 <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 80020b4:	20a7      	movs	r0, #167	@ 0xa7
 80020b6:	f000 f8b7 	bl	8002228 <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 80020ba:	2027      	movs	r0, #39	@ 0x27
 80020bc:	f000 f8b4 	bl	8002228 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 80020c0:	2004      	movs	r0, #4
 80020c2:	f000 f8b1 	bl	8002228 <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 80020c6:	202a      	movs	r0, #42	@ 0x2a
 80020c8:	f000 f8a1 	bl	800220e <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80020cc:	2000      	movs	r0, #0
 80020ce:	f000 f8ab 	bl	8002228 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80020d2:	2000      	movs	r0, #0
 80020d4:	f000 f8a8 	bl	8002228 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80020d8:	2000      	movs	r0, #0
 80020da:	f000 f8a5 	bl	8002228 <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 80020de:	20ef      	movs	r0, #239	@ 0xef
 80020e0:	f000 f8a2 	bl	8002228 <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 80020e4:	202b      	movs	r0, #43	@ 0x2b
 80020e6:	f000 f892 	bl	800220e <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80020ea:	2000      	movs	r0, #0
 80020ec:	f000 f89c 	bl	8002228 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80020f0:	2000      	movs	r0, #0
 80020f2:	f000 f899 	bl	8002228 <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 80020f6:	2001      	movs	r0, #1
 80020f8:	f000 f896 	bl	8002228 <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 80020fc:	203f      	movs	r0, #63	@ 0x3f
 80020fe:	f000 f893 	bl	8002228 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 8002102:	20f6      	movs	r0, #246	@ 0xf6
 8002104:	f000 f883 	bl	800220e <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8002108:	2001      	movs	r0, #1
 800210a:	f000 f88d 	bl	8002228 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800210e:	2000      	movs	r0, #0
 8002110:	f000 f88a 	bl	8002228 <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 8002114:	2006      	movs	r0, #6
 8002116:	f000 f887 	bl	8002228 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 800211a:	202c      	movs	r0, #44	@ 0x2c
 800211c:	f000 f877 	bl	800220e <ili9341_Write_Reg>
  LCD_Delay(200);
 8002120:	20c8      	movs	r0, #200	@ 0xc8
 8002122:	f000 f9e9 	bl	80024f8 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 8002126:	2026      	movs	r0, #38	@ 0x26
 8002128:	f000 f871 	bl	800220e <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 800212c:	2001      	movs	r0, #1
 800212e:	f000 f87b 	bl	8002228 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 8002132:	20e0      	movs	r0, #224	@ 0xe0
 8002134:	f000 f86b 	bl	800220e <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 8002138:	200f      	movs	r0, #15
 800213a:	f000 f875 	bl	8002228 <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 800213e:	2029      	movs	r0, #41	@ 0x29
 8002140:	f000 f872 	bl	8002228 <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 8002144:	2024      	movs	r0, #36	@ 0x24
 8002146:	f000 f86f 	bl	8002228 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 800214a:	200c      	movs	r0, #12
 800214c:	f000 f86c 	bl	8002228 <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 8002150:	200e      	movs	r0, #14
 8002152:	f000 f869 	bl	8002228 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8002156:	2009      	movs	r0, #9
 8002158:	f000 f866 	bl	8002228 <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 800215c:	204e      	movs	r0, #78	@ 0x4e
 800215e:	f000 f863 	bl	8002228 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8002162:	2078      	movs	r0, #120	@ 0x78
 8002164:	f000 f860 	bl	8002228 <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 8002168:	203c      	movs	r0, #60	@ 0x3c
 800216a:	f000 f85d 	bl	8002228 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 800216e:	2009      	movs	r0, #9
 8002170:	f000 f85a 	bl	8002228 <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 8002174:	2013      	movs	r0, #19
 8002176:	f000 f857 	bl	8002228 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 800217a:	2005      	movs	r0, #5
 800217c:	f000 f854 	bl	8002228 <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 8002180:	2017      	movs	r0, #23
 8002182:	f000 f851 	bl	8002228 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8002186:	2011      	movs	r0, #17
 8002188:	f000 f84e 	bl	8002228 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800218c:	2000      	movs	r0, #0
 800218e:	f000 f84b 	bl	8002228 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 8002192:	20e1      	movs	r0, #225	@ 0xe1
 8002194:	f000 f83b 	bl	800220e <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8002198:	2000      	movs	r0, #0
 800219a:	f000 f845 	bl	8002228 <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 800219e:	2016      	movs	r0, #22
 80021a0:	f000 f842 	bl	8002228 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 80021a4:	201b      	movs	r0, #27
 80021a6:	f000 f83f 	bl	8002228 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 80021aa:	2004      	movs	r0, #4
 80021ac:	f000 f83c 	bl	8002228 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 80021b0:	2011      	movs	r0, #17
 80021b2:	f000 f839 	bl	8002228 <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 80021b6:	2007      	movs	r0, #7
 80021b8:	f000 f836 	bl	8002228 <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 80021bc:	2031      	movs	r0, #49	@ 0x31
 80021be:	f000 f833 	bl	8002228 <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 80021c2:	2033      	movs	r0, #51	@ 0x33
 80021c4:	f000 f830 	bl	8002228 <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 80021c8:	2042      	movs	r0, #66	@ 0x42
 80021ca:	f000 f82d 	bl	8002228 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 80021ce:	2005      	movs	r0, #5
 80021d0:	f000 f82a 	bl	8002228 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 80021d4:	200c      	movs	r0, #12
 80021d6:	f000 f827 	bl	8002228 <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 80021da:	200a      	movs	r0, #10
 80021dc:	f000 f824 	bl	8002228 <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 80021e0:	2028      	movs	r0, #40	@ 0x28
 80021e2:	f000 f821 	bl	8002228 <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 80021e6:	202f      	movs	r0, #47	@ 0x2f
 80021e8:	f000 f81e 	bl	8002228 <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 80021ec:	200f      	movs	r0, #15
 80021ee:	f000 f81b 	bl	8002228 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 80021f2:	2011      	movs	r0, #17
 80021f4:	f000 f80b 	bl	800220e <ili9341_Write_Reg>
  LCD_Delay(200);
 80021f8:	20c8      	movs	r0, #200	@ 0xc8
 80021fa:	f000 f97d 	bl	80024f8 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 80021fe:	2029      	movs	r0, #41	@ 0x29
 8002200:	f000 f805 	bl	800220e <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 8002204:	202c      	movs	r0, #44	@ 0x2c
 8002206:	f000 f802 	bl	800220e <ili9341_Write_Reg>
}
 800220a:	bf00      	nop
 800220c:	bd80      	pop	{r7, pc}

0800220e <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 800220e:	b580      	push	{r7, lr}
 8002210:	b082      	sub	sp, #8
 8002212:	af00      	add	r7, sp, #0
 8002214:	4603      	mov	r3, r0
 8002216:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8002218:	79fb      	ldrb	r3, [r7, #7]
 800221a:	4618      	mov	r0, r3
 800221c:	f000 f94a 	bl	80024b4 <LCD_IO_WriteReg>
}
 8002220:	bf00      	nop
 8002222:	3708      	adds	r7, #8
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}

08002228 <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	4603      	mov	r3, r0
 8002230:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8002232:	88fb      	ldrh	r3, [r7, #6]
 8002234:	4618      	mov	r0, r3
 8002236:	f000 f91b 	bl	8002470 <LCD_IO_WriteData>
}
 800223a:	bf00      	nop
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
	...

08002244 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8002248:	4819      	ldr	r0, [pc, #100]	@ (80022b0 <SPI_Init+0x6c>)
 800224a:	f004 fd59 	bl	8006d00 <HAL_SPI_GetState>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d12b      	bne.n	80022ac <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 8002254:	4b16      	ldr	r3, [pc, #88]	@ (80022b0 <SPI_Init+0x6c>)
 8002256:	4a17      	ldr	r2, [pc, #92]	@ (80022b4 <SPI_Init+0x70>)
 8002258:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800225a:	4b15      	ldr	r3, [pc, #84]	@ (80022b0 <SPI_Init+0x6c>)
 800225c:	2218      	movs	r2, #24
 800225e:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8002260:	4b13      	ldr	r3, [pc, #76]	@ (80022b0 <SPI_Init+0x6c>)
 8002262:	2200      	movs	r2, #0
 8002264:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8002266:	4b12      	ldr	r3, [pc, #72]	@ (80022b0 <SPI_Init+0x6c>)
 8002268:	2200      	movs	r2, #0
 800226a:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 800226c:	4b10      	ldr	r3, [pc, #64]	@ (80022b0 <SPI_Init+0x6c>)
 800226e:	2200      	movs	r2, #0
 8002270:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8002272:	4b0f      	ldr	r3, [pc, #60]	@ (80022b0 <SPI_Init+0x6c>)
 8002274:	2200      	movs	r2, #0
 8002276:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8002278:	4b0d      	ldr	r3, [pc, #52]	@ (80022b0 <SPI_Init+0x6c>)
 800227a:	2207      	movs	r2, #7
 800227c:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 800227e:	4b0c      	ldr	r3, [pc, #48]	@ (80022b0 <SPI_Init+0x6c>)
 8002280:	2200      	movs	r2, #0
 8002282:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8002284:	4b0a      	ldr	r3, [pc, #40]	@ (80022b0 <SPI_Init+0x6c>)
 8002286:	2200      	movs	r2, #0
 8002288:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 800228a:	4b09      	ldr	r3, [pc, #36]	@ (80022b0 <SPI_Init+0x6c>)
 800228c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002290:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8002292:	4b07      	ldr	r3, [pc, #28]	@ (80022b0 <SPI_Init+0x6c>)
 8002294:	2200      	movs	r2, #0
 8002296:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8002298:	4b05      	ldr	r3, [pc, #20]	@ (80022b0 <SPI_Init+0x6c>)
 800229a:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800229e:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 80022a0:	4803      	ldr	r0, [pc, #12]	@ (80022b0 <SPI_Init+0x6c>)
 80022a2:	f000 f833 	bl	800230c <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 80022a6:	4802      	ldr	r0, [pc, #8]	@ (80022b0 <SPI_Init+0x6c>)
 80022a8:	f004 f98c 	bl	80065c4 <HAL_SPI_Init>
  }
}
 80022ac:	bf00      	nop
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	200259c0 	.word	0x200259c0
 80022b4:	40015000 	.word	0x40015000

080022b8 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	4603      	mov	r3, r0
 80022c0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80022c2:	2300      	movs	r3, #0
 80022c4:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 80022c6:	4b09      	ldr	r3, [pc, #36]	@ (80022ec <SPI_Write+0x34>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	1db9      	adds	r1, r7, #6
 80022cc:	2201      	movs	r2, #1
 80022ce:	4808      	ldr	r0, [pc, #32]	@ (80022f0 <SPI_Write+0x38>)
 80022d0:	f004 fa29 	bl	8006726 <HAL_SPI_Transmit>
 80022d4:	4603      	mov	r3, r0
 80022d6:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 80022d8:	7bfb      	ldrb	r3, [r7, #15]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d001      	beq.n	80022e2 <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 80022de:	f000 f809 	bl	80022f4 <SPI_Error>
  }
}
 80022e2:	bf00      	nop
 80022e4:	3710      	adds	r7, #16
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	20000018 	.word	0x20000018
 80022f0:	200259c0 	.word	0x200259c0

080022f4 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 80022f8:	4803      	ldr	r0, [pc, #12]	@ (8002308 <SPI_Error+0x14>)
 80022fa:	f004 f9ec 	bl	80066d6 <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 80022fe:	f7ff ffa1 	bl	8002244 <SPI_Init>
}
 8002302:	bf00      	nop
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	200259c0 	.word	0x200259c0

0800230c <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b08a      	sub	sp, #40	@ 0x28
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 8002314:	2300      	movs	r3, #0
 8002316:	613b      	str	r3, [r7, #16]
 8002318:	4b17      	ldr	r3, [pc, #92]	@ (8002378 <SPI_MspInit+0x6c>)
 800231a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800231c:	4a16      	ldr	r2, [pc, #88]	@ (8002378 <SPI_MspInit+0x6c>)
 800231e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002322:	6453      	str	r3, [r2, #68]	@ 0x44
 8002324:	4b14      	ldr	r3, [pc, #80]	@ (8002378 <SPI_MspInit+0x6c>)
 8002326:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002328:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800232c:	613b      	str	r3, [r7, #16]
 800232e:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 8002330:	2300      	movs	r3, #0
 8002332:	60fb      	str	r3, [r7, #12]
 8002334:	4b10      	ldr	r3, [pc, #64]	@ (8002378 <SPI_MspInit+0x6c>)
 8002336:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002338:	4a0f      	ldr	r2, [pc, #60]	@ (8002378 <SPI_MspInit+0x6c>)
 800233a:	f043 0320 	orr.w	r3, r3, #32
 800233e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002340:	4b0d      	ldr	r3, [pc, #52]	@ (8002378 <SPI_MspInit+0x6c>)
 8002342:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002344:	f003 0320 	and.w	r3, r3, #32
 8002348:	60fb      	str	r3, [r7, #12]
 800234a:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 800234c:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8002350:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8002352:	2302      	movs	r3, #2
 8002354:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8002356:	2302      	movs	r3, #2
 8002358:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 800235a:	2301      	movs	r3, #1
 800235c:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 800235e:	2305      	movs	r3, #5
 8002360:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 8002362:	f107 0314 	add.w	r3, r7, #20
 8002366:	4619      	mov	r1, r3
 8002368:	4804      	ldr	r0, [pc, #16]	@ (800237c <SPI_MspInit+0x70>)
 800236a:	f001 fc8d 	bl	8003c88 <HAL_GPIO_Init>
}
 800236e:	bf00      	nop
 8002370:	3728      	adds	r7, #40	@ 0x28
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	40023800 	.word	0x40023800
 800237c:	40021400 	.word	0x40021400

08002380 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b088      	sub	sp, #32
 8002384:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 8002386:	4b36      	ldr	r3, [pc, #216]	@ (8002460 <LCD_IO_Init+0xe0>)
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d164      	bne.n	8002458 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 800238e:	4b34      	ldr	r3, [pc, #208]	@ (8002460 <LCD_IO_Init+0xe0>)
 8002390:	2201      	movs	r2, #1
 8002392:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8002394:	2300      	movs	r3, #0
 8002396:	60bb      	str	r3, [r7, #8]
 8002398:	4b32      	ldr	r3, [pc, #200]	@ (8002464 <LCD_IO_Init+0xe4>)
 800239a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800239c:	4a31      	ldr	r2, [pc, #196]	@ (8002464 <LCD_IO_Init+0xe4>)
 800239e:	f043 0308 	orr.w	r3, r3, #8
 80023a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80023a4:	4b2f      	ldr	r3, [pc, #188]	@ (8002464 <LCD_IO_Init+0xe4>)
 80023a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023a8:	f003 0308 	and.w	r3, r3, #8
 80023ac:	60bb      	str	r3, [r7, #8]
 80023ae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 80023b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80023b4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80023b6:	2301      	movs	r3, #1
 80023b8:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80023ba:	2300      	movs	r3, #0
 80023bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80023be:	2302      	movs	r3, #2
 80023c0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80023c2:	f107 030c 	add.w	r3, r7, #12
 80023c6:	4619      	mov	r1, r3
 80023c8:	4827      	ldr	r0, [pc, #156]	@ (8002468 <LCD_IO_Init+0xe8>)
 80023ca:	f001 fc5d 	bl	8003c88 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 80023ce:	2300      	movs	r3, #0
 80023d0:	607b      	str	r3, [r7, #4]
 80023d2:	4b24      	ldr	r3, [pc, #144]	@ (8002464 <LCD_IO_Init+0xe4>)
 80023d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023d6:	4a23      	ldr	r2, [pc, #140]	@ (8002464 <LCD_IO_Init+0xe4>)
 80023d8:	f043 0308 	orr.w	r3, r3, #8
 80023dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80023de:	4b21      	ldr	r3, [pc, #132]	@ (8002464 <LCD_IO_Init+0xe4>)
 80023e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e2:	f003 0308 	and.w	r3, r3, #8
 80023e6:	607b      	str	r3, [r7, #4]
 80023e8:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80023ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023ee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80023f0:	2301      	movs	r3, #1
 80023f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80023f4:	2300      	movs	r3, #0
 80023f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80023f8:	2302      	movs	r3, #2
 80023fa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80023fc:	f107 030c 	add.w	r3, r7, #12
 8002400:	4619      	mov	r1, r3
 8002402:	4819      	ldr	r0, [pc, #100]	@ (8002468 <LCD_IO_Init+0xe8>)
 8002404:	f001 fc40 	bl	8003c88 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8002408:	2300      	movs	r3, #0
 800240a:	603b      	str	r3, [r7, #0]
 800240c:	4b15      	ldr	r3, [pc, #84]	@ (8002464 <LCD_IO_Init+0xe4>)
 800240e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002410:	4a14      	ldr	r2, [pc, #80]	@ (8002464 <LCD_IO_Init+0xe4>)
 8002412:	f043 0304 	orr.w	r3, r3, #4
 8002416:	6313      	str	r3, [r2, #48]	@ 0x30
 8002418:	4b12      	ldr	r3, [pc, #72]	@ (8002464 <LCD_IO_Init+0xe4>)
 800241a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800241c:	f003 0304 	and.w	r3, r3, #4
 8002420:	603b      	str	r3, [r7, #0]
 8002422:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8002424:	2304      	movs	r3, #4
 8002426:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002428:	2301      	movs	r3, #1
 800242a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800242c:	2300      	movs	r3, #0
 800242e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002430:	2302      	movs	r3, #2
 8002432:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8002434:	f107 030c 	add.w	r3, r7, #12
 8002438:	4619      	mov	r1, r3
 800243a:	480c      	ldr	r0, [pc, #48]	@ (800246c <LCD_IO_Init+0xec>)
 800243c:	f001 fc24 	bl	8003c88 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8002440:	2200      	movs	r2, #0
 8002442:	2104      	movs	r1, #4
 8002444:	4809      	ldr	r0, [pc, #36]	@ (800246c <LCD_IO_Init+0xec>)
 8002446:	f001 feef 	bl	8004228 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 800244a:	2201      	movs	r2, #1
 800244c:	2104      	movs	r1, #4
 800244e:	4807      	ldr	r0, [pc, #28]	@ (800246c <LCD_IO_Init+0xec>)
 8002450:	f001 feea 	bl	8004228 <HAL_GPIO_WritePin>

    SPI_Init();
 8002454:	f7ff fef6 	bl	8002244 <SPI_Init>
  }
}
 8002458:	bf00      	nop
 800245a:	3720      	adds	r7, #32
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	20025a18 	.word	0x20025a18
 8002464:	40023800 	.word	0x40023800
 8002468:	40020c00 	.word	0x40020c00
 800246c:	40020800 	.word	0x40020800

08002470 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	4603      	mov	r3, r0
 8002478:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800247a:	2201      	movs	r2, #1
 800247c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002480:	480a      	ldr	r0, [pc, #40]	@ (80024ac <LCD_IO_WriteData+0x3c>)
 8002482:	f001 fed1 	bl	8004228 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 8002486:	2200      	movs	r2, #0
 8002488:	2104      	movs	r1, #4
 800248a:	4809      	ldr	r0, [pc, #36]	@ (80024b0 <LCD_IO_WriteData+0x40>)
 800248c:	f001 fecc 	bl	8004228 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 8002490:	88fb      	ldrh	r3, [r7, #6]
 8002492:	4618      	mov	r0, r3
 8002494:	f7ff ff10 	bl	80022b8 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002498:	2201      	movs	r2, #1
 800249a:	2104      	movs	r1, #4
 800249c:	4804      	ldr	r0, [pc, #16]	@ (80024b0 <LCD_IO_WriteData+0x40>)
 800249e:	f001 fec3 	bl	8004228 <HAL_GPIO_WritePin>
}
 80024a2:	bf00      	nop
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	40020c00 	.word	0x40020c00
 80024b0:	40020800 	.word	0x40020800

080024b4 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	4603      	mov	r3, r0
 80024bc:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80024be:	2200      	movs	r2, #0
 80024c0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80024c4:	480a      	ldr	r0, [pc, #40]	@ (80024f0 <LCD_IO_WriteReg+0x3c>)
 80024c6:	f001 feaf 	bl	8004228 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 80024ca:	2200      	movs	r2, #0
 80024cc:	2104      	movs	r1, #4
 80024ce:	4809      	ldr	r0, [pc, #36]	@ (80024f4 <LCD_IO_WriteReg+0x40>)
 80024d0:	f001 feaa 	bl	8004228 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 80024d4:	79fb      	ldrb	r3, [r7, #7]
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	4618      	mov	r0, r3
 80024da:	f7ff feed 	bl	80022b8 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80024de:	2201      	movs	r2, #1
 80024e0:	2104      	movs	r1, #4
 80024e2:	4804      	ldr	r0, [pc, #16]	@ (80024f4 <LCD_IO_WriteReg+0x40>)
 80024e4:	f001 fea0 	bl	8004228 <HAL_GPIO_WritePin>
}
 80024e8:	bf00      	nop
 80024ea:	3708      	adds	r7, #8
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	40020c00 	.word	0x40020c00
 80024f4:	40020800 	.word	0x40020800

080024f8 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f001 fa59 	bl	80039b8 <HAL_Delay>
}
 8002506:	bf00      	nop
 8002508:	3708      	adds	r7, #8
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}

0800250e <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800250e:	b580      	push	{r7, lr}
 8002510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/
	initialise_monitor_handles();
 8002512:	f001 f99b 	bl	800384c <initialise_monitor_handles>
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002516:	f001 f9dd 	bl	80038d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800251a:	f000 f815 	bl	8002548 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800251e:	f000 fa05 	bl	800292c <MX_GPIO_Init>
  MX_LTDC_Init();
 8002522:	f000 f8bb 	bl	800269c <MX_LTDC_Init>
  MX_RNG_Init();
 8002526:	f000 f96b 	bl	8002800 <MX_RNG_Init>
  MX_TIM2_Init();
 800252a:	f000 f9b3 	bl	8002894 <MX_TIM2_Init>
  MX_SPI5_Init();
 800252e:	f000 f97b 	bl	8002828 <MX_SPI5_Init>
  MX_I2C3_Init();
 8002532:	f000 f873 	bl	800261c <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  ApplicationInit(); // Initializes the LCD functionality
 8002536:	f7fd ffef 	bl	8000518 <ApplicationInit>
  HAL_Delay(5000);
 800253a:	f241 3088 	movw	r0, #5000	@ 0x1388
 800253e:	f001 fa3b 	bl	80039b8 <HAL_Delay>
  /* USER CODE END 2 */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002542:	bf00      	nop
 8002544:	e7fd      	b.n	8002542 <main+0x34>
	...

08002548 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b094      	sub	sp, #80	@ 0x50
 800254c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800254e:	f107 0320 	add.w	r3, r7, #32
 8002552:	2230      	movs	r2, #48	@ 0x30
 8002554:	2100      	movs	r1, #0
 8002556:	4618      	mov	r0, r3
 8002558:	f004 ff94 	bl	8007484 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800255c:	f107 030c 	add.w	r3, r7, #12
 8002560:	2200      	movs	r2, #0
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	605a      	str	r2, [r3, #4]
 8002566:	609a      	str	r2, [r3, #8]
 8002568:	60da      	str	r2, [r3, #12]
 800256a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800256c:	2300      	movs	r3, #0
 800256e:	60bb      	str	r3, [r7, #8]
 8002570:	4b28      	ldr	r3, [pc, #160]	@ (8002614 <SystemClock_Config+0xcc>)
 8002572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002574:	4a27      	ldr	r2, [pc, #156]	@ (8002614 <SystemClock_Config+0xcc>)
 8002576:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800257a:	6413      	str	r3, [r2, #64]	@ 0x40
 800257c:	4b25      	ldr	r3, [pc, #148]	@ (8002614 <SystemClock_Config+0xcc>)
 800257e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002580:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002584:	60bb      	str	r3, [r7, #8]
 8002586:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002588:	2300      	movs	r3, #0
 800258a:	607b      	str	r3, [r7, #4]
 800258c:	4b22      	ldr	r3, [pc, #136]	@ (8002618 <SystemClock_Config+0xd0>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a21      	ldr	r2, [pc, #132]	@ (8002618 <SystemClock_Config+0xd0>)
 8002592:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002596:	6013      	str	r3, [r2, #0]
 8002598:	4b1f      	ldr	r3, [pc, #124]	@ (8002618 <SystemClock_Config+0xd0>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80025a0:	607b      	str	r3, [r7, #4]
 80025a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80025a4:	2301      	movs	r3, #1
 80025a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80025a8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80025ac:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025ae:	2302      	movs	r3, #2
 80025b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80025b2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80025b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80025b8:	2308      	movs	r3, #8
 80025ba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80025bc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80025c0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80025c2:	2302      	movs	r3, #2
 80025c4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80025c6:	2307      	movs	r3, #7
 80025c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025ca:	f107 0320 	add.w	r3, r7, #32
 80025ce:	4618      	mov	r0, r3
 80025d0:	f003 f98a 	bl	80058e8 <HAL_RCC_OscConfig>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <SystemClock_Config+0x96>
  {
    Error_Handler();
 80025da:	f000 fb55 	bl	8002c88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025de:	230f      	movs	r3, #15
 80025e0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025e2:	2302      	movs	r3, #2
 80025e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025e6:	2300      	movs	r3, #0
 80025e8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80025ea:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80025ee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80025f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025f4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80025f6:	f107 030c 	add.w	r3, r7, #12
 80025fa:	2105      	movs	r1, #5
 80025fc:	4618      	mov	r0, r3
 80025fe:	f003 fbeb 	bl	8005dd8 <HAL_RCC_ClockConfig>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d001      	beq.n	800260c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002608:	f000 fb3e 	bl	8002c88 <Error_Handler>
  }
}
 800260c:	bf00      	nop
 800260e:	3750      	adds	r7, #80	@ 0x50
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	40023800 	.word	0x40023800
 8002618:	40007000 	.word	0x40007000

0800261c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002620:	4b1b      	ldr	r3, [pc, #108]	@ (8002690 <MX_I2C3_Init+0x74>)
 8002622:	4a1c      	ldr	r2, [pc, #112]	@ (8002694 <MX_I2C3_Init+0x78>)
 8002624:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8002626:	4b1a      	ldr	r3, [pc, #104]	@ (8002690 <MX_I2C3_Init+0x74>)
 8002628:	4a1b      	ldr	r2, [pc, #108]	@ (8002698 <MX_I2C3_Init+0x7c>)
 800262a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800262c:	4b18      	ldr	r3, [pc, #96]	@ (8002690 <MX_I2C3_Init+0x74>)
 800262e:	2200      	movs	r2, #0
 8002630:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8002632:	4b17      	ldr	r3, [pc, #92]	@ (8002690 <MX_I2C3_Init+0x74>)
 8002634:	2200      	movs	r2, #0
 8002636:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002638:	4b15      	ldr	r3, [pc, #84]	@ (8002690 <MX_I2C3_Init+0x74>)
 800263a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800263e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002640:	4b13      	ldr	r3, [pc, #76]	@ (8002690 <MX_I2C3_Init+0x74>)
 8002642:	2200      	movs	r2, #0
 8002644:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8002646:	4b12      	ldr	r3, [pc, #72]	@ (8002690 <MX_I2C3_Init+0x74>)
 8002648:	2200      	movs	r2, #0
 800264a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800264c:	4b10      	ldr	r3, [pc, #64]	@ (8002690 <MX_I2C3_Init+0x74>)
 800264e:	2200      	movs	r2, #0
 8002650:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002652:	4b0f      	ldr	r3, [pc, #60]	@ (8002690 <MX_I2C3_Init+0x74>)
 8002654:	2200      	movs	r2, #0
 8002656:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002658:	480d      	ldr	r0, [pc, #52]	@ (8002690 <MX_I2C3_Init+0x74>)
 800265a:	f001 fdff 	bl	800425c <HAL_I2C_Init>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002664:	f000 fb10 	bl	8002c88 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002668:	2100      	movs	r1, #0
 800266a:	4809      	ldr	r0, [pc, #36]	@ (8002690 <MX_I2C3_Init+0x74>)
 800266c:	f002 fe1a 	bl	80052a4 <HAL_I2CEx_ConfigAnalogFilter>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d001      	beq.n	800267a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8002676:	f000 fb07 	bl	8002c88 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800267a:	2100      	movs	r1, #0
 800267c:	4804      	ldr	r0, [pc, #16]	@ (8002690 <MX_I2C3_Init+0x74>)
 800267e:	f002 fe4d 	bl	800531c <HAL_I2CEx_ConfigDigitalFilter>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d001      	beq.n	800268c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8002688:	f000 fafe 	bl	8002c88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800268c:	bf00      	nop
 800268e:	bd80      	pop	{r7, pc}
 8002690:	20025a1c 	.word	0x20025a1c
 8002694:	40005c00 	.word	0x40005c00
 8002698:	000186a0 	.word	0x000186a0

0800269c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b09a      	sub	sp, #104	@ 0x68
 80026a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80026a2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80026a6:	2234      	movs	r2, #52	@ 0x34
 80026a8:	2100      	movs	r1, #0
 80026aa:	4618      	mov	r0, r3
 80026ac:	f004 feea 	bl	8007484 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 80026b0:	463b      	mov	r3, r7
 80026b2:	2234      	movs	r2, #52	@ 0x34
 80026b4:	2100      	movs	r1, #0
 80026b6:	4618      	mov	r0, r3
 80026b8:	f004 fee4 	bl	8007484 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80026bc:	4b4e      	ldr	r3, [pc, #312]	@ (80027f8 <MX_LTDC_Init+0x15c>)
 80026be:	4a4f      	ldr	r2, [pc, #316]	@ (80027fc <MX_LTDC_Init+0x160>)
 80026c0:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80026c2:	4b4d      	ldr	r3, [pc, #308]	@ (80027f8 <MX_LTDC_Init+0x15c>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80026c8:	4b4b      	ldr	r3, [pc, #300]	@ (80027f8 <MX_LTDC_Init+0x15c>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80026ce:	4b4a      	ldr	r3, [pc, #296]	@ (80027f8 <MX_LTDC_Init+0x15c>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80026d4:	4b48      	ldr	r3, [pc, #288]	@ (80027f8 <MX_LTDC_Init+0x15c>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 80026da:	4b47      	ldr	r3, [pc, #284]	@ (80027f8 <MX_LTDC_Init+0x15c>)
 80026dc:	2207      	movs	r2, #7
 80026de:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 80026e0:	4b45      	ldr	r3, [pc, #276]	@ (80027f8 <MX_LTDC_Init+0x15c>)
 80026e2:	2203      	movs	r2, #3
 80026e4:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 80026e6:	4b44      	ldr	r3, [pc, #272]	@ (80027f8 <MX_LTDC_Init+0x15c>)
 80026e8:	220e      	movs	r2, #14
 80026ea:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 80026ec:	4b42      	ldr	r3, [pc, #264]	@ (80027f8 <MX_LTDC_Init+0x15c>)
 80026ee:	2205      	movs	r2, #5
 80026f0:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 80026f2:	4b41      	ldr	r3, [pc, #260]	@ (80027f8 <MX_LTDC_Init+0x15c>)
 80026f4:	f240 228e 	movw	r2, #654	@ 0x28e
 80026f8:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 80026fa:	4b3f      	ldr	r3, [pc, #252]	@ (80027f8 <MX_LTDC_Init+0x15c>)
 80026fc:	f240 12e5 	movw	r2, #485	@ 0x1e5
 8002700:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 8002702:	4b3d      	ldr	r3, [pc, #244]	@ (80027f8 <MX_LTDC_Init+0x15c>)
 8002704:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8002708:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 800270a:	4b3b      	ldr	r3, [pc, #236]	@ (80027f8 <MX_LTDC_Init+0x15c>)
 800270c:	f240 12e7 	movw	r2, #487	@ 0x1e7
 8002710:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8002712:	4b39      	ldr	r3, [pc, #228]	@ (80027f8 <MX_LTDC_Init+0x15c>)
 8002714:	2200      	movs	r2, #0
 8002716:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 800271a:	4b37      	ldr	r3, [pc, #220]	@ (80027f8 <MX_LTDC_Init+0x15c>)
 800271c:	2200      	movs	r2, #0
 800271e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8002722:	4b35      	ldr	r3, [pc, #212]	@ (80027f8 <MX_LTDC_Init+0x15c>)
 8002724:	2200      	movs	r2, #0
 8002726:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800272a:	4833      	ldr	r0, [pc, #204]	@ (80027f8 <MX_LTDC_Init+0x15c>)
 800272c:	f002 fe36 	bl	800539c <HAL_LTDC_Init>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d001      	beq.n	800273a <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8002736:	f000 faa7 	bl	8002c88 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800273a:	2300      	movs	r3, #0
 800273c:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 800273e:	2300      	movs	r3, #0
 8002740:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 8002742:	2300      	movs	r3, #0
 8002744:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 8002746:	2300      	movs	r3, #0
 8002748:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800274a:	2300      	movs	r3, #0
 800274c:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 800274e:	2300      	movs	r3, #0
 8002750:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 8002752:	2300      	movs	r3, #0
 8002754:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8002756:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800275a:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800275c:	2305      	movs	r3, #5
 800275e:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 8002760:	2300      	movs	r3, #0
 8002762:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 8002764:	2300      	movs	r3, #0
 8002766:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 8002768:	2300      	movs	r3, #0
 800276a:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 800276c:	2300      	movs	r3, #0
 800276e:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 8002772:	2300      	movs	r3, #0
 8002774:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 8002778:	2300      	movs	r3, #0
 800277a:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800277e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002782:	2200      	movs	r2, #0
 8002784:	4619      	mov	r1, r3
 8002786:	481c      	ldr	r0, [pc, #112]	@ (80027f8 <MX_LTDC_Init+0x15c>)
 8002788:	f002 fed8 	bl	800553c <HAL_LTDC_ConfigLayer>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d001      	beq.n	8002796 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8002792:	f000 fa79 	bl	8002c88 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8002796:	2300      	movs	r3, #0
 8002798:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 800279a:	2300      	movs	r3, #0
 800279c:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 800279e:	2300      	movs	r3, #0
 80027a0:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 80027a2:	2300      	movs	r3, #0
 80027a4:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80027a6:	2300      	movs	r3, #0
 80027a8:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 80027aa:	2300      	movs	r3, #0
 80027ac:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 80027ae:	2300      	movs	r3, #0
 80027b0:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80027b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80027b6:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80027b8:	2305      	movs	r3, #5
 80027ba:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 80027bc:	2300      	movs	r3, #0
 80027be:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 80027c0:	2300      	movs	r3, #0
 80027c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 80027c4:	2300      	movs	r3, #0
 80027c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 80027c8:	2300      	movs	r3, #0
 80027ca:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 80027ce:	2300      	movs	r3, #0
 80027d0:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 80027d4:	2300      	movs	r3, #0
 80027d6:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 80027da:	463b      	mov	r3, r7
 80027dc:	2201      	movs	r2, #1
 80027de:	4619      	mov	r1, r3
 80027e0:	4805      	ldr	r0, [pc, #20]	@ (80027f8 <MX_LTDC_Init+0x15c>)
 80027e2:	f002 feab 	bl	800553c <HAL_LTDC_ConfigLayer>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d001      	beq.n	80027f0 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 80027ec:	f000 fa4c 	bl	8002c88 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80027f0:	bf00      	nop
 80027f2:	3768      	adds	r7, #104	@ 0x68
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	20025a70 	.word	0x20025a70
 80027fc:	40016800 	.word	0x40016800

08002800 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8002804:	4b06      	ldr	r3, [pc, #24]	@ (8002820 <MX_RNG_Init+0x20>)
 8002806:	4a07      	ldr	r2, [pc, #28]	@ (8002824 <MX_RNG_Init+0x24>)
 8002808:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800280a:	4805      	ldr	r0, [pc, #20]	@ (8002820 <MX_RNG_Init+0x20>)
 800280c:	f003 feb0 	bl	8006570 <HAL_RNG_Init>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8002816:	f000 fa37 	bl	8002c88 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800281a:	bf00      	nop
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	20025b18 	.word	0x20025b18
 8002824:	50060800 	.word	0x50060800

08002828 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 800282c:	4b17      	ldr	r3, [pc, #92]	@ (800288c <MX_SPI5_Init+0x64>)
 800282e:	4a18      	ldr	r2, [pc, #96]	@ (8002890 <MX_SPI5_Init+0x68>)
 8002830:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8002832:	4b16      	ldr	r3, [pc, #88]	@ (800288c <MX_SPI5_Init+0x64>)
 8002834:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002838:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800283a:	4b14      	ldr	r3, [pc, #80]	@ (800288c <MX_SPI5_Init+0x64>)
 800283c:	2200      	movs	r2, #0
 800283e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8002840:	4b12      	ldr	r3, [pc, #72]	@ (800288c <MX_SPI5_Init+0x64>)
 8002842:	2200      	movs	r2, #0
 8002844:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002846:	4b11      	ldr	r3, [pc, #68]	@ (800288c <MX_SPI5_Init+0x64>)
 8002848:	2200      	movs	r2, #0
 800284a:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800284c:	4b0f      	ldr	r3, [pc, #60]	@ (800288c <MX_SPI5_Init+0x64>)
 800284e:	2200      	movs	r2, #0
 8002850:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8002852:	4b0e      	ldr	r3, [pc, #56]	@ (800288c <MX_SPI5_Init+0x64>)
 8002854:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002858:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800285a:	4b0c      	ldr	r3, [pc, #48]	@ (800288c <MX_SPI5_Init+0x64>)
 800285c:	2200      	movs	r2, #0
 800285e:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002860:	4b0a      	ldr	r3, [pc, #40]	@ (800288c <MX_SPI5_Init+0x64>)
 8002862:	2200      	movs	r2, #0
 8002864:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8002866:	4b09      	ldr	r3, [pc, #36]	@ (800288c <MX_SPI5_Init+0x64>)
 8002868:	2200      	movs	r2, #0
 800286a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800286c:	4b07      	ldr	r3, [pc, #28]	@ (800288c <MX_SPI5_Init+0x64>)
 800286e:	2200      	movs	r2, #0
 8002870:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 8002872:	4b06      	ldr	r3, [pc, #24]	@ (800288c <MX_SPI5_Init+0x64>)
 8002874:	220a      	movs	r2, #10
 8002876:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8002878:	4804      	ldr	r0, [pc, #16]	@ (800288c <MX_SPI5_Init+0x64>)
 800287a:	f003 fea3 	bl	80065c4 <HAL_SPI_Init>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d001      	beq.n	8002888 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8002884:	f000 fa00 	bl	8002c88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8002888:	bf00      	nop
 800288a:	bd80      	pop	{r7, pc}
 800288c:	20025b28 	.word	0x20025b28
 8002890:	40015000 	.word	0x40015000

08002894 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b086      	sub	sp, #24
 8002898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800289a:	f107 0308 	add.w	r3, r7, #8
 800289e:	2200      	movs	r2, #0
 80028a0:	601a      	str	r2, [r3, #0]
 80028a2:	605a      	str	r2, [r3, #4]
 80028a4:	609a      	str	r2, [r3, #8]
 80028a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028a8:	463b      	mov	r3, r7
 80028aa:	2200      	movs	r2, #0
 80028ac:	601a      	str	r2, [r3, #0]
 80028ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80028b0:	4b1d      	ldr	r3, [pc, #116]	@ (8002928 <MX_TIM2_Init+0x94>)
 80028b2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80028b6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80028b8:	4b1b      	ldr	r3, [pc, #108]	@ (8002928 <MX_TIM2_Init+0x94>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028be:	4b1a      	ldr	r3, [pc, #104]	@ (8002928 <MX_TIM2_Init+0x94>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80028c4:	4b18      	ldr	r3, [pc, #96]	@ (8002928 <MX_TIM2_Init+0x94>)
 80028c6:	f04f 32ff 	mov.w	r2, #4294967295
 80028ca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028cc:	4b16      	ldr	r3, [pc, #88]	@ (8002928 <MX_TIM2_Init+0x94>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028d2:	4b15      	ldr	r3, [pc, #84]	@ (8002928 <MX_TIM2_Init+0x94>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80028d8:	4813      	ldr	r0, [pc, #76]	@ (8002928 <MX_TIM2_Init+0x94>)
 80028da:	f004 fafb 	bl	8006ed4 <HAL_TIM_Base_Init>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d001      	beq.n	80028e8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80028e4:	f000 f9d0 	bl	8002c88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80028ec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80028ee:	f107 0308 	add.w	r3, r7, #8
 80028f2:	4619      	mov	r1, r3
 80028f4:	480c      	ldr	r0, [pc, #48]	@ (8002928 <MX_TIM2_Init+0x94>)
 80028f6:	f004 fb3c 	bl	8006f72 <HAL_TIM_ConfigClockSource>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d001      	beq.n	8002904 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002900:	f000 f9c2 	bl	8002c88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002904:	2300      	movs	r3, #0
 8002906:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002908:	2300      	movs	r3, #0
 800290a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800290c:	463b      	mov	r3, r7
 800290e:	4619      	mov	r1, r3
 8002910:	4805      	ldr	r0, [pc, #20]	@ (8002928 <MX_TIM2_Init+0x94>)
 8002912:	f004 fd3b 	bl	800738c <HAL_TIMEx_MasterConfigSynchronization>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d001      	beq.n	8002920 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800291c:	f000 f9b4 	bl	8002c88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002920:	bf00      	nop
 8002922:	3718      	adds	r7, #24
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	20025b80 	.word	0x20025b80

0800292c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b08e      	sub	sp, #56	@ 0x38
 8002930:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002932:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002936:	2200      	movs	r2, #0
 8002938:	601a      	str	r2, [r3, #0]
 800293a:	605a      	str	r2, [r3, #4]
 800293c:	609a      	str	r2, [r3, #8]
 800293e:	60da      	str	r2, [r3, #12]
 8002940:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002942:	2300      	movs	r3, #0
 8002944:	623b      	str	r3, [r7, #32]
 8002946:	4bb2      	ldr	r3, [pc, #712]	@ (8002c10 <MX_GPIO_Init+0x2e4>)
 8002948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800294a:	4ab1      	ldr	r2, [pc, #708]	@ (8002c10 <MX_GPIO_Init+0x2e4>)
 800294c:	f043 0304 	orr.w	r3, r3, #4
 8002950:	6313      	str	r3, [r2, #48]	@ 0x30
 8002952:	4baf      	ldr	r3, [pc, #700]	@ (8002c10 <MX_GPIO_Init+0x2e4>)
 8002954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002956:	f003 0304 	and.w	r3, r3, #4
 800295a:	623b      	str	r3, [r7, #32]
 800295c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800295e:	2300      	movs	r3, #0
 8002960:	61fb      	str	r3, [r7, #28]
 8002962:	4bab      	ldr	r3, [pc, #684]	@ (8002c10 <MX_GPIO_Init+0x2e4>)
 8002964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002966:	4aaa      	ldr	r2, [pc, #680]	@ (8002c10 <MX_GPIO_Init+0x2e4>)
 8002968:	f043 0320 	orr.w	r3, r3, #32
 800296c:	6313      	str	r3, [r2, #48]	@ 0x30
 800296e:	4ba8      	ldr	r3, [pc, #672]	@ (8002c10 <MX_GPIO_Init+0x2e4>)
 8002970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002972:	f003 0320 	and.w	r3, r3, #32
 8002976:	61fb      	str	r3, [r7, #28]
 8002978:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800297a:	2300      	movs	r3, #0
 800297c:	61bb      	str	r3, [r7, #24]
 800297e:	4ba4      	ldr	r3, [pc, #656]	@ (8002c10 <MX_GPIO_Init+0x2e4>)
 8002980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002982:	4aa3      	ldr	r2, [pc, #652]	@ (8002c10 <MX_GPIO_Init+0x2e4>)
 8002984:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002988:	6313      	str	r3, [r2, #48]	@ 0x30
 800298a:	4ba1      	ldr	r3, [pc, #644]	@ (8002c10 <MX_GPIO_Init+0x2e4>)
 800298c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800298e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002992:	61bb      	str	r3, [r7, #24]
 8002994:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002996:	2300      	movs	r3, #0
 8002998:	617b      	str	r3, [r7, #20]
 800299a:	4b9d      	ldr	r3, [pc, #628]	@ (8002c10 <MX_GPIO_Init+0x2e4>)
 800299c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800299e:	4a9c      	ldr	r2, [pc, #624]	@ (8002c10 <MX_GPIO_Init+0x2e4>)
 80029a0:	f043 0301 	orr.w	r3, r3, #1
 80029a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80029a6:	4b9a      	ldr	r3, [pc, #616]	@ (8002c10 <MX_GPIO_Init+0x2e4>)
 80029a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029aa:	f003 0301 	and.w	r3, r3, #1
 80029ae:	617b      	str	r3, [r7, #20]
 80029b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80029b2:	2300      	movs	r3, #0
 80029b4:	613b      	str	r3, [r7, #16]
 80029b6:	4b96      	ldr	r3, [pc, #600]	@ (8002c10 <MX_GPIO_Init+0x2e4>)
 80029b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ba:	4a95      	ldr	r2, [pc, #596]	@ (8002c10 <MX_GPIO_Init+0x2e4>)
 80029bc:	f043 0302 	orr.w	r3, r3, #2
 80029c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80029c2:	4b93      	ldr	r3, [pc, #588]	@ (8002c10 <MX_GPIO_Init+0x2e4>)
 80029c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029c6:	f003 0302 	and.w	r3, r3, #2
 80029ca:	613b      	str	r3, [r7, #16]
 80029cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80029ce:	2300      	movs	r3, #0
 80029d0:	60fb      	str	r3, [r7, #12]
 80029d2:	4b8f      	ldr	r3, [pc, #572]	@ (8002c10 <MX_GPIO_Init+0x2e4>)
 80029d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029d6:	4a8e      	ldr	r2, [pc, #568]	@ (8002c10 <MX_GPIO_Init+0x2e4>)
 80029d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80029dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80029de:	4b8c      	ldr	r3, [pc, #560]	@ (8002c10 <MX_GPIO_Init+0x2e4>)
 80029e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029e6:	60fb      	str	r3, [r7, #12]
 80029e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80029ea:	2300      	movs	r3, #0
 80029ec:	60bb      	str	r3, [r7, #8]
 80029ee:	4b88      	ldr	r3, [pc, #544]	@ (8002c10 <MX_GPIO_Init+0x2e4>)
 80029f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f2:	4a87      	ldr	r2, [pc, #540]	@ (8002c10 <MX_GPIO_Init+0x2e4>)
 80029f4:	f043 0310 	orr.w	r3, r3, #16
 80029f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80029fa:	4b85      	ldr	r3, [pc, #532]	@ (8002c10 <MX_GPIO_Init+0x2e4>)
 80029fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029fe:	f003 0310 	and.w	r3, r3, #16
 8002a02:	60bb      	str	r3, [r7, #8]
 8002a04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a06:	2300      	movs	r3, #0
 8002a08:	607b      	str	r3, [r7, #4]
 8002a0a:	4b81      	ldr	r3, [pc, #516]	@ (8002c10 <MX_GPIO_Init+0x2e4>)
 8002a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a0e:	4a80      	ldr	r2, [pc, #512]	@ (8002c10 <MX_GPIO_Init+0x2e4>)
 8002a10:	f043 0308 	orr.w	r3, r3, #8
 8002a14:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a16:	4b7e      	ldr	r3, [pc, #504]	@ (8002c10 <MX_GPIO_Init+0x2e4>)
 8002a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a1a:	f003 0308 	and.w	r3, r3, #8
 8002a1e:	607b      	str	r3, [r7, #4]
 8002a20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8002a22:	2200      	movs	r2, #0
 8002a24:	2116      	movs	r1, #22
 8002a26:	487b      	ldr	r0, [pc, #492]	@ (8002c14 <MX_GPIO_Init+0x2e8>)
 8002a28:	f001 fbfe 	bl	8004228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	2180      	movs	r1, #128	@ 0x80
 8002a30:	4879      	ldr	r0, [pc, #484]	@ (8002c18 <MX_GPIO_Init+0x2ec>)
 8002a32:	f001 fbf9 	bl	8004228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8002a36:	2200      	movs	r2, #0
 8002a38:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8002a3c:	4877      	ldr	r0, [pc, #476]	@ (8002c1c <MX_GPIO_Init+0x2f0>)
 8002a3e:	f001 fbf3 	bl	8004228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8002a42:	2200      	movs	r2, #0
 8002a44:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8002a48:	4875      	ldr	r0, [pc, #468]	@ (8002c20 <MX_GPIO_Init+0x2f4>)
 8002a4a:	f001 fbed 	bl	8004228 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8002a4e:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8002a52:	627b      	str	r3, [r7, #36]	@ 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a54:	2302      	movs	r3, #2
 8002a56:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002a60:	230c      	movs	r3, #12
 8002a62:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002a64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a68:	4619      	mov	r1, r3
 8002a6a:	486e      	ldr	r0, [pc, #440]	@ (8002c24 <MX_GPIO_Init+0x2f8>)
 8002a6c:	f001 f90c 	bl	8003c88 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8002a70:	2301      	movs	r3, #1
 8002a72:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a74:	2302      	movs	r3, #2
 8002a76:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002a80:	230c      	movs	r3, #12
 8002a82:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8002a84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a88:	4619      	mov	r1, r3
 8002a8a:	4862      	ldr	r0, [pc, #392]	@ (8002c14 <MX_GPIO_Init+0x2e8>)
 8002a8c:	f001 f8fc 	bl	8003c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8002a90:	2316      	movs	r3, #22
 8002a92:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a94:	2301      	movs	r3, #1
 8002a96:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002aa0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	485b      	ldr	r0, [pc, #364]	@ (8002c14 <MX_GPIO_Init+0x2e8>)
 8002aa8:	f001 f8ee 	bl	8003c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8002aac:	f248 0307 	movw	r3, #32775	@ 0x8007
 8002ab0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002ab2:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002ab6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002abc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	4855      	ldr	r0, [pc, #340]	@ (8002c18 <MX_GPIO_Init+0x2ec>)
 8002ac4:	f001 f8e0 	bl	8003c88 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8002ac8:	2380      	movs	r3, #128	@ 0x80
 8002aca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002acc:	2301      	movs	r3, #1
 8002ace:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8002ad8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002adc:	4619      	mov	r1, r3
 8002ade:	484e      	ldr	r0, [pc, #312]	@ (8002c18 <MX_GPIO_Init+0x2ec>)
 8002ae0:	f001 f8d2 	bl	8003c88 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8002ae4:	2320      	movs	r3, #32
 8002ae6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002ae8:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002aec:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aee:	2300      	movs	r3, #0
 8002af0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8002af2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002af6:	4619      	mov	r1, r3
 8002af8:	4846      	ldr	r0, [pc, #280]	@ (8002c14 <MX_GPIO_Init+0x2e8>)
 8002afa:	f001 f8c5 	bl	8003c88 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8002afe:	2304      	movs	r3, #4
 8002b00:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b02:	2300      	movs	r3, #0
 8002b04:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b06:	2300      	movs	r3, #0
 8002b08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8002b0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b0e:	4619      	mov	r1, r3
 8002b10:	4845      	ldr	r0, [pc, #276]	@ (8002c28 <MX_GPIO_Init+0x2fc>)
 8002b12:	f001 f8b9 	bl	8003c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8002b16:	f248 1333 	movw	r3, #33075	@ 0x8133
 8002b1a:	627b      	str	r3, [r7, #36]	@ 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b1c:	2302      	movs	r3, #2
 8002b1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b20:	2300      	movs	r3, #0
 8002b22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b24:	2303      	movs	r3, #3
 8002b26:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002b28:	230c      	movs	r3, #12
 8002b2a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002b2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b30:	4619      	mov	r1, r3
 8002b32:	483b      	ldr	r0, [pc, #236]	@ (8002c20 <MX_GPIO_Init+0x2f4>)
 8002b34:	f001 f8a8 	bl	8003c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8002b38:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8002b3c:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b3e:	2302      	movs	r3, #2
 8002b40:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b42:	2300      	movs	r3, #0
 8002b44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b46:	2303      	movs	r3, #3
 8002b48:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002b4a:	230c      	movs	r3, #12
 8002b4c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b52:	4619      	mov	r1, r3
 8002b54:	4835      	ldr	r0, [pc, #212]	@ (8002c2c <MX_GPIO_Init+0x300>)
 8002b56:	f001 f897 	bl	8003c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8002b5a:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8002b5e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b60:	2302      	movs	r3, #2
 8002b62:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b64:	2300      	movs	r3, #0
 8002b66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8002b6c:	230c      	movs	r3, #12
 8002b6e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b74:	4619      	mov	r1, r3
 8002b76:	482c      	ldr	r0, [pc, #176]	@ (8002c28 <MX_GPIO_Init+0x2fc>)
 8002b78:	f001 f886 	bl	8003c88 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8002b7c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002b80:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b82:	2300      	movs	r3, #0
 8002b84:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b86:	2300      	movs	r3, #0
 8002b88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8002b8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b8e:	4619      	mov	r1, r3
 8002b90:	4825      	ldr	r0, [pc, #148]	@ (8002c28 <MX_GPIO_Init+0x2fc>)
 8002b92:	f001 f879 	bl	8003c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8002b96:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8002b9a:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b9c:	2302      	movs	r3, #2
 8002b9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002ba8:	230c      	movs	r3, #12
 8002baa:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002bac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	481a      	ldr	r0, [pc, #104]	@ (8002c1c <MX_GPIO_Init+0x2f0>)
 8002bb4:	f001 f868 	bl	8003c88 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8002bb8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002bbc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8002bc6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002bca:	4619      	mov	r1, r3
 8002bcc:	4813      	ldr	r0, [pc, #76]	@ (8002c1c <MX_GPIO_Init+0x2f0>)
 8002bce:	f001 f85b 	bl	8003c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8002bd2:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002bd6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002be0:	2300      	movs	r3, #0
 8002be2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002be4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002be8:	4619      	mov	r1, r3
 8002bea:	480c      	ldr	r0, [pc, #48]	@ (8002c1c <MX_GPIO_Init+0x2f0>)
 8002bec:	f001 f84c 	bl	8003c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002bf0:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002bf4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c02:	2307      	movs	r3, #7
 8002c04:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	e010      	b.n	8002c30 <MX_GPIO_Init+0x304>
 8002c0e:	bf00      	nop
 8002c10:	40023800 	.word	0x40023800
 8002c14:	40020800 	.word	0x40020800
 8002c18:	40020000 	.word	0x40020000
 8002c1c:	40020c00 	.word	0x40020c00
 8002c20:	40021800 	.word	0x40021800
 8002c24:	40021400 	.word	0x40021400
 8002c28:	40020400 	.word	0x40020400
 8002c2c:	40021000 	.word	0x40021000
 8002c30:	4812      	ldr	r0, [pc, #72]	@ (8002c7c <MX_GPIO_Init+0x350>)
 8002c32:	f001 f829 	bl	8003c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8002c36:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8002c3a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c40:	2300      	movs	r3, #0
 8002c42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c44:	2300      	movs	r3, #0
 8002c46:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002c48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	480c      	ldr	r0, [pc, #48]	@ (8002c80 <MX_GPIO_Init+0x354>)
 8002c50:	f001 f81a 	bl	8003c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8002c54:	2360      	movs	r3, #96	@ 0x60
 8002c56:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c58:	2302      	movs	r3, #2
 8002c5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c60:	2303      	movs	r3, #3
 8002c62:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002c64:	230c      	movs	r3, #12
 8002c66:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	4805      	ldr	r0, [pc, #20]	@ (8002c84 <MX_GPIO_Init+0x358>)
 8002c70:	f001 f80a 	bl	8003c88 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002c74:	bf00      	nop
 8002c76:	3738      	adds	r7, #56	@ 0x38
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	40020000 	.word	0x40020000
 8002c80:	40021800 	.word	0x40021800
 8002c84:	40020400 	.word	0x40020400

08002c88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002c8c:	b672      	cpsid	i
}
 8002c8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c90:	bf00      	nop
 8002c92:	e7fd      	b.n	8002c90 <Error_Handler+0x8>

08002c94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	607b      	str	r3, [r7, #4]
 8002c9e:	4b10      	ldr	r3, [pc, #64]	@ (8002ce0 <HAL_MspInit+0x4c>)
 8002ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ca2:	4a0f      	ldr	r2, [pc, #60]	@ (8002ce0 <HAL_MspInit+0x4c>)
 8002ca4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ca8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002caa:	4b0d      	ldr	r3, [pc, #52]	@ (8002ce0 <HAL_MspInit+0x4c>)
 8002cac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cb2:	607b      	str	r3, [r7, #4]
 8002cb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	603b      	str	r3, [r7, #0]
 8002cba:	4b09      	ldr	r3, [pc, #36]	@ (8002ce0 <HAL_MspInit+0x4c>)
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cbe:	4a08      	ldr	r2, [pc, #32]	@ (8002ce0 <HAL_MspInit+0x4c>)
 8002cc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cc4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cc6:	4b06      	ldr	r3, [pc, #24]	@ (8002ce0 <HAL_MspInit+0x4c>)
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cce:	603b      	str	r3, [r7, #0]
 8002cd0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002cd2:	2007      	movs	r0, #7
 8002cd4:	f000 ff88 	bl	8003be8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cd8:	bf00      	nop
 8002cda:	3708      	adds	r7, #8
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	40023800 	.word	0x40023800

08002ce4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b08a      	sub	sp, #40	@ 0x28
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cec:	f107 0314 	add.w	r3, r7, #20
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	601a      	str	r2, [r3, #0]
 8002cf4:	605a      	str	r2, [r3, #4]
 8002cf6:	609a      	str	r2, [r3, #8]
 8002cf8:	60da      	str	r2, [r3, #12]
 8002cfa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a29      	ldr	r2, [pc, #164]	@ (8002da8 <HAL_I2C_MspInit+0xc4>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d14b      	bne.n	8002d9e <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d06:	2300      	movs	r3, #0
 8002d08:	613b      	str	r3, [r7, #16]
 8002d0a:	4b28      	ldr	r3, [pc, #160]	@ (8002dac <HAL_I2C_MspInit+0xc8>)
 8002d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d0e:	4a27      	ldr	r2, [pc, #156]	@ (8002dac <HAL_I2C_MspInit+0xc8>)
 8002d10:	f043 0304 	orr.w	r3, r3, #4
 8002d14:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d16:	4b25      	ldr	r3, [pc, #148]	@ (8002dac <HAL_I2C_MspInit+0xc8>)
 8002d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d1a:	f003 0304 	and.w	r3, r3, #4
 8002d1e:	613b      	str	r3, [r7, #16]
 8002d20:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d22:	2300      	movs	r3, #0
 8002d24:	60fb      	str	r3, [r7, #12]
 8002d26:	4b21      	ldr	r3, [pc, #132]	@ (8002dac <HAL_I2C_MspInit+0xc8>)
 8002d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d2a:	4a20      	ldr	r2, [pc, #128]	@ (8002dac <HAL_I2C_MspInit+0xc8>)
 8002d2c:	f043 0301 	orr.w	r3, r3, #1
 8002d30:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d32:	4b1e      	ldr	r3, [pc, #120]	@ (8002dac <HAL_I2C_MspInit+0xc8>)
 8002d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d36:	f003 0301 	and.w	r3, r3, #1
 8002d3a:	60fb      	str	r3, [r7, #12]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8002d3e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002d42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d44:	2312      	movs	r3, #18
 8002d46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002d50:	2304      	movs	r3, #4
 8002d52:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8002d54:	f107 0314 	add.w	r3, r7, #20
 8002d58:	4619      	mov	r1, r3
 8002d5a:	4815      	ldr	r0, [pc, #84]	@ (8002db0 <HAL_I2C_MspInit+0xcc>)
 8002d5c:	f000 ff94 	bl	8003c88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8002d60:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002d64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d66:	2312      	movs	r3, #18
 8002d68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002d72:	2304      	movs	r3, #4
 8002d74:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8002d76:	f107 0314 	add.w	r3, r7, #20
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	480d      	ldr	r0, [pc, #52]	@ (8002db4 <HAL_I2C_MspInit+0xd0>)
 8002d7e:	f000 ff83 	bl	8003c88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002d82:	2300      	movs	r3, #0
 8002d84:	60bb      	str	r3, [r7, #8]
 8002d86:	4b09      	ldr	r3, [pc, #36]	@ (8002dac <HAL_I2C_MspInit+0xc8>)
 8002d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d8a:	4a08      	ldr	r2, [pc, #32]	@ (8002dac <HAL_I2C_MspInit+0xc8>)
 8002d8c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002d90:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d92:	4b06      	ldr	r3, [pc, #24]	@ (8002dac <HAL_I2C_MspInit+0xc8>)
 8002d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d96:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002d9a:	60bb      	str	r3, [r7, #8]
 8002d9c:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8002d9e:	bf00      	nop
 8002da0:	3728      	adds	r7, #40	@ 0x28
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	40005c00 	.word	0x40005c00
 8002dac:	40023800 	.word	0x40023800
 8002db0:	40020800 	.word	0x40020800
 8002db4:	40020000 	.word	0x40020000

08002db8 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b09a      	sub	sp, #104	@ 0x68
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dc0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	601a      	str	r2, [r3, #0]
 8002dc8:	605a      	str	r2, [r3, #4]
 8002dca:	609a      	str	r2, [r3, #8]
 8002dcc:	60da      	str	r2, [r3, #12]
 8002dce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002dd0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002dd4:	2230      	movs	r2, #48	@ 0x30
 8002dd6:	2100      	movs	r1, #0
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f004 fb53 	bl	8007484 <memset>
  if(hltdc->Instance==LTDC)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a81      	ldr	r2, [pc, #516]	@ (8002fe8 <HAL_LTDC_MspInit+0x230>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	f040 80fb 	bne.w	8002fe0 <HAL_LTDC_MspInit+0x228>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002dea:	2308      	movs	r3, #8
 8002dec:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 200;
 8002dee:	23c8      	movs	r3, #200	@ 0xc8
 8002df0:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8002df2:	2302      	movs	r3, #2
 8002df4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_16;
 8002df6:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8002dfa:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002dfc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e00:	4618      	mov	r0, r3
 8002e02:	f003 f9f5 	bl	80061f0 <HAL_RCCEx_PeriphCLKConfig>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d001      	beq.n	8002e10 <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 8002e0c:	f7ff ff3c 	bl	8002c88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002e10:	2300      	movs	r3, #0
 8002e12:	623b      	str	r3, [r7, #32]
 8002e14:	4b75      	ldr	r3, [pc, #468]	@ (8002fec <HAL_LTDC_MspInit+0x234>)
 8002e16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e18:	4a74      	ldr	r2, [pc, #464]	@ (8002fec <HAL_LTDC_MspInit+0x234>)
 8002e1a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002e1e:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e20:	4b72      	ldr	r3, [pc, #456]	@ (8002fec <HAL_LTDC_MspInit+0x234>)
 8002e22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e24:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002e28:	623b      	str	r3, [r7, #32]
 8002e2a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	61fb      	str	r3, [r7, #28]
 8002e30:	4b6e      	ldr	r3, [pc, #440]	@ (8002fec <HAL_LTDC_MspInit+0x234>)
 8002e32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e34:	4a6d      	ldr	r2, [pc, #436]	@ (8002fec <HAL_LTDC_MspInit+0x234>)
 8002e36:	f043 0320 	orr.w	r3, r3, #32
 8002e3a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e3c:	4b6b      	ldr	r3, [pc, #428]	@ (8002fec <HAL_LTDC_MspInit+0x234>)
 8002e3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e40:	f003 0320 	and.w	r3, r3, #32
 8002e44:	61fb      	str	r3, [r7, #28]
 8002e46:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e48:	2300      	movs	r3, #0
 8002e4a:	61bb      	str	r3, [r7, #24]
 8002e4c:	4b67      	ldr	r3, [pc, #412]	@ (8002fec <HAL_LTDC_MspInit+0x234>)
 8002e4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e50:	4a66      	ldr	r2, [pc, #408]	@ (8002fec <HAL_LTDC_MspInit+0x234>)
 8002e52:	f043 0301 	orr.w	r3, r3, #1
 8002e56:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e58:	4b64      	ldr	r3, [pc, #400]	@ (8002fec <HAL_LTDC_MspInit+0x234>)
 8002e5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e5c:	f003 0301 	and.w	r3, r3, #1
 8002e60:	61bb      	str	r3, [r7, #24]
 8002e62:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e64:	2300      	movs	r3, #0
 8002e66:	617b      	str	r3, [r7, #20]
 8002e68:	4b60      	ldr	r3, [pc, #384]	@ (8002fec <HAL_LTDC_MspInit+0x234>)
 8002e6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e6c:	4a5f      	ldr	r2, [pc, #380]	@ (8002fec <HAL_LTDC_MspInit+0x234>)
 8002e6e:	f043 0302 	orr.w	r3, r3, #2
 8002e72:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e74:	4b5d      	ldr	r3, [pc, #372]	@ (8002fec <HAL_LTDC_MspInit+0x234>)
 8002e76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e78:	f003 0302 	and.w	r3, r3, #2
 8002e7c:	617b      	str	r3, [r7, #20]
 8002e7e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002e80:	2300      	movs	r3, #0
 8002e82:	613b      	str	r3, [r7, #16]
 8002e84:	4b59      	ldr	r3, [pc, #356]	@ (8002fec <HAL_LTDC_MspInit+0x234>)
 8002e86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e88:	4a58      	ldr	r2, [pc, #352]	@ (8002fec <HAL_LTDC_MspInit+0x234>)
 8002e8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002e8e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e90:	4b56      	ldr	r3, [pc, #344]	@ (8002fec <HAL_LTDC_MspInit+0x234>)
 8002e92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e98:	613b      	str	r3, [r7, #16]
 8002e9a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	60fb      	str	r3, [r7, #12]
 8002ea0:	4b52      	ldr	r3, [pc, #328]	@ (8002fec <HAL_LTDC_MspInit+0x234>)
 8002ea2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ea4:	4a51      	ldr	r2, [pc, #324]	@ (8002fec <HAL_LTDC_MspInit+0x234>)
 8002ea6:	f043 0304 	orr.w	r3, r3, #4
 8002eaa:	6313      	str	r3, [r2, #48]	@ 0x30
 8002eac:	4b4f      	ldr	r3, [pc, #316]	@ (8002fec <HAL_LTDC_MspInit+0x234>)
 8002eae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eb0:	f003 0304 	and.w	r3, r3, #4
 8002eb4:	60fb      	str	r3, [r7, #12]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002eb8:	2300      	movs	r3, #0
 8002eba:	60bb      	str	r3, [r7, #8]
 8002ebc:	4b4b      	ldr	r3, [pc, #300]	@ (8002fec <HAL_LTDC_MspInit+0x234>)
 8002ebe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ec0:	4a4a      	ldr	r2, [pc, #296]	@ (8002fec <HAL_LTDC_MspInit+0x234>)
 8002ec2:	f043 0308 	orr.w	r3, r3, #8
 8002ec6:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ec8:	4b48      	ldr	r3, [pc, #288]	@ (8002fec <HAL_LTDC_MspInit+0x234>)
 8002eca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ecc:	f003 0308 	and.w	r3, r3, #8
 8002ed0:	60bb      	str	r3, [r7, #8]
 8002ed2:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8002ed4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002ed8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eda:	2302      	movs	r3, #2
 8002edc:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002ee6:	230e      	movs	r3, #14
 8002ee8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8002eea:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002eee:	4619      	mov	r1, r3
 8002ef0:	483f      	ldr	r0, [pc, #252]	@ (8002ff0 <HAL_LTDC_MspInit+0x238>)
 8002ef2:	f000 fec9 	bl	8003c88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8002ef6:	f641 0358 	movw	r3, #6232	@ 0x1858
 8002efa:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002efc:	2302      	movs	r3, #2
 8002efe:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f00:	2300      	movs	r3, #0
 8002f02:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f04:	2300      	movs	r3, #0
 8002f06:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002f08:	230e      	movs	r3, #14
 8002f0a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f0c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002f10:	4619      	mov	r1, r3
 8002f12:	4838      	ldr	r0, [pc, #224]	@ (8002ff4 <HAL_LTDC_MspInit+0x23c>)
 8002f14:	f000 feb8 	bl	8003c88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f1c:	2302      	movs	r3, #2
 8002f1e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f20:	2300      	movs	r3, #0
 8002f22:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f24:	2300      	movs	r3, #0
 8002f26:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002f28:	2309      	movs	r3, #9
 8002f2a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f2c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002f30:	4619      	mov	r1, r3
 8002f32:	4831      	ldr	r0, [pc, #196]	@ (8002ff8 <HAL_LTDC_MspInit+0x240>)
 8002f34:	f000 fea8 	bl	8003c88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8002f38:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8002f3c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f3e:	2302      	movs	r3, #2
 8002f40:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f42:	2300      	movs	r3, #0
 8002f44:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f46:	2300      	movs	r3, #0
 8002f48:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002f4a:	230e      	movs	r3, #14
 8002f4c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f4e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002f52:	4619      	mov	r1, r3
 8002f54:	4828      	ldr	r0, [pc, #160]	@ (8002ff8 <HAL_LTDC_MspInit+0x240>)
 8002f56:	f000 fe97 	bl	8003c88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8002f5a:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8002f5e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f60:	2302      	movs	r3, #2
 8002f62:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f64:	2300      	movs	r3, #0
 8002f66:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002f6c:	230e      	movs	r3, #14
 8002f6e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002f70:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002f74:	4619      	mov	r1, r3
 8002f76:	4821      	ldr	r0, [pc, #132]	@ (8002ffc <HAL_LTDC_MspInit+0x244>)
 8002f78:	f000 fe86 	bl	8003c88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8002f7c:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8002f80:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f82:	2302      	movs	r3, #2
 8002f84:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f86:	2300      	movs	r3, #0
 8002f88:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002f8e:	230e      	movs	r3, #14
 8002f90:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f92:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002f96:	4619      	mov	r1, r3
 8002f98:	4819      	ldr	r0, [pc, #100]	@ (8003000 <HAL_LTDC_MspInit+0x248>)
 8002f9a:	f000 fe75 	bl	8003c88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8002f9e:	2348      	movs	r3, #72	@ 0x48
 8002fa0:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fa2:	2302      	movs	r3, #2
 8002fa4:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002faa:	2300      	movs	r3, #0
 8002fac:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002fae:	230e      	movs	r3, #14
 8002fb0:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002fb2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002fb6:	4619      	mov	r1, r3
 8002fb8:	4812      	ldr	r0, [pc, #72]	@ (8003004 <HAL_LTDC_MspInit+0x24c>)
 8002fba:	f000 fe65 	bl	8003c88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8002fbe:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002fc2:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fc4:	2302      	movs	r3, #2
 8002fc6:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002fd0:	2309      	movs	r3, #9
 8002fd2:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002fd4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002fd8:	4619      	mov	r1, r3
 8002fda:	4808      	ldr	r0, [pc, #32]	@ (8002ffc <HAL_LTDC_MspInit+0x244>)
 8002fdc:	f000 fe54 	bl	8003c88 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8002fe0:	bf00      	nop
 8002fe2:	3768      	adds	r7, #104	@ 0x68
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	40016800 	.word	0x40016800
 8002fec:	40023800 	.word	0x40023800
 8002ff0:	40021400 	.word	0x40021400
 8002ff4:	40020000 	.word	0x40020000
 8002ff8:	40020400 	.word	0x40020400
 8002ffc:	40021800 	.word	0x40021800
 8003000:	40020800 	.word	0x40020800
 8003004:	40020c00 	.word	0x40020c00

08003008 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8003008:	b480      	push	{r7}
 800300a:	b085      	sub	sp, #20
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a0b      	ldr	r2, [pc, #44]	@ (8003044 <HAL_RNG_MspInit+0x3c>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d10d      	bne.n	8003036 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800301a:	2300      	movs	r3, #0
 800301c:	60fb      	str	r3, [r7, #12]
 800301e:	4b0a      	ldr	r3, [pc, #40]	@ (8003048 <HAL_RNG_MspInit+0x40>)
 8003020:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003022:	4a09      	ldr	r2, [pc, #36]	@ (8003048 <HAL_RNG_MspInit+0x40>)
 8003024:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003028:	6353      	str	r3, [r2, #52]	@ 0x34
 800302a:	4b07      	ldr	r3, [pc, #28]	@ (8003048 <HAL_RNG_MspInit+0x40>)
 800302c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800302e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003032:	60fb      	str	r3, [r7, #12]
 8003034:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8003036:	bf00      	nop
 8003038:	3714      	adds	r7, #20
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr
 8003042:	bf00      	nop
 8003044:	50060800 	.word	0x50060800
 8003048:	40023800 	.word	0x40023800

0800304c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b08a      	sub	sp, #40	@ 0x28
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003054:	f107 0314 	add.w	r3, r7, #20
 8003058:	2200      	movs	r2, #0
 800305a:	601a      	str	r2, [r3, #0]
 800305c:	605a      	str	r2, [r3, #4]
 800305e:	609a      	str	r2, [r3, #8]
 8003060:	60da      	str	r2, [r3, #12]
 8003062:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a19      	ldr	r2, [pc, #100]	@ (80030d0 <HAL_SPI_MspInit+0x84>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d12c      	bne.n	80030c8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800306e:	2300      	movs	r3, #0
 8003070:	613b      	str	r3, [r7, #16]
 8003072:	4b18      	ldr	r3, [pc, #96]	@ (80030d4 <HAL_SPI_MspInit+0x88>)
 8003074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003076:	4a17      	ldr	r2, [pc, #92]	@ (80030d4 <HAL_SPI_MspInit+0x88>)
 8003078:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800307c:	6453      	str	r3, [r2, #68]	@ 0x44
 800307e:	4b15      	ldr	r3, [pc, #84]	@ (80030d4 <HAL_SPI_MspInit+0x88>)
 8003080:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003082:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003086:	613b      	str	r3, [r7, #16]
 8003088:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800308a:	2300      	movs	r3, #0
 800308c:	60fb      	str	r3, [r7, #12]
 800308e:	4b11      	ldr	r3, [pc, #68]	@ (80030d4 <HAL_SPI_MspInit+0x88>)
 8003090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003092:	4a10      	ldr	r2, [pc, #64]	@ (80030d4 <HAL_SPI_MspInit+0x88>)
 8003094:	f043 0320 	orr.w	r3, r3, #32
 8003098:	6313      	str	r3, [r2, #48]	@ 0x30
 800309a:	4b0e      	ldr	r3, [pc, #56]	@ (80030d4 <HAL_SPI_MspInit+0x88>)
 800309c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800309e:	f003 0320 	and.w	r3, r3, #32
 80030a2:	60fb      	str	r3, [r7, #12]
 80030a4:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80030a6:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80030aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ac:	2302      	movs	r3, #2
 80030ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b0:	2300      	movs	r3, #0
 80030b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030b4:	2300      	movs	r3, #0
 80030b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80030b8:	2305      	movs	r3, #5
 80030ba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80030bc:	f107 0314 	add.w	r3, r7, #20
 80030c0:	4619      	mov	r1, r3
 80030c2:	4805      	ldr	r0, [pc, #20]	@ (80030d8 <HAL_SPI_MspInit+0x8c>)
 80030c4:	f000 fde0 	bl	8003c88 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 80030c8:	bf00      	nop
 80030ca:	3728      	adds	r7, #40	@ 0x28
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	40015000 	.word	0x40015000
 80030d4:	40023800 	.word	0x40023800
 80030d8:	40021400 	.word	0x40021400

080030dc <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a08      	ldr	r2, [pc, #32]	@ (800310c <HAL_SPI_MspDeInit+0x30>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d10a      	bne.n	8003104 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 80030ee:	4b08      	ldr	r3, [pc, #32]	@ (8003110 <HAL_SPI_MspDeInit+0x34>)
 80030f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030f2:	4a07      	ldr	r2, [pc, #28]	@ (8003110 <HAL_SPI_MspDeInit+0x34>)
 80030f4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80030f8:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 80030fa:	f44f 7160 	mov.w	r1, #896	@ 0x380
 80030fe:	4805      	ldr	r0, [pc, #20]	@ (8003114 <HAL_SPI_MspDeInit+0x38>)
 8003100:	f000 ff6e 	bl	8003fe0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8003104:	bf00      	nop
 8003106:	3708      	adds	r7, #8
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}
 800310c:	40015000 	.word	0x40015000
 8003110:	40023800 	.word	0x40023800
 8003114:	40021400 	.word	0x40021400

08003118 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003118:	b480      	push	{r7}
 800311a:	b085      	sub	sp, #20
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003128:	d10d      	bne.n	8003146 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800312a:	2300      	movs	r3, #0
 800312c:	60fb      	str	r3, [r7, #12]
 800312e:	4b09      	ldr	r3, [pc, #36]	@ (8003154 <HAL_TIM_Base_MspInit+0x3c>)
 8003130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003132:	4a08      	ldr	r2, [pc, #32]	@ (8003154 <HAL_TIM_Base_MspInit+0x3c>)
 8003134:	f043 0301 	orr.w	r3, r3, #1
 8003138:	6413      	str	r3, [r2, #64]	@ 0x40
 800313a:	4b06      	ldr	r3, [pc, #24]	@ (8003154 <HAL_TIM_Base_MspInit+0x3c>)
 800313c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800313e:	f003 0301 	and.w	r3, r3, #1
 8003142:	60fb      	str	r3, [r7, #12]
 8003144:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8003146:	bf00      	nop
 8003148:	3714      	adds	r7, #20
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop
 8003154:	40023800 	.word	0x40023800

08003158 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003158:	b480      	push	{r7}
 800315a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800315c:	bf00      	nop
 800315e:	e7fd      	b.n	800315c <NMI_Handler+0x4>

08003160 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003160:	b480      	push	{r7}
 8003162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003164:	bf00      	nop
 8003166:	e7fd      	b.n	8003164 <HardFault_Handler+0x4>

08003168 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003168:	b480      	push	{r7}
 800316a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800316c:	bf00      	nop
 800316e:	e7fd      	b.n	800316c <MemManage_Handler+0x4>

08003170 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003170:	b480      	push	{r7}
 8003172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003174:	bf00      	nop
 8003176:	e7fd      	b.n	8003174 <BusFault_Handler+0x4>

08003178 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003178:	b480      	push	{r7}
 800317a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800317c:	bf00      	nop
 800317e:	e7fd      	b.n	800317c <UsageFault_Handler+0x4>

08003180 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003180:	b480      	push	{r7}
 8003182:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003184:	bf00      	nop
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr

0800318e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800318e:	b480      	push	{r7}
 8003190:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003192:	bf00      	nop
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800319c:	b480      	push	{r7}
 800319e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80031a0:	bf00      	nop
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr

080031aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80031aa:	b580      	push	{r7, lr}
 80031ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80031ae:	f000 fbe3 	bl	8003978 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80031b2:	bf00      	nop
 80031b4:	bd80      	pop	{r7, pc}

080031b6 <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 80031b6:	b580      	push	{r7, lr}
 80031b8:	b082      	sub	sp, #8
 80031ba:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports 
    I2C3_MspInit();
 80031bc:	f000 f9ce 	bl	800355c <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 80031c0:	f000 f98e 	bl	80034e0 <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 80031c4:	2202      	movs	r2, #2
 80031c6:	2103      	movs	r1, #3
 80031c8:	2082      	movs	r0, #130	@ 0x82
 80031ca:	f000 fa1b 	bl	8003604 <I2C3_Write>
    HAL_Delay(5);
 80031ce:	2005      	movs	r0, #5
 80031d0:	f000 fbf2 	bl	80039b8 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 80031d4:	2200      	movs	r2, #0
 80031d6:	2103      	movs	r1, #3
 80031d8:	2082      	movs	r0, #130	@ 0x82
 80031da:	f000 fa13 	bl	8003604 <I2C3_Write>
    HAL_Delay(2);
 80031de:	2002      	movs	r0, #2
 80031e0:	f000 fbea 	bl	80039b8 <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 80031e4:	1cba      	adds	r2, r7, #2
 80031e6:	2302      	movs	r3, #2
 80031e8:	2100      	movs	r1, #0
 80031ea:	2082      	movs	r0, #130	@ 0x82
 80031ec:	f000 fa5a 	bl	80036a4 <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 80031f0:	887b      	ldrh	r3, [r7, #2]
 80031f2:	021b      	lsls	r3, r3, #8
 80031f4:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 80031f6:	887b      	ldrh	r3, [r7, #2]
 80031f8:	0a1b      	lsrs	r3, r3, #8
 80031fa:	b29a      	uxth	r2, r3
 80031fc:	88fb      	ldrh	r3, [r7, #6]
 80031fe:	4313      	orrs	r3, r2
 8003200:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 8003202:	88fb      	ldrh	r3, [r7, #6]
 8003204:	f640 0211 	movw	r2, #2065	@ 0x811
 8003208:	4293      	cmp	r3, r2
 800320a:	d001      	beq.n	8003210 <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 800320c:	2303      	movs	r3, #3
 800320e:	e075      	b.n	80032fc <STMPE811_Init+0x146>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8003210:	2202      	movs	r2, #2
 8003212:	2103      	movs	r1, #3
 8003214:	2082      	movs	r0, #130	@ 0x82
 8003216:	f000 f9f5 	bl	8003604 <I2C3_Write>
    HAL_Delay(5);
 800321a:	2005      	movs	r0, #5
 800321c:	f000 fbcc 	bl	80039b8 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8003220:	2200      	movs	r2, #0
 8003222:	2103      	movs	r1, #3
 8003224:	2082      	movs	r0, #130	@ 0x82
 8003226:	f000 f9ed 	bl	8003604 <I2C3_Write>
    HAL_Delay(2);
 800322a:	2002      	movs	r0, #2
 800322c:	f000 fbc4 	bl	80039b8 <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8003230:	2004      	movs	r0, #4
 8003232:	f000 f867 	bl	8003304 <STMPE811_Read>
 8003236:	4603      	mov	r3, r0
 8003238:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 800323a:	797b      	ldrb	r3, [r7, #5]
 800323c:	f023 0301 	bic.w	r3, r3, #1
 8003240:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8003242:	797b      	ldrb	r3, [r7, #5]
 8003244:	461a      	mov	r2, r3
 8003246:	2104      	movs	r1, #4
 8003248:	2082      	movs	r0, #130	@ 0x82
 800324a:	f000 f9db 	bl	8003604 <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 800324e:	2004      	movs	r0, #4
 8003250:	f000 f858 	bl	8003304 <STMPE811_Read>
 8003254:	4603      	mov	r3, r0
 8003256:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 8003258:	797b      	ldrb	r3, [r7, #5]
 800325a:	f023 0302 	bic.w	r3, r3, #2
 800325e:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8003260:	797b      	ldrb	r3, [r7, #5]
 8003262:	461a      	mov	r2, r3
 8003264:	2104      	movs	r1, #4
 8003266:	2082      	movs	r0, #130	@ 0x82
 8003268:	f000 f9cc 	bl	8003604 <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 800326c:	2249      	movs	r2, #73	@ 0x49
 800326e:	2120      	movs	r1, #32
 8003270:	2082      	movs	r0, #130	@ 0x82
 8003272:	f000 f9c7 	bl	8003604 <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 8003276:	2002      	movs	r0, #2
 8003278:	f000 fb9e 	bl	80039b8 <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 800327c:	2201      	movs	r2, #1
 800327e:	2121      	movs	r1, #33	@ 0x21
 8003280:	2082      	movs	r0, #130	@ 0x82
 8003282:	f000 f9bf 	bl	8003604 <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 8003286:	2017      	movs	r0, #23
 8003288:	f000 f83c 	bl	8003304 <STMPE811_Read>
 800328c:	4603      	mov	r3, r0
 800328e:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 8003290:	797b      	ldrb	r3, [r7, #5]
 8003292:	f043 031e 	orr.w	r3, r3, #30
 8003296:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 8003298:	797b      	ldrb	r3, [r7, #5]
 800329a:	461a      	mov	r2, r3
 800329c:	2117      	movs	r1, #23
 800329e:	2082      	movs	r0, #130	@ 0x82
 80032a0:	f000 f9b0 	bl	8003604 <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 80032a4:	229a      	movs	r2, #154	@ 0x9a
 80032a6:	2141      	movs	r1, #65	@ 0x41
 80032a8:	2082      	movs	r0, #130	@ 0x82
 80032aa:	f000 f9ab 	bl	8003604 <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 80032ae:	2201      	movs	r2, #1
 80032b0:	214a      	movs	r1, #74	@ 0x4a
 80032b2:	2082      	movs	r0, #130	@ 0x82
 80032b4:	f000 f9a6 	bl	8003604 <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 80032b8:	2201      	movs	r2, #1
 80032ba:	214b      	movs	r1, #75	@ 0x4b
 80032bc:	2082      	movs	r0, #130	@ 0x82
 80032be:	f000 f9a1 	bl	8003604 <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 80032c2:	2200      	movs	r2, #0
 80032c4:	214b      	movs	r1, #75	@ 0x4b
 80032c6:	2082      	movs	r0, #130	@ 0x82
 80032c8:	f000 f99c 	bl	8003604 <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 80032cc:	2201      	movs	r2, #1
 80032ce:	2156      	movs	r1, #86	@ 0x56
 80032d0:	2082      	movs	r0, #130	@ 0x82
 80032d2:	f000 f997 	bl	8003604 <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 80032d6:	2201      	movs	r2, #1
 80032d8:	2158      	movs	r1, #88	@ 0x58
 80032da:	2082      	movs	r0, #130	@ 0x82
 80032dc:	f000 f992 	bl	8003604 <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 80032e0:	2203      	movs	r2, #3
 80032e2:	2140      	movs	r1, #64	@ 0x40
 80032e4:	2082      	movs	r0, #130	@ 0x82
 80032e6:	f000 f98d 	bl	8003604 <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 80032ea:	22ff      	movs	r2, #255	@ 0xff
 80032ec:	210b      	movs	r1, #11
 80032ee:	2082      	movs	r0, #130	@ 0x82
 80032f0:	f000 f988 	bl	8003604 <I2C3_Write>
    
    /* Wait for 2 ms delay */
    HAL_Delay(200);
 80032f4:	20c8      	movs	r0, #200	@ 0xc8
 80032f6:	f000 fb5f 	bl	80039b8 <HAL_Delay>

    return STMPE811_State_Ok;
 80032fa:	2302      	movs	r3, #2

}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3708      	adds	r7, #8
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}

08003304 <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
 800330a:	4603      	mov	r3, r0
 800330c:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 800330e:	f107 020f 	add.w	r2, r7, #15
 8003312:	79fb      	ldrb	r3, [r7, #7]
 8003314:	4619      	mov	r1, r3
 8003316:	2082      	movs	r0, #130	@ 0x82
 8003318:	f000 f99e 	bl	8003658 <I2C3_Read>

    return readData;
 800331c:	7bfb      	ldrb	r3, [r7, #15]
}
 800331e:	4618      	mov	r0, r3
 8003320:	3710      	adds	r7, #16
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}

08003326 <STMPE811_ReadTouch>:
}

/* The below function was created by Tilen MAJERLE but modified by Xavion */

STMPE811_State_t STMPE811_ReadTouch(STMPE811_TouchData *structdata)  //TM Function
{
 8003326:	b580      	push	{r7, lr}
 8003328:	b084      	sub	sp, #16
 800332a:	af00      	add	r7, sp, #0
 800332c:	6078      	str	r0, [r7, #4]
    uint8_t val;

    /* Save state */
    structdata->last_pressed = structdata->pressed;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	791a      	ldrb	r2, [r3, #4]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	715a      	strb	r2, [r3, #5]

    /* Read */
    val = STMPE811_Read(STMPE811_TSC_CTRL);
 8003336:	2040      	movs	r0, #64	@ 0x40
 8003338:	f7ff ffe4 	bl	8003304 <STMPE811_Read>
 800333c:	4603      	mov	r3, r0
 800333e:	73fb      	strb	r3, [r7, #15]
    if ((val & 0x80) == 0) {
 8003340:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003344:	2b00      	cmp	r3, #0
 8003346:	db0e      	blt.n	8003366 <STMPE811_ReadTouch+0x40>
        //Not pressed
        structdata->pressed = STMPE811_State_Released;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2201      	movs	r2, #1
 800334c:	711a      	strb	r2, [r3, #4]

        //Reset Fifo
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 800334e:	2201      	movs	r2, #1
 8003350:	214b      	movs	r1, #75	@ 0x4b
 8003352:	2082      	movs	r0, #130	@ 0x82
 8003354:	f000 f956 	bl	8003604 <I2C3_Write>
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8003358:	2200      	movs	r2, #0
 800335a:	214b      	movs	r1, #75	@ 0x4b
 800335c:	2082      	movs	r0, #130	@ 0x82
 800335e:	f000 f951 	bl	8003604 <I2C3_Write>

        return STMPE811_State_Released;
 8003362:	2301      	movs	r3, #1
 8003364:	e0a7      	b.n	80034b6 <STMPE811_ReadTouch+0x190>

    /* Clear all the status pending bits if any */
    //TM_I2C_Write(STMPE811_I2C, STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);

    //Pressed
    if (structdata->orientation == STMPE811_Orientation_Portrait_1) {
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	799b      	ldrb	r3, [r3, #6]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d117      	bne.n	800339e <STMPE811_ReadTouch+0x78>
        structdata->x = 239 - TM_STMPE811_ReadX(structdata->x);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	881b      	ldrh	r3, [r3, #0]
 8003372:	4618      	mov	r0, r3
 8003374:	f000 f9b8 	bl	80036e8 <TM_STMPE811_ReadX>
 8003378:	4603      	mov	r3, r0
 800337a:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 800337e:	b29a      	uxth	r2, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	801a      	strh	r2, [r3, #0]
        structdata->y = 319 - TM_STMPE811_ReadY(structdata->y);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	885b      	ldrh	r3, [r3, #2]
 8003388:	4618      	mov	r0, r3
 800338a:	f000 fa0d 	bl	80037a8 <TM_STMPE811_ReadY>
 800338e:	4603      	mov	r3, r0
 8003390:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8003394:	3301      	adds	r3, #1
 8003396:	b29a      	uxth	r2, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	805a      	strh	r2, [r3, #2]
 800339c:	e048      	b.n	8003430 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Portrait_2) {
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	799b      	ldrb	r3, [r3, #6]
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d112      	bne.n	80033cc <STMPE811_ReadTouch+0xa6>
        structdata->x = TM_STMPE811_ReadX(structdata->x);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	881b      	ldrh	r3, [r3, #0]
 80033aa:	4618      	mov	r0, r3
 80033ac:	f000 f99c 	bl	80036e8 <TM_STMPE811_ReadX>
 80033b0:	4603      	mov	r3, r0
 80033b2:	461a      	mov	r2, r3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	801a      	strh	r2, [r3, #0]
        structdata->y = TM_STMPE811_ReadY(structdata->y);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	885b      	ldrh	r3, [r3, #2]
 80033bc:	4618      	mov	r0, r3
 80033be:	f000 f9f3 	bl	80037a8 <TM_STMPE811_ReadY>
 80033c2:	4603      	mov	r3, r0
 80033c4:	461a      	mov	r2, r3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	805a      	strh	r2, [r3, #2]
 80033ca:	e031      	b.n	8003430 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_1) {
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	799b      	ldrb	r3, [r3, #6]
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d115      	bne.n	8003400 <STMPE811_ReadTouch+0xda>
        structdata->y = TM_STMPE811_ReadX(structdata->y);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	885b      	ldrh	r3, [r3, #2]
 80033d8:	4618      	mov	r0, r3
 80033da:	f000 f985 	bl	80036e8 <TM_STMPE811_ReadX>
 80033de:	4603      	mov	r3, r0
 80033e0:	461a      	mov	r2, r3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	805a      	strh	r2, [r3, #2]
        structdata->x = 319 - TM_STMPE811_ReadY(structdata->x);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	881b      	ldrh	r3, [r3, #0]
 80033ea:	4618      	mov	r0, r3
 80033ec:	f000 f9dc 	bl	80037a8 <TM_STMPE811_ReadY>
 80033f0:	4603      	mov	r3, r0
 80033f2:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 80033f6:	3301      	adds	r3, #1
 80033f8:	b29a      	uxth	r2, r3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	801a      	strh	r2, [r3, #0]
 80033fe:	e017      	b.n	8003430 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_2) {
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	799b      	ldrb	r3, [r3, #6]
 8003404:	2b03      	cmp	r3, #3
 8003406:	d113      	bne.n	8003430 <STMPE811_ReadTouch+0x10a>
        structdata->y = 239 - TM_STMPE811_ReadX(structdata->x);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	881b      	ldrh	r3, [r3, #0]
 800340c:	4618      	mov	r0, r3
 800340e:	f000 f96b 	bl	80036e8 <TM_STMPE811_ReadX>
 8003412:	4603      	mov	r3, r0
 8003414:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8003418:	b29a      	uxth	r2, r3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	805a      	strh	r2, [r3, #2]
        structdata->x = TM_STMPE811_ReadY(structdata->x);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	881b      	ldrh	r3, [r3, #0]
 8003422:	4618      	mov	r0, r3
 8003424:	f000 f9c0 	bl	80037a8 <TM_STMPE811_ReadY>
 8003428:	4603      	mov	r3, r0
 800342a:	461a      	mov	r2, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8003430:	2201      	movs	r2, #1
 8003432:	214b      	movs	r1, #75	@ 0x4b
 8003434:	2082      	movs	r0, #130	@ 0x82
 8003436:	f000 f8e5 	bl	8003604 <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 800343a:	2200      	movs	r2, #0
 800343c:	214b      	movs	r1, #75	@ 0x4b
 800343e:	2082      	movs	r0, #130	@ 0x82
 8003440:	f000 f8e0 	bl	8003604 <I2C3_Write>

    //Check for valid data
    if (structdata->orientation == STMPE811_Orientation_Portrait_1 || structdata->orientation == STMPE811_Orientation_Portrait_2) {
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	799b      	ldrb	r3, [r3, #6]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d003      	beq.n	8003454 <STMPE811_ReadTouch+0x12e>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	799b      	ldrb	r3, [r3, #6]
 8003450:	2b01      	cmp	r3, #1
 8003452:	d115      	bne.n	8003480 <STMPE811_ReadTouch+0x15a>
        //Portrait
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	881b      	ldrh	r3, [r3, #0]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d027      	beq.n	80034ac <STMPE811_ReadTouch+0x186>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	881b      	ldrh	r3, [r3, #0]
 8003460:	2bee      	cmp	r3, #238	@ 0xee
 8003462:	d823      	bhi.n	80034ac <STMPE811_ReadTouch+0x186>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	885b      	ldrh	r3, [r3, #2]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d01f      	beq.n	80034ac <STMPE811_ReadTouch+0x186>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	885b      	ldrh	r3, [r3, #2]
 8003470:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 8003474:	d81a      	bhi.n	80034ac <STMPE811_ReadTouch+0x186>
            structdata->pressed = STMPE811_State_Pressed;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 800347c:	2300      	movs	r3, #0
 800347e:	e01a      	b.n	80034b6 <STMPE811_ReadTouch+0x190>
        }
    } else {
        //Landscape
        if (structdata->x > 0 && structdata->x < 319 && structdata->y > 0 && structdata->y < 239) {
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	881b      	ldrh	r3, [r3, #0]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d012      	beq.n	80034ae <STMPE811_ReadTouch+0x188>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	881b      	ldrh	r3, [r3, #0]
 800348c:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 8003490:	d80d      	bhi.n	80034ae <STMPE811_ReadTouch+0x188>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	885b      	ldrh	r3, [r3, #2]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d009      	beq.n	80034ae <STMPE811_ReadTouch+0x188>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	885b      	ldrh	r3, [r3, #2]
 800349e:	2bee      	cmp	r3, #238	@ 0xee
 80034a0:	d805      	bhi.n	80034ae <STMPE811_ReadTouch+0x188>
            structdata->pressed = STMPE811_State_Pressed;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 80034a8:	2300      	movs	r3, #0
 80034aa:	e004      	b.n	80034b6 <STMPE811_ReadTouch+0x190>
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 80034ac:	bf00      	nop
        }
    }

    structdata->pressed = STMPE811_State_Released;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2201      	movs	r2, #1
 80034b2:	711a      	strb	r2, [r3, #4]

    return STMPE811_State_Released;
 80034b4:	2301      	movs	r3, #1
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3710      	adds	r7, #16
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
	...

080034c0 <verifyHAL_I2C_IS_OKAY>:
    }
    return true;
}

//  ******************************** I2C Functions ********************************//
void verifyHAL_I2C_IS_OKAY(){
 80034c0:	b480      	push	{r7}
 80034c2:	af00      	add	r7, sp, #0
    if (HAL_status != HAL_OK)
 80034c4:	4b05      	ldr	r3, [pc, #20]	@ (80034dc <verifyHAL_I2C_IS_OKAY+0x1c>)
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d001      	beq.n	80034d0 <verifyHAL_I2C_IS_OKAY+0x10>
    {
        while(1);
 80034cc:	bf00      	nop
 80034ce:	e7fd      	b.n	80034cc <verifyHAL_I2C_IS_OKAY+0xc>
    }
}
 80034d0:	bf00      	nop
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr
 80034da:	bf00      	nop
 80034dc:	20025c1c 	.word	0x20025c1c

080034e0 <I2C3_Init>:

static void I2C3_Init()
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b082      	sub	sp, #8
 80034e4:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 80034e6:	2300      	movs	r3, #0
 80034e8:	603b      	str	r3, [r7, #0]
 80034ea:	4b18      	ldr	r3, [pc, #96]	@ (800354c <I2C3_Init+0x6c>)
 80034ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ee:	4a17      	ldr	r2, [pc, #92]	@ (800354c <I2C3_Init+0x6c>)
 80034f0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80034f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80034f6:	4b15      	ldr	r3, [pc, #84]	@ (800354c <I2C3_Init+0x6c>)
 80034f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80034fe:	603b      	str	r3, [r7, #0]
 8003500:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 8003502:	4b13      	ldr	r3, [pc, #76]	@ (8003550 <I2C3_Init+0x70>)
 8003504:	4a13      	ldr	r2, [pc, #76]	@ (8003554 <I2C3_Init+0x74>)
 8003506:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 8003508:	4b11      	ldr	r3, [pc, #68]	@ (8003550 <I2C3_Init+0x70>)
 800350a:	4a13      	ldr	r2, [pc, #76]	@ (8003558 <I2C3_Init+0x78>)
 800350c:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800350e:	4b10      	ldr	r3, [pc, #64]	@ (8003550 <I2C3_Init+0x70>)
 8003510:	2200      	movs	r2, #0
 8003512:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 8003514:	4b0e      	ldr	r3, [pc, #56]	@ (8003550 <I2C3_Init+0x70>)
 8003516:	2200      	movs	r2, #0
 8003518:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800351a:	4b0d      	ldr	r3, [pc, #52]	@ (8003550 <I2C3_Init+0x70>)
 800351c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003520:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 8003522:	4b0b      	ldr	r3, [pc, #44]	@ (8003550 <I2C3_Init+0x70>)
 8003524:	2200      	movs	r2, #0
 8003526:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003528:	4b09      	ldr	r3, [pc, #36]	@ (8003550 <I2C3_Init+0x70>)
 800352a:	2200      	movs	r2, #0
 800352c:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode? 

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 800352e:	4808      	ldr	r0, [pc, #32]	@ (8003550 <I2C3_Init+0x70>)
 8003530:	f000 fe94 	bl	800425c <HAL_I2C_Init>
 8003534:	4603      	mov	r3, r0
 8003536:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8003538:	79fb      	ldrb	r3, [r7, #7]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d001      	beq.n	8003542 <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 800353e:	bf00      	nop
 8003540:	e7fd      	b.n	800353e <I2C3_Init+0x5e>
    }
    return;
 8003542:	bf00      	nop
}
 8003544:	3708      	adds	r7, #8
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	40023800 	.word	0x40023800
 8003550:	20025bc8 	.word	0x20025bc8
 8003554:	40005c00 	.word	0x40005c00
 8003558:	000186a0 	.word	0x000186a0

0800355c <I2C3_MspInit>:

// GPIO Initializations 
static void I2C3_MspInit(void)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b088      	sub	sp, #32
 8003560:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003562:	f107 030c 	add.w	r3, r7, #12
 8003566:	2200      	movs	r2, #0
 8003568:	601a      	str	r2, [r3, #0]
 800356a:	605a      	str	r2, [r3, #4]
 800356c:	609a      	str	r2, [r3, #8]
 800356e:	60da      	str	r2, [r3, #12]
 8003570:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003572:	2300      	movs	r3, #0
 8003574:	60bb      	str	r3, [r7, #8]
 8003576:	4b20      	ldr	r3, [pc, #128]	@ (80035f8 <I2C3_MspInit+0x9c>)
 8003578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800357a:	4a1f      	ldr	r2, [pc, #124]	@ (80035f8 <I2C3_MspInit+0x9c>)
 800357c:	f043 0304 	orr.w	r3, r3, #4
 8003580:	6313      	str	r3, [r2, #48]	@ 0x30
 8003582:	4b1d      	ldr	r3, [pc, #116]	@ (80035f8 <I2C3_MspInit+0x9c>)
 8003584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003586:	f003 0304 	and.w	r3, r3, #4
 800358a:	60bb      	str	r3, [r7, #8]
 800358c:	68bb      	ldr	r3, [r7, #8]

    // GPIOA 
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800358e:	2300      	movs	r3, #0
 8003590:	607b      	str	r3, [r7, #4]
 8003592:	4b19      	ldr	r3, [pc, #100]	@ (80035f8 <I2C3_MspInit+0x9c>)
 8003594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003596:	4a18      	ldr	r2, [pc, #96]	@ (80035f8 <I2C3_MspInit+0x9c>)
 8003598:	f043 0301 	orr.w	r3, r3, #1
 800359c:	6313      	str	r3, [r2, #48]	@ 0x30
 800359e:	4b16      	ldr	r3, [pc, #88]	@ (80035f8 <I2C3_MspInit+0x9c>)
 80035a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035a2:	f003 0301 	and.w	r3, r3, #1
 80035a6:	607b      	str	r3, [r7, #4]
 80035a8:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80035aa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80035ae:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80035b0:	2312      	movs	r3, #18
 80035b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b4:	2300      	movs	r3, #0
 80035b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035b8:	2300      	movs	r3, #0
 80035ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80035bc:	2304      	movs	r3, #4
 80035be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80035c0:	f107 030c 	add.w	r3, r7, #12
 80035c4:	4619      	mov	r1, r3
 80035c6:	480d      	ldr	r0, [pc, #52]	@ (80035fc <I2C3_MspInit+0xa0>)
 80035c8:	f000 fb5e 	bl	8003c88 <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80035cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80035d0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80035d2:	2312      	movs	r3, #18
 80035d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035d6:	2300      	movs	r3, #0
 80035d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035da:	2300      	movs	r3, #0
 80035dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80035de:	2304      	movs	r3, #4
 80035e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80035e2:	f107 030c 	add.w	r3, r7, #12
 80035e6:	4619      	mov	r1, r3
 80035e8:	4805      	ldr	r0, [pc, #20]	@ (8003600 <I2C3_MspInit+0xa4>)
 80035ea:	f000 fb4d 	bl	8003c88 <HAL_GPIO_Init>
    
}
 80035ee:	bf00      	nop
 80035f0:	3720      	adds	r7, #32
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	40023800 	.word	0x40023800
 80035fc:	40020800 	.word	0x40020800
 8003600:	40020000 	.word	0x40020000

08003604 <I2C3_Write>:

// This function should only be used for single BYTE transfers 
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b088      	sub	sp, #32
 8003608:	af04      	add	r7, sp, #16
 800360a:	4603      	mov	r3, r0
 800360c:	80fb      	strh	r3, [r7, #6]
 800360e:	460b      	mov	r3, r1
 8003610:	717b      	strb	r3, [r7, #5]
 8003612:	4613      	mov	r3, r2
 8003614:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 8003616:	793b      	ldrb	r3, [r7, #4]
 8003618:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call? 
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 800361a:	797b      	ldrb	r3, [r7, #5]
 800361c:	b29a      	uxth	r2, r3
 800361e:	88f9      	ldrh	r1, [r7, #6]
 8003620:	4b0a      	ldr	r3, [pc, #40]	@ (800364c <I2C3_Write+0x48>)
 8003622:	9302      	str	r3, [sp, #8]
 8003624:	2301      	movs	r3, #1
 8003626:	9301      	str	r3, [sp, #4]
 8003628:	f107 030f 	add.w	r3, r7, #15
 800362c:	9300      	str	r3, [sp, #0]
 800362e:	2301      	movs	r3, #1
 8003630:	4807      	ldr	r0, [pc, #28]	@ (8003650 <I2C3_Write+0x4c>)
 8003632:	f000 ff57 	bl	80044e4 <HAL_I2C_Mem_Write>
 8003636:	4603      	mov	r3, r0
 8003638:	461a      	mov	r2, r3
 800363a:	4b06      	ldr	r3, [pc, #24]	@ (8003654 <I2C3_Write+0x50>)
 800363c:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 800363e:	f7ff ff3f 	bl	80034c0 <verifyHAL_I2C_IS_OKAY>
}
 8003642:	bf00      	nop
 8003644:	3710      	adds	r7, #16
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	0003d090 	.word	0x0003d090
 8003650:	20025bc8 	.word	0x20025bc8
 8003654:	20025c1c 	.word	0x20025c1c

08003658 <I2C3_Read>:

// This function should only be used for single BYTE transfers 
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b086      	sub	sp, #24
 800365c:	af04      	add	r7, sp, #16
 800365e:	4603      	mov	r3, r0
 8003660:	603a      	str	r2, [r7, #0]
 8003662:	71fb      	strb	r3, [r7, #7]
 8003664:	460b      	mov	r3, r1
 8003666:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8003668:	79fb      	ldrb	r3, [r7, #7]
 800366a:	b299      	uxth	r1, r3
 800366c:	79bb      	ldrb	r3, [r7, #6]
 800366e:	b29a      	uxth	r2, r3
 8003670:	4b09      	ldr	r3, [pc, #36]	@ (8003698 <I2C3_Read+0x40>)
 8003672:	9302      	str	r3, [sp, #8]
 8003674:	2301      	movs	r3, #1
 8003676:	9301      	str	r3, [sp, #4]
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	9300      	str	r3, [sp, #0]
 800367c:	2301      	movs	r3, #1
 800367e:	4807      	ldr	r0, [pc, #28]	@ (800369c <I2C3_Read+0x44>)
 8003680:	f001 f82a 	bl	80046d8 <HAL_I2C_Mem_Read>
 8003684:	4603      	mov	r3, r0
 8003686:	461a      	mov	r2, r3
 8003688:	4b05      	ldr	r3, [pc, #20]	@ (80036a0 <I2C3_Read+0x48>)
 800368a:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 800368c:	f7ff ff18 	bl	80034c0 <verifyHAL_I2C_IS_OKAY>
}
 8003690:	bf00      	nop
 8003692:	3708      	adds	r7, #8
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}
 8003698:	0003d090 	.word	0x0003d090
 800369c:	20025bc8 	.word	0x20025bc8
 80036a0:	20025c1c 	.word	0x20025c1c

080036a4 <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b086      	sub	sp, #24
 80036a8:	af04      	add	r7, sp, #16
 80036aa:	603a      	str	r2, [r7, #0]
 80036ac:	461a      	mov	r2, r3
 80036ae:	4603      	mov	r3, r0
 80036b0:	71fb      	strb	r3, [r7, #7]
 80036b2:	460b      	mov	r3, r1
 80036b4:	71bb      	strb	r3, [r7, #6]
 80036b6:	4613      	mov	r3, r2
 80036b8:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 80036ba:	79fb      	ldrb	r3, [r7, #7]
 80036bc:	b299      	uxth	r1, r3
 80036be:	79bb      	ldrb	r3, [r7, #6]
 80036c0:	b29a      	uxth	r2, r3
 80036c2:	4b07      	ldr	r3, [pc, #28]	@ (80036e0 <I2C3_MulitByteRead+0x3c>)
 80036c4:	9302      	str	r3, [sp, #8]
 80036c6:	88bb      	ldrh	r3, [r7, #4]
 80036c8:	9301      	str	r3, [sp, #4]
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	9300      	str	r3, [sp, #0]
 80036ce:	2301      	movs	r3, #1
 80036d0:	4804      	ldr	r0, [pc, #16]	@ (80036e4 <I2C3_MulitByteRead+0x40>)
 80036d2:	f001 f801 	bl	80046d8 <HAL_I2C_Mem_Read>
}
 80036d6:	bf00      	nop
 80036d8:	3708      	adds	r7, #8
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	0003d090 	.word	0x0003d090
 80036e4:	20025bc8 	.word	0x20025bc8

080036e8 <TM_STMPE811_ReadX>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x) { // TM FUNCTION 
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	4603      	mov	r3, r0
 80036f0:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 80036f2:	204d      	movs	r0, #77	@ 0x4d
 80036f4:	f7ff fe06 	bl	8003304 <STMPE811_Read>
 80036f8:	4603      	mov	r3, r0
 80036fa:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 80036fc:	204e      	movs	r0, #78	@ 0x4e
 80036fe:	f7ff fe01 	bl	8003304 <STMPE811_Read>
 8003702:	4603      	mov	r3, r0
 8003704:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8003706:	7a7b      	ldrb	r3, [r7, #9]
 8003708:	b21b      	sxth	r3, r3
 800370a:	021b      	lsls	r3, r3, #8
 800370c:	b21a      	sxth	r2, r3
 800370e:	7a3b      	ldrb	r3, [r7, #8]
 8003710:	b21b      	sxth	r3, r3
 8003712:	4313      	orrs	r3, r2
 8003714:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000) {
 8003716:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800371a:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800371e:	4293      	cmp	r3, r2
 8003720:	dc06      	bgt.n	8003730 <TM_STMPE811_ReadX+0x48>
        val = 3900 - val;
 8003722:	89fb      	ldrh	r3, [r7, #14]
 8003724:	f5c3 6373 	rsb	r3, r3, #3888	@ 0xf30
 8003728:	330c      	adds	r3, #12
 800372a:	b29b      	uxth	r3, r3
 800372c:	81fb      	strh	r3, [r7, #14]
 800372e:	e005      	b.n	800373c <TM_STMPE811_ReadX+0x54>
    } else {
        val = 3800 - val;
 8003730:	89fb      	ldrh	r3, [r7, #14]
 8003732:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 8003736:	3308      	adds	r3, #8
 8003738:	b29b      	uxth	r3, r3
 800373a:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 800373c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003740:	4a18      	ldr	r2, [pc, #96]	@ (80037a4 <TM_STMPE811_ReadX+0xbc>)
 8003742:	fb82 1203 	smull	r1, r2, r2, r3
 8003746:	441a      	add	r2, r3
 8003748:	10d2      	asrs	r2, r2, #3
 800374a:	17db      	asrs	r3, r3, #31
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	81fb      	strh	r3, [r7, #14]

    if (val > 239) {
 8003750:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003754:	2bef      	cmp	r3, #239	@ 0xef
 8003756:	dd02      	ble.n	800375e <TM_STMPE811_ReadX+0x76>
        val = 239;
 8003758:	23ef      	movs	r3, #239	@ 0xef
 800375a:	81fb      	strh	r3, [r7, #14]
 800375c:	e005      	b.n	800376a <TM_STMPE811_ReadX+0x82>
    } else if (val < 0) {
 800375e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003762:	2b00      	cmp	r3, #0
 8003764:	da01      	bge.n	800376a <TM_STMPE811_ReadX+0x82>
        val = 0;
 8003766:	2300      	movs	r3, #0
 8003768:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 800376a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800376e:	88fb      	ldrh	r3, [r7, #6]
 8003770:	429a      	cmp	r2, r3
 8003772:	dd05      	ble.n	8003780 <TM_STMPE811_ReadX+0x98>
 8003774:	89fa      	ldrh	r2, [r7, #14]
 8003776:	88fb      	ldrh	r3, [r7, #6]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	b29b      	uxth	r3, r3
 800377c:	b21b      	sxth	r3, r3
 800377e:	e004      	b.n	800378a <TM_STMPE811_ReadX+0xa2>
 8003780:	89fb      	ldrh	r3, [r7, #14]
 8003782:	88fa      	ldrh	r2, [r7, #6]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	b29b      	uxth	r3, r3
 8003788:	b21b      	sxth	r3, r3
 800378a:	81bb      	strh	r3, [r7, #12]
    if (dx > 4) {
 800378c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003790:	2b04      	cmp	r3, #4
 8003792:	dd01      	ble.n	8003798 <TM_STMPE811_ReadX+0xb0>
        return val;
 8003794:	89fb      	ldrh	r3, [r7, #14]
 8003796:	e000      	b.n	800379a <TM_STMPE811_ReadX+0xb2>
    }
    return x;
 8003798:	88fb      	ldrh	r3, [r7, #6]
}
 800379a:	4618      	mov	r0, r3
 800379c:	3710      	adds	r7, #16
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	88888889 	.word	0x88888889

080037a8 <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y) { // TM FUNCTION 
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	4603      	mov	r3, r0
 80037b0:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 80037b2:	204f      	movs	r0, #79	@ 0x4f
 80037b4:	f7ff fda6 	bl	8003304 <STMPE811_Read>
 80037b8:	4603      	mov	r3, r0
 80037ba:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 80037bc:	2050      	movs	r0, #80	@ 0x50
 80037be:	f7ff fda1 	bl	8003304 <STMPE811_Read>
 80037c2:	4603      	mov	r3, r0
 80037c4:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 80037c6:	7a7b      	ldrb	r3, [r7, #9]
 80037c8:	b21b      	sxth	r3, r3
 80037ca:	021b      	lsls	r3, r3, #8
 80037cc:	b21a      	sxth	r2, r3
 80037ce:	7a3b      	ldrb	r3, [r7, #8]
 80037d0:	b21b      	sxth	r3, r3
 80037d2:	4313      	orrs	r3, r2
 80037d4:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 80037d6:	89fb      	ldrh	r3, [r7, #14]
 80037d8:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80037dc:	b29b      	uxth	r3, r3
 80037de:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 80037e0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80037e4:	4a18      	ldr	r2, [pc, #96]	@ (8003848 <TM_STMPE811_ReadY+0xa0>)
 80037e6:	fb82 1203 	smull	r1, r2, r2, r3
 80037ea:	1052      	asrs	r2, r2, #1
 80037ec:	17db      	asrs	r3, r3, #31
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	81fb      	strh	r3, [r7, #14]

    if (val <= 0) {
 80037f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	dc02      	bgt.n	8003800 <TM_STMPE811_ReadY+0x58>
        val = 0;
 80037fa:	2300      	movs	r3, #0
 80037fc:	81fb      	strh	r3, [r7, #14]
 80037fe:	e007      	b.n	8003810 <TM_STMPE811_ReadY+0x68>
    } else if (val >= 320) {
 8003800:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003804:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003808:	db02      	blt.n	8003810 <TM_STMPE811_ReadY+0x68>
        val = 319;
 800380a:	f240 133f 	movw	r3, #319	@ 0x13f
 800380e:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 8003810:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003814:	88fb      	ldrh	r3, [r7, #6]
 8003816:	429a      	cmp	r2, r3
 8003818:	dd05      	ble.n	8003826 <TM_STMPE811_ReadY+0x7e>
 800381a:	89fa      	ldrh	r2, [r7, #14]
 800381c:	88fb      	ldrh	r3, [r7, #6]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	b29b      	uxth	r3, r3
 8003822:	b21b      	sxth	r3, r3
 8003824:	e004      	b.n	8003830 <TM_STMPE811_ReadY+0x88>
 8003826:	89fb      	ldrh	r3, [r7, #14]
 8003828:	88fa      	ldrh	r2, [r7, #6]
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	b29b      	uxth	r3, r3
 800382e:	b21b      	sxth	r3, r3
 8003830:	81bb      	strh	r3, [r7, #12]
    if (dy > 4) {
 8003832:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003836:	2b04      	cmp	r3, #4
 8003838:	dd01      	ble.n	800383e <TM_STMPE811_ReadY+0x96>
        return val;
 800383a:	89fb      	ldrh	r3, [r7, #14]
 800383c:	e000      	b.n	8003840 <TM_STMPE811_ReadY+0x98>
    }
    return y;
 800383e:	88fb      	ldrh	r3, [r7, #6]
}
 8003840:	4618      	mov	r0, r3
 8003842:	3710      	adds	r7, #16
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}
 8003848:	2e8ba2e9 	.word	0x2e8ba2e9

0800384c <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 800384c:	b480      	push	{r7}
 800384e:	af00      	add	r7, sp, #0
}
 8003850:	bf00      	nop
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr
	...

0800385c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800385c:	b480      	push	{r7}
 800385e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003860:	4b06      	ldr	r3, [pc, #24]	@ (800387c <SystemInit+0x20>)
 8003862:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003866:	4a05      	ldr	r2, [pc, #20]	@ (800387c <SystemInit+0x20>)
 8003868:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800386c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003870:	bf00      	nop
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr
 800387a:	bf00      	nop
 800387c:	e000ed00 	.word	0xe000ed00

08003880 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003880:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80038b8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003884:	f7ff ffea 	bl	800385c <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003888:	480c      	ldr	r0, [pc, #48]	@ (80038bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800388a:	490d      	ldr	r1, [pc, #52]	@ (80038c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800388c:	4a0d      	ldr	r2, [pc, #52]	@ (80038c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800388e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003890:	e002      	b.n	8003898 <LoopCopyDataInit>

08003892 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003892:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003894:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003896:	3304      	adds	r3, #4

08003898 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003898:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800389a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800389c:	d3f9      	bcc.n	8003892 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800389e:	4a0a      	ldr	r2, [pc, #40]	@ (80038c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80038a0:	4c0a      	ldr	r4, [pc, #40]	@ (80038cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80038a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80038a4:	e001      	b.n	80038aa <LoopFillZerobss>

080038a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80038a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80038a8:	3204      	adds	r2, #4

080038aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80038aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80038ac:	d3fb      	bcc.n	80038a6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80038ae:	f003 fdf1 	bl	8007494 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80038b2:	f7fe fe2c 	bl	800250e <main>
  bx  lr    
 80038b6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80038b8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80038bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80038c0:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 80038c4:	08008fec 	.word	0x08008fec
  ldr r2, =_sbss
 80038c8:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 80038cc:	20025c24 	.word	0x20025c24

080038d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80038d0:	e7fe      	b.n	80038d0 <ADC_IRQHandler>
	...

080038d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80038d8:	4b0e      	ldr	r3, [pc, #56]	@ (8003914 <HAL_Init+0x40>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a0d      	ldr	r2, [pc, #52]	@ (8003914 <HAL_Init+0x40>)
 80038de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80038e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80038e4:	4b0b      	ldr	r3, [pc, #44]	@ (8003914 <HAL_Init+0x40>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a0a      	ldr	r2, [pc, #40]	@ (8003914 <HAL_Init+0x40>)
 80038ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80038ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80038f0:	4b08      	ldr	r3, [pc, #32]	@ (8003914 <HAL_Init+0x40>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a07      	ldr	r2, [pc, #28]	@ (8003914 <HAL_Init+0x40>)
 80038f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038fc:	2003      	movs	r0, #3
 80038fe:	f000 f973 	bl	8003be8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003902:	2000      	movs	r0, #0
 8003904:	f000 f808 	bl	8003918 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003908:	f7ff f9c4 	bl	8002c94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800390c:	2300      	movs	r3, #0
}
 800390e:	4618      	mov	r0, r3
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	40023c00 	.word	0x40023c00

08003918 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003920:	4b12      	ldr	r3, [pc, #72]	@ (800396c <HAL_InitTick+0x54>)
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	4b12      	ldr	r3, [pc, #72]	@ (8003970 <HAL_InitTick+0x58>)
 8003926:	781b      	ldrb	r3, [r3, #0]
 8003928:	4619      	mov	r1, r3
 800392a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800392e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003932:	fbb2 f3f3 	udiv	r3, r2, r3
 8003936:	4618      	mov	r0, r3
 8003938:	f000 f999 	bl	8003c6e <HAL_SYSTICK_Config>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d001      	beq.n	8003946 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e00e      	b.n	8003964 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2b0f      	cmp	r3, #15
 800394a:	d80a      	bhi.n	8003962 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800394c:	2200      	movs	r2, #0
 800394e:	6879      	ldr	r1, [r7, #4]
 8003950:	f04f 30ff 	mov.w	r0, #4294967295
 8003954:	f000 f953 	bl	8003bfe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003958:	4a06      	ldr	r2, [pc, #24]	@ (8003974 <HAL_InitTick+0x5c>)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800395e:	2300      	movs	r3, #0
 8003960:	e000      	b.n	8003964 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
}
 8003964:	4618      	mov	r0, r3
 8003966:	3708      	adds	r7, #8
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}
 800396c:	2000001c 	.word	0x2000001c
 8003970:	20000024 	.word	0x20000024
 8003974:	20000020 	.word	0x20000020

08003978 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003978:	b480      	push	{r7}
 800397a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800397c:	4b06      	ldr	r3, [pc, #24]	@ (8003998 <HAL_IncTick+0x20>)
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	461a      	mov	r2, r3
 8003982:	4b06      	ldr	r3, [pc, #24]	@ (800399c <HAL_IncTick+0x24>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4413      	add	r3, r2
 8003988:	4a04      	ldr	r2, [pc, #16]	@ (800399c <HAL_IncTick+0x24>)
 800398a:	6013      	str	r3, [r2, #0]
}
 800398c:	bf00      	nop
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	20000024 	.word	0x20000024
 800399c:	20025c20 	.word	0x20025c20

080039a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80039a0:	b480      	push	{r7}
 80039a2:	af00      	add	r7, sp, #0
  return uwTick;
 80039a4:	4b03      	ldr	r3, [pc, #12]	@ (80039b4 <HAL_GetTick+0x14>)
 80039a6:	681b      	ldr	r3, [r3, #0]
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr
 80039b2:	bf00      	nop
 80039b4:	20025c20 	.word	0x20025c20

080039b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80039c0:	f7ff ffee 	bl	80039a0 <HAL_GetTick>
 80039c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039d0:	d005      	beq.n	80039de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80039d2:	4b0a      	ldr	r3, [pc, #40]	@ (80039fc <HAL_Delay+0x44>)
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	461a      	mov	r2, r3
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	4413      	add	r3, r2
 80039dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80039de:	bf00      	nop
 80039e0:	f7ff ffde 	bl	80039a0 <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	68fa      	ldr	r2, [r7, #12]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d8f7      	bhi.n	80039e0 <HAL_Delay+0x28>
  {
  }
}
 80039f0:	bf00      	nop
 80039f2:	bf00      	nop
 80039f4:	3710      	adds	r7, #16
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	20000024 	.word	0x20000024

08003a00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b085      	sub	sp, #20
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f003 0307 	and.w	r3, r3, #7
 8003a0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a10:	4b0c      	ldr	r3, [pc, #48]	@ (8003a44 <__NVIC_SetPriorityGrouping+0x44>)
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a16:	68ba      	ldr	r2, [r7, #8]
 8003a18:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a28:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003a2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a32:	4a04      	ldr	r2, [pc, #16]	@ (8003a44 <__NVIC_SetPriorityGrouping+0x44>)
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	60d3      	str	r3, [r2, #12]
}
 8003a38:	bf00      	nop
 8003a3a:	3714      	adds	r7, #20
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr
 8003a44:	e000ed00 	.word	0xe000ed00

08003a48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a4c:	4b04      	ldr	r3, [pc, #16]	@ (8003a60 <__NVIC_GetPriorityGrouping+0x18>)
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	0a1b      	lsrs	r3, r3, #8
 8003a52:	f003 0307 	and.w	r3, r3, #7
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr
 8003a60:	e000ed00 	.word	0xe000ed00

08003a64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	db0b      	blt.n	8003a8e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a76:	79fb      	ldrb	r3, [r7, #7]
 8003a78:	f003 021f 	and.w	r2, r3, #31
 8003a7c:	4907      	ldr	r1, [pc, #28]	@ (8003a9c <__NVIC_EnableIRQ+0x38>)
 8003a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a82:	095b      	lsrs	r3, r3, #5
 8003a84:	2001      	movs	r0, #1
 8003a86:	fa00 f202 	lsl.w	r2, r0, r2
 8003a8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003a8e:	bf00      	nop
 8003a90:	370c      	adds	r7, #12
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr
 8003a9a:	bf00      	nop
 8003a9c:	e000e100 	.word	0xe000e100

08003aa0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	db12      	blt.n	8003ad8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ab2:	79fb      	ldrb	r3, [r7, #7]
 8003ab4:	f003 021f 	and.w	r2, r3, #31
 8003ab8:	490a      	ldr	r1, [pc, #40]	@ (8003ae4 <__NVIC_DisableIRQ+0x44>)
 8003aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003abe:	095b      	lsrs	r3, r3, #5
 8003ac0:	2001      	movs	r0, #1
 8003ac2:	fa00 f202 	lsl.w	r2, r0, r2
 8003ac6:	3320      	adds	r3, #32
 8003ac8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003acc:	f3bf 8f4f 	dsb	sy
}
 8003ad0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003ad2:	f3bf 8f6f 	isb	sy
}
 8003ad6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003ad8:	bf00      	nop
 8003ada:	370c      	adds	r7, #12
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr
 8003ae4:	e000e100 	.word	0xe000e100

08003ae8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	4603      	mov	r3, r0
 8003af0:	6039      	str	r1, [r7, #0]
 8003af2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003af4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	db0a      	blt.n	8003b12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	b2da      	uxtb	r2, r3
 8003b00:	490c      	ldr	r1, [pc, #48]	@ (8003b34 <__NVIC_SetPriority+0x4c>)
 8003b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b06:	0112      	lsls	r2, r2, #4
 8003b08:	b2d2      	uxtb	r2, r2
 8003b0a:	440b      	add	r3, r1
 8003b0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b10:	e00a      	b.n	8003b28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	b2da      	uxtb	r2, r3
 8003b16:	4908      	ldr	r1, [pc, #32]	@ (8003b38 <__NVIC_SetPriority+0x50>)
 8003b18:	79fb      	ldrb	r3, [r7, #7]
 8003b1a:	f003 030f 	and.w	r3, r3, #15
 8003b1e:	3b04      	subs	r3, #4
 8003b20:	0112      	lsls	r2, r2, #4
 8003b22:	b2d2      	uxtb	r2, r2
 8003b24:	440b      	add	r3, r1
 8003b26:	761a      	strb	r2, [r3, #24]
}
 8003b28:	bf00      	nop
 8003b2a:	370c      	adds	r7, #12
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr
 8003b34:	e000e100 	.word	0xe000e100
 8003b38:	e000ed00 	.word	0xe000ed00

08003b3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b089      	sub	sp, #36	@ 0x24
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f003 0307 	and.w	r3, r3, #7
 8003b4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	f1c3 0307 	rsb	r3, r3, #7
 8003b56:	2b04      	cmp	r3, #4
 8003b58:	bf28      	it	cs
 8003b5a:	2304      	movcs	r3, #4
 8003b5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	3304      	adds	r3, #4
 8003b62:	2b06      	cmp	r3, #6
 8003b64:	d902      	bls.n	8003b6c <NVIC_EncodePriority+0x30>
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	3b03      	subs	r3, #3
 8003b6a:	e000      	b.n	8003b6e <NVIC_EncodePriority+0x32>
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b70:	f04f 32ff 	mov.w	r2, #4294967295
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7a:	43da      	mvns	r2, r3
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	401a      	ands	r2, r3
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b84:	f04f 31ff 	mov.w	r1, #4294967295
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b8e:	43d9      	mvns	r1, r3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b94:	4313      	orrs	r3, r2
         );
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3724      	adds	r7, #36	@ 0x24
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr
	...

08003ba4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b082      	sub	sp, #8
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	3b01      	subs	r3, #1
 8003bb0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003bb4:	d301      	bcc.n	8003bba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e00f      	b.n	8003bda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003bba:	4a0a      	ldr	r2, [pc, #40]	@ (8003be4 <SysTick_Config+0x40>)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	3b01      	subs	r3, #1
 8003bc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003bc2:	210f      	movs	r1, #15
 8003bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8003bc8:	f7ff ff8e 	bl	8003ae8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003bcc:	4b05      	ldr	r3, [pc, #20]	@ (8003be4 <SysTick_Config+0x40>)
 8003bce:	2200      	movs	r2, #0
 8003bd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003bd2:	4b04      	ldr	r3, [pc, #16]	@ (8003be4 <SysTick_Config+0x40>)
 8003bd4:	2207      	movs	r2, #7
 8003bd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3708      	adds	r7, #8
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	e000e010 	.word	0xe000e010

08003be8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b082      	sub	sp, #8
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f7ff ff05 	bl	8003a00 <__NVIC_SetPriorityGrouping>
}
 8003bf6:	bf00      	nop
 8003bf8:	3708      	adds	r7, #8
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}

08003bfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003bfe:	b580      	push	{r7, lr}
 8003c00:	b086      	sub	sp, #24
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	4603      	mov	r3, r0
 8003c06:	60b9      	str	r1, [r7, #8]
 8003c08:	607a      	str	r2, [r7, #4]
 8003c0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c10:	f7ff ff1a 	bl	8003a48 <__NVIC_GetPriorityGrouping>
 8003c14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	68b9      	ldr	r1, [r7, #8]
 8003c1a:	6978      	ldr	r0, [r7, #20]
 8003c1c:	f7ff ff8e 	bl	8003b3c <NVIC_EncodePriority>
 8003c20:	4602      	mov	r2, r0
 8003c22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c26:	4611      	mov	r1, r2
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f7ff ff5d 	bl	8003ae8 <__NVIC_SetPriority>
}
 8003c2e:	bf00      	nop
 8003c30:	3718      	adds	r7, #24
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}

08003c36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c36:	b580      	push	{r7, lr}
 8003c38:	b082      	sub	sp, #8
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c44:	4618      	mov	r0, r3
 8003c46:	f7ff ff0d 	bl	8003a64 <__NVIC_EnableIRQ>
}
 8003c4a:	bf00      	nop
 8003c4c:	3708      	adds	r7, #8
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}

08003c52 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003c52:	b580      	push	{r7, lr}
 8003c54:	b082      	sub	sp, #8
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	4603      	mov	r3, r0
 8003c5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c60:	4618      	mov	r0, r3
 8003c62:	f7ff ff1d 	bl	8003aa0 <__NVIC_DisableIRQ>
}
 8003c66:	bf00      	nop
 8003c68:	3708      	adds	r7, #8
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}

08003c6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c6e:	b580      	push	{r7, lr}
 8003c70:	b082      	sub	sp, #8
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f7ff ff94 	bl	8003ba4 <SysTick_Config>
 8003c7c:	4603      	mov	r3, r0
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3708      	adds	r7, #8
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
	...

08003c88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b089      	sub	sp, #36	@ 0x24
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003c92:	2300      	movs	r3, #0
 8003c94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003c96:	2300      	movs	r3, #0
 8003c98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	61fb      	str	r3, [r7, #28]
 8003ca2:	e177      	b.n	8003f94 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	697a      	ldr	r2, [r7, #20]
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003cb8:	693a      	ldr	r2, [r7, #16]
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	f040 8166 	bne.w	8003f8e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	f003 0303 	and.w	r3, r3, #3
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d005      	beq.n	8003cda <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d130      	bne.n	8003d3c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	005b      	lsls	r3, r3, #1
 8003ce4:	2203      	movs	r2, #3
 8003ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cea:	43db      	mvns	r3, r3
 8003cec:	69ba      	ldr	r2, [r7, #24]
 8003cee:	4013      	ands	r3, r2
 8003cf0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	68da      	ldr	r2, [r3, #12]
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	005b      	lsls	r3, r3, #1
 8003cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfe:	69ba      	ldr	r2, [r7, #24]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	69ba      	ldr	r2, [r7, #24]
 8003d08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d10:	2201      	movs	r2, #1
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	fa02 f303 	lsl.w	r3, r2, r3
 8003d18:	43db      	mvns	r3, r3
 8003d1a:	69ba      	ldr	r2, [r7, #24]
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	091b      	lsrs	r3, r3, #4
 8003d26:	f003 0201 	and.w	r2, r3, #1
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d30:	69ba      	ldr	r2, [r7, #24]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	69ba      	ldr	r2, [r7, #24]
 8003d3a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	f003 0303 	and.w	r3, r3, #3
 8003d44:	2b03      	cmp	r3, #3
 8003d46:	d017      	beq.n	8003d78 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	005b      	lsls	r3, r3, #1
 8003d52:	2203      	movs	r2, #3
 8003d54:	fa02 f303 	lsl.w	r3, r2, r3
 8003d58:	43db      	mvns	r3, r3
 8003d5a:	69ba      	ldr	r2, [r7, #24]
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	689a      	ldr	r2, [r3, #8]
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	005b      	lsls	r3, r3, #1
 8003d68:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6c:	69ba      	ldr	r2, [r7, #24]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	69ba      	ldr	r2, [r7, #24]
 8003d76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f003 0303 	and.w	r3, r3, #3
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d123      	bne.n	8003dcc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	08da      	lsrs	r2, r3, #3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	3208      	adds	r2, #8
 8003d8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	f003 0307 	and.w	r3, r3, #7
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	220f      	movs	r2, #15
 8003d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003da0:	43db      	mvns	r3, r3
 8003da2:	69ba      	ldr	r2, [r7, #24]
 8003da4:	4013      	ands	r3, r2
 8003da6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	691a      	ldr	r2, [r3, #16]
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	f003 0307 	and.w	r3, r3, #7
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	fa02 f303 	lsl.w	r3, r2, r3
 8003db8:	69ba      	ldr	r2, [r7, #24]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	08da      	lsrs	r2, r3, #3
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	3208      	adds	r2, #8
 8003dc6:	69b9      	ldr	r1, [r7, #24]
 8003dc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	005b      	lsls	r3, r3, #1
 8003dd6:	2203      	movs	r2, #3
 8003dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ddc:	43db      	mvns	r3, r3
 8003dde:	69ba      	ldr	r2, [r7, #24]
 8003de0:	4013      	ands	r3, r2
 8003de2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	f003 0203 	and.w	r2, r3, #3
 8003dec:	69fb      	ldr	r3, [r7, #28]
 8003dee:	005b      	lsls	r3, r3, #1
 8003df0:	fa02 f303 	lsl.w	r3, r2, r3
 8003df4:	69ba      	ldr	r2, [r7, #24]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	69ba      	ldr	r2, [r7, #24]
 8003dfe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	f000 80c0 	beq.w	8003f8e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e0e:	2300      	movs	r3, #0
 8003e10:	60fb      	str	r3, [r7, #12]
 8003e12:	4b66      	ldr	r3, [pc, #408]	@ (8003fac <HAL_GPIO_Init+0x324>)
 8003e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e16:	4a65      	ldr	r2, [pc, #404]	@ (8003fac <HAL_GPIO_Init+0x324>)
 8003e18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e1e:	4b63      	ldr	r3, [pc, #396]	@ (8003fac <HAL_GPIO_Init+0x324>)
 8003e20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e26:	60fb      	str	r3, [r7, #12]
 8003e28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e2a:	4a61      	ldr	r2, [pc, #388]	@ (8003fb0 <HAL_GPIO_Init+0x328>)
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	089b      	lsrs	r3, r3, #2
 8003e30:	3302      	adds	r3, #2
 8003e32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003e38:	69fb      	ldr	r3, [r7, #28]
 8003e3a:	f003 0303 	and.w	r3, r3, #3
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	220f      	movs	r2, #15
 8003e42:	fa02 f303 	lsl.w	r3, r2, r3
 8003e46:	43db      	mvns	r3, r3
 8003e48:	69ba      	ldr	r2, [r7, #24]
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a58      	ldr	r2, [pc, #352]	@ (8003fb4 <HAL_GPIO_Init+0x32c>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d037      	beq.n	8003ec6 <HAL_GPIO_Init+0x23e>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a57      	ldr	r2, [pc, #348]	@ (8003fb8 <HAL_GPIO_Init+0x330>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d031      	beq.n	8003ec2 <HAL_GPIO_Init+0x23a>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a56      	ldr	r2, [pc, #344]	@ (8003fbc <HAL_GPIO_Init+0x334>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d02b      	beq.n	8003ebe <HAL_GPIO_Init+0x236>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a55      	ldr	r2, [pc, #340]	@ (8003fc0 <HAL_GPIO_Init+0x338>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d025      	beq.n	8003eba <HAL_GPIO_Init+0x232>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a54      	ldr	r2, [pc, #336]	@ (8003fc4 <HAL_GPIO_Init+0x33c>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d01f      	beq.n	8003eb6 <HAL_GPIO_Init+0x22e>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a53      	ldr	r2, [pc, #332]	@ (8003fc8 <HAL_GPIO_Init+0x340>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d019      	beq.n	8003eb2 <HAL_GPIO_Init+0x22a>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a52      	ldr	r2, [pc, #328]	@ (8003fcc <HAL_GPIO_Init+0x344>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d013      	beq.n	8003eae <HAL_GPIO_Init+0x226>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a51      	ldr	r2, [pc, #324]	@ (8003fd0 <HAL_GPIO_Init+0x348>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d00d      	beq.n	8003eaa <HAL_GPIO_Init+0x222>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a50      	ldr	r2, [pc, #320]	@ (8003fd4 <HAL_GPIO_Init+0x34c>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d007      	beq.n	8003ea6 <HAL_GPIO_Init+0x21e>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a4f      	ldr	r2, [pc, #316]	@ (8003fd8 <HAL_GPIO_Init+0x350>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d101      	bne.n	8003ea2 <HAL_GPIO_Init+0x21a>
 8003e9e:	2309      	movs	r3, #9
 8003ea0:	e012      	b.n	8003ec8 <HAL_GPIO_Init+0x240>
 8003ea2:	230a      	movs	r3, #10
 8003ea4:	e010      	b.n	8003ec8 <HAL_GPIO_Init+0x240>
 8003ea6:	2308      	movs	r3, #8
 8003ea8:	e00e      	b.n	8003ec8 <HAL_GPIO_Init+0x240>
 8003eaa:	2307      	movs	r3, #7
 8003eac:	e00c      	b.n	8003ec8 <HAL_GPIO_Init+0x240>
 8003eae:	2306      	movs	r3, #6
 8003eb0:	e00a      	b.n	8003ec8 <HAL_GPIO_Init+0x240>
 8003eb2:	2305      	movs	r3, #5
 8003eb4:	e008      	b.n	8003ec8 <HAL_GPIO_Init+0x240>
 8003eb6:	2304      	movs	r3, #4
 8003eb8:	e006      	b.n	8003ec8 <HAL_GPIO_Init+0x240>
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e004      	b.n	8003ec8 <HAL_GPIO_Init+0x240>
 8003ebe:	2302      	movs	r3, #2
 8003ec0:	e002      	b.n	8003ec8 <HAL_GPIO_Init+0x240>
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e000      	b.n	8003ec8 <HAL_GPIO_Init+0x240>
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	69fa      	ldr	r2, [r7, #28]
 8003eca:	f002 0203 	and.w	r2, r2, #3
 8003ece:	0092      	lsls	r2, r2, #2
 8003ed0:	4093      	lsls	r3, r2
 8003ed2:	69ba      	ldr	r2, [r7, #24]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ed8:	4935      	ldr	r1, [pc, #212]	@ (8003fb0 <HAL_GPIO_Init+0x328>)
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	089b      	lsrs	r3, r3, #2
 8003ede:	3302      	adds	r3, #2
 8003ee0:	69ba      	ldr	r2, [r7, #24]
 8003ee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ee6:	4b3d      	ldr	r3, [pc, #244]	@ (8003fdc <HAL_GPIO_Init+0x354>)
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	43db      	mvns	r3, r3
 8003ef0:	69ba      	ldr	r2, [r7, #24]
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d003      	beq.n	8003f0a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003f02:	69ba      	ldr	r2, [r7, #24]
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f0a:	4a34      	ldr	r2, [pc, #208]	@ (8003fdc <HAL_GPIO_Init+0x354>)
 8003f0c:	69bb      	ldr	r3, [r7, #24]
 8003f0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f10:	4b32      	ldr	r3, [pc, #200]	@ (8003fdc <HAL_GPIO_Init+0x354>)
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	43db      	mvns	r3, r3
 8003f1a:	69ba      	ldr	r2, [r7, #24]
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d003      	beq.n	8003f34 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003f2c:	69ba      	ldr	r2, [r7, #24]
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f34:	4a29      	ldr	r2, [pc, #164]	@ (8003fdc <HAL_GPIO_Init+0x354>)
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003f3a:	4b28      	ldr	r3, [pc, #160]	@ (8003fdc <HAL_GPIO_Init+0x354>)
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	43db      	mvns	r3, r3
 8003f44:	69ba      	ldr	r2, [r7, #24]
 8003f46:	4013      	ands	r3, r2
 8003f48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d003      	beq.n	8003f5e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003f56:	69ba      	ldr	r2, [r7, #24]
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f5e:	4a1f      	ldr	r2, [pc, #124]	@ (8003fdc <HAL_GPIO_Init+0x354>)
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f64:	4b1d      	ldr	r3, [pc, #116]	@ (8003fdc <HAL_GPIO_Init+0x354>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	43db      	mvns	r3, r3
 8003f6e:	69ba      	ldr	r2, [r7, #24]
 8003f70:	4013      	ands	r3, r2
 8003f72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d003      	beq.n	8003f88 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003f80:	69ba      	ldr	r2, [r7, #24]
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f88:	4a14      	ldr	r2, [pc, #80]	@ (8003fdc <HAL_GPIO_Init+0x354>)
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f8e:	69fb      	ldr	r3, [r7, #28]
 8003f90:	3301      	adds	r3, #1
 8003f92:	61fb      	str	r3, [r7, #28]
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	2b0f      	cmp	r3, #15
 8003f98:	f67f ae84 	bls.w	8003ca4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003f9c:	bf00      	nop
 8003f9e:	bf00      	nop
 8003fa0:	3724      	adds	r7, #36	@ 0x24
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr
 8003faa:	bf00      	nop
 8003fac:	40023800 	.word	0x40023800
 8003fb0:	40013800 	.word	0x40013800
 8003fb4:	40020000 	.word	0x40020000
 8003fb8:	40020400 	.word	0x40020400
 8003fbc:	40020800 	.word	0x40020800
 8003fc0:	40020c00 	.word	0x40020c00
 8003fc4:	40021000 	.word	0x40021000
 8003fc8:	40021400 	.word	0x40021400
 8003fcc:	40021800 	.word	0x40021800
 8003fd0:	40021c00 	.word	0x40021c00
 8003fd4:	40022000 	.word	0x40022000
 8003fd8:	40022400 	.word	0x40022400
 8003fdc:	40013c00 	.word	0x40013c00

08003fe0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b087      	sub	sp, #28
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003fea:	2300      	movs	r3, #0
 8003fec:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	617b      	str	r3, [r7, #20]
 8003ffa:	e0d9      	b.n	80041b0 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	fa02 f303 	lsl.w	r3, r2, r3
 8004004:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004006:	683a      	ldr	r2, [r7, #0]
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	4013      	ands	r3, r2
 800400c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800400e:	68fa      	ldr	r2, [r7, #12]
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	429a      	cmp	r2, r3
 8004014:	f040 80c9 	bne.w	80041aa <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004018:	4a6b      	ldr	r2, [pc, #428]	@ (80041c8 <HAL_GPIO_DeInit+0x1e8>)
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	089b      	lsrs	r3, r3, #2
 800401e:	3302      	adds	r3, #2
 8004020:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004024:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	f003 0303 	and.w	r3, r3, #3
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	220f      	movs	r2, #15
 8004030:	fa02 f303 	lsl.w	r3, r2, r3
 8004034:	68ba      	ldr	r2, [r7, #8]
 8004036:	4013      	ands	r3, r2
 8004038:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a63      	ldr	r2, [pc, #396]	@ (80041cc <HAL_GPIO_DeInit+0x1ec>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d037      	beq.n	80040b2 <HAL_GPIO_DeInit+0xd2>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a62      	ldr	r2, [pc, #392]	@ (80041d0 <HAL_GPIO_DeInit+0x1f0>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d031      	beq.n	80040ae <HAL_GPIO_DeInit+0xce>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a61      	ldr	r2, [pc, #388]	@ (80041d4 <HAL_GPIO_DeInit+0x1f4>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d02b      	beq.n	80040aa <HAL_GPIO_DeInit+0xca>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a60      	ldr	r2, [pc, #384]	@ (80041d8 <HAL_GPIO_DeInit+0x1f8>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d025      	beq.n	80040a6 <HAL_GPIO_DeInit+0xc6>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a5f      	ldr	r2, [pc, #380]	@ (80041dc <HAL_GPIO_DeInit+0x1fc>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d01f      	beq.n	80040a2 <HAL_GPIO_DeInit+0xc2>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a5e      	ldr	r2, [pc, #376]	@ (80041e0 <HAL_GPIO_DeInit+0x200>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d019      	beq.n	800409e <HAL_GPIO_DeInit+0xbe>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a5d      	ldr	r2, [pc, #372]	@ (80041e4 <HAL_GPIO_DeInit+0x204>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d013      	beq.n	800409a <HAL_GPIO_DeInit+0xba>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a5c      	ldr	r2, [pc, #368]	@ (80041e8 <HAL_GPIO_DeInit+0x208>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d00d      	beq.n	8004096 <HAL_GPIO_DeInit+0xb6>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a5b      	ldr	r2, [pc, #364]	@ (80041ec <HAL_GPIO_DeInit+0x20c>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d007      	beq.n	8004092 <HAL_GPIO_DeInit+0xb2>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a5a      	ldr	r2, [pc, #360]	@ (80041f0 <HAL_GPIO_DeInit+0x210>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d101      	bne.n	800408e <HAL_GPIO_DeInit+0xae>
 800408a:	2309      	movs	r3, #9
 800408c:	e012      	b.n	80040b4 <HAL_GPIO_DeInit+0xd4>
 800408e:	230a      	movs	r3, #10
 8004090:	e010      	b.n	80040b4 <HAL_GPIO_DeInit+0xd4>
 8004092:	2308      	movs	r3, #8
 8004094:	e00e      	b.n	80040b4 <HAL_GPIO_DeInit+0xd4>
 8004096:	2307      	movs	r3, #7
 8004098:	e00c      	b.n	80040b4 <HAL_GPIO_DeInit+0xd4>
 800409a:	2306      	movs	r3, #6
 800409c:	e00a      	b.n	80040b4 <HAL_GPIO_DeInit+0xd4>
 800409e:	2305      	movs	r3, #5
 80040a0:	e008      	b.n	80040b4 <HAL_GPIO_DeInit+0xd4>
 80040a2:	2304      	movs	r3, #4
 80040a4:	e006      	b.n	80040b4 <HAL_GPIO_DeInit+0xd4>
 80040a6:	2303      	movs	r3, #3
 80040a8:	e004      	b.n	80040b4 <HAL_GPIO_DeInit+0xd4>
 80040aa:	2302      	movs	r3, #2
 80040ac:	e002      	b.n	80040b4 <HAL_GPIO_DeInit+0xd4>
 80040ae:	2301      	movs	r3, #1
 80040b0:	e000      	b.n	80040b4 <HAL_GPIO_DeInit+0xd4>
 80040b2:	2300      	movs	r3, #0
 80040b4:	697a      	ldr	r2, [r7, #20]
 80040b6:	f002 0203 	and.w	r2, r2, #3
 80040ba:	0092      	lsls	r2, r2, #2
 80040bc:	4093      	lsls	r3, r2
 80040be:	68ba      	ldr	r2, [r7, #8]
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d132      	bne.n	800412a <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80040c4:	4b4b      	ldr	r3, [pc, #300]	@ (80041f4 <HAL_GPIO_DeInit+0x214>)
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	43db      	mvns	r3, r3
 80040cc:	4949      	ldr	r1, [pc, #292]	@ (80041f4 <HAL_GPIO_DeInit+0x214>)
 80040ce:	4013      	ands	r3, r2
 80040d0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80040d2:	4b48      	ldr	r3, [pc, #288]	@ (80041f4 <HAL_GPIO_DeInit+0x214>)
 80040d4:	685a      	ldr	r2, [r3, #4]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	43db      	mvns	r3, r3
 80040da:	4946      	ldr	r1, [pc, #280]	@ (80041f4 <HAL_GPIO_DeInit+0x214>)
 80040dc:	4013      	ands	r3, r2
 80040de:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80040e0:	4b44      	ldr	r3, [pc, #272]	@ (80041f4 <HAL_GPIO_DeInit+0x214>)
 80040e2:	68da      	ldr	r2, [r3, #12]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	43db      	mvns	r3, r3
 80040e8:	4942      	ldr	r1, [pc, #264]	@ (80041f4 <HAL_GPIO_DeInit+0x214>)
 80040ea:	4013      	ands	r3, r2
 80040ec:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80040ee:	4b41      	ldr	r3, [pc, #260]	@ (80041f4 <HAL_GPIO_DeInit+0x214>)
 80040f0:	689a      	ldr	r2, [r3, #8]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	43db      	mvns	r3, r3
 80040f6:	493f      	ldr	r1, [pc, #252]	@ (80041f4 <HAL_GPIO_DeInit+0x214>)
 80040f8:	4013      	ands	r3, r2
 80040fa:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	f003 0303 	and.w	r3, r3, #3
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	220f      	movs	r2, #15
 8004106:	fa02 f303 	lsl.w	r3, r2, r3
 800410a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800410c:	4a2e      	ldr	r2, [pc, #184]	@ (80041c8 <HAL_GPIO_DeInit+0x1e8>)
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	089b      	lsrs	r3, r3, #2
 8004112:	3302      	adds	r3, #2
 8004114:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	43da      	mvns	r2, r3
 800411c:	482a      	ldr	r0, [pc, #168]	@ (80041c8 <HAL_GPIO_DeInit+0x1e8>)
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	089b      	lsrs	r3, r3, #2
 8004122:	400a      	ands	r2, r1
 8004124:	3302      	adds	r3, #2
 8004126:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	005b      	lsls	r3, r3, #1
 8004132:	2103      	movs	r1, #3
 8004134:	fa01 f303 	lsl.w	r3, r1, r3
 8004138:	43db      	mvns	r3, r3
 800413a:	401a      	ands	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	08da      	lsrs	r2, r3, #3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	3208      	adds	r2, #8
 8004148:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	f003 0307 	and.w	r3, r3, #7
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	220f      	movs	r2, #15
 8004156:	fa02 f303 	lsl.w	r3, r2, r3
 800415a:	43db      	mvns	r3, r3
 800415c:	697a      	ldr	r2, [r7, #20]
 800415e:	08d2      	lsrs	r2, r2, #3
 8004160:	4019      	ands	r1, r3
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	3208      	adds	r2, #8
 8004166:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	68da      	ldr	r2, [r3, #12]
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	005b      	lsls	r3, r3, #1
 8004172:	2103      	movs	r1, #3
 8004174:	fa01 f303 	lsl.w	r3, r1, r3
 8004178:	43db      	mvns	r3, r3
 800417a:	401a      	ands	r2, r3
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	685a      	ldr	r2, [r3, #4]
 8004184:	2101      	movs	r1, #1
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	fa01 f303 	lsl.w	r3, r1, r3
 800418c:	43db      	mvns	r3, r3
 800418e:	401a      	ands	r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	689a      	ldr	r2, [r3, #8]
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	005b      	lsls	r3, r3, #1
 800419c:	2103      	movs	r1, #3
 800419e:	fa01 f303 	lsl.w	r3, r1, r3
 80041a2:	43db      	mvns	r3, r3
 80041a4:	401a      	ands	r2, r3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	3301      	adds	r3, #1
 80041ae:	617b      	str	r3, [r7, #20]
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	2b0f      	cmp	r3, #15
 80041b4:	f67f af22 	bls.w	8003ffc <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80041b8:	bf00      	nop
 80041ba:	bf00      	nop
 80041bc:	371c      	adds	r7, #28
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr
 80041c6:	bf00      	nop
 80041c8:	40013800 	.word	0x40013800
 80041cc:	40020000 	.word	0x40020000
 80041d0:	40020400 	.word	0x40020400
 80041d4:	40020800 	.word	0x40020800
 80041d8:	40020c00 	.word	0x40020c00
 80041dc:	40021000 	.word	0x40021000
 80041e0:	40021400 	.word	0x40021400
 80041e4:	40021800 	.word	0x40021800
 80041e8:	40021c00 	.word	0x40021c00
 80041ec:	40022000 	.word	0x40022000
 80041f0:	40022400 	.word	0x40022400
 80041f4:	40013c00 	.word	0x40013c00

080041f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b085      	sub	sp, #20
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	460b      	mov	r3, r1
 8004202:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	691a      	ldr	r2, [r3, #16]
 8004208:	887b      	ldrh	r3, [r7, #2]
 800420a:	4013      	ands	r3, r2
 800420c:	2b00      	cmp	r3, #0
 800420e:	d002      	beq.n	8004216 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004210:	2301      	movs	r3, #1
 8004212:	73fb      	strb	r3, [r7, #15]
 8004214:	e001      	b.n	800421a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004216:	2300      	movs	r3, #0
 8004218:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800421a:	7bfb      	ldrb	r3, [r7, #15]
}
 800421c:	4618      	mov	r0, r3
 800421e:	3714      	adds	r7, #20
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr

08004228 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	460b      	mov	r3, r1
 8004232:	807b      	strh	r3, [r7, #2]
 8004234:	4613      	mov	r3, r2
 8004236:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004238:	787b      	ldrb	r3, [r7, #1]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d003      	beq.n	8004246 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800423e:	887a      	ldrh	r2, [r7, #2]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004244:	e003      	b.n	800424e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004246:	887b      	ldrh	r3, [r7, #2]
 8004248:	041a      	lsls	r2, r3, #16
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	619a      	str	r2, [r3, #24]
}
 800424e:	bf00      	nop
 8004250:	370c      	adds	r7, #12
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr
	...

0800425c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d101      	bne.n	800426e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e12b      	b.n	80044c6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004274:	b2db      	uxtb	r3, r3
 8004276:	2b00      	cmp	r3, #0
 8004278:	d106      	bne.n	8004288 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f7fe fd2e 	bl	8002ce4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2224      	movs	r2, #36	@ 0x24
 800428c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f022 0201 	bic.w	r2, r2, #1
 800429e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80042ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80042be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80042c0:	f001 ff82 	bl	80061c8 <HAL_RCC_GetPCLK1Freq>
 80042c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	4a81      	ldr	r2, [pc, #516]	@ (80044d0 <HAL_I2C_Init+0x274>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d807      	bhi.n	80042e0 <HAL_I2C_Init+0x84>
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	4a80      	ldr	r2, [pc, #512]	@ (80044d4 <HAL_I2C_Init+0x278>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	bf94      	ite	ls
 80042d8:	2301      	movls	r3, #1
 80042da:	2300      	movhi	r3, #0
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	e006      	b.n	80042ee <HAL_I2C_Init+0x92>
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	4a7d      	ldr	r2, [pc, #500]	@ (80044d8 <HAL_I2C_Init+0x27c>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	bf94      	ite	ls
 80042e8:	2301      	movls	r3, #1
 80042ea:	2300      	movhi	r3, #0
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d001      	beq.n	80042f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e0e7      	b.n	80044c6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	4a78      	ldr	r2, [pc, #480]	@ (80044dc <HAL_I2C_Init+0x280>)
 80042fa:	fba2 2303 	umull	r2, r3, r2, r3
 80042fe:	0c9b      	lsrs	r3, r3, #18
 8004300:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	68ba      	ldr	r2, [r7, #8]
 8004312:	430a      	orrs	r2, r1
 8004314:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	6a1b      	ldr	r3, [r3, #32]
 800431c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	4a6a      	ldr	r2, [pc, #424]	@ (80044d0 <HAL_I2C_Init+0x274>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d802      	bhi.n	8004330 <HAL_I2C_Init+0xd4>
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	3301      	adds	r3, #1
 800432e:	e009      	b.n	8004344 <HAL_I2C_Init+0xe8>
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004336:	fb02 f303 	mul.w	r3, r2, r3
 800433a:	4a69      	ldr	r2, [pc, #420]	@ (80044e0 <HAL_I2C_Init+0x284>)
 800433c:	fba2 2303 	umull	r2, r3, r2, r3
 8004340:	099b      	lsrs	r3, r3, #6
 8004342:	3301      	adds	r3, #1
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	6812      	ldr	r2, [r2, #0]
 8004348:	430b      	orrs	r3, r1
 800434a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	69db      	ldr	r3, [r3, #28]
 8004352:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004356:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	495c      	ldr	r1, [pc, #368]	@ (80044d0 <HAL_I2C_Init+0x274>)
 8004360:	428b      	cmp	r3, r1
 8004362:	d819      	bhi.n	8004398 <HAL_I2C_Init+0x13c>
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	1e59      	subs	r1, r3, #1
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	005b      	lsls	r3, r3, #1
 800436e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004372:	1c59      	adds	r1, r3, #1
 8004374:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004378:	400b      	ands	r3, r1
 800437a:	2b00      	cmp	r3, #0
 800437c:	d00a      	beq.n	8004394 <HAL_I2C_Init+0x138>
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	1e59      	subs	r1, r3, #1
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	005b      	lsls	r3, r3, #1
 8004388:	fbb1 f3f3 	udiv	r3, r1, r3
 800438c:	3301      	adds	r3, #1
 800438e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004392:	e051      	b.n	8004438 <HAL_I2C_Init+0x1dc>
 8004394:	2304      	movs	r3, #4
 8004396:	e04f      	b.n	8004438 <HAL_I2C_Init+0x1dc>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d111      	bne.n	80043c4 <HAL_I2C_Init+0x168>
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	1e58      	subs	r0, r3, #1
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6859      	ldr	r1, [r3, #4]
 80043a8:	460b      	mov	r3, r1
 80043aa:	005b      	lsls	r3, r3, #1
 80043ac:	440b      	add	r3, r1
 80043ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80043b2:	3301      	adds	r3, #1
 80043b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	bf0c      	ite	eq
 80043bc:	2301      	moveq	r3, #1
 80043be:	2300      	movne	r3, #0
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	e012      	b.n	80043ea <HAL_I2C_Init+0x18e>
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	1e58      	subs	r0, r3, #1
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6859      	ldr	r1, [r3, #4]
 80043cc:	460b      	mov	r3, r1
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	440b      	add	r3, r1
 80043d2:	0099      	lsls	r1, r3, #2
 80043d4:	440b      	add	r3, r1
 80043d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80043da:	3301      	adds	r3, #1
 80043dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	bf0c      	ite	eq
 80043e4:	2301      	moveq	r3, #1
 80043e6:	2300      	movne	r3, #0
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d001      	beq.n	80043f2 <HAL_I2C_Init+0x196>
 80043ee:	2301      	movs	r3, #1
 80043f0:	e022      	b.n	8004438 <HAL_I2C_Init+0x1dc>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d10e      	bne.n	8004418 <HAL_I2C_Init+0x1bc>
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	1e58      	subs	r0, r3, #1
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6859      	ldr	r1, [r3, #4]
 8004402:	460b      	mov	r3, r1
 8004404:	005b      	lsls	r3, r3, #1
 8004406:	440b      	add	r3, r1
 8004408:	fbb0 f3f3 	udiv	r3, r0, r3
 800440c:	3301      	adds	r3, #1
 800440e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004412:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004416:	e00f      	b.n	8004438 <HAL_I2C_Init+0x1dc>
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	1e58      	subs	r0, r3, #1
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6859      	ldr	r1, [r3, #4]
 8004420:	460b      	mov	r3, r1
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	440b      	add	r3, r1
 8004426:	0099      	lsls	r1, r3, #2
 8004428:	440b      	add	r3, r1
 800442a:	fbb0 f3f3 	udiv	r3, r0, r3
 800442e:	3301      	adds	r3, #1
 8004430:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004434:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004438:	6879      	ldr	r1, [r7, #4]
 800443a:	6809      	ldr	r1, [r1, #0]
 800443c:	4313      	orrs	r3, r2
 800443e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	69da      	ldr	r2, [r3, #28]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a1b      	ldr	r3, [r3, #32]
 8004452:	431a      	orrs	r2, r3
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	430a      	orrs	r2, r1
 800445a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004466:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	6911      	ldr	r1, [r2, #16]
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	68d2      	ldr	r2, [r2, #12]
 8004472:	4311      	orrs	r1, r2
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	6812      	ldr	r2, [r2, #0]
 8004478:	430b      	orrs	r3, r1
 800447a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	695a      	ldr	r2, [r3, #20]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	699b      	ldr	r3, [r3, #24]
 800448e:	431a      	orrs	r2, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	430a      	orrs	r2, r1
 8004496:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f042 0201 	orr.w	r2, r2, #1
 80044a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2220      	movs	r2, #32
 80044b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3710      	adds	r7, #16
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	000186a0 	.word	0x000186a0
 80044d4:	001e847f 	.word	0x001e847f
 80044d8:	003d08ff 	.word	0x003d08ff
 80044dc:	431bde83 	.word	0x431bde83
 80044e0:	10624dd3 	.word	0x10624dd3

080044e4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b088      	sub	sp, #32
 80044e8:	af02      	add	r7, sp, #8
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	4608      	mov	r0, r1
 80044ee:	4611      	mov	r1, r2
 80044f0:	461a      	mov	r2, r3
 80044f2:	4603      	mov	r3, r0
 80044f4:	817b      	strh	r3, [r7, #10]
 80044f6:	460b      	mov	r3, r1
 80044f8:	813b      	strh	r3, [r7, #8]
 80044fa:	4613      	mov	r3, r2
 80044fc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80044fe:	f7ff fa4f 	bl	80039a0 <HAL_GetTick>
 8004502:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800450a:	b2db      	uxtb	r3, r3
 800450c:	2b20      	cmp	r3, #32
 800450e:	f040 80d9 	bne.w	80046c4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	9300      	str	r3, [sp, #0]
 8004516:	2319      	movs	r3, #25
 8004518:	2201      	movs	r2, #1
 800451a:	496d      	ldr	r1, [pc, #436]	@ (80046d0 <HAL_I2C_Mem_Write+0x1ec>)
 800451c:	68f8      	ldr	r0, [r7, #12]
 800451e:	f000 fc8b 	bl	8004e38 <I2C_WaitOnFlagUntilTimeout>
 8004522:	4603      	mov	r3, r0
 8004524:	2b00      	cmp	r3, #0
 8004526:	d001      	beq.n	800452c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004528:	2302      	movs	r3, #2
 800452a:	e0cc      	b.n	80046c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004532:	2b01      	cmp	r3, #1
 8004534:	d101      	bne.n	800453a <HAL_I2C_Mem_Write+0x56>
 8004536:	2302      	movs	r3, #2
 8004538:	e0c5      	b.n	80046c6 <HAL_I2C_Mem_Write+0x1e2>
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2201      	movs	r2, #1
 800453e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 0301 	and.w	r3, r3, #1
 800454c:	2b01      	cmp	r3, #1
 800454e:	d007      	beq.n	8004560 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f042 0201 	orr.w	r2, r2, #1
 800455e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800456e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2221      	movs	r2, #33	@ 0x21
 8004574:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2240      	movs	r2, #64	@ 0x40
 800457c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2200      	movs	r2, #0
 8004584:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	6a3a      	ldr	r2, [r7, #32]
 800458a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004590:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004596:	b29a      	uxth	r2, r3
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	4a4d      	ldr	r2, [pc, #308]	@ (80046d4 <HAL_I2C_Mem_Write+0x1f0>)
 80045a0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80045a2:	88f8      	ldrh	r0, [r7, #6]
 80045a4:	893a      	ldrh	r2, [r7, #8]
 80045a6:	8979      	ldrh	r1, [r7, #10]
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	9301      	str	r3, [sp, #4]
 80045ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045ae:	9300      	str	r3, [sp, #0]
 80045b0:	4603      	mov	r3, r0
 80045b2:	68f8      	ldr	r0, [r7, #12]
 80045b4:	f000 fac2 	bl	8004b3c <I2C_RequestMemoryWrite>
 80045b8:	4603      	mov	r3, r0
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d052      	beq.n	8004664 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e081      	b.n	80046c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045c2:	697a      	ldr	r2, [r7, #20]
 80045c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80045c6:	68f8      	ldr	r0, [r7, #12]
 80045c8:	f000 fd50 	bl	800506c <I2C_WaitOnTXEFlagUntilTimeout>
 80045cc:	4603      	mov	r3, r0
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d00d      	beq.n	80045ee <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045d6:	2b04      	cmp	r3, #4
 80045d8:	d107      	bne.n	80045ea <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045e8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e06b      	b.n	80046c6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045f2:	781a      	ldrb	r2, [r3, #0]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045fe:	1c5a      	adds	r2, r3, #1
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004608:	3b01      	subs	r3, #1
 800460a:	b29a      	uxth	r2, r3
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004614:	b29b      	uxth	r3, r3
 8004616:	3b01      	subs	r3, #1
 8004618:	b29a      	uxth	r2, r3
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	695b      	ldr	r3, [r3, #20]
 8004624:	f003 0304 	and.w	r3, r3, #4
 8004628:	2b04      	cmp	r3, #4
 800462a:	d11b      	bne.n	8004664 <HAL_I2C_Mem_Write+0x180>
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004630:	2b00      	cmp	r3, #0
 8004632:	d017      	beq.n	8004664 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004638:	781a      	ldrb	r2, [r3, #0]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004644:	1c5a      	adds	r2, r3, #1
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800464e:	3b01      	subs	r3, #1
 8004650:	b29a      	uxth	r2, r3
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800465a:	b29b      	uxth	r3, r3
 800465c:	3b01      	subs	r3, #1
 800465e:	b29a      	uxth	r2, r3
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004668:	2b00      	cmp	r3, #0
 800466a:	d1aa      	bne.n	80045c2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800466c:	697a      	ldr	r2, [r7, #20]
 800466e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004670:	68f8      	ldr	r0, [r7, #12]
 8004672:	f000 fd43 	bl	80050fc <I2C_WaitOnBTFFlagUntilTimeout>
 8004676:	4603      	mov	r3, r0
 8004678:	2b00      	cmp	r3, #0
 800467a:	d00d      	beq.n	8004698 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004680:	2b04      	cmp	r3, #4
 8004682:	d107      	bne.n	8004694 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004692:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	e016      	b.n	80046c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2220      	movs	r2, #32
 80046ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2200      	movs	r2, #0
 80046b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80046c0:	2300      	movs	r3, #0
 80046c2:	e000      	b.n	80046c6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80046c4:	2302      	movs	r3, #2
  }
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3718      	adds	r7, #24
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	bf00      	nop
 80046d0:	00100002 	.word	0x00100002
 80046d4:	ffff0000 	.word	0xffff0000

080046d8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b08c      	sub	sp, #48	@ 0x30
 80046dc:	af02      	add	r7, sp, #8
 80046de:	60f8      	str	r0, [r7, #12]
 80046e0:	4608      	mov	r0, r1
 80046e2:	4611      	mov	r1, r2
 80046e4:	461a      	mov	r2, r3
 80046e6:	4603      	mov	r3, r0
 80046e8:	817b      	strh	r3, [r7, #10]
 80046ea:	460b      	mov	r3, r1
 80046ec:	813b      	strh	r3, [r7, #8]
 80046ee:	4613      	mov	r3, r2
 80046f0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80046f2:	f7ff f955 	bl	80039a0 <HAL_GetTick>
 80046f6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	2b20      	cmp	r3, #32
 8004702:	f040 8214 	bne.w	8004b2e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004708:	9300      	str	r3, [sp, #0]
 800470a:	2319      	movs	r3, #25
 800470c:	2201      	movs	r2, #1
 800470e:	497b      	ldr	r1, [pc, #492]	@ (80048fc <HAL_I2C_Mem_Read+0x224>)
 8004710:	68f8      	ldr	r0, [r7, #12]
 8004712:	f000 fb91 	bl	8004e38 <I2C_WaitOnFlagUntilTimeout>
 8004716:	4603      	mov	r3, r0
 8004718:	2b00      	cmp	r3, #0
 800471a:	d001      	beq.n	8004720 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800471c:	2302      	movs	r3, #2
 800471e:	e207      	b.n	8004b30 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004726:	2b01      	cmp	r3, #1
 8004728:	d101      	bne.n	800472e <HAL_I2C_Mem_Read+0x56>
 800472a:	2302      	movs	r3, #2
 800472c:	e200      	b.n	8004b30 <HAL_I2C_Mem_Read+0x458>
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2201      	movs	r2, #1
 8004732:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 0301 	and.w	r3, r3, #1
 8004740:	2b01      	cmp	r3, #1
 8004742:	d007      	beq.n	8004754 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f042 0201 	orr.w	r2, r2, #1
 8004752:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004762:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2222      	movs	r2, #34	@ 0x22
 8004768:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2240      	movs	r2, #64	@ 0x40
 8004770:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2200      	movs	r2, #0
 8004778:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800477e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004784:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800478a:	b29a      	uxth	r2, r3
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	4a5b      	ldr	r2, [pc, #364]	@ (8004900 <HAL_I2C_Mem_Read+0x228>)
 8004794:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004796:	88f8      	ldrh	r0, [r7, #6]
 8004798:	893a      	ldrh	r2, [r7, #8]
 800479a:	8979      	ldrh	r1, [r7, #10]
 800479c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800479e:	9301      	str	r3, [sp, #4]
 80047a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047a2:	9300      	str	r3, [sp, #0]
 80047a4:	4603      	mov	r3, r0
 80047a6:	68f8      	ldr	r0, [r7, #12]
 80047a8:	f000 fa5e 	bl	8004c68 <I2C_RequestMemoryRead>
 80047ac:	4603      	mov	r3, r0
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d001      	beq.n	80047b6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e1bc      	b.n	8004b30 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d113      	bne.n	80047e6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047be:	2300      	movs	r3, #0
 80047c0:	623b      	str	r3, [r7, #32]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	695b      	ldr	r3, [r3, #20]
 80047c8:	623b      	str	r3, [r7, #32]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	699b      	ldr	r3, [r3, #24]
 80047d0:	623b      	str	r3, [r7, #32]
 80047d2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047e2:	601a      	str	r2, [r3, #0]
 80047e4:	e190      	b.n	8004b08 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d11b      	bne.n	8004826 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047fe:	2300      	movs	r3, #0
 8004800:	61fb      	str	r3, [r7, #28]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	695b      	ldr	r3, [r3, #20]
 8004808:	61fb      	str	r3, [r7, #28]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	699b      	ldr	r3, [r3, #24]
 8004810:	61fb      	str	r3, [r7, #28]
 8004812:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004822:	601a      	str	r2, [r3, #0]
 8004824:	e170      	b.n	8004b08 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800482a:	2b02      	cmp	r3, #2
 800482c:	d11b      	bne.n	8004866 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800483c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800484c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800484e:	2300      	movs	r3, #0
 8004850:	61bb      	str	r3, [r7, #24]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	695b      	ldr	r3, [r3, #20]
 8004858:	61bb      	str	r3, [r7, #24]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	699b      	ldr	r3, [r3, #24]
 8004860:	61bb      	str	r3, [r7, #24]
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	e150      	b.n	8004b08 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004866:	2300      	movs	r3, #0
 8004868:	617b      	str	r3, [r7, #20]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	695b      	ldr	r3, [r3, #20]
 8004870:	617b      	str	r3, [r7, #20]
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	699b      	ldr	r3, [r3, #24]
 8004878:	617b      	str	r3, [r7, #20]
 800487a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800487c:	e144      	b.n	8004b08 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004882:	2b03      	cmp	r3, #3
 8004884:	f200 80f1 	bhi.w	8004a6a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800488c:	2b01      	cmp	r3, #1
 800488e:	d123      	bne.n	80048d8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004890:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004892:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004894:	68f8      	ldr	r0, [r7, #12]
 8004896:	f000 fc79 	bl	800518c <I2C_WaitOnRXNEFlagUntilTimeout>
 800489a:	4603      	mov	r3, r0
 800489c:	2b00      	cmp	r3, #0
 800489e:	d001      	beq.n	80048a4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	e145      	b.n	8004b30 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	691a      	ldr	r2, [r3, #16]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ae:	b2d2      	uxtb	r2, r2
 80048b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048b6:	1c5a      	adds	r2, r3, #1
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048c0:	3b01      	subs	r3, #1
 80048c2:	b29a      	uxth	r2, r3
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	3b01      	subs	r3, #1
 80048d0:	b29a      	uxth	r2, r3
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80048d6:	e117      	b.n	8004b08 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048dc:	2b02      	cmp	r3, #2
 80048de:	d14e      	bne.n	800497e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80048e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048e2:	9300      	str	r3, [sp, #0]
 80048e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048e6:	2200      	movs	r2, #0
 80048e8:	4906      	ldr	r1, [pc, #24]	@ (8004904 <HAL_I2C_Mem_Read+0x22c>)
 80048ea:	68f8      	ldr	r0, [r7, #12]
 80048ec:	f000 faa4 	bl	8004e38 <I2C_WaitOnFlagUntilTimeout>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d008      	beq.n	8004908 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e11a      	b.n	8004b30 <HAL_I2C_Mem_Read+0x458>
 80048fa:	bf00      	nop
 80048fc:	00100002 	.word	0x00100002
 8004900:	ffff0000 	.word	0xffff0000
 8004904:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004916:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	691a      	ldr	r2, [r3, #16]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004922:	b2d2      	uxtb	r2, r2
 8004924:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800492a:	1c5a      	adds	r2, r3, #1
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004934:	3b01      	subs	r3, #1
 8004936:	b29a      	uxth	r2, r3
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004940:	b29b      	uxth	r3, r3
 8004942:	3b01      	subs	r3, #1
 8004944:	b29a      	uxth	r2, r3
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	691a      	ldr	r2, [r3, #16]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004954:	b2d2      	uxtb	r2, r2
 8004956:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800495c:	1c5a      	adds	r2, r3, #1
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004966:	3b01      	subs	r3, #1
 8004968:	b29a      	uxth	r2, r3
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004972:	b29b      	uxth	r3, r3
 8004974:	3b01      	subs	r3, #1
 8004976:	b29a      	uxth	r2, r3
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800497c:	e0c4      	b.n	8004b08 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800497e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004980:	9300      	str	r3, [sp, #0]
 8004982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004984:	2200      	movs	r2, #0
 8004986:	496c      	ldr	r1, [pc, #432]	@ (8004b38 <HAL_I2C_Mem_Read+0x460>)
 8004988:	68f8      	ldr	r0, [r7, #12]
 800498a:	f000 fa55 	bl	8004e38 <I2C_WaitOnFlagUntilTimeout>
 800498e:	4603      	mov	r3, r0
 8004990:	2b00      	cmp	r3, #0
 8004992:	d001      	beq.n	8004998 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e0cb      	b.n	8004b30 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	691a      	ldr	r2, [r3, #16]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049b2:	b2d2      	uxtb	r2, r2
 80049b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ba:	1c5a      	adds	r2, r3, #1
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049c4:	3b01      	subs	r3, #1
 80049c6:	b29a      	uxth	r2, r3
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	3b01      	subs	r3, #1
 80049d4:	b29a      	uxth	r2, r3
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80049da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049dc:	9300      	str	r3, [sp, #0]
 80049de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049e0:	2200      	movs	r2, #0
 80049e2:	4955      	ldr	r1, [pc, #340]	@ (8004b38 <HAL_I2C_Mem_Read+0x460>)
 80049e4:	68f8      	ldr	r0, [r7, #12]
 80049e6:	f000 fa27 	bl	8004e38 <I2C_WaitOnFlagUntilTimeout>
 80049ea:	4603      	mov	r3, r0
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d001      	beq.n	80049f4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e09d      	b.n	8004b30 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a02:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	691a      	ldr	r2, [r3, #16]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a0e:	b2d2      	uxtb	r2, r2
 8004a10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a16:	1c5a      	adds	r2, r3, #1
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a20:	3b01      	subs	r3, #1
 8004a22:	b29a      	uxth	r2, r3
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	3b01      	subs	r3, #1
 8004a30:	b29a      	uxth	r2, r3
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	691a      	ldr	r2, [r3, #16]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a40:	b2d2      	uxtb	r2, r2
 8004a42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a48:	1c5a      	adds	r2, r3, #1
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a52:	3b01      	subs	r3, #1
 8004a54:	b29a      	uxth	r2, r3
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	3b01      	subs	r3, #1
 8004a62:	b29a      	uxth	r2, r3
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004a68:	e04e      	b.n	8004b08 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a6c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004a6e:	68f8      	ldr	r0, [r7, #12]
 8004a70:	f000 fb8c 	bl	800518c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d001      	beq.n	8004a7e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e058      	b.n	8004b30 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	691a      	ldr	r2, [r3, #16]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a88:	b2d2      	uxtb	r2, r2
 8004a8a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a90:	1c5a      	adds	r2, r3, #1
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a9a:	3b01      	subs	r3, #1
 8004a9c:	b29a      	uxth	r2, r3
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	3b01      	subs	r3, #1
 8004aaa:	b29a      	uxth	r2, r3
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	695b      	ldr	r3, [r3, #20]
 8004ab6:	f003 0304 	and.w	r3, r3, #4
 8004aba:	2b04      	cmp	r3, #4
 8004abc:	d124      	bne.n	8004b08 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ac2:	2b03      	cmp	r3, #3
 8004ac4:	d107      	bne.n	8004ad6 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ad4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	691a      	ldr	r2, [r3, #16]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ae0:	b2d2      	uxtb	r2, r2
 8004ae2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ae8:	1c5a      	adds	r2, r3, #1
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004af2:	3b01      	subs	r3, #1
 8004af4:	b29a      	uxth	r2, r3
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	3b01      	subs	r3, #1
 8004b02:	b29a      	uxth	r2, r3
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	f47f aeb6 	bne.w	800487e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2220      	movs	r2, #32
 8004b16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2200      	movs	r2, #0
 8004b26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	e000      	b.n	8004b30 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004b2e:	2302      	movs	r3, #2
  }
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3728      	adds	r7, #40	@ 0x28
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}
 8004b38:	00010004 	.word	0x00010004

08004b3c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b088      	sub	sp, #32
 8004b40:	af02      	add	r7, sp, #8
 8004b42:	60f8      	str	r0, [r7, #12]
 8004b44:	4608      	mov	r0, r1
 8004b46:	4611      	mov	r1, r2
 8004b48:	461a      	mov	r2, r3
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	817b      	strh	r3, [r7, #10]
 8004b4e:	460b      	mov	r3, r1
 8004b50:	813b      	strh	r3, [r7, #8]
 8004b52:	4613      	mov	r3, r2
 8004b54:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b64:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b68:	9300      	str	r3, [sp, #0]
 8004b6a:	6a3b      	ldr	r3, [r7, #32]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004b72:	68f8      	ldr	r0, [r7, #12]
 8004b74:	f000 f960 	bl	8004e38 <I2C_WaitOnFlagUntilTimeout>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d00d      	beq.n	8004b9a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b8c:	d103      	bne.n	8004b96 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b94:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	e05f      	b.n	8004c5a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004b9a:	897b      	ldrh	r3, [r7, #10]
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004ba8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bac:	6a3a      	ldr	r2, [r7, #32]
 8004bae:	492d      	ldr	r1, [pc, #180]	@ (8004c64 <I2C_RequestMemoryWrite+0x128>)
 8004bb0:	68f8      	ldr	r0, [r7, #12]
 8004bb2:	f000 f9bb 	bl	8004f2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d001      	beq.n	8004bc0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e04c      	b.n	8004c5a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	617b      	str	r3, [r7, #20]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	695b      	ldr	r3, [r3, #20]
 8004bca:	617b      	str	r3, [r7, #20]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	699b      	ldr	r3, [r3, #24]
 8004bd2:	617b      	str	r3, [r7, #20]
 8004bd4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bd8:	6a39      	ldr	r1, [r7, #32]
 8004bda:	68f8      	ldr	r0, [r7, #12]
 8004bdc:	f000 fa46 	bl	800506c <I2C_WaitOnTXEFlagUntilTimeout>
 8004be0:	4603      	mov	r3, r0
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d00d      	beq.n	8004c02 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bea:	2b04      	cmp	r3, #4
 8004bec:	d107      	bne.n	8004bfe <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004bfc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e02b      	b.n	8004c5a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004c02:	88fb      	ldrh	r3, [r7, #6]
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d105      	bne.n	8004c14 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c08:	893b      	ldrh	r3, [r7, #8]
 8004c0a:	b2da      	uxtb	r2, r3
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	611a      	str	r2, [r3, #16]
 8004c12:	e021      	b.n	8004c58 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004c14:	893b      	ldrh	r3, [r7, #8]
 8004c16:	0a1b      	lsrs	r3, r3, #8
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	b2da      	uxtb	r2, r3
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c24:	6a39      	ldr	r1, [r7, #32]
 8004c26:	68f8      	ldr	r0, [r7, #12]
 8004c28:	f000 fa20 	bl	800506c <I2C_WaitOnTXEFlagUntilTimeout>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d00d      	beq.n	8004c4e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c36:	2b04      	cmp	r3, #4
 8004c38:	d107      	bne.n	8004c4a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c48:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e005      	b.n	8004c5a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c4e:	893b      	ldrh	r3, [r7, #8]
 8004c50:	b2da      	uxtb	r2, r3
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004c58:	2300      	movs	r3, #0
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3718      	adds	r7, #24
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	bf00      	nop
 8004c64:	00010002 	.word	0x00010002

08004c68 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b088      	sub	sp, #32
 8004c6c:	af02      	add	r7, sp, #8
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	4608      	mov	r0, r1
 8004c72:	4611      	mov	r1, r2
 8004c74:	461a      	mov	r2, r3
 8004c76:	4603      	mov	r3, r0
 8004c78:	817b      	strh	r3, [r7, #10]
 8004c7a:	460b      	mov	r3, r1
 8004c7c:	813b      	strh	r3, [r7, #8]
 8004c7e:	4613      	mov	r3, r2
 8004c80:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004c90:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ca0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ca4:	9300      	str	r3, [sp, #0]
 8004ca6:	6a3b      	ldr	r3, [r7, #32]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004cae:	68f8      	ldr	r0, [r7, #12]
 8004cb0:	f000 f8c2 	bl	8004e38 <I2C_WaitOnFlagUntilTimeout>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d00d      	beq.n	8004cd6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cc4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004cc8:	d103      	bne.n	8004cd2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004cd0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	e0aa      	b.n	8004e2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004cd6:	897b      	ldrh	r3, [r7, #10]
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	461a      	mov	r2, r3
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004ce4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ce8:	6a3a      	ldr	r2, [r7, #32]
 8004cea:	4952      	ldr	r1, [pc, #328]	@ (8004e34 <I2C_RequestMemoryRead+0x1cc>)
 8004cec:	68f8      	ldr	r0, [r7, #12]
 8004cee:	f000 f91d 	bl	8004f2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d001      	beq.n	8004cfc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e097      	b.n	8004e2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	617b      	str	r3, [r7, #20]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	695b      	ldr	r3, [r3, #20]
 8004d06:	617b      	str	r3, [r7, #20]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	699b      	ldr	r3, [r3, #24]
 8004d0e:	617b      	str	r3, [r7, #20]
 8004d10:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d14:	6a39      	ldr	r1, [r7, #32]
 8004d16:	68f8      	ldr	r0, [r7, #12]
 8004d18:	f000 f9a8 	bl	800506c <I2C_WaitOnTXEFlagUntilTimeout>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d00d      	beq.n	8004d3e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d26:	2b04      	cmp	r3, #4
 8004d28:	d107      	bne.n	8004d3a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d38:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e076      	b.n	8004e2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004d3e:	88fb      	ldrh	r3, [r7, #6]
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d105      	bne.n	8004d50 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004d44:	893b      	ldrh	r3, [r7, #8]
 8004d46:	b2da      	uxtb	r2, r3
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	611a      	str	r2, [r3, #16]
 8004d4e:	e021      	b.n	8004d94 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004d50:	893b      	ldrh	r3, [r7, #8]
 8004d52:	0a1b      	lsrs	r3, r3, #8
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	b2da      	uxtb	r2, r3
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d60:	6a39      	ldr	r1, [r7, #32]
 8004d62:	68f8      	ldr	r0, [r7, #12]
 8004d64:	f000 f982 	bl	800506c <I2C_WaitOnTXEFlagUntilTimeout>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d00d      	beq.n	8004d8a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d72:	2b04      	cmp	r3, #4
 8004d74:	d107      	bne.n	8004d86 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d84:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e050      	b.n	8004e2c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004d8a:	893b      	ldrh	r3, [r7, #8]
 8004d8c:	b2da      	uxtb	r2, r3
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d96:	6a39      	ldr	r1, [r7, #32]
 8004d98:	68f8      	ldr	r0, [r7, #12]
 8004d9a:	f000 f967 	bl	800506c <I2C_WaitOnTXEFlagUntilTimeout>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d00d      	beq.n	8004dc0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004da8:	2b04      	cmp	r3, #4
 8004daa:	d107      	bne.n	8004dbc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004dba:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e035      	b.n	8004e2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004dce:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dd2:	9300      	str	r3, [sp, #0]
 8004dd4:	6a3b      	ldr	r3, [r7, #32]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004ddc:	68f8      	ldr	r0, [r7, #12]
 8004dde:	f000 f82b 	bl	8004e38 <I2C_WaitOnFlagUntilTimeout>
 8004de2:	4603      	mov	r3, r0
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d00d      	beq.n	8004e04 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004df2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004df6:	d103      	bne.n	8004e00 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004dfe:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004e00:	2303      	movs	r3, #3
 8004e02:	e013      	b.n	8004e2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004e04:	897b      	ldrh	r3, [r7, #10]
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	f043 0301 	orr.w	r3, r3, #1
 8004e0c:	b2da      	uxtb	r2, r3
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e16:	6a3a      	ldr	r2, [r7, #32]
 8004e18:	4906      	ldr	r1, [pc, #24]	@ (8004e34 <I2C_RequestMemoryRead+0x1cc>)
 8004e1a:	68f8      	ldr	r0, [r7, #12]
 8004e1c:	f000 f886 	bl	8004f2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e20:	4603      	mov	r3, r0
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d001      	beq.n	8004e2a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e000      	b.n	8004e2c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004e2a:	2300      	movs	r3, #0
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3718      	adds	r7, #24
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}
 8004e34:	00010002 	.word	0x00010002

08004e38 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b084      	sub	sp, #16
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	60f8      	str	r0, [r7, #12]
 8004e40:	60b9      	str	r1, [r7, #8]
 8004e42:	603b      	str	r3, [r7, #0]
 8004e44:	4613      	mov	r3, r2
 8004e46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e48:	e048      	b.n	8004edc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e50:	d044      	beq.n	8004edc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e52:	f7fe fda5 	bl	80039a0 <HAL_GetTick>
 8004e56:	4602      	mov	r2, r0
 8004e58:	69bb      	ldr	r3, [r7, #24]
 8004e5a:	1ad3      	subs	r3, r2, r3
 8004e5c:	683a      	ldr	r2, [r7, #0]
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d302      	bcc.n	8004e68 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d139      	bne.n	8004edc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	0c1b      	lsrs	r3, r3, #16
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d10d      	bne.n	8004e8e <I2C_WaitOnFlagUntilTimeout+0x56>
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	695b      	ldr	r3, [r3, #20]
 8004e78:	43da      	mvns	r2, r3
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	4013      	ands	r3, r2
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	bf0c      	ite	eq
 8004e84:	2301      	moveq	r3, #1
 8004e86:	2300      	movne	r3, #0
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	e00c      	b.n	8004ea8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	699b      	ldr	r3, [r3, #24]
 8004e94:	43da      	mvns	r2, r3
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	4013      	ands	r3, r2
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	bf0c      	ite	eq
 8004ea0:	2301      	moveq	r3, #1
 8004ea2:	2300      	movne	r3, #0
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	79fb      	ldrb	r3, [r7, #7]
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d116      	bne.n	8004edc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2220      	movs	r2, #32
 8004eb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ec8:	f043 0220 	orr.w	r2, r3, #32
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e023      	b.n	8004f24 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	0c1b      	lsrs	r3, r3, #16
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d10d      	bne.n	8004f02 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	695b      	ldr	r3, [r3, #20]
 8004eec:	43da      	mvns	r2, r3
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	bf0c      	ite	eq
 8004ef8:	2301      	moveq	r3, #1
 8004efa:	2300      	movne	r3, #0
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	461a      	mov	r2, r3
 8004f00:	e00c      	b.n	8004f1c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	699b      	ldr	r3, [r3, #24]
 8004f08:	43da      	mvns	r2, r3
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	bf0c      	ite	eq
 8004f14:	2301      	moveq	r3, #1
 8004f16:	2300      	movne	r3, #0
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	79fb      	ldrb	r3, [r7, #7]
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d093      	beq.n	8004e4a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f22:	2300      	movs	r3, #0
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3710      	adds	r7, #16
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}

08004f2c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b084      	sub	sp, #16
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	60f8      	str	r0, [r7, #12]
 8004f34:	60b9      	str	r1, [r7, #8]
 8004f36:	607a      	str	r2, [r7, #4]
 8004f38:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004f3a:	e071      	b.n	8005020 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	695b      	ldr	r3, [r3, #20]
 8004f42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f4a:	d123      	bne.n	8004f94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f5a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004f64:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2220      	movs	r2, #32
 8004f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2200      	movs	r2, #0
 8004f78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f80:	f043 0204 	orr.w	r2, r3, #4
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	e067      	b.n	8005064 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f9a:	d041      	beq.n	8005020 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f9c:	f7fe fd00 	bl	80039a0 <HAL_GetTick>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d302      	bcc.n	8004fb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d136      	bne.n	8005020 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	0c1b      	lsrs	r3, r3, #16
 8004fb6:	b2db      	uxtb	r3, r3
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d10c      	bne.n	8004fd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	695b      	ldr	r3, [r3, #20]
 8004fc2:	43da      	mvns	r2, r3
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	4013      	ands	r3, r2
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	bf14      	ite	ne
 8004fce:	2301      	movne	r3, #1
 8004fd0:	2300      	moveq	r3, #0
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	e00b      	b.n	8004fee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	699b      	ldr	r3, [r3, #24]
 8004fdc:	43da      	mvns	r2, r3
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	bf14      	ite	ne
 8004fe8:	2301      	movne	r3, #1
 8004fea:	2300      	moveq	r3, #0
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d016      	beq.n	8005020 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2220      	movs	r2, #32
 8004ffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2200      	movs	r2, #0
 8005004:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800500c:	f043 0220 	orr.w	r2, r3, #32
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2200      	movs	r2, #0
 8005018:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	e021      	b.n	8005064 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	0c1b      	lsrs	r3, r3, #16
 8005024:	b2db      	uxtb	r3, r3
 8005026:	2b01      	cmp	r3, #1
 8005028:	d10c      	bne.n	8005044 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	695b      	ldr	r3, [r3, #20]
 8005030:	43da      	mvns	r2, r3
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	4013      	ands	r3, r2
 8005036:	b29b      	uxth	r3, r3
 8005038:	2b00      	cmp	r3, #0
 800503a:	bf14      	ite	ne
 800503c:	2301      	movne	r3, #1
 800503e:	2300      	moveq	r3, #0
 8005040:	b2db      	uxtb	r3, r3
 8005042:	e00b      	b.n	800505c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	699b      	ldr	r3, [r3, #24]
 800504a:	43da      	mvns	r2, r3
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	4013      	ands	r3, r2
 8005050:	b29b      	uxth	r3, r3
 8005052:	2b00      	cmp	r3, #0
 8005054:	bf14      	ite	ne
 8005056:	2301      	movne	r3, #1
 8005058:	2300      	moveq	r3, #0
 800505a:	b2db      	uxtb	r3, r3
 800505c:	2b00      	cmp	r3, #0
 800505e:	f47f af6d 	bne.w	8004f3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005062:	2300      	movs	r3, #0
}
 8005064:	4618      	mov	r0, r3
 8005066:	3710      	adds	r7, #16
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}

0800506c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b084      	sub	sp, #16
 8005070:	af00      	add	r7, sp, #0
 8005072:	60f8      	str	r0, [r7, #12]
 8005074:	60b9      	str	r1, [r7, #8]
 8005076:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005078:	e034      	b.n	80050e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800507a:	68f8      	ldr	r0, [r7, #12]
 800507c:	f000 f8e3 	bl	8005246 <I2C_IsAcknowledgeFailed>
 8005080:	4603      	mov	r3, r0
 8005082:	2b00      	cmp	r3, #0
 8005084:	d001      	beq.n	800508a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e034      	b.n	80050f4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005090:	d028      	beq.n	80050e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005092:	f7fe fc85 	bl	80039a0 <HAL_GetTick>
 8005096:	4602      	mov	r2, r0
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	1ad3      	subs	r3, r2, r3
 800509c:	68ba      	ldr	r2, [r7, #8]
 800509e:	429a      	cmp	r2, r3
 80050a0:	d302      	bcc.n	80050a8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d11d      	bne.n	80050e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	695b      	ldr	r3, [r3, #20]
 80050ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050b2:	2b80      	cmp	r3, #128	@ 0x80
 80050b4:	d016      	beq.n	80050e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2200      	movs	r2, #0
 80050ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2220      	movs	r2, #32
 80050c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2200      	movs	r2, #0
 80050c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050d0:	f043 0220 	orr.w	r2, r3, #32
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2200      	movs	r2, #0
 80050dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	e007      	b.n	80050f4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	695b      	ldr	r3, [r3, #20]
 80050ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050ee:	2b80      	cmp	r3, #128	@ 0x80
 80050f0:	d1c3      	bne.n	800507a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80050f2:	2300      	movs	r3, #0
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3710      	adds	r7, #16
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}

080050fc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b084      	sub	sp, #16
 8005100:	af00      	add	r7, sp, #0
 8005102:	60f8      	str	r0, [r7, #12]
 8005104:	60b9      	str	r1, [r7, #8]
 8005106:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005108:	e034      	b.n	8005174 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800510a:	68f8      	ldr	r0, [r7, #12]
 800510c:	f000 f89b 	bl	8005246 <I2C_IsAcknowledgeFailed>
 8005110:	4603      	mov	r3, r0
 8005112:	2b00      	cmp	r3, #0
 8005114:	d001      	beq.n	800511a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e034      	b.n	8005184 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005120:	d028      	beq.n	8005174 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005122:	f7fe fc3d 	bl	80039a0 <HAL_GetTick>
 8005126:	4602      	mov	r2, r0
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	1ad3      	subs	r3, r2, r3
 800512c:	68ba      	ldr	r2, [r7, #8]
 800512e:	429a      	cmp	r2, r3
 8005130:	d302      	bcc.n	8005138 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d11d      	bne.n	8005174 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	695b      	ldr	r3, [r3, #20]
 800513e:	f003 0304 	and.w	r3, r3, #4
 8005142:	2b04      	cmp	r3, #4
 8005144:	d016      	beq.n	8005174 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2200      	movs	r2, #0
 800514a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2220      	movs	r2, #32
 8005150:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2200      	movs	r2, #0
 8005158:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005160:	f043 0220 	orr.w	r2, r3, #32
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2200      	movs	r2, #0
 800516c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	e007      	b.n	8005184 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	695b      	ldr	r3, [r3, #20]
 800517a:	f003 0304 	and.w	r3, r3, #4
 800517e:	2b04      	cmp	r3, #4
 8005180:	d1c3      	bne.n	800510a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005182:	2300      	movs	r3, #0
}
 8005184:	4618      	mov	r0, r3
 8005186:	3710      	adds	r7, #16
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}

0800518c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b084      	sub	sp, #16
 8005190:	af00      	add	r7, sp, #0
 8005192:	60f8      	str	r0, [r7, #12]
 8005194:	60b9      	str	r1, [r7, #8]
 8005196:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005198:	e049      	b.n	800522e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	695b      	ldr	r3, [r3, #20]
 80051a0:	f003 0310 	and.w	r3, r3, #16
 80051a4:	2b10      	cmp	r3, #16
 80051a6:	d119      	bne.n	80051dc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f06f 0210 	mvn.w	r2, #16
 80051b0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2200      	movs	r2, #0
 80051b6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2220      	movs	r2, #32
 80051bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2200      	movs	r2, #0
 80051c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	e030      	b.n	800523e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051dc:	f7fe fbe0 	bl	80039a0 <HAL_GetTick>
 80051e0:	4602      	mov	r2, r0
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	1ad3      	subs	r3, r2, r3
 80051e6:	68ba      	ldr	r2, [r7, #8]
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d302      	bcc.n	80051f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d11d      	bne.n	800522e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	695b      	ldr	r3, [r3, #20]
 80051f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051fc:	2b40      	cmp	r3, #64	@ 0x40
 80051fe:	d016      	beq.n	800522e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2200      	movs	r2, #0
 8005204:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2220      	movs	r2, #32
 800520a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2200      	movs	r2, #0
 8005212:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800521a:	f043 0220 	orr.w	r2, r3, #32
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2200      	movs	r2, #0
 8005226:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	e007      	b.n	800523e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	695b      	ldr	r3, [r3, #20]
 8005234:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005238:	2b40      	cmp	r3, #64	@ 0x40
 800523a:	d1ae      	bne.n	800519a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800523c:	2300      	movs	r3, #0
}
 800523e:	4618      	mov	r0, r3
 8005240:	3710      	adds	r7, #16
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}

08005246 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005246:	b480      	push	{r7}
 8005248:	b083      	sub	sp, #12
 800524a:	af00      	add	r7, sp, #0
 800524c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	695b      	ldr	r3, [r3, #20]
 8005254:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005258:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800525c:	d11b      	bne.n	8005296 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005266:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2220      	movs	r2, #32
 8005272:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005282:	f043 0204 	orr.w	r2, r3, #4
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e000      	b.n	8005298 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005296:	2300      	movs	r3, #0
}
 8005298:	4618      	mov	r0, r3
 800529a:	370c      	adds	r7, #12
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr

080052a4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b083      	sub	sp, #12
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	2b20      	cmp	r3, #32
 80052b8:	d129      	bne.n	800530e <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2224      	movs	r2, #36	@ 0x24
 80052be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f022 0201 	bic.w	r2, r2, #1
 80052d0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f022 0210 	bic.w	r2, r2, #16
 80052e0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	683a      	ldr	r2, [r7, #0]
 80052ee:	430a      	orrs	r2, r1
 80052f0:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f042 0201 	orr.w	r2, r2, #1
 8005300:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2220      	movs	r2, #32
 8005306:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800530a:	2300      	movs	r3, #0
 800530c:	e000      	b.n	8005310 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800530e:	2302      	movs	r3, #2
  }
}
 8005310:	4618      	mov	r0, r3
 8005312:	370c      	adds	r7, #12
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr

0800531c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800531c:	b480      	push	{r7}
 800531e:	b085      	sub	sp, #20
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8005326:	2300      	movs	r3, #0
 8005328:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005330:	b2db      	uxtb	r3, r3
 8005332:	2b20      	cmp	r3, #32
 8005334:	d12a      	bne.n	800538c <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2224      	movs	r2, #36	@ 0x24
 800533a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f022 0201 	bic.w	r2, r2, #1
 800534c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005354:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8005356:	89fb      	ldrh	r3, [r7, #14]
 8005358:	f023 030f 	bic.w	r3, r3, #15
 800535c:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	b29a      	uxth	r2, r3
 8005362:	89fb      	ldrh	r3, [r7, #14]
 8005364:	4313      	orrs	r3, r2
 8005366:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	89fa      	ldrh	r2, [r7, #14]
 800536e:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f042 0201 	orr.w	r2, r2, #1
 800537e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2220      	movs	r2, #32
 8005384:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8005388:	2300      	movs	r3, #0
 800538a:	e000      	b.n	800538e <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800538c:	2302      	movs	r3, #2
  }
}
 800538e:	4618      	mov	r0, r3
 8005390:	3714      	adds	r7, #20
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr
	...

0800539c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b084      	sub	sp, #16
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d101      	bne.n	80053ae <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e0bf      	b.n	800552e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d106      	bne.n	80053c8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f7fd fcf8 	bl	8002db8 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2202      	movs	r2, #2
 80053cc:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	699a      	ldr	r2, [r3, #24]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80053de:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	6999      	ldr	r1, [r3, #24]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	685a      	ldr	r2, [r3, #4]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80053f4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	691b      	ldr	r3, [r3, #16]
 80053fa:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	430a      	orrs	r2, r1
 8005402:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	6899      	ldr	r1, [r3, #8]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	4b4a      	ldr	r3, [pc, #296]	@ (8005538 <HAL_LTDC_Init+0x19c>)
 8005410:	400b      	ands	r3, r1
 8005412:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	695b      	ldr	r3, [r3, #20]
 8005418:	041b      	lsls	r3, r3, #16
 800541a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	6899      	ldr	r1, [r3, #8]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	699a      	ldr	r2, [r3, #24]
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	431a      	orrs	r2, r3
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	430a      	orrs	r2, r1
 8005430:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	68d9      	ldr	r1, [r3, #12]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	4b3e      	ldr	r3, [pc, #248]	@ (8005538 <HAL_LTDC_Init+0x19c>)
 800543e:	400b      	ands	r3, r1
 8005440:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	69db      	ldr	r3, [r3, #28]
 8005446:	041b      	lsls	r3, r3, #16
 8005448:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	68d9      	ldr	r1, [r3, #12]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6a1a      	ldr	r2, [r3, #32]
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	431a      	orrs	r2, r3
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	430a      	orrs	r2, r1
 800545e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	6919      	ldr	r1, [r3, #16]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	4b33      	ldr	r3, [pc, #204]	@ (8005538 <HAL_LTDC_Init+0x19c>)
 800546c:	400b      	ands	r3, r1
 800546e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005474:	041b      	lsls	r3, r3, #16
 8005476:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	6919      	ldr	r1, [r3, #16]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	431a      	orrs	r2, r3
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	430a      	orrs	r2, r1
 800548c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	6959      	ldr	r1, [r3, #20]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	4b27      	ldr	r3, [pc, #156]	@ (8005538 <HAL_LTDC_Init+0x19c>)
 800549a:	400b      	ands	r3, r1
 800549c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054a2:	041b      	lsls	r3, r3, #16
 80054a4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	6959      	ldr	r1, [r3, #20]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	431a      	orrs	r2, r3
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	430a      	orrs	r2, r1
 80054ba:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80054c2:	021b      	lsls	r3, r3, #8
 80054c4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80054cc:	041b      	lsls	r3, r3, #16
 80054ce:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 80054de:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80054e6:	68ba      	ldr	r2, [r7, #8]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 80054f2:	431a      	orrs	r2, r3
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	430a      	orrs	r2, r1
 80054fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f042 0206 	orr.w	r2, r2, #6
 800550a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	699a      	ldr	r2, [r3, #24]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f042 0201 	orr.w	r2, r2, #1
 800551a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2200      	movs	r2, #0
 8005520:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2201      	movs	r2, #1
 8005528:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 800552c:	2300      	movs	r3, #0
}
 800552e:	4618      	mov	r0, r3
 8005530:	3710      	adds	r7, #16
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
 8005536:	bf00      	nop
 8005538:	f000f800 	.word	0xf000f800

0800553c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800553c:	b5b0      	push	{r4, r5, r7, lr}
 800553e:	b084      	sub	sp, #16
 8005540:	af00      	add	r7, sp, #0
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	60b9      	str	r1, [r7, #8]
 8005546:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800554e:	2b01      	cmp	r3, #1
 8005550:	d101      	bne.n	8005556 <HAL_LTDC_ConfigLayer+0x1a>
 8005552:	2302      	movs	r3, #2
 8005554:	e02c      	b.n	80055b0 <HAL_LTDC_ConfigLayer+0x74>
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2201      	movs	r2, #1
 800555a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2202      	movs	r2, #2
 8005562:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005566:	68fa      	ldr	r2, [r7, #12]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2134      	movs	r1, #52	@ 0x34
 800556c:	fb01 f303 	mul.w	r3, r1, r3
 8005570:	4413      	add	r3, r2
 8005572:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	4614      	mov	r4, r2
 800557a:	461d      	mov	r5, r3
 800557c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800557e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005580:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005582:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005584:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005586:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005588:	682b      	ldr	r3, [r5, #0]
 800558a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800558c:	687a      	ldr	r2, [r7, #4]
 800558e:	68b9      	ldr	r1, [r7, #8]
 8005590:	68f8      	ldr	r0, [r7, #12]
 8005592:	f000 f811 	bl	80055b8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	2201      	movs	r2, #1
 800559c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2201      	movs	r2, #1
 80055a2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2200      	movs	r2, #0
 80055aa:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80055ae:	2300      	movs	r3, #0
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3710      	adds	r7, #16
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bdb0      	pop	{r4, r5, r7, pc}

080055b8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b089      	sub	sp, #36	@ 0x24
 80055bc:	af00      	add	r7, sp, #0
 80055be:	60f8      	str	r0, [r7, #12]
 80055c0:	60b9      	str	r1, [r7, #8]
 80055c2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	685a      	ldr	r2, [r3, #4]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	0c1b      	lsrs	r3, r3, #16
 80055d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055d4:	4413      	add	r3, r2
 80055d6:	041b      	lsls	r3, r3, #16
 80055d8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	461a      	mov	r2, r3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	01db      	lsls	r3, r3, #7
 80055e4:	4413      	add	r3, r2
 80055e6:	3384      	adds	r3, #132	@ 0x84
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	68fa      	ldr	r2, [r7, #12]
 80055ec:	6812      	ldr	r2, [r2, #0]
 80055ee:	4611      	mov	r1, r2
 80055f0:	687a      	ldr	r2, [r7, #4]
 80055f2:	01d2      	lsls	r2, r2, #7
 80055f4:	440a      	add	r2, r1
 80055f6:	3284      	adds	r2, #132	@ 0x84
 80055f8:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80055fc:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	68db      	ldr	r3, [r3, #12]
 8005608:	0c1b      	lsrs	r3, r3, #16
 800560a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800560e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005610:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4619      	mov	r1, r3
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	01db      	lsls	r3, r3, #7
 800561c:	440b      	add	r3, r1
 800561e:	3384      	adds	r3, #132	@ 0x84
 8005620:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005622:	69fb      	ldr	r3, [r7, #28]
 8005624:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005626:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	68da      	ldr	r2, [r3, #12]
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	68db      	ldr	r3, [r3, #12]
 8005632:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005636:	4413      	add	r3, r2
 8005638:	041b      	lsls	r3, r3, #16
 800563a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	461a      	mov	r2, r3
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	01db      	lsls	r3, r3, #7
 8005646:	4413      	add	r3, r2
 8005648:	3384      	adds	r3, #132	@ 0x84
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	68fa      	ldr	r2, [r7, #12]
 800564e:	6812      	ldr	r2, [r2, #0]
 8005650:	4611      	mov	r1, r2
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	01d2      	lsls	r2, r2, #7
 8005656:	440a      	add	r2, r1
 8005658:	3284      	adds	r2, #132	@ 0x84
 800565a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800565e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	689a      	ldr	r2, [r3, #8]
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800566e:	4413      	add	r3, r2
 8005670:	1c5a      	adds	r2, r3, #1
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4619      	mov	r1, r3
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	01db      	lsls	r3, r3, #7
 800567c:	440b      	add	r3, r1
 800567e:	3384      	adds	r3, #132	@ 0x84
 8005680:	4619      	mov	r1, r3
 8005682:	69fb      	ldr	r3, [r7, #28]
 8005684:	4313      	orrs	r3, r2
 8005686:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	461a      	mov	r2, r3
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	01db      	lsls	r3, r3, #7
 8005692:	4413      	add	r3, r2
 8005694:	3384      	adds	r3, #132	@ 0x84
 8005696:	691b      	ldr	r3, [r3, #16]
 8005698:	68fa      	ldr	r2, [r7, #12]
 800569a:	6812      	ldr	r2, [r2, #0]
 800569c:	4611      	mov	r1, r2
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	01d2      	lsls	r2, r2, #7
 80056a2:	440a      	add	r2, r1
 80056a4:	3284      	adds	r2, #132	@ 0x84
 80056a6:	f023 0307 	bic.w	r3, r3, #7
 80056aa:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	461a      	mov	r2, r3
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	01db      	lsls	r3, r3, #7
 80056b6:	4413      	add	r3, r2
 80056b8:	3384      	adds	r3, #132	@ 0x84
 80056ba:	461a      	mov	r2, r3
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	691b      	ldr	r3, [r3, #16]
 80056c0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80056c8:	021b      	lsls	r3, r3, #8
 80056ca:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80056d2:	041b      	lsls	r3, r3, #16
 80056d4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	699b      	ldr	r3, [r3, #24]
 80056da:	061b      	lsls	r3, r3, #24
 80056dc:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	461a      	mov	r2, r3
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	01db      	lsls	r3, r3, #7
 80056e8:	4413      	add	r3, r2
 80056ea:	3384      	adds	r3, #132	@ 0x84
 80056ec:	699b      	ldr	r3, [r3, #24]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	461a      	mov	r2, r3
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	01db      	lsls	r3, r3, #7
 80056f8:	4413      	add	r3, r2
 80056fa:	3384      	adds	r3, #132	@ 0x84
 80056fc:	461a      	mov	r2, r3
 80056fe:	2300      	movs	r3, #0
 8005700:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005708:	461a      	mov	r2, r3
 800570a:	69fb      	ldr	r3, [r7, #28]
 800570c:	431a      	orrs	r2, r3
 800570e:	69bb      	ldr	r3, [r7, #24]
 8005710:	431a      	orrs	r2, r3
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4619      	mov	r1, r3
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	01db      	lsls	r3, r3, #7
 800571c:	440b      	add	r3, r1
 800571e:	3384      	adds	r3, #132	@ 0x84
 8005720:	4619      	mov	r1, r3
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	4313      	orrs	r3, r2
 8005726:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	461a      	mov	r2, r3
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	01db      	lsls	r3, r3, #7
 8005732:	4413      	add	r3, r2
 8005734:	3384      	adds	r3, #132	@ 0x84
 8005736:	695b      	ldr	r3, [r3, #20]
 8005738:	68fa      	ldr	r2, [r7, #12]
 800573a:	6812      	ldr	r2, [r2, #0]
 800573c:	4611      	mov	r1, r2
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	01d2      	lsls	r2, r2, #7
 8005742:	440a      	add	r2, r1
 8005744:	3284      	adds	r2, #132	@ 0x84
 8005746:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800574a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	461a      	mov	r2, r3
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	01db      	lsls	r3, r3, #7
 8005756:	4413      	add	r3, r2
 8005758:	3384      	adds	r3, #132	@ 0x84
 800575a:	461a      	mov	r2, r3
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	695b      	ldr	r3, [r3, #20]
 8005760:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	461a      	mov	r2, r3
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	01db      	lsls	r3, r3, #7
 800576c:	4413      	add	r3, r2
 800576e:	3384      	adds	r3, #132	@ 0x84
 8005770:	69db      	ldr	r3, [r3, #28]
 8005772:	68fa      	ldr	r2, [r7, #12]
 8005774:	6812      	ldr	r2, [r2, #0]
 8005776:	4611      	mov	r1, r2
 8005778:	687a      	ldr	r2, [r7, #4]
 800577a:	01d2      	lsls	r2, r2, #7
 800577c:	440a      	add	r2, r1
 800577e:	3284      	adds	r2, #132	@ 0x84
 8005780:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8005784:	f023 0307 	bic.w	r3, r3, #7
 8005788:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	69da      	ldr	r2, [r3, #28]
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	6a1b      	ldr	r3, [r3, #32]
 8005792:	68f9      	ldr	r1, [r7, #12]
 8005794:	6809      	ldr	r1, [r1, #0]
 8005796:	4608      	mov	r0, r1
 8005798:	6879      	ldr	r1, [r7, #4]
 800579a:	01c9      	lsls	r1, r1, #7
 800579c:	4401      	add	r1, r0
 800579e:	3184      	adds	r1, #132	@ 0x84
 80057a0:	4313      	orrs	r3, r2
 80057a2:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	461a      	mov	r2, r3
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	01db      	lsls	r3, r3, #7
 80057ae:	4413      	add	r3, r2
 80057b0:	3384      	adds	r3, #132	@ 0x84
 80057b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	461a      	mov	r2, r3
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	01db      	lsls	r3, r3, #7
 80057be:	4413      	add	r3, r2
 80057c0:	3384      	adds	r3, #132	@ 0x84
 80057c2:	461a      	mov	r2, r3
 80057c4:	2300      	movs	r3, #0
 80057c6:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	461a      	mov	r2, r3
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	01db      	lsls	r3, r3, #7
 80057d2:	4413      	add	r3, r2
 80057d4:	3384      	adds	r3, #132	@ 0x84
 80057d6:	461a      	mov	r2, r3
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057dc:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	691b      	ldr	r3, [r3, #16]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d102      	bne.n	80057ec <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80057e6:	2304      	movs	r3, #4
 80057e8:	61fb      	str	r3, [r7, #28]
 80057ea:	e01b      	b.n	8005824 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	691b      	ldr	r3, [r3, #16]
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d102      	bne.n	80057fa <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80057f4:	2303      	movs	r3, #3
 80057f6:	61fb      	str	r3, [r7, #28]
 80057f8:	e014      	b.n	8005824 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	691b      	ldr	r3, [r3, #16]
 80057fe:	2b04      	cmp	r3, #4
 8005800:	d00b      	beq.n	800581a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005806:	2b02      	cmp	r3, #2
 8005808:	d007      	beq.n	800581a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800580e:	2b03      	cmp	r3, #3
 8005810:	d003      	beq.n	800581a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005816:	2b07      	cmp	r3, #7
 8005818:	d102      	bne.n	8005820 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800581a:	2302      	movs	r3, #2
 800581c:	61fb      	str	r3, [r7, #28]
 800581e:	e001      	b.n	8005824 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8005820:	2301      	movs	r3, #1
 8005822:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	461a      	mov	r2, r3
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	01db      	lsls	r3, r3, #7
 800582e:	4413      	add	r3, r2
 8005830:	3384      	adds	r3, #132	@ 0x84
 8005832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005834:	68fa      	ldr	r2, [r7, #12]
 8005836:	6812      	ldr	r2, [r2, #0]
 8005838:	4611      	mov	r1, r2
 800583a:	687a      	ldr	r2, [r7, #4]
 800583c:	01d2      	lsls	r2, r2, #7
 800583e:	440a      	add	r2, r1
 8005840:	3284      	adds	r2, #132	@ 0x84
 8005842:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8005846:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800584c:	69fa      	ldr	r2, [r7, #28]
 800584e:	fb02 f303 	mul.w	r3, r2, r3
 8005852:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	6859      	ldr	r1, [r3, #4]
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	1acb      	subs	r3, r1, r3
 800585e:	69f9      	ldr	r1, [r7, #28]
 8005860:	fb01 f303 	mul.w	r3, r1, r3
 8005864:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005866:	68f9      	ldr	r1, [r7, #12]
 8005868:	6809      	ldr	r1, [r1, #0]
 800586a:	4608      	mov	r0, r1
 800586c:	6879      	ldr	r1, [r7, #4]
 800586e:	01c9      	lsls	r1, r1, #7
 8005870:	4401      	add	r1, r0
 8005872:	3184      	adds	r1, #132	@ 0x84
 8005874:	4313      	orrs	r3, r2
 8005876:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	461a      	mov	r2, r3
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	01db      	lsls	r3, r3, #7
 8005882:	4413      	add	r3, r2
 8005884:	3384      	adds	r3, #132	@ 0x84
 8005886:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005888:	68fa      	ldr	r2, [r7, #12]
 800588a:	6812      	ldr	r2, [r2, #0]
 800588c:	4611      	mov	r1, r2
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	01d2      	lsls	r2, r2, #7
 8005892:	440a      	add	r2, r1
 8005894:	3284      	adds	r2, #132	@ 0x84
 8005896:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800589a:	f023 0307 	bic.w	r3, r3, #7
 800589e:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	461a      	mov	r2, r3
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	01db      	lsls	r3, r3, #7
 80058aa:	4413      	add	r3, r2
 80058ac:	3384      	adds	r3, #132	@ 0x84
 80058ae:	461a      	mov	r2, r3
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058b4:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	461a      	mov	r2, r3
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	01db      	lsls	r3, r3, #7
 80058c0:	4413      	add	r3, r2
 80058c2:	3384      	adds	r3, #132	@ 0x84
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	68fa      	ldr	r2, [r7, #12]
 80058c8:	6812      	ldr	r2, [r2, #0]
 80058ca:	4611      	mov	r1, r2
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	01d2      	lsls	r2, r2, #7
 80058d0:	440a      	add	r2, r1
 80058d2:	3284      	adds	r2, #132	@ 0x84
 80058d4:	f043 0301 	orr.w	r3, r3, #1
 80058d8:	6013      	str	r3, [r2, #0]
}
 80058da:	bf00      	nop
 80058dc:	3724      	adds	r7, #36	@ 0x24
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr
	...

080058e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b086      	sub	sp, #24
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d101      	bne.n	80058fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	e267      	b.n	8005dca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 0301 	and.w	r3, r3, #1
 8005902:	2b00      	cmp	r3, #0
 8005904:	d075      	beq.n	80059f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005906:	4b88      	ldr	r3, [pc, #544]	@ (8005b28 <HAL_RCC_OscConfig+0x240>)
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	f003 030c 	and.w	r3, r3, #12
 800590e:	2b04      	cmp	r3, #4
 8005910:	d00c      	beq.n	800592c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005912:	4b85      	ldr	r3, [pc, #532]	@ (8005b28 <HAL_RCC_OscConfig+0x240>)
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800591a:	2b08      	cmp	r3, #8
 800591c:	d112      	bne.n	8005944 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800591e:	4b82      	ldr	r3, [pc, #520]	@ (8005b28 <HAL_RCC_OscConfig+0x240>)
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005926:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800592a:	d10b      	bne.n	8005944 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800592c:	4b7e      	ldr	r3, [pc, #504]	@ (8005b28 <HAL_RCC_OscConfig+0x240>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005934:	2b00      	cmp	r3, #0
 8005936:	d05b      	beq.n	80059f0 <HAL_RCC_OscConfig+0x108>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d157      	bne.n	80059f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005940:	2301      	movs	r3, #1
 8005942:	e242      	b.n	8005dca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800594c:	d106      	bne.n	800595c <HAL_RCC_OscConfig+0x74>
 800594e:	4b76      	ldr	r3, [pc, #472]	@ (8005b28 <HAL_RCC_OscConfig+0x240>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a75      	ldr	r2, [pc, #468]	@ (8005b28 <HAL_RCC_OscConfig+0x240>)
 8005954:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005958:	6013      	str	r3, [r2, #0]
 800595a:	e01d      	b.n	8005998 <HAL_RCC_OscConfig+0xb0>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005964:	d10c      	bne.n	8005980 <HAL_RCC_OscConfig+0x98>
 8005966:	4b70      	ldr	r3, [pc, #448]	@ (8005b28 <HAL_RCC_OscConfig+0x240>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a6f      	ldr	r2, [pc, #444]	@ (8005b28 <HAL_RCC_OscConfig+0x240>)
 800596c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005970:	6013      	str	r3, [r2, #0]
 8005972:	4b6d      	ldr	r3, [pc, #436]	@ (8005b28 <HAL_RCC_OscConfig+0x240>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a6c      	ldr	r2, [pc, #432]	@ (8005b28 <HAL_RCC_OscConfig+0x240>)
 8005978:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800597c:	6013      	str	r3, [r2, #0]
 800597e:	e00b      	b.n	8005998 <HAL_RCC_OscConfig+0xb0>
 8005980:	4b69      	ldr	r3, [pc, #420]	@ (8005b28 <HAL_RCC_OscConfig+0x240>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a68      	ldr	r2, [pc, #416]	@ (8005b28 <HAL_RCC_OscConfig+0x240>)
 8005986:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800598a:	6013      	str	r3, [r2, #0]
 800598c:	4b66      	ldr	r3, [pc, #408]	@ (8005b28 <HAL_RCC_OscConfig+0x240>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a65      	ldr	r2, [pc, #404]	@ (8005b28 <HAL_RCC_OscConfig+0x240>)
 8005992:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005996:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d013      	beq.n	80059c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059a0:	f7fd fffe 	bl	80039a0 <HAL_GetTick>
 80059a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059a6:	e008      	b.n	80059ba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059a8:	f7fd fffa 	bl	80039a0 <HAL_GetTick>
 80059ac:	4602      	mov	r2, r0
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	1ad3      	subs	r3, r2, r3
 80059b2:	2b64      	cmp	r3, #100	@ 0x64
 80059b4:	d901      	bls.n	80059ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80059b6:	2303      	movs	r3, #3
 80059b8:	e207      	b.n	8005dca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059ba:	4b5b      	ldr	r3, [pc, #364]	@ (8005b28 <HAL_RCC_OscConfig+0x240>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d0f0      	beq.n	80059a8 <HAL_RCC_OscConfig+0xc0>
 80059c6:	e014      	b.n	80059f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059c8:	f7fd ffea 	bl	80039a0 <HAL_GetTick>
 80059cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059ce:	e008      	b.n	80059e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059d0:	f7fd ffe6 	bl	80039a0 <HAL_GetTick>
 80059d4:	4602      	mov	r2, r0
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	1ad3      	subs	r3, r2, r3
 80059da:	2b64      	cmp	r3, #100	@ 0x64
 80059dc:	d901      	bls.n	80059e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80059de:	2303      	movs	r3, #3
 80059e0:	e1f3      	b.n	8005dca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059e2:	4b51      	ldr	r3, [pc, #324]	@ (8005b28 <HAL_RCC_OscConfig+0x240>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d1f0      	bne.n	80059d0 <HAL_RCC_OscConfig+0xe8>
 80059ee:	e000      	b.n	80059f2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f003 0302 	and.w	r3, r3, #2
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d063      	beq.n	8005ac6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80059fe:	4b4a      	ldr	r3, [pc, #296]	@ (8005b28 <HAL_RCC_OscConfig+0x240>)
 8005a00:	689b      	ldr	r3, [r3, #8]
 8005a02:	f003 030c 	and.w	r3, r3, #12
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d00b      	beq.n	8005a22 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a0a:	4b47      	ldr	r3, [pc, #284]	@ (8005b28 <HAL_RCC_OscConfig+0x240>)
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005a12:	2b08      	cmp	r3, #8
 8005a14:	d11c      	bne.n	8005a50 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a16:	4b44      	ldr	r3, [pc, #272]	@ (8005b28 <HAL_RCC_OscConfig+0x240>)
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d116      	bne.n	8005a50 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a22:	4b41      	ldr	r3, [pc, #260]	@ (8005b28 <HAL_RCC_OscConfig+0x240>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f003 0302 	and.w	r3, r3, #2
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d005      	beq.n	8005a3a <HAL_RCC_OscConfig+0x152>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	68db      	ldr	r3, [r3, #12]
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	d001      	beq.n	8005a3a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	e1c7      	b.n	8005dca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a3a:	4b3b      	ldr	r3, [pc, #236]	@ (8005b28 <HAL_RCC_OscConfig+0x240>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	691b      	ldr	r3, [r3, #16]
 8005a46:	00db      	lsls	r3, r3, #3
 8005a48:	4937      	ldr	r1, [pc, #220]	@ (8005b28 <HAL_RCC_OscConfig+0x240>)
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a4e:	e03a      	b.n	8005ac6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d020      	beq.n	8005a9a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a58:	4b34      	ldr	r3, [pc, #208]	@ (8005b2c <HAL_RCC_OscConfig+0x244>)
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a5e:	f7fd ff9f 	bl	80039a0 <HAL_GetTick>
 8005a62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a64:	e008      	b.n	8005a78 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a66:	f7fd ff9b 	bl	80039a0 <HAL_GetTick>
 8005a6a:	4602      	mov	r2, r0
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	1ad3      	subs	r3, r2, r3
 8005a70:	2b02      	cmp	r3, #2
 8005a72:	d901      	bls.n	8005a78 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005a74:	2303      	movs	r3, #3
 8005a76:	e1a8      	b.n	8005dca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a78:	4b2b      	ldr	r3, [pc, #172]	@ (8005b28 <HAL_RCC_OscConfig+0x240>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f003 0302 	and.w	r3, r3, #2
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d0f0      	beq.n	8005a66 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a84:	4b28      	ldr	r3, [pc, #160]	@ (8005b28 <HAL_RCC_OscConfig+0x240>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	691b      	ldr	r3, [r3, #16]
 8005a90:	00db      	lsls	r3, r3, #3
 8005a92:	4925      	ldr	r1, [pc, #148]	@ (8005b28 <HAL_RCC_OscConfig+0x240>)
 8005a94:	4313      	orrs	r3, r2
 8005a96:	600b      	str	r3, [r1, #0]
 8005a98:	e015      	b.n	8005ac6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a9a:	4b24      	ldr	r3, [pc, #144]	@ (8005b2c <HAL_RCC_OscConfig+0x244>)
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aa0:	f7fd ff7e 	bl	80039a0 <HAL_GetTick>
 8005aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005aa6:	e008      	b.n	8005aba <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005aa8:	f7fd ff7a 	bl	80039a0 <HAL_GetTick>
 8005aac:	4602      	mov	r2, r0
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	1ad3      	subs	r3, r2, r3
 8005ab2:	2b02      	cmp	r3, #2
 8005ab4:	d901      	bls.n	8005aba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005ab6:	2303      	movs	r3, #3
 8005ab8:	e187      	b.n	8005dca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005aba:	4b1b      	ldr	r3, [pc, #108]	@ (8005b28 <HAL_RCC_OscConfig+0x240>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f003 0302 	and.w	r3, r3, #2
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d1f0      	bne.n	8005aa8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f003 0308 	and.w	r3, r3, #8
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d036      	beq.n	8005b40 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	695b      	ldr	r3, [r3, #20]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d016      	beq.n	8005b08 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ada:	4b15      	ldr	r3, [pc, #84]	@ (8005b30 <HAL_RCC_OscConfig+0x248>)
 8005adc:	2201      	movs	r2, #1
 8005ade:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ae0:	f7fd ff5e 	bl	80039a0 <HAL_GetTick>
 8005ae4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ae6:	e008      	b.n	8005afa <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ae8:	f7fd ff5a 	bl	80039a0 <HAL_GetTick>
 8005aec:	4602      	mov	r2, r0
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	1ad3      	subs	r3, r2, r3
 8005af2:	2b02      	cmp	r3, #2
 8005af4:	d901      	bls.n	8005afa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005af6:	2303      	movs	r3, #3
 8005af8:	e167      	b.n	8005dca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005afa:	4b0b      	ldr	r3, [pc, #44]	@ (8005b28 <HAL_RCC_OscConfig+0x240>)
 8005afc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005afe:	f003 0302 	and.w	r3, r3, #2
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d0f0      	beq.n	8005ae8 <HAL_RCC_OscConfig+0x200>
 8005b06:	e01b      	b.n	8005b40 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b08:	4b09      	ldr	r3, [pc, #36]	@ (8005b30 <HAL_RCC_OscConfig+0x248>)
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b0e:	f7fd ff47 	bl	80039a0 <HAL_GetTick>
 8005b12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b14:	e00e      	b.n	8005b34 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b16:	f7fd ff43 	bl	80039a0 <HAL_GetTick>
 8005b1a:	4602      	mov	r2, r0
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	1ad3      	subs	r3, r2, r3
 8005b20:	2b02      	cmp	r3, #2
 8005b22:	d907      	bls.n	8005b34 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005b24:	2303      	movs	r3, #3
 8005b26:	e150      	b.n	8005dca <HAL_RCC_OscConfig+0x4e2>
 8005b28:	40023800 	.word	0x40023800
 8005b2c:	42470000 	.word	0x42470000
 8005b30:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b34:	4b88      	ldr	r3, [pc, #544]	@ (8005d58 <HAL_RCC_OscConfig+0x470>)
 8005b36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b38:	f003 0302 	and.w	r3, r3, #2
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d1ea      	bne.n	8005b16 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f003 0304 	and.w	r3, r3, #4
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	f000 8097 	beq.w	8005c7c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b52:	4b81      	ldr	r3, [pc, #516]	@ (8005d58 <HAL_RCC_OscConfig+0x470>)
 8005b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d10f      	bne.n	8005b7e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b5e:	2300      	movs	r3, #0
 8005b60:	60bb      	str	r3, [r7, #8]
 8005b62:	4b7d      	ldr	r3, [pc, #500]	@ (8005d58 <HAL_RCC_OscConfig+0x470>)
 8005b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b66:	4a7c      	ldr	r2, [pc, #496]	@ (8005d58 <HAL_RCC_OscConfig+0x470>)
 8005b68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8005b6e:	4b7a      	ldr	r3, [pc, #488]	@ (8005d58 <HAL_RCC_OscConfig+0x470>)
 8005b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b76:	60bb      	str	r3, [r7, #8]
 8005b78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b7e:	4b77      	ldr	r3, [pc, #476]	@ (8005d5c <HAL_RCC_OscConfig+0x474>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d118      	bne.n	8005bbc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b8a:	4b74      	ldr	r3, [pc, #464]	@ (8005d5c <HAL_RCC_OscConfig+0x474>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a73      	ldr	r2, [pc, #460]	@ (8005d5c <HAL_RCC_OscConfig+0x474>)
 8005b90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b96:	f7fd ff03 	bl	80039a0 <HAL_GetTick>
 8005b9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b9c:	e008      	b.n	8005bb0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b9e:	f7fd feff 	bl	80039a0 <HAL_GetTick>
 8005ba2:	4602      	mov	r2, r0
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	1ad3      	subs	r3, r2, r3
 8005ba8:	2b02      	cmp	r3, #2
 8005baa:	d901      	bls.n	8005bb0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005bac:	2303      	movs	r3, #3
 8005bae:	e10c      	b.n	8005dca <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bb0:	4b6a      	ldr	r3, [pc, #424]	@ (8005d5c <HAL_RCC_OscConfig+0x474>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d0f0      	beq.n	8005b9e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d106      	bne.n	8005bd2 <HAL_RCC_OscConfig+0x2ea>
 8005bc4:	4b64      	ldr	r3, [pc, #400]	@ (8005d58 <HAL_RCC_OscConfig+0x470>)
 8005bc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bc8:	4a63      	ldr	r2, [pc, #396]	@ (8005d58 <HAL_RCC_OscConfig+0x470>)
 8005bca:	f043 0301 	orr.w	r3, r3, #1
 8005bce:	6713      	str	r3, [r2, #112]	@ 0x70
 8005bd0:	e01c      	b.n	8005c0c <HAL_RCC_OscConfig+0x324>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	2b05      	cmp	r3, #5
 8005bd8:	d10c      	bne.n	8005bf4 <HAL_RCC_OscConfig+0x30c>
 8005bda:	4b5f      	ldr	r3, [pc, #380]	@ (8005d58 <HAL_RCC_OscConfig+0x470>)
 8005bdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bde:	4a5e      	ldr	r2, [pc, #376]	@ (8005d58 <HAL_RCC_OscConfig+0x470>)
 8005be0:	f043 0304 	orr.w	r3, r3, #4
 8005be4:	6713      	str	r3, [r2, #112]	@ 0x70
 8005be6:	4b5c      	ldr	r3, [pc, #368]	@ (8005d58 <HAL_RCC_OscConfig+0x470>)
 8005be8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bea:	4a5b      	ldr	r2, [pc, #364]	@ (8005d58 <HAL_RCC_OscConfig+0x470>)
 8005bec:	f043 0301 	orr.w	r3, r3, #1
 8005bf0:	6713      	str	r3, [r2, #112]	@ 0x70
 8005bf2:	e00b      	b.n	8005c0c <HAL_RCC_OscConfig+0x324>
 8005bf4:	4b58      	ldr	r3, [pc, #352]	@ (8005d58 <HAL_RCC_OscConfig+0x470>)
 8005bf6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bf8:	4a57      	ldr	r2, [pc, #348]	@ (8005d58 <HAL_RCC_OscConfig+0x470>)
 8005bfa:	f023 0301 	bic.w	r3, r3, #1
 8005bfe:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c00:	4b55      	ldr	r3, [pc, #340]	@ (8005d58 <HAL_RCC_OscConfig+0x470>)
 8005c02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c04:	4a54      	ldr	r2, [pc, #336]	@ (8005d58 <HAL_RCC_OscConfig+0x470>)
 8005c06:	f023 0304 	bic.w	r3, r3, #4
 8005c0a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d015      	beq.n	8005c40 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c14:	f7fd fec4 	bl	80039a0 <HAL_GetTick>
 8005c18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c1a:	e00a      	b.n	8005c32 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c1c:	f7fd fec0 	bl	80039a0 <HAL_GetTick>
 8005c20:	4602      	mov	r2, r0
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	1ad3      	subs	r3, r2, r3
 8005c26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d901      	bls.n	8005c32 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005c2e:	2303      	movs	r3, #3
 8005c30:	e0cb      	b.n	8005dca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c32:	4b49      	ldr	r3, [pc, #292]	@ (8005d58 <HAL_RCC_OscConfig+0x470>)
 8005c34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c36:	f003 0302 	and.w	r3, r3, #2
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d0ee      	beq.n	8005c1c <HAL_RCC_OscConfig+0x334>
 8005c3e:	e014      	b.n	8005c6a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c40:	f7fd feae 	bl	80039a0 <HAL_GetTick>
 8005c44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c46:	e00a      	b.n	8005c5e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c48:	f7fd feaa 	bl	80039a0 <HAL_GetTick>
 8005c4c:	4602      	mov	r2, r0
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	1ad3      	subs	r3, r2, r3
 8005c52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d901      	bls.n	8005c5e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005c5a:	2303      	movs	r3, #3
 8005c5c:	e0b5      	b.n	8005dca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c5e:	4b3e      	ldr	r3, [pc, #248]	@ (8005d58 <HAL_RCC_OscConfig+0x470>)
 8005c60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c62:	f003 0302 	and.w	r3, r3, #2
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d1ee      	bne.n	8005c48 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005c6a:	7dfb      	ldrb	r3, [r7, #23]
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d105      	bne.n	8005c7c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c70:	4b39      	ldr	r3, [pc, #228]	@ (8005d58 <HAL_RCC_OscConfig+0x470>)
 8005c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c74:	4a38      	ldr	r2, [pc, #224]	@ (8005d58 <HAL_RCC_OscConfig+0x470>)
 8005c76:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005c7a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	699b      	ldr	r3, [r3, #24]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	f000 80a1 	beq.w	8005dc8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005c86:	4b34      	ldr	r3, [pc, #208]	@ (8005d58 <HAL_RCC_OscConfig+0x470>)
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	f003 030c 	and.w	r3, r3, #12
 8005c8e:	2b08      	cmp	r3, #8
 8005c90:	d05c      	beq.n	8005d4c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	699b      	ldr	r3, [r3, #24]
 8005c96:	2b02      	cmp	r3, #2
 8005c98:	d141      	bne.n	8005d1e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c9a:	4b31      	ldr	r3, [pc, #196]	@ (8005d60 <HAL_RCC_OscConfig+0x478>)
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ca0:	f7fd fe7e 	bl	80039a0 <HAL_GetTick>
 8005ca4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ca6:	e008      	b.n	8005cba <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ca8:	f7fd fe7a 	bl	80039a0 <HAL_GetTick>
 8005cac:	4602      	mov	r2, r0
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	1ad3      	subs	r3, r2, r3
 8005cb2:	2b02      	cmp	r3, #2
 8005cb4:	d901      	bls.n	8005cba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005cb6:	2303      	movs	r3, #3
 8005cb8:	e087      	b.n	8005dca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cba:	4b27      	ldr	r3, [pc, #156]	@ (8005d58 <HAL_RCC_OscConfig+0x470>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d1f0      	bne.n	8005ca8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	69da      	ldr	r2, [r3, #28]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6a1b      	ldr	r3, [r3, #32]
 8005cce:	431a      	orrs	r2, r3
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cd4:	019b      	lsls	r3, r3, #6
 8005cd6:	431a      	orrs	r2, r3
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cdc:	085b      	lsrs	r3, r3, #1
 8005cde:	3b01      	subs	r3, #1
 8005ce0:	041b      	lsls	r3, r3, #16
 8005ce2:	431a      	orrs	r2, r3
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ce8:	061b      	lsls	r3, r3, #24
 8005cea:	491b      	ldr	r1, [pc, #108]	@ (8005d58 <HAL_RCC_OscConfig+0x470>)
 8005cec:	4313      	orrs	r3, r2
 8005cee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005cf0:	4b1b      	ldr	r3, [pc, #108]	@ (8005d60 <HAL_RCC_OscConfig+0x478>)
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cf6:	f7fd fe53 	bl	80039a0 <HAL_GetTick>
 8005cfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cfc:	e008      	b.n	8005d10 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cfe:	f7fd fe4f 	bl	80039a0 <HAL_GetTick>
 8005d02:	4602      	mov	r2, r0
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	1ad3      	subs	r3, r2, r3
 8005d08:	2b02      	cmp	r3, #2
 8005d0a:	d901      	bls.n	8005d10 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005d0c:	2303      	movs	r3, #3
 8005d0e:	e05c      	b.n	8005dca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d10:	4b11      	ldr	r3, [pc, #68]	@ (8005d58 <HAL_RCC_OscConfig+0x470>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d0f0      	beq.n	8005cfe <HAL_RCC_OscConfig+0x416>
 8005d1c:	e054      	b.n	8005dc8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d1e:	4b10      	ldr	r3, [pc, #64]	@ (8005d60 <HAL_RCC_OscConfig+0x478>)
 8005d20:	2200      	movs	r2, #0
 8005d22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d24:	f7fd fe3c 	bl	80039a0 <HAL_GetTick>
 8005d28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d2a:	e008      	b.n	8005d3e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d2c:	f7fd fe38 	bl	80039a0 <HAL_GetTick>
 8005d30:	4602      	mov	r2, r0
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	1ad3      	subs	r3, r2, r3
 8005d36:	2b02      	cmp	r3, #2
 8005d38:	d901      	bls.n	8005d3e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005d3a:	2303      	movs	r3, #3
 8005d3c:	e045      	b.n	8005dca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d3e:	4b06      	ldr	r3, [pc, #24]	@ (8005d58 <HAL_RCC_OscConfig+0x470>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d1f0      	bne.n	8005d2c <HAL_RCC_OscConfig+0x444>
 8005d4a:	e03d      	b.n	8005dc8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	699b      	ldr	r3, [r3, #24]
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d107      	bne.n	8005d64 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005d54:	2301      	movs	r3, #1
 8005d56:	e038      	b.n	8005dca <HAL_RCC_OscConfig+0x4e2>
 8005d58:	40023800 	.word	0x40023800
 8005d5c:	40007000 	.word	0x40007000
 8005d60:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005d64:	4b1b      	ldr	r3, [pc, #108]	@ (8005dd4 <HAL_RCC_OscConfig+0x4ec>)
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	699b      	ldr	r3, [r3, #24]
 8005d6e:	2b01      	cmp	r3, #1
 8005d70:	d028      	beq.n	8005dc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d121      	bne.n	8005dc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d11a      	bne.n	8005dc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005d8e:	68fa      	ldr	r2, [r7, #12]
 8005d90:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005d94:	4013      	ands	r3, r2
 8005d96:	687a      	ldr	r2, [r7, #4]
 8005d98:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005d9a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d111      	bne.n	8005dc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005daa:	085b      	lsrs	r3, r3, #1
 8005dac:	3b01      	subs	r3, #1
 8005dae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d107      	bne.n	8005dc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dbe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d001      	beq.n	8005dc8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	e000      	b.n	8005dca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005dc8:	2300      	movs	r3, #0
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3718      	adds	r7, #24
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}
 8005dd2:	bf00      	nop
 8005dd4:	40023800 	.word	0x40023800

08005dd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b084      	sub	sp, #16
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d101      	bne.n	8005dec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005de8:	2301      	movs	r3, #1
 8005dea:	e0cc      	b.n	8005f86 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005dec:	4b68      	ldr	r3, [pc, #416]	@ (8005f90 <HAL_RCC_ClockConfig+0x1b8>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f003 030f 	and.w	r3, r3, #15
 8005df4:	683a      	ldr	r2, [r7, #0]
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d90c      	bls.n	8005e14 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dfa:	4b65      	ldr	r3, [pc, #404]	@ (8005f90 <HAL_RCC_ClockConfig+0x1b8>)
 8005dfc:	683a      	ldr	r2, [r7, #0]
 8005dfe:	b2d2      	uxtb	r2, r2
 8005e00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e02:	4b63      	ldr	r3, [pc, #396]	@ (8005f90 <HAL_RCC_ClockConfig+0x1b8>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f003 030f 	and.w	r3, r3, #15
 8005e0a:	683a      	ldr	r2, [r7, #0]
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d001      	beq.n	8005e14 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005e10:	2301      	movs	r3, #1
 8005e12:	e0b8      	b.n	8005f86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f003 0302 	and.w	r3, r3, #2
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d020      	beq.n	8005e62 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f003 0304 	and.w	r3, r3, #4
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d005      	beq.n	8005e38 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005e2c:	4b59      	ldr	r3, [pc, #356]	@ (8005f94 <HAL_RCC_ClockConfig+0x1bc>)
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	4a58      	ldr	r2, [pc, #352]	@ (8005f94 <HAL_RCC_ClockConfig+0x1bc>)
 8005e32:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005e36:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f003 0308 	and.w	r3, r3, #8
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d005      	beq.n	8005e50 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005e44:	4b53      	ldr	r3, [pc, #332]	@ (8005f94 <HAL_RCC_ClockConfig+0x1bc>)
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	4a52      	ldr	r2, [pc, #328]	@ (8005f94 <HAL_RCC_ClockConfig+0x1bc>)
 8005e4a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005e4e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e50:	4b50      	ldr	r3, [pc, #320]	@ (8005f94 <HAL_RCC_ClockConfig+0x1bc>)
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	494d      	ldr	r1, [pc, #308]	@ (8005f94 <HAL_RCC_ClockConfig+0x1bc>)
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f003 0301 	and.w	r3, r3, #1
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d044      	beq.n	8005ef8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d107      	bne.n	8005e86 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e76:	4b47      	ldr	r3, [pc, #284]	@ (8005f94 <HAL_RCC_ClockConfig+0x1bc>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d119      	bne.n	8005eb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e82:	2301      	movs	r3, #1
 8005e84:	e07f      	b.n	8005f86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	2b02      	cmp	r3, #2
 8005e8c:	d003      	beq.n	8005e96 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e92:	2b03      	cmp	r3, #3
 8005e94:	d107      	bne.n	8005ea6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e96:	4b3f      	ldr	r3, [pc, #252]	@ (8005f94 <HAL_RCC_ClockConfig+0x1bc>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d109      	bne.n	8005eb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e06f      	b.n	8005f86 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ea6:	4b3b      	ldr	r3, [pc, #236]	@ (8005f94 <HAL_RCC_ClockConfig+0x1bc>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f003 0302 	and.w	r3, r3, #2
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d101      	bne.n	8005eb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	e067      	b.n	8005f86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005eb6:	4b37      	ldr	r3, [pc, #220]	@ (8005f94 <HAL_RCC_ClockConfig+0x1bc>)
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	f023 0203 	bic.w	r2, r3, #3
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	4934      	ldr	r1, [pc, #208]	@ (8005f94 <HAL_RCC_ClockConfig+0x1bc>)
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ec8:	f7fd fd6a 	bl	80039a0 <HAL_GetTick>
 8005ecc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ece:	e00a      	b.n	8005ee6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ed0:	f7fd fd66 	bl	80039a0 <HAL_GetTick>
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	1ad3      	subs	r3, r2, r3
 8005eda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d901      	bls.n	8005ee6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005ee2:	2303      	movs	r3, #3
 8005ee4:	e04f      	b.n	8005f86 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ee6:	4b2b      	ldr	r3, [pc, #172]	@ (8005f94 <HAL_RCC_ClockConfig+0x1bc>)
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	f003 020c 	and.w	r2, r3, #12
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d1eb      	bne.n	8005ed0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005ef8:	4b25      	ldr	r3, [pc, #148]	@ (8005f90 <HAL_RCC_ClockConfig+0x1b8>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f003 030f 	and.w	r3, r3, #15
 8005f00:	683a      	ldr	r2, [r7, #0]
 8005f02:	429a      	cmp	r2, r3
 8005f04:	d20c      	bcs.n	8005f20 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f06:	4b22      	ldr	r3, [pc, #136]	@ (8005f90 <HAL_RCC_ClockConfig+0x1b8>)
 8005f08:	683a      	ldr	r2, [r7, #0]
 8005f0a:	b2d2      	uxtb	r2, r2
 8005f0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f0e:	4b20      	ldr	r3, [pc, #128]	@ (8005f90 <HAL_RCC_ClockConfig+0x1b8>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f003 030f 	and.w	r3, r3, #15
 8005f16:	683a      	ldr	r2, [r7, #0]
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d001      	beq.n	8005f20 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	e032      	b.n	8005f86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f003 0304 	and.w	r3, r3, #4
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d008      	beq.n	8005f3e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f2c:	4b19      	ldr	r3, [pc, #100]	@ (8005f94 <HAL_RCC_ClockConfig+0x1bc>)
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	68db      	ldr	r3, [r3, #12]
 8005f38:	4916      	ldr	r1, [pc, #88]	@ (8005f94 <HAL_RCC_ClockConfig+0x1bc>)
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f003 0308 	and.w	r3, r3, #8
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d009      	beq.n	8005f5e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005f4a:	4b12      	ldr	r3, [pc, #72]	@ (8005f94 <HAL_RCC_ClockConfig+0x1bc>)
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	691b      	ldr	r3, [r3, #16]
 8005f56:	00db      	lsls	r3, r3, #3
 8005f58:	490e      	ldr	r1, [pc, #56]	@ (8005f94 <HAL_RCC_ClockConfig+0x1bc>)
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005f5e:	f000 f821 	bl	8005fa4 <HAL_RCC_GetSysClockFreq>
 8005f62:	4602      	mov	r2, r0
 8005f64:	4b0b      	ldr	r3, [pc, #44]	@ (8005f94 <HAL_RCC_ClockConfig+0x1bc>)
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	091b      	lsrs	r3, r3, #4
 8005f6a:	f003 030f 	and.w	r3, r3, #15
 8005f6e:	490a      	ldr	r1, [pc, #40]	@ (8005f98 <HAL_RCC_ClockConfig+0x1c0>)
 8005f70:	5ccb      	ldrb	r3, [r1, r3]
 8005f72:	fa22 f303 	lsr.w	r3, r2, r3
 8005f76:	4a09      	ldr	r2, [pc, #36]	@ (8005f9c <HAL_RCC_ClockConfig+0x1c4>)
 8005f78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005f7a:	4b09      	ldr	r3, [pc, #36]	@ (8005fa0 <HAL_RCC_ClockConfig+0x1c8>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f7fd fcca 	bl	8003918 <HAL_InitTick>

  return HAL_OK;
 8005f84:	2300      	movs	r3, #0
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3710      	adds	r7, #16
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}
 8005f8e:	bf00      	nop
 8005f90:	40023c00 	.word	0x40023c00
 8005f94:	40023800 	.word	0x40023800
 8005f98:	08008fc4 	.word	0x08008fc4
 8005f9c:	2000001c 	.word	0x2000001c
 8005fa0:	20000020 	.word	0x20000020

08005fa4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005fa4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005fa8:	b094      	sub	sp, #80	@ 0x50
 8005faa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005fac:	2300      	movs	r3, #0
 8005fae:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005fbc:	4b79      	ldr	r3, [pc, #484]	@ (80061a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005fbe:	689b      	ldr	r3, [r3, #8]
 8005fc0:	f003 030c 	and.w	r3, r3, #12
 8005fc4:	2b08      	cmp	r3, #8
 8005fc6:	d00d      	beq.n	8005fe4 <HAL_RCC_GetSysClockFreq+0x40>
 8005fc8:	2b08      	cmp	r3, #8
 8005fca:	f200 80e1 	bhi.w	8006190 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d002      	beq.n	8005fd8 <HAL_RCC_GetSysClockFreq+0x34>
 8005fd2:	2b04      	cmp	r3, #4
 8005fd4:	d003      	beq.n	8005fde <HAL_RCC_GetSysClockFreq+0x3a>
 8005fd6:	e0db      	b.n	8006190 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005fd8:	4b73      	ldr	r3, [pc, #460]	@ (80061a8 <HAL_RCC_GetSysClockFreq+0x204>)
 8005fda:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005fdc:	e0db      	b.n	8006196 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005fde:	4b73      	ldr	r3, [pc, #460]	@ (80061ac <HAL_RCC_GetSysClockFreq+0x208>)
 8005fe0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005fe2:	e0d8      	b.n	8006196 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005fe4:	4b6f      	ldr	r3, [pc, #444]	@ (80061a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005fec:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005fee:	4b6d      	ldr	r3, [pc, #436]	@ (80061a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d063      	beq.n	80060c2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ffa:	4b6a      	ldr	r3, [pc, #424]	@ (80061a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	099b      	lsrs	r3, r3, #6
 8006000:	2200      	movs	r2, #0
 8006002:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006004:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006008:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800600c:	633b      	str	r3, [r7, #48]	@ 0x30
 800600e:	2300      	movs	r3, #0
 8006010:	637b      	str	r3, [r7, #52]	@ 0x34
 8006012:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006016:	4622      	mov	r2, r4
 8006018:	462b      	mov	r3, r5
 800601a:	f04f 0000 	mov.w	r0, #0
 800601e:	f04f 0100 	mov.w	r1, #0
 8006022:	0159      	lsls	r1, r3, #5
 8006024:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006028:	0150      	lsls	r0, r2, #5
 800602a:	4602      	mov	r2, r0
 800602c:	460b      	mov	r3, r1
 800602e:	4621      	mov	r1, r4
 8006030:	1a51      	subs	r1, r2, r1
 8006032:	6139      	str	r1, [r7, #16]
 8006034:	4629      	mov	r1, r5
 8006036:	eb63 0301 	sbc.w	r3, r3, r1
 800603a:	617b      	str	r3, [r7, #20]
 800603c:	f04f 0200 	mov.w	r2, #0
 8006040:	f04f 0300 	mov.w	r3, #0
 8006044:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006048:	4659      	mov	r1, fp
 800604a:	018b      	lsls	r3, r1, #6
 800604c:	4651      	mov	r1, sl
 800604e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006052:	4651      	mov	r1, sl
 8006054:	018a      	lsls	r2, r1, #6
 8006056:	4651      	mov	r1, sl
 8006058:	ebb2 0801 	subs.w	r8, r2, r1
 800605c:	4659      	mov	r1, fp
 800605e:	eb63 0901 	sbc.w	r9, r3, r1
 8006062:	f04f 0200 	mov.w	r2, #0
 8006066:	f04f 0300 	mov.w	r3, #0
 800606a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800606e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006072:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006076:	4690      	mov	r8, r2
 8006078:	4699      	mov	r9, r3
 800607a:	4623      	mov	r3, r4
 800607c:	eb18 0303 	adds.w	r3, r8, r3
 8006080:	60bb      	str	r3, [r7, #8]
 8006082:	462b      	mov	r3, r5
 8006084:	eb49 0303 	adc.w	r3, r9, r3
 8006088:	60fb      	str	r3, [r7, #12]
 800608a:	f04f 0200 	mov.w	r2, #0
 800608e:	f04f 0300 	mov.w	r3, #0
 8006092:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006096:	4629      	mov	r1, r5
 8006098:	024b      	lsls	r3, r1, #9
 800609a:	4621      	mov	r1, r4
 800609c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80060a0:	4621      	mov	r1, r4
 80060a2:	024a      	lsls	r2, r1, #9
 80060a4:	4610      	mov	r0, r2
 80060a6:	4619      	mov	r1, r3
 80060a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80060aa:	2200      	movs	r2, #0
 80060ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80060ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80060b0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80060b4:	f7fa f89a 	bl	80001ec <__aeabi_uldivmod>
 80060b8:	4602      	mov	r2, r0
 80060ba:	460b      	mov	r3, r1
 80060bc:	4613      	mov	r3, r2
 80060be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80060c0:	e058      	b.n	8006174 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060c2:	4b38      	ldr	r3, [pc, #224]	@ (80061a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	099b      	lsrs	r3, r3, #6
 80060c8:	2200      	movs	r2, #0
 80060ca:	4618      	mov	r0, r3
 80060cc:	4611      	mov	r1, r2
 80060ce:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80060d2:	623b      	str	r3, [r7, #32]
 80060d4:	2300      	movs	r3, #0
 80060d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80060d8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80060dc:	4642      	mov	r2, r8
 80060de:	464b      	mov	r3, r9
 80060e0:	f04f 0000 	mov.w	r0, #0
 80060e4:	f04f 0100 	mov.w	r1, #0
 80060e8:	0159      	lsls	r1, r3, #5
 80060ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80060ee:	0150      	lsls	r0, r2, #5
 80060f0:	4602      	mov	r2, r0
 80060f2:	460b      	mov	r3, r1
 80060f4:	4641      	mov	r1, r8
 80060f6:	ebb2 0a01 	subs.w	sl, r2, r1
 80060fa:	4649      	mov	r1, r9
 80060fc:	eb63 0b01 	sbc.w	fp, r3, r1
 8006100:	f04f 0200 	mov.w	r2, #0
 8006104:	f04f 0300 	mov.w	r3, #0
 8006108:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800610c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006110:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006114:	ebb2 040a 	subs.w	r4, r2, sl
 8006118:	eb63 050b 	sbc.w	r5, r3, fp
 800611c:	f04f 0200 	mov.w	r2, #0
 8006120:	f04f 0300 	mov.w	r3, #0
 8006124:	00eb      	lsls	r3, r5, #3
 8006126:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800612a:	00e2      	lsls	r2, r4, #3
 800612c:	4614      	mov	r4, r2
 800612e:	461d      	mov	r5, r3
 8006130:	4643      	mov	r3, r8
 8006132:	18e3      	adds	r3, r4, r3
 8006134:	603b      	str	r3, [r7, #0]
 8006136:	464b      	mov	r3, r9
 8006138:	eb45 0303 	adc.w	r3, r5, r3
 800613c:	607b      	str	r3, [r7, #4]
 800613e:	f04f 0200 	mov.w	r2, #0
 8006142:	f04f 0300 	mov.w	r3, #0
 8006146:	e9d7 4500 	ldrd	r4, r5, [r7]
 800614a:	4629      	mov	r1, r5
 800614c:	028b      	lsls	r3, r1, #10
 800614e:	4621      	mov	r1, r4
 8006150:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006154:	4621      	mov	r1, r4
 8006156:	028a      	lsls	r2, r1, #10
 8006158:	4610      	mov	r0, r2
 800615a:	4619      	mov	r1, r3
 800615c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800615e:	2200      	movs	r2, #0
 8006160:	61bb      	str	r3, [r7, #24]
 8006162:	61fa      	str	r2, [r7, #28]
 8006164:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006168:	f7fa f840 	bl	80001ec <__aeabi_uldivmod>
 800616c:	4602      	mov	r2, r0
 800616e:	460b      	mov	r3, r1
 8006170:	4613      	mov	r3, r2
 8006172:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006174:	4b0b      	ldr	r3, [pc, #44]	@ (80061a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	0c1b      	lsrs	r3, r3, #16
 800617a:	f003 0303 	and.w	r3, r3, #3
 800617e:	3301      	adds	r3, #1
 8006180:	005b      	lsls	r3, r3, #1
 8006182:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006184:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006186:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006188:	fbb2 f3f3 	udiv	r3, r2, r3
 800618c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800618e:	e002      	b.n	8006196 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006190:	4b05      	ldr	r3, [pc, #20]	@ (80061a8 <HAL_RCC_GetSysClockFreq+0x204>)
 8006192:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006194:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006196:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006198:	4618      	mov	r0, r3
 800619a:	3750      	adds	r7, #80	@ 0x50
 800619c:	46bd      	mov	sp, r7
 800619e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80061a2:	bf00      	nop
 80061a4:	40023800 	.word	0x40023800
 80061a8:	00f42400 	.word	0x00f42400
 80061ac:	007a1200 	.word	0x007a1200

080061b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80061b0:	b480      	push	{r7}
 80061b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80061b4:	4b03      	ldr	r3, [pc, #12]	@ (80061c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80061b6:	681b      	ldr	r3, [r3, #0]
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	46bd      	mov	sp, r7
 80061bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c0:	4770      	bx	lr
 80061c2:	bf00      	nop
 80061c4:	2000001c 	.word	0x2000001c

080061c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80061cc:	f7ff fff0 	bl	80061b0 <HAL_RCC_GetHCLKFreq>
 80061d0:	4602      	mov	r2, r0
 80061d2:	4b05      	ldr	r3, [pc, #20]	@ (80061e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80061d4:	689b      	ldr	r3, [r3, #8]
 80061d6:	0a9b      	lsrs	r3, r3, #10
 80061d8:	f003 0307 	and.w	r3, r3, #7
 80061dc:	4903      	ldr	r1, [pc, #12]	@ (80061ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80061de:	5ccb      	ldrb	r3, [r1, r3]
 80061e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	bd80      	pop	{r7, pc}
 80061e8:	40023800 	.word	0x40023800
 80061ec:	08008fd4 	.word	0x08008fd4

080061f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b086      	sub	sp, #24
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80061f8:	2300      	movs	r3, #0
 80061fa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80061fc:	2300      	movs	r3, #0
 80061fe:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f003 0301 	and.w	r3, r3, #1
 8006208:	2b00      	cmp	r3, #0
 800620a:	d10b      	bne.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006214:	2b00      	cmp	r3, #0
 8006216:	d105      	bne.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006220:	2b00      	cmp	r3, #0
 8006222:	d075      	beq.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006224:	4b91      	ldr	r3, [pc, #580]	@ (800646c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006226:	2200      	movs	r2, #0
 8006228:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800622a:	f7fd fbb9 	bl	80039a0 <HAL_GetTick>
 800622e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006230:	e008      	b.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006232:	f7fd fbb5 	bl	80039a0 <HAL_GetTick>
 8006236:	4602      	mov	r2, r0
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	1ad3      	subs	r3, r2, r3
 800623c:	2b02      	cmp	r3, #2
 800623e:	d901      	bls.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006240:	2303      	movs	r3, #3
 8006242:	e189      	b.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006244:	4b8a      	ldr	r3, [pc, #552]	@ (8006470 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800624c:	2b00      	cmp	r3, #0
 800624e:	d1f0      	bne.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f003 0301 	and.w	r3, r3, #1
 8006258:	2b00      	cmp	r3, #0
 800625a:	d009      	beq.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	019a      	lsls	r2, r3, #6
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	071b      	lsls	r3, r3, #28
 8006268:	4981      	ldr	r1, [pc, #516]	@ (8006470 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800626a:	4313      	orrs	r3, r2
 800626c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f003 0302 	and.w	r3, r3, #2
 8006278:	2b00      	cmp	r3, #0
 800627a:	d01f      	beq.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800627c:	4b7c      	ldr	r3, [pc, #496]	@ (8006470 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800627e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006282:	0f1b      	lsrs	r3, r3, #28
 8006284:	f003 0307 	and.w	r3, r3, #7
 8006288:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	019a      	lsls	r2, r3, #6
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	061b      	lsls	r3, r3, #24
 8006296:	431a      	orrs	r2, r3
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	071b      	lsls	r3, r3, #28
 800629c:	4974      	ldr	r1, [pc, #464]	@ (8006470 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800629e:	4313      	orrs	r3, r2
 80062a0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80062a4:	4b72      	ldr	r3, [pc, #456]	@ (8006470 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80062a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80062aa:	f023 021f 	bic.w	r2, r3, #31
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	69db      	ldr	r3, [r3, #28]
 80062b2:	3b01      	subs	r3, #1
 80062b4:	496e      	ldr	r1, [pc, #440]	@ (8006470 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80062b6:	4313      	orrs	r3, r2
 80062b8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d00d      	beq.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	019a      	lsls	r2, r3, #6
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	68db      	ldr	r3, [r3, #12]
 80062d2:	061b      	lsls	r3, r3, #24
 80062d4:	431a      	orrs	r2, r3
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	071b      	lsls	r3, r3, #28
 80062dc:	4964      	ldr	r1, [pc, #400]	@ (8006470 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80062de:	4313      	orrs	r3, r2
 80062e0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80062e4:	4b61      	ldr	r3, [pc, #388]	@ (800646c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80062e6:	2201      	movs	r2, #1
 80062e8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80062ea:	f7fd fb59 	bl	80039a0 <HAL_GetTick>
 80062ee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80062f0:	e008      	b.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80062f2:	f7fd fb55 	bl	80039a0 <HAL_GetTick>
 80062f6:	4602      	mov	r2, r0
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	1ad3      	subs	r3, r2, r3
 80062fc:	2b02      	cmp	r3, #2
 80062fe:	d901      	bls.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006300:	2303      	movs	r3, #3
 8006302:	e129      	b.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006304:	4b5a      	ldr	r3, [pc, #360]	@ (8006470 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800630c:	2b00      	cmp	r3, #0
 800630e:	d0f0      	beq.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f003 0304 	and.w	r3, r3, #4
 8006318:	2b00      	cmp	r3, #0
 800631a:	d105      	bne.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006324:	2b00      	cmp	r3, #0
 8006326:	d079      	beq.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006328:	4b52      	ldr	r3, [pc, #328]	@ (8006474 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800632a:	2200      	movs	r2, #0
 800632c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800632e:	f7fd fb37 	bl	80039a0 <HAL_GetTick>
 8006332:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006334:	e008      	b.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006336:	f7fd fb33 	bl	80039a0 <HAL_GetTick>
 800633a:	4602      	mov	r2, r0
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	1ad3      	subs	r3, r2, r3
 8006340:	2b02      	cmp	r3, #2
 8006342:	d901      	bls.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006344:	2303      	movs	r3, #3
 8006346:	e107      	b.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006348:	4b49      	ldr	r3, [pc, #292]	@ (8006470 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006350:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006354:	d0ef      	beq.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f003 0304 	and.w	r3, r3, #4
 800635e:	2b00      	cmp	r3, #0
 8006360:	d020      	beq.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006362:	4b43      	ldr	r3, [pc, #268]	@ (8006470 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006364:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006368:	0f1b      	lsrs	r3, r3, #28
 800636a:	f003 0307 	and.w	r3, r3, #7
 800636e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	691b      	ldr	r3, [r3, #16]
 8006374:	019a      	lsls	r2, r3, #6
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	695b      	ldr	r3, [r3, #20]
 800637a:	061b      	lsls	r3, r3, #24
 800637c:	431a      	orrs	r2, r3
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	071b      	lsls	r3, r3, #28
 8006382:	493b      	ldr	r1, [pc, #236]	@ (8006470 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006384:	4313      	orrs	r3, r2
 8006386:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800638a:	4b39      	ldr	r3, [pc, #228]	@ (8006470 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800638c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006390:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6a1b      	ldr	r3, [r3, #32]
 8006398:	3b01      	subs	r3, #1
 800639a:	021b      	lsls	r3, r3, #8
 800639c:	4934      	ldr	r1, [pc, #208]	@ (8006470 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800639e:	4313      	orrs	r3, r2
 80063a0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f003 0308 	and.w	r3, r3, #8
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d01e      	beq.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80063b0:	4b2f      	ldr	r3, [pc, #188]	@ (8006470 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80063b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063b6:	0e1b      	lsrs	r3, r3, #24
 80063b8:	f003 030f 	and.w	r3, r3, #15
 80063bc:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	691b      	ldr	r3, [r3, #16]
 80063c2:	019a      	lsls	r2, r3, #6
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	061b      	lsls	r3, r3, #24
 80063c8:	431a      	orrs	r2, r3
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	699b      	ldr	r3, [r3, #24]
 80063ce:	071b      	lsls	r3, r3, #28
 80063d0:	4927      	ldr	r1, [pc, #156]	@ (8006470 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80063d2:	4313      	orrs	r3, r2
 80063d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80063d8:	4b25      	ldr	r3, [pc, #148]	@ (8006470 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80063da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80063de:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063e6:	4922      	ldr	r1, [pc, #136]	@ (8006470 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80063e8:	4313      	orrs	r3, r2
 80063ea:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80063ee:	4b21      	ldr	r3, [pc, #132]	@ (8006474 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80063f0:	2201      	movs	r2, #1
 80063f2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80063f4:	f7fd fad4 	bl	80039a0 <HAL_GetTick>
 80063f8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80063fa:	e008      	b.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80063fc:	f7fd fad0 	bl	80039a0 <HAL_GetTick>
 8006400:	4602      	mov	r2, r0
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	1ad3      	subs	r3, r2, r3
 8006406:	2b02      	cmp	r3, #2
 8006408:	d901      	bls.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800640a:	2303      	movs	r3, #3
 800640c:	e0a4      	b.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800640e:	4b18      	ldr	r3, [pc, #96]	@ (8006470 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006416:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800641a:	d1ef      	bne.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f003 0320 	and.w	r3, r3, #32
 8006424:	2b00      	cmp	r3, #0
 8006426:	f000 808b 	beq.w	8006540 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800642a:	2300      	movs	r3, #0
 800642c:	60fb      	str	r3, [r7, #12]
 800642e:	4b10      	ldr	r3, [pc, #64]	@ (8006470 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006432:	4a0f      	ldr	r2, [pc, #60]	@ (8006470 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006434:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006438:	6413      	str	r3, [r2, #64]	@ 0x40
 800643a:	4b0d      	ldr	r3, [pc, #52]	@ (8006470 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800643c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800643e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006442:	60fb      	str	r3, [r7, #12]
 8006444:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006446:	4b0c      	ldr	r3, [pc, #48]	@ (8006478 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a0b      	ldr	r2, [pc, #44]	@ (8006478 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800644c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006450:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006452:	f7fd faa5 	bl	80039a0 <HAL_GetTick>
 8006456:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006458:	e010      	b.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800645a:	f7fd faa1 	bl	80039a0 <HAL_GetTick>
 800645e:	4602      	mov	r2, r0
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	1ad3      	subs	r3, r2, r3
 8006464:	2b02      	cmp	r3, #2
 8006466:	d909      	bls.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8006468:	2303      	movs	r3, #3
 800646a:	e075      	b.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0x368>
 800646c:	42470068 	.word	0x42470068
 8006470:	40023800 	.word	0x40023800
 8006474:	42470070 	.word	0x42470070
 8006478:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800647c:	4b38      	ldr	r3, [pc, #224]	@ (8006560 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006484:	2b00      	cmp	r3, #0
 8006486:	d0e8      	beq.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006488:	4b36      	ldr	r3, [pc, #216]	@ (8006564 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800648a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800648c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006490:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d02f      	beq.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800649c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80064a0:	693a      	ldr	r2, [r7, #16]
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d028      	beq.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80064a6:	4b2f      	ldr	r3, [pc, #188]	@ (8006564 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80064a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064ae:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80064b0:	4b2d      	ldr	r3, [pc, #180]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80064b2:	2201      	movs	r2, #1
 80064b4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80064b6:	4b2c      	ldr	r3, [pc, #176]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80064b8:	2200      	movs	r2, #0
 80064ba:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80064bc:	4a29      	ldr	r2, [pc, #164]	@ (8006564 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80064c2:	4b28      	ldr	r3, [pc, #160]	@ (8006564 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80064c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064c6:	f003 0301 	and.w	r3, r3, #1
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d114      	bne.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80064ce:	f7fd fa67 	bl	80039a0 <HAL_GetTick>
 80064d2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064d4:	e00a      	b.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064d6:	f7fd fa63 	bl	80039a0 <HAL_GetTick>
 80064da:	4602      	mov	r2, r0
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	1ad3      	subs	r3, r2, r3
 80064e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d901      	bls.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80064e8:	2303      	movs	r3, #3
 80064ea:	e035      	b.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064ec:	4b1d      	ldr	r3, [pc, #116]	@ (8006564 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80064ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064f0:	f003 0302 	and.w	r3, r3, #2
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d0ee      	beq.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006500:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006504:	d10d      	bne.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8006506:	4b17      	ldr	r3, [pc, #92]	@ (8006564 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006512:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006516:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800651a:	4912      	ldr	r1, [pc, #72]	@ (8006564 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800651c:	4313      	orrs	r3, r2
 800651e:	608b      	str	r3, [r1, #8]
 8006520:	e005      	b.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8006522:	4b10      	ldr	r3, [pc, #64]	@ (8006564 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	4a0f      	ldr	r2, [pc, #60]	@ (8006564 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006528:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800652c:	6093      	str	r3, [r2, #8]
 800652e:	4b0d      	ldr	r3, [pc, #52]	@ (8006564 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006530:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006536:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800653a:	490a      	ldr	r1, [pc, #40]	@ (8006564 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800653c:	4313      	orrs	r3, r2
 800653e:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f003 0310 	and.w	r3, r3, #16
 8006548:	2b00      	cmp	r3, #0
 800654a:	d004      	beq.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8006552:	4b06      	ldr	r3, [pc, #24]	@ (800656c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8006554:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8006556:	2300      	movs	r3, #0
}
 8006558:	4618      	mov	r0, r3
 800655a:	3718      	adds	r7, #24
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}
 8006560:	40007000 	.word	0x40007000
 8006564:	40023800 	.word	0x40023800
 8006568:	42470e40 	.word	0x42470e40
 800656c:	424711e0 	.word	0x424711e0

08006570 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b082      	sub	sp, #8
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d101      	bne.n	8006582 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800657e:	2301      	movs	r3, #1
 8006580:	e01c      	b.n	80065bc <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	795b      	ldrb	r3, [r3, #5]
 8006586:	b2db      	uxtb	r3, r3
 8006588:	2b00      	cmp	r3, #0
 800658a:	d105      	bne.n	8006598 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2200      	movs	r2, #0
 8006590:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f7fc fd38 	bl	8003008 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2202      	movs	r2, #2
 800659c:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	681a      	ldr	r2, [r3, #0]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f042 0204 	orr.w	r2, r2, #4
 80065ac:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2201      	movs	r2, #1
 80065b2:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2200      	movs	r2, #0
 80065b8:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80065ba:	2300      	movs	r3, #0
}
 80065bc:	4618      	mov	r0, r3
 80065be:	3708      	adds	r7, #8
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}

080065c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b082      	sub	sp, #8
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d101      	bne.n	80065d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80065d2:	2301      	movs	r3, #1
 80065d4:	e07b      	b.n	80066ce <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d108      	bne.n	80065f0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80065e6:	d009      	beq.n	80065fc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2200      	movs	r2, #0
 80065ec:	61da      	str	r2, [r3, #28]
 80065ee:	e005      	b.n	80065fc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2200      	movs	r2, #0
 80065f4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2200      	movs	r2, #0
 80065fa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2200      	movs	r2, #0
 8006600:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006608:	b2db      	uxtb	r3, r3
 800660a:	2b00      	cmp	r3, #0
 800660c:	d106      	bne.n	800661c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2200      	movs	r2, #0
 8006612:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f7fc fd18 	bl	800304c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2202      	movs	r2, #2
 8006620:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006632:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006644:	431a      	orrs	r2, r3
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	68db      	ldr	r3, [r3, #12]
 800664a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800664e:	431a      	orrs	r2, r3
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	691b      	ldr	r3, [r3, #16]
 8006654:	f003 0302 	and.w	r3, r3, #2
 8006658:	431a      	orrs	r2, r3
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	695b      	ldr	r3, [r3, #20]
 800665e:	f003 0301 	and.w	r3, r3, #1
 8006662:	431a      	orrs	r2, r3
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	699b      	ldr	r3, [r3, #24]
 8006668:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800666c:	431a      	orrs	r2, r3
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	69db      	ldr	r3, [r3, #28]
 8006672:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006676:	431a      	orrs	r2, r3
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6a1b      	ldr	r3, [r3, #32]
 800667c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006680:	ea42 0103 	orr.w	r1, r2, r3
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006688:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	430a      	orrs	r2, r1
 8006692:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	699b      	ldr	r3, [r3, #24]
 8006698:	0c1b      	lsrs	r3, r3, #16
 800669a:	f003 0104 	and.w	r1, r3, #4
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066a2:	f003 0210 	and.w	r2, r3, #16
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	430a      	orrs	r2, r1
 80066ac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	69da      	ldr	r2, [r3, #28]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80066bc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2200      	movs	r2, #0
 80066c2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2201      	movs	r2, #1
 80066c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80066cc:	2300      	movs	r3, #0
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3708      	adds	r7, #8
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}

080066d6 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80066d6:	b580      	push	{r7, lr}
 80066d8:	b082      	sub	sp, #8
 80066da:	af00      	add	r7, sp, #0
 80066dc:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d101      	bne.n	80066e8 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80066e4:	2301      	movs	r3, #1
 80066e6:	e01a      	b.n	800671e <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2202      	movs	r2, #2
 80066ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80066fe:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f7fc fceb 	bl	80030dc <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2200      	movs	r2, #0
 800670a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2200      	movs	r2, #0
 8006710:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2200      	movs	r2, #0
 8006718:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800671c:	2300      	movs	r3, #0
}
 800671e:	4618      	mov	r0, r3
 8006720:	3708      	adds	r7, #8
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}

08006726 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006726:	b580      	push	{r7, lr}
 8006728:	b088      	sub	sp, #32
 800672a:	af00      	add	r7, sp, #0
 800672c:	60f8      	str	r0, [r7, #12]
 800672e:	60b9      	str	r1, [r7, #8]
 8006730:	603b      	str	r3, [r7, #0]
 8006732:	4613      	mov	r3, r2
 8006734:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006736:	f7fd f933 	bl	80039a0 <HAL_GetTick>
 800673a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800673c:	88fb      	ldrh	r3, [r7, #6]
 800673e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006746:	b2db      	uxtb	r3, r3
 8006748:	2b01      	cmp	r3, #1
 800674a:	d001      	beq.n	8006750 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800674c:	2302      	movs	r3, #2
 800674e:	e12a      	b.n	80069a6 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d002      	beq.n	800675c <HAL_SPI_Transmit+0x36>
 8006756:	88fb      	ldrh	r3, [r7, #6]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d101      	bne.n	8006760 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800675c:	2301      	movs	r3, #1
 800675e:	e122      	b.n	80069a6 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006766:	2b01      	cmp	r3, #1
 8006768:	d101      	bne.n	800676e <HAL_SPI_Transmit+0x48>
 800676a:	2302      	movs	r3, #2
 800676c:	e11b      	b.n	80069a6 <HAL_SPI_Transmit+0x280>
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2201      	movs	r2, #1
 8006772:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2203      	movs	r2, #3
 800677a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2200      	movs	r2, #0
 8006782:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	68ba      	ldr	r2, [r7, #8]
 8006788:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	88fa      	ldrh	r2, [r7, #6]
 800678e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	88fa      	ldrh	r2, [r7, #6]
 8006794:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2200      	movs	r2, #0
 800679a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2200      	movs	r2, #0
 80067a0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2200      	movs	r2, #0
 80067a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2200      	movs	r2, #0
 80067ac:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2200      	movs	r2, #0
 80067b2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	689b      	ldr	r3, [r3, #8]
 80067b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80067bc:	d10f      	bne.n	80067de <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	681a      	ldr	r2, [r3, #0]
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80067cc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80067dc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067e8:	2b40      	cmp	r3, #64	@ 0x40
 80067ea:	d007      	beq.n	80067fc <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	681a      	ldr	r2, [r3, #0]
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80067fa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	68db      	ldr	r3, [r3, #12]
 8006800:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006804:	d152      	bne.n	80068ac <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d002      	beq.n	8006814 <HAL_SPI_Transmit+0xee>
 800680e:	8b7b      	ldrh	r3, [r7, #26]
 8006810:	2b01      	cmp	r3, #1
 8006812:	d145      	bne.n	80068a0 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006818:	881a      	ldrh	r2, [r3, #0]
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006824:	1c9a      	adds	r2, r3, #2
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800682e:	b29b      	uxth	r3, r3
 8006830:	3b01      	subs	r3, #1
 8006832:	b29a      	uxth	r2, r3
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006838:	e032      	b.n	80068a0 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	689b      	ldr	r3, [r3, #8]
 8006840:	f003 0302 	and.w	r3, r3, #2
 8006844:	2b02      	cmp	r3, #2
 8006846:	d112      	bne.n	800686e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800684c:	881a      	ldrh	r2, [r3, #0]
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006858:	1c9a      	adds	r2, r3, #2
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006862:	b29b      	uxth	r3, r3
 8006864:	3b01      	subs	r3, #1
 8006866:	b29a      	uxth	r2, r3
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800686c:	e018      	b.n	80068a0 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800686e:	f7fd f897 	bl	80039a0 <HAL_GetTick>
 8006872:	4602      	mov	r2, r0
 8006874:	69fb      	ldr	r3, [r7, #28]
 8006876:	1ad3      	subs	r3, r2, r3
 8006878:	683a      	ldr	r2, [r7, #0]
 800687a:	429a      	cmp	r2, r3
 800687c:	d803      	bhi.n	8006886 <HAL_SPI_Transmit+0x160>
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006884:	d102      	bne.n	800688c <HAL_SPI_Transmit+0x166>
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d109      	bne.n	80068a0 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2201      	movs	r2, #1
 8006890:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2200      	movs	r2, #0
 8006898:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800689c:	2303      	movs	r3, #3
 800689e:	e082      	b.n	80069a6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80068a4:	b29b      	uxth	r3, r3
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d1c7      	bne.n	800683a <HAL_SPI_Transmit+0x114>
 80068aa:	e053      	b.n	8006954 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d002      	beq.n	80068ba <HAL_SPI_Transmit+0x194>
 80068b4:	8b7b      	ldrh	r3, [r7, #26]
 80068b6:	2b01      	cmp	r3, #1
 80068b8:	d147      	bne.n	800694a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	330c      	adds	r3, #12
 80068c4:	7812      	ldrb	r2, [r2, #0]
 80068c6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068cc:	1c5a      	adds	r2, r3, #1
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	3b01      	subs	r3, #1
 80068da:	b29a      	uxth	r2, r3
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80068e0:	e033      	b.n	800694a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	f003 0302 	and.w	r3, r3, #2
 80068ec:	2b02      	cmp	r3, #2
 80068ee:	d113      	bne.n	8006918 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	330c      	adds	r3, #12
 80068fa:	7812      	ldrb	r2, [r2, #0]
 80068fc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006902:	1c5a      	adds	r2, r3, #1
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800690c:	b29b      	uxth	r3, r3
 800690e:	3b01      	subs	r3, #1
 8006910:	b29a      	uxth	r2, r3
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006916:	e018      	b.n	800694a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006918:	f7fd f842 	bl	80039a0 <HAL_GetTick>
 800691c:	4602      	mov	r2, r0
 800691e:	69fb      	ldr	r3, [r7, #28]
 8006920:	1ad3      	subs	r3, r2, r3
 8006922:	683a      	ldr	r2, [r7, #0]
 8006924:	429a      	cmp	r2, r3
 8006926:	d803      	bhi.n	8006930 <HAL_SPI_Transmit+0x20a>
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800692e:	d102      	bne.n	8006936 <HAL_SPI_Transmit+0x210>
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d109      	bne.n	800694a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2201      	movs	r2, #1
 800693a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2200      	movs	r2, #0
 8006942:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006946:	2303      	movs	r3, #3
 8006948:	e02d      	b.n	80069a6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800694e:	b29b      	uxth	r3, r3
 8006950:	2b00      	cmp	r3, #0
 8006952:	d1c6      	bne.n	80068e2 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006954:	69fa      	ldr	r2, [r7, #28]
 8006956:	6839      	ldr	r1, [r7, #0]
 8006958:	68f8      	ldr	r0, [r7, #12]
 800695a:	f000 fa67 	bl	8006e2c <SPI_EndRxTxTransaction>
 800695e:	4603      	mov	r3, r0
 8006960:	2b00      	cmp	r3, #0
 8006962:	d002      	beq.n	800696a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2220      	movs	r2, #32
 8006968:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	689b      	ldr	r3, [r3, #8]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d10a      	bne.n	8006988 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006972:	2300      	movs	r3, #0
 8006974:	617b      	str	r3, [r7, #20]
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	68db      	ldr	r3, [r3, #12]
 800697c:	617b      	str	r3, [r7, #20]
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	689b      	ldr	r3, [r3, #8]
 8006984:	617b      	str	r3, [r7, #20]
 8006986:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	2201      	movs	r2, #1
 800698c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2200      	movs	r2, #0
 8006994:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800699c:	2b00      	cmp	r3, #0
 800699e:	d001      	beq.n	80069a4 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80069a0:	2301      	movs	r3, #1
 80069a2:	e000      	b.n	80069a6 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80069a4:	2300      	movs	r3, #0
  }
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3720      	adds	r7, #32
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}

080069ae <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80069ae:	b580      	push	{r7, lr}
 80069b0:	b08a      	sub	sp, #40	@ 0x28
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	60f8      	str	r0, [r7, #12]
 80069b6:	60b9      	str	r1, [r7, #8]
 80069b8:	607a      	str	r2, [r7, #4]
 80069ba:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80069bc:	2301      	movs	r3, #1
 80069be:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80069c0:	f7fc ffee 	bl	80039a0 <HAL_GetTick>
 80069c4:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80069cc:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80069d4:	887b      	ldrh	r3, [r7, #2]
 80069d6:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80069d8:	7ffb      	ldrb	r3, [r7, #31]
 80069da:	2b01      	cmp	r3, #1
 80069dc:	d00c      	beq.n	80069f8 <HAL_SPI_TransmitReceive+0x4a>
 80069de:	69bb      	ldr	r3, [r7, #24]
 80069e0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80069e4:	d106      	bne.n	80069f4 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	689b      	ldr	r3, [r3, #8]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d102      	bne.n	80069f4 <HAL_SPI_TransmitReceive+0x46>
 80069ee:	7ffb      	ldrb	r3, [r7, #31]
 80069f0:	2b04      	cmp	r3, #4
 80069f2:	d001      	beq.n	80069f8 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80069f4:	2302      	movs	r3, #2
 80069f6:	e17f      	b.n	8006cf8 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d005      	beq.n	8006a0a <HAL_SPI_TransmitReceive+0x5c>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d002      	beq.n	8006a0a <HAL_SPI_TransmitReceive+0x5c>
 8006a04:	887b      	ldrh	r3, [r7, #2]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d101      	bne.n	8006a0e <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	e174      	b.n	8006cf8 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d101      	bne.n	8006a1c <HAL_SPI_TransmitReceive+0x6e>
 8006a18:	2302      	movs	r3, #2
 8006a1a:	e16d      	b.n	8006cf8 <HAL_SPI_TransmitReceive+0x34a>
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2201      	movs	r2, #1
 8006a20:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006a2a:	b2db      	uxtb	r3, r3
 8006a2c:	2b04      	cmp	r3, #4
 8006a2e:	d003      	beq.n	8006a38 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2205      	movs	r2, #5
 8006a34:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	687a      	ldr	r2, [r7, #4]
 8006a42:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	887a      	ldrh	r2, [r7, #2]
 8006a48:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	887a      	ldrh	r2, [r7, #2]
 8006a4e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	68ba      	ldr	r2, [r7, #8]
 8006a54:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	887a      	ldrh	r2, [r7, #2]
 8006a5a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	887a      	ldrh	r2, [r7, #2]
 8006a60:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	2200      	movs	r2, #0
 8006a66:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a78:	2b40      	cmp	r3, #64	@ 0x40
 8006a7a:	d007      	beq.n	8006a8c <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	681a      	ldr	r2, [r3, #0]
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006a8a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	68db      	ldr	r3, [r3, #12]
 8006a90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a94:	d17e      	bne.n	8006b94 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d002      	beq.n	8006aa4 <HAL_SPI_TransmitReceive+0xf6>
 8006a9e:	8afb      	ldrh	r3, [r7, #22]
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d16c      	bne.n	8006b7e <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006aa8:	881a      	ldrh	r2, [r3, #0]
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ab4:	1c9a      	adds	r2, r3, #2
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006abe:	b29b      	uxth	r3, r3
 8006ac0:	3b01      	subs	r3, #1
 8006ac2:	b29a      	uxth	r2, r3
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ac8:	e059      	b.n	8006b7e <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	689b      	ldr	r3, [r3, #8]
 8006ad0:	f003 0302 	and.w	r3, r3, #2
 8006ad4:	2b02      	cmp	r3, #2
 8006ad6:	d11b      	bne.n	8006b10 <HAL_SPI_TransmitReceive+0x162>
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006adc:	b29b      	uxth	r3, r3
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d016      	beq.n	8006b10 <HAL_SPI_TransmitReceive+0x162>
 8006ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ae4:	2b01      	cmp	r3, #1
 8006ae6:	d113      	bne.n	8006b10 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006aec:	881a      	ldrh	r2, [r3, #0]
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006af8:	1c9a      	adds	r2, r3, #2
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b02:	b29b      	uxth	r3, r3
 8006b04:	3b01      	subs	r3, #1
 8006b06:	b29a      	uxth	r2, r3
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	f003 0301 	and.w	r3, r3, #1
 8006b1a:	2b01      	cmp	r3, #1
 8006b1c:	d119      	bne.n	8006b52 <HAL_SPI_TransmitReceive+0x1a4>
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b22:	b29b      	uxth	r3, r3
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d014      	beq.n	8006b52 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	68da      	ldr	r2, [r3, #12]
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b32:	b292      	uxth	r2, r2
 8006b34:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b3a:	1c9a      	adds	r2, r3, #2
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b44:	b29b      	uxth	r3, r3
 8006b46:	3b01      	subs	r3, #1
 8006b48:	b29a      	uxth	r2, r3
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006b52:	f7fc ff25 	bl	80039a0 <HAL_GetTick>
 8006b56:	4602      	mov	r2, r0
 8006b58:	6a3b      	ldr	r3, [r7, #32]
 8006b5a:	1ad3      	subs	r3, r2, r3
 8006b5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	d80d      	bhi.n	8006b7e <HAL_SPI_TransmitReceive+0x1d0>
 8006b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b68:	d009      	beq.n	8006b7e <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2201      	movs	r2, #1
 8006b6e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2200      	movs	r2, #0
 8006b76:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006b7a:	2303      	movs	r3, #3
 8006b7c:	e0bc      	b.n	8006cf8 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d1a0      	bne.n	8006aca <HAL_SPI_TransmitReceive+0x11c>
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d19b      	bne.n	8006aca <HAL_SPI_TransmitReceive+0x11c>
 8006b92:	e082      	b.n	8006c9a <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d002      	beq.n	8006ba2 <HAL_SPI_TransmitReceive+0x1f4>
 8006b9c:	8afb      	ldrh	r3, [r7, #22]
 8006b9e:	2b01      	cmp	r3, #1
 8006ba0:	d171      	bne.n	8006c86 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	330c      	adds	r3, #12
 8006bac:	7812      	ldrb	r2, [r2, #0]
 8006bae:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bb4:	1c5a      	adds	r2, r3, #1
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006bbe:	b29b      	uxth	r3, r3
 8006bc0:	3b01      	subs	r3, #1
 8006bc2:	b29a      	uxth	r2, r3
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006bc8:	e05d      	b.n	8006c86 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	689b      	ldr	r3, [r3, #8]
 8006bd0:	f003 0302 	and.w	r3, r3, #2
 8006bd4:	2b02      	cmp	r3, #2
 8006bd6:	d11c      	bne.n	8006c12 <HAL_SPI_TransmitReceive+0x264>
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006bdc:	b29b      	uxth	r3, r3
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d017      	beq.n	8006c12 <HAL_SPI_TransmitReceive+0x264>
 8006be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006be4:	2b01      	cmp	r3, #1
 8006be6:	d114      	bne.n	8006c12 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	330c      	adds	r3, #12
 8006bf2:	7812      	ldrb	r2, [r2, #0]
 8006bf4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bfa:	1c5a      	adds	r2, r3, #1
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006c04:	b29b      	uxth	r3, r3
 8006c06:	3b01      	subs	r3, #1
 8006c08:	b29a      	uxth	r2, r3
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	689b      	ldr	r3, [r3, #8]
 8006c18:	f003 0301 	and.w	r3, r3, #1
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	d119      	bne.n	8006c54 <HAL_SPI_TransmitReceive+0x2a6>
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d014      	beq.n	8006c54 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	68da      	ldr	r2, [r3, #12]
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c34:	b2d2      	uxtb	r2, r2
 8006c36:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c3c:	1c5a      	adds	r2, r3, #1
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c46:	b29b      	uxth	r3, r3
 8006c48:	3b01      	subs	r3, #1
 8006c4a:	b29a      	uxth	r2, r3
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006c50:	2301      	movs	r3, #1
 8006c52:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006c54:	f7fc fea4 	bl	80039a0 <HAL_GetTick>
 8006c58:	4602      	mov	r2, r0
 8006c5a:	6a3b      	ldr	r3, [r7, #32]
 8006c5c:	1ad3      	subs	r3, r2, r3
 8006c5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c60:	429a      	cmp	r2, r3
 8006c62:	d803      	bhi.n	8006c6c <HAL_SPI_TransmitReceive+0x2be>
 8006c64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c6a:	d102      	bne.n	8006c72 <HAL_SPI_TransmitReceive+0x2c4>
 8006c6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d109      	bne.n	8006c86 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	2201      	movs	r2, #1
 8006c76:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006c82:	2303      	movs	r3, #3
 8006c84:	e038      	b.n	8006cf8 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d19c      	bne.n	8006bca <HAL_SPI_TransmitReceive+0x21c>
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c94:	b29b      	uxth	r3, r3
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d197      	bne.n	8006bca <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006c9a:	6a3a      	ldr	r2, [r7, #32]
 8006c9c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006c9e:	68f8      	ldr	r0, [r7, #12]
 8006ca0:	f000 f8c4 	bl	8006e2c <SPI_EndRxTxTransaction>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d008      	beq.n	8006cbc <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2220      	movs	r2, #32
 8006cae:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8006cb8:	2301      	movs	r3, #1
 8006cba:	e01d      	b.n	8006cf8 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	689b      	ldr	r3, [r3, #8]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d10a      	bne.n	8006cda <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	613b      	str	r3, [r7, #16]
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	68db      	ldr	r3, [r3, #12]
 8006cce:	613b      	str	r3, [r7, #16]
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	689b      	ldr	r3, [r3, #8]
 8006cd6:	613b      	str	r3, [r7, #16]
 8006cd8:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2201      	movs	r2, #1
 8006cde:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d001      	beq.n	8006cf6 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	e000      	b.n	8006cf8 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8006cf6:	2300      	movs	r3, #0
  }
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3728      	adds	r7, #40	@ 0x28
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}

08006d00 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b083      	sub	sp, #12
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006d0e:	b2db      	uxtb	r3, r3
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	370c      	adds	r7, #12
 8006d14:	46bd      	mov	sp, r7
 8006d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1a:	4770      	bx	lr

08006d1c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b088      	sub	sp, #32
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	60f8      	str	r0, [r7, #12]
 8006d24:	60b9      	str	r1, [r7, #8]
 8006d26:	603b      	str	r3, [r7, #0]
 8006d28:	4613      	mov	r3, r2
 8006d2a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006d2c:	f7fc fe38 	bl	80039a0 <HAL_GetTick>
 8006d30:	4602      	mov	r2, r0
 8006d32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d34:	1a9b      	subs	r3, r3, r2
 8006d36:	683a      	ldr	r2, [r7, #0]
 8006d38:	4413      	add	r3, r2
 8006d3a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006d3c:	f7fc fe30 	bl	80039a0 <HAL_GetTick>
 8006d40:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006d42:	4b39      	ldr	r3, [pc, #228]	@ (8006e28 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	015b      	lsls	r3, r3, #5
 8006d48:	0d1b      	lsrs	r3, r3, #20
 8006d4a:	69fa      	ldr	r2, [r7, #28]
 8006d4c:	fb02 f303 	mul.w	r3, r2, r3
 8006d50:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006d52:	e054      	b.n	8006dfe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d5a:	d050      	beq.n	8006dfe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006d5c:	f7fc fe20 	bl	80039a0 <HAL_GetTick>
 8006d60:	4602      	mov	r2, r0
 8006d62:	69bb      	ldr	r3, [r7, #24]
 8006d64:	1ad3      	subs	r3, r2, r3
 8006d66:	69fa      	ldr	r2, [r7, #28]
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	d902      	bls.n	8006d72 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006d6c:	69fb      	ldr	r3, [r7, #28]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d13d      	bne.n	8006dee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	685a      	ldr	r2, [r3, #4]
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006d80:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006d8a:	d111      	bne.n	8006db0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	689b      	ldr	r3, [r3, #8]
 8006d90:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d94:	d004      	beq.n	8006da0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	689b      	ldr	r3, [r3, #8]
 8006d9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d9e:	d107      	bne.n	8006db0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	681a      	ldr	r2, [r3, #0]
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006dae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006db4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006db8:	d10f      	bne.n	8006dda <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	681a      	ldr	r2, [r3, #0]
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006dc8:	601a      	str	r2, [r3, #0]
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	681a      	ldr	r2, [r3, #0]
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006dd8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	2201      	movs	r2, #1
 8006dde:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	2200      	movs	r2, #0
 8006de6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006dea:	2303      	movs	r3, #3
 8006dec:	e017      	b.n	8006e1e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d101      	bne.n	8006df8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006df4:	2300      	movs	r3, #0
 8006df6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	3b01      	subs	r3, #1
 8006dfc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	689a      	ldr	r2, [r3, #8]
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	4013      	ands	r3, r2
 8006e08:	68ba      	ldr	r2, [r7, #8]
 8006e0a:	429a      	cmp	r2, r3
 8006e0c:	bf0c      	ite	eq
 8006e0e:	2301      	moveq	r3, #1
 8006e10:	2300      	movne	r3, #0
 8006e12:	b2db      	uxtb	r3, r3
 8006e14:	461a      	mov	r2, r3
 8006e16:	79fb      	ldrb	r3, [r7, #7]
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d19b      	bne.n	8006d54 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006e1c:	2300      	movs	r3, #0
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3720      	adds	r7, #32
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
 8006e26:	bf00      	nop
 8006e28:	2000001c 	.word	0x2000001c

08006e2c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b088      	sub	sp, #32
 8006e30:	af02      	add	r7, sp, #8
 8006e32:	60f8      	str	r0, [r7, #12]
 8006e34:	60b9      	str	r1, [r7, #8]
 8006e36:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	9300      	str	r3, [sp, #0]
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	2201      	movs	r2, #1
 8006e40:	2102      	movs	r1, #2
 8006e42:	68f8      	ldr	r0, [r7, #12]
 8006e44:	f7ff ff6a 	bl	8006d1c <SPI_WaitFlagStateUntilTimeout>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d007      	beq.n	8006e5e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e52:	f043 0220 	orr.w	r2, r3, #32
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006e5a:	2303      	movs	r3, #3
 8006e5c:	e032      	b.n	8006ec4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006e5e:	4b1b      	ldr	r3, [pc, #108]	@ (8006ecc <SPI_EndRxTxTransaction+0xa0>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a1b      	ldr	r2, [pc, #108]	@ (8006ed0 <SPI_EndRxTxTransaction+0xa4>)
 8006e64:	fba2 2303 	umull	r2, r3, r2, r3
 8006e68:	0d5b      	lsrs	r3, r3, #21
 8006e6a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006e6e:	fb02 f303 	mul.w	r3, r2, r3
 8006e72:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006e7c:	d112      	bne.n	8006ea4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	9300      	str	r3, [sp, #0]
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	2200      	movs	r2, #0
 8006e86:	2180      	movs	r1, #128	@ 0x80
 8006e88:	68f8      	ldr	r0, [r7, #12]
 8006e8a:	f7ff ff47 	bl	8006d1c <SPI_WaitFlagStateUntilTimeout>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d016      	beq.n	8006ec2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e98:	f043 0220 	orr.w	r2, r3, #32
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006ea0:	2303      	movs	r3, #3
 8006ea2:	e00f      	b.n	8006ec4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d00a      	beq.n	8006ec0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	3b01      	subs	r3, #1
 8006eae:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	689b      	ldr	r3, [r3, #8]
 8006eb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006eba:	2b80      	cmp	r3, #128	@ 0x80
 8006ebc:	d0f2      	beq.n	8006ea4 <SPI_EndRxTxTransaction+0x78>
 8006ebe:	e000      	b.n	8006ec2 <SPI_EndRxTxTransaction+0x96>
        break;
 8006ec0:	bf00      	nop
  }

  return HAL_OK;
 8006ec2:	2300      	movs	r3, #0
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3718      	adds	r7, #24
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}
 8006ecc:	2000001c 	.word	0x2000001c
 8006ed0:	165e9f81 	.word	0x165e9f81

08006ed4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b082      	sub	sp, #8
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d101      	bne.n	8006ee6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	e041      	b.n	8006f6a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006eec:	b2db      	uxtb	r3, r3
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d106      	bne.n	8006f00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f7fc f90c 	bl	8003118 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2202      	movs	r2, #2
 8006f04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681a      	ldr	r2, [r3, #0]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	3304      	adds	r3, #4
 8006f10:	4619      	mov	r1, r3
 8006f12:	4610      	mov	r0, r2
 8006f14:	f000 f8f4 	bl	8007100 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2201      	movs	r2, #1
 8006f24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2201      	movs	r2, #1
 8006f34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2201      	movs	r2, #1
 8006f44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2201      	movs	r2, #1
 8006f54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2201      	movs	r2, #1
 8006f64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006f68:	2300      	movs	r3, #0
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3708      	adds	r7, #8
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}

08006f72 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006f72:	b580      	push	{r7, lr}
 8006f74:	b084      	sub	sp, #16
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	6078      	str	r0, [r7, #4]
 8006f7a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006f86:	2b01      	cmp	r3, #1
 8006f88:	d101      	bne.n	8006f8e <HAL_TIM_ConfigClockSource+0x1c>
 8006f8a:	2302      	movs	r3, #2
 8006f8c:	e0b4      	b.n	80070f8 <HAL_TIM_ConfigClockSource+0x186>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2201      	movs	r2, #1
 8006f92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2202      	movs	r2, #2
 8006f9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	689b      	ldr	r3, [r3, #8]
 8006fa4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006fac:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006fb4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	68ba      	ldr	r2, [r7, #8]
 8006fbc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006fc6:	d03e      	beq.n	8007046 <HAL_TIM_ConfigClockSource+0xd4>
 8006fc8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006fcc:	f200 8087 	bhi.w	80070de <HAL_TIM_ConfigClockSource+0x16c>
 8006fd0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fd4:	f000 8086 	beq.w	80070e4 <HAL_TIM_ConfigClockSource+0x172>
 8006fd8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fdc:	d87f      	bhi.n	80070de <HAL_TIM_ConfigClockSource+0x16c>
 8006fde:	2b70      	cmp	r3, #112	@ 0x70
 8006fe0:	d01a      	beq.n	8007018 <HAL_TIM_ConfigClockSource+0xa6>
 8006fe2:	2b70      	cmp	r3, #112	@ 0x70
 8006fe4:	d87b      	bhi.n	80070de <HAL_TIM_ConfigClockSource+0x16c>
 8006fe6:	2b60      	cmp	r3, #96	@ 0x60
 8006fe8:	d050      	beq.n	800708c <HAL_TIM_ConfigClockSource+0x11a>
 8006fea:	2b60      	cmp	r3, #96	@ 0x60
 8006fec:	d877      	bhi.n	80070de <HAL_TIM_ConfigClockSource+0x16c>
 8006fee:	2b50      	cmp	r3, #80	@ 0x50
 8006ff0:	d03c      	beq.n	800706c <HAL_TIM_ConfigClockSource+0xfa>
 8006ff2:	2b50      	cmp	r3, #80	@ 0x50
 8006ff4:	d873      	bhi.n	80070de <HAL_TIM_ConfigClockSource+0x16c>
 8006ff6:	2b40      	cmp	r3, #64	@ 0x40
 8006ff8:	d058      	beq.n	80070ac <HAL_TIM_ConfigClockSource+0x13a>
 8006ffa:	2b40      	cmp	r3, #64	@ 0x40
 8006ffc:	d86f      	bhi.n	80070de <HAL_TIM_ConfigClockSource+0x16c>
 8006ffe:	2b30      	cmp	r3, #48	@ 0x30
 8007000:	d064      	beq.n	80070cc <HAL_TIM_ConfigClockSource+0x15a>
 8007002:	2b30      	cmp	r3, #48	@ 0x30
 8007004:	d86b      	bhi.n	80070de <HAL_TIM_ConfigClockSource+0x16c>
 8007006:	2b20      	cmp	r3, #32
 8007008:	d060      	beq.n	80070cc <HAL_TIM_ConfigClockSource+0x15a>
 800700a:	2b20      	cmp	r3, #32
 800700c:	d867      	bhi.n	80070de <HAL_TIM_ConfigClockSource+0x16c>
 800700e:	2b00      	cmp	r3, #0
 8007010:	d05c      	beq.n	80070cc <HAL_TIM_ConfigClockSource+0x15a>
 8007012:	2b10      	cmp	r3, #16
 8007014:	d05a      	beq.n	80070cc <HAL_TIM_ConfigClockSource+0x15a>
 8007016:	e062      	b.n	80070de <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007028:	f000 f990 	bl	800734c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	689b      	ldr	r3, [r3, #8]
 8007032:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800703a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	68ba      	ldr	r2, [r7, #8]
 8007042:	609a      	str	r2, [r3, #8]
      break;
 8007044:	e04f      	b.n	80070e6 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007056:	f000 f979 	bl	800734c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	689a      	ldr	r2, [r3, #8]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007068:	609a      	str	r2, [r3, #8]
      break;
 800706a:	e03c      	b.n	80070e6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007078:	461a      	mov	r2, r3
 800707a:	f000 f8ed 	bl	8007258 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	2150      	movs	r1, #80	@ 0x50
 8007084:	4618      	mov	r0, r3
 8007086:	f000 f946 	bl	8007316 <TIM_ITRx_SetConfig>
      break;
 800708a:	e02c      	b.n	80070e6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007098:	461a      	mov	r2, r3
 800709a:	f000 f90c 	bl	80072b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	2160      	movs	r1, #96	@ 0x60
 80070a4:	4618      	mov	r0, r3
 80070a6:	f000 f936 	bl	8007316 <TIM_ITRx_SetConfig>
      break;
 80070aa:	e01c      	b.n	80070e6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80070b8:	461a      	mov	r2, r3
 80070ba:	f000 f8cd 	bl	8007258 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	2140      	movs	r1, #64	@ 0x40
 80070c4:	4618      	mov	r0, r3
 80070c6:	f000 f926 	bl	8007316 <TIM_ITRx_SetConfig>
      break;
 80070ca:	e00c      	b.n	80070e6 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681a      	ldr	r2, [r3, #0]
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4619      	mov	r1, r3
 80070d6:	4610      	mov	r0, r2
 80070d8:	f000 f91d 	bl	8007316 <TIM_ITRx_SetConfig>
      break;
 80070dc:	e003      	b.n	80070e6 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80070de:	2301      	movs	r3, #1
 80070e0:	73fb      	strb	r3, [r7, #15]
      break;
 80070e2:	e000      	b.n	80070e6 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80070e4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2201      	movs	r2, #1
 80070ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2200      	movs	r2, #0
 80070f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80070f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3710      	adds	r7, #16
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}

08007100 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007100:	b480      	push	{r7}
 8007102:	b085      	sub	sp, #20
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	4a46      	ldr	r2, [pc, #280]	@ (800722c <TIM_Base_SetConfig+0x12c>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d013      	beq.n	8007140 <TIM_Base_SetConfig+0x40>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800711e:	d00f      	beq.n	8007140 <TIM_Base_SetConfig+0x40>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	4a43      	ldr	r2, [pc, #268]	@ (8007230 <TIM_Base_SetConfig+0x130>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d00b      	beq.n	8007140 <TIM_Base_SetConfig+0x40>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	4a42      	ldr	r2, [pc, #264]	@ (8007234 <TIM_Base_SetConfig+0x134>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d007      	beq.n	8007140 <TIM_Base_SetConfig+0x40>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	4a41      	ldr	r2, [pc, #260]	@ (8007238 <TIM_Base_SetConfig+0x138>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d003      	beq.n	8007140 <TIM_Base_SetConfig+0x40>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	4a40      	ldr	r2, [pc, #256]	@ (800723c <TIM_Base_SetConfig+0x13c>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d108      	bne.n	8007152 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007146:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	685b      	ldr	r3, [r3, #4]
 800714c:	68fa      	ldr	r2, [r7, #12]
 800714e:	4313      	orrs	r3, r2
 8007150:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	4a35      	ldr	r2, [pc, #212]	@ (800722c <TIM_Base_SetConfig+0x12c>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d02b      	beq.n	80071b2 <TIM_Base_SetConfig+0xb2>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007160:	d027      	beq.n	80071b2 <TIM_Base_SetConfig+0xb2>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	4a32      	ldr	r2, [pc, #200]	@ (8007230 <TIM_Base_SetConfig+0x130>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d023      	beq.n	80071b2 <TIM_Base_SetConfig+0xb2>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	4a31      	ldr	r2, [pc, #196]	@ (8007234 <TIM_Base_SetConfig+0x134>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d01f      	beq.n	80071b2 <TIM_Base_SetConfig+0xb2>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	4a30      	ldr	r2, [pc, #192]	@ (8007238 <TIM_Base_SetConfig+0x138>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d01b      	beq.n	80071b2 <TIM_Base_SetConfig+0xb2>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	4a2f      	ldr	r2, [pc, #188]	@ (800723c <TIM_Base_SetConfig+0x13c>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d017      	beq.n	80071b2 <TIM_Base_SetConfig+0xb2>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	4a2e      	ldr	r2, [pc, #184]	@ (8007240 <TIM_Base_SetConfig+0x140>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d013      	beq.n	80071b2 <TIM_Base_SetConfig+0xb2>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	4a2d      	ldr	r2, [pc, #180]	@ (8007244 <TIM_Base_SetConfig+0x144>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d00f      	beq.n	80071b2 <TIM_Base_SetConfig+0xb2>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	4a2c      	ldr	r2, [pc, #176]	@ (8007248 <TIM_Base_SetConfig+0x148>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d00b      	beq.n	80071b2 <TIM_Base_SetConfig+0xb2>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	4a2b      	ldr	r2, [pc, #172]	@ (800724c <TIM_Base_SetConfig+0x14c>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d007      	beq.n	80071b2 <TIM_Base_SetConfig+0xb2>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	4a2a      	ldr	r2, [pc, #168]	@ (8007250 <TIM_Base_SetConfig+0x150>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d003      	beq.n	80071b2 <TIM_Base_SetConfig+0xb2>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	4a29      	ldr	r2, [pc, #164]	@ (8007254 <TIM_Base_SetConfig+0x154>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d108      	bne.n	80071c4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80071b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	68db      	ldr	r3, [r3, #12]
 80071be:	68fa      	ldr	r2, [r7, #12]
 80071c0:	4313      	orrs	r3, r2
 80071c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	695b      	ldr	r3, [r3, #20]
 80071ce:	4313      	orrs	r3, r2
 80071d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	68fa      	ldr	r2, [r7, #12]
 80071d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	689a      	ldr	r2, [r3, #8]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	681a      	ldr	r2, [r3, #0]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	4a10      	ldr	r2, [pc, #64]	@ (800722c <TIM_Base_SetConfig+0x12c>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d003      	beq.n	80071f8 <TIM_Base_SetConfig+0xf8>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	4a12      	ldr	r2, [pc, #72]	@ (800723c <TIM_Base_SetConfig+0x13c>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d103      	bne.n	8007200 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	691a      	ldr	r2, [r3, #16]
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2201      	movs	r2, #1
 8007204:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	691b      	ldr	r3, [r3, #16]
 800720a:	f003 0301 	and.w	r3, r3, #1
 800720e:	2b01      	cmp	r3, #1
 8007210:	d105      	bne.n	800721e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	691b      	ldr	r3, [r3, #16]
 8007216:	f023 0201 	bic.w	r2, r3, #1
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	611a      	str	r2, [r3, #16]
  }
}
 800721e:	bf00      	nop
 8007220:	3714      	adds	r7, #20
 8007222:	46bd      	mov	sp, r7
 8007224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007228:	4770      	bx	lr
 800722a:	bf00      	nop
 800722c:	40010000 	.word	0x40010000
 8007230:	40000400 	.word	0x40000400
 8007234:	40000800 	.word	0x40000800
 8007238:	40000c00 	.word	0x40000c00
 800723c:	40010400 	.word	0x40010400
 8007240:	40014000 	.word	0x40014000
 8007244:	40014400 	.word	0x40014400
 8007248:	40014800 	.word	0x40014800
 800724c:	40001800 	.word	0x40001800
 8007250:	40001c00 	.word	0x40001c00
 8007254:	40002000 	.word	0x40002000

08007258 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007258:	b480      	push	{r7}
 800725a:	b087      	sub	sp, #28
 800725c:	af00      	add	r7, sp, #0
 800725e:	60f8      	str	r0, [r7, #12]
 8007260:	60b9      	str	r1, [r7, #8]
 8007262:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	6a1b      	ldr	r3, [r3, #32]
 8007268:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	6a1b      	ldr	r3, [r3, #32]
 800726e:	f023 0201 	bic.w	r2, r3, #1
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	699b      	ldr	r3, [r3, #24]
 800727a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800727c:	693b      	ldr	r3, [r7, #16]
 800727e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007282:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	011b      	lsls	r3, r3, #4
 8007288:	693a      	ldr	r2, [r7, #16]
 800728a:	4313      	orrs	r3, r2
 800728c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	f023 030a 	bic.w	r3, r3, #10
 8007294:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007296:	697a      	ldr	r2, [r7, #20]
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	4313      	orrs	r3, r2
 800729c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	693a      	ldr	r2, [r7, #16]
 80072a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	697a      	ldr	r2, [r7, #20]
 80072a8:	621a      	str	r2, [r3, #32]
}
 80072aa:	bf00      	nop
 80072ac:	371c      	adds	r7, #28
 80072ae:	46bd      	mov	sp, r7
 80072b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b4:	4770      	bx	lr

080072b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072b6:	b480      	push	{r7}
 80072b8:	b087      	sub	sp, #28
 80072ba:	af00      	add	r7, sp, #0
 80072bc:	60f8      	str	r0, [r7, #12]
 80072be:	60b9      	str	r1, [r7, #8]
 80072c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	6a1b      	ldr	r3, [r3, #32]
 80072c6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	6a1b      	ldr	r3, [r3, #32]
 80072cc:	f023 0210 	bic.w	r2, r3, #16
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	699b      	ldr	r3, [r3, #24]
 80072d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80072e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	031b      	lsls	r3, r3, #12
 80072e6:	693a      	ldr	r2, [r7, #16]
 80072e8:	4313      	orrs	r3, r2
 80072ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80072f2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	011b      	lsls	r3, r3, #4
 80072f8:	697a      	ldr	r2, [r7, #20]
 80072fa:	4313      	orrs	r3, r2
 80072fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	693a      	ldr	r2, [r7, #16]
 8007302:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	697a      	ldr	r2, [r7, #20]
 8007308:	621a      	str	r2, [r3, #32]
}
 800730a:	bf00      	nop
 800730c:	371c      	adds	r7, #28
 800730e:	46bd      	mov	sp, r7
 8007310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007314:	4770      	bx	lr

08007316 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007316:	b480      	push	{r7}
 8007318:	b085      	sub	sp, #20
 800731a:	af00      	add	r7, sp, #0
 800731c:	6078      	str	r0, [r7, #4]
 800731e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	689b      	ldr	r3, [r3, #8]
 8007324:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800732c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800732e:	683a      	ldr	r2, [r7, #0]
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	4313      	orrs	r3, r2
 8007334:	f043 0307 	orr.w	r3, r3, #7
 8007338:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	68fa      	ldr	r2, [r7, #12]
 800733e:	609a      	str	r2, [r3, #8]
}
 8007340:	bf00      	nop
 8007342:	3714      	adds	r7, #20
 8007344:	46bd      	mov	sp, r7
 8007346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734a:	4770      	bx	lr

0800734c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800734c:	b480      	push	{r7}
 800734e:	b087      	sub	sp, #28
 8007350:	af00      	add	r7, sp, #0
 8007352:	60f8      	str	r0, [r7, #12]
 8007354:	60b9      	str	r1, [r7, #8]
 8007356:	607a      	str	r2, [r7, #4]
 8007358:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	689b      	ldr	r3, [r3, #8]
 800735e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007366:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	021a      	lsls	r2, r3, #8
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	431a      	orrs	r2, r3
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	4313      	orrs	r3, r2
 8007374:	697a      	ldr	r2, [r7, #20]
 8007376:	4313      	orrs	r3, r2
 8007378:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	697a      	ldr	r2, [r7, #20]
 800737e:	609a      	str	r2, [r3, #8]
}
 8007380:	bf00      	nop
 8007382:	371c      	adds	r7, #28
 8007384:	46bd      	mov	sp, r7
 8007386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738a:	4770      	bx	lr

0800738c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800738c:	b480      	push	{r7}
 800738e:	b085      	sub	sp, #20
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
 8007394:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800739c:	2b01      	cmp	r3, #1
 800739e:	d101      	bne.n	80073a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80073a0:	2302      	movs	r3, #2
 80073a2:	e05a      	b.n	800745a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2201      	movs	r2, #1
 80073a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2202      	movs	r2, #2
 80073b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	685b      	ldr	r3, [r3, #4]
 80073ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	689b      	ldr	r3, [r3, #8]
 80073c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	68fa      	ldr	r2, [r7, #12]
 80073d2:	4313      	orrs	r3, r2
 80073d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	68fa      	ldr	r2, [r7, #12]
 80073dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4a21      	ldr	r2, [pc, #132]	@ (8007468 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d022      	beq.n	800742e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073f0:	d01d      	beq.n	800742e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4a1d      	ldr	r2, [pc, #116]	@ (800746c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d018      	beq.n	800742e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a1b      	ldr	r2, [pc, #108]	@ (8007470 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d013      	beq.n	800742e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4a1a      	ldr	r2, [pc, #104]	@ (8007474 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d00e      	beq.n	800742e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4a18      	ldr	r2, [pc, #96]	@ (8007478 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d009      	beq.n	800742e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4a17      	ldr	r2, [pc, #92]	@ (800747c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d004      	beq.n	800742e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a15      	ldr	r2, [pc, #84]	@ (8007480 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d10c      	bne.n	8007448 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007434:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	685b      	ldr	r3, [r3, #4]
 800743a:	68ba      	ldr	r2, [r7, #8]
 800743c:	4313      	orrs	r3, r2
 800743e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	68ba      	ldr	r2, [r7, #8]
 8007446:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2201      	movs	r2, #1
 800744c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2200      	movs	r2, #0
 8007454:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007458:	2300      	movs	r3, #0
}
 800745a:	4618      	mov	r0, r3
 800745c:	3714      	adds	r7, #20
 800745e:	46bd      	mov	sp, r7
 8007460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007464:	4770      	bx	lr
 8007466:	bf00      	nop
 8007468:	40010000 	.word	0x40010000
 800746c:	40000400 	.word	0x40000400
 8007470:	40000800 	.word	0x40000800
 8007474:	40000c00 	.word	0x40000c00
 8007478:	40010400 	.word	0x40010400
 800747c:	40014000 	.word	0x40014000
 8007480:	40001800 	.word	0x40001800

08007484 <memset>:
 8007484:	4402      	add	r2, r0
 8007486:	4603      	mov	r3, r0
 8007488:	4293      	cmp	r3, r2
 800748a:	d100      	bne.n	800748e <memset+0xa>
 800748c:	4770      	bx	lr
 800748e:	f803 1b01 	strb.w	r1, [r3], #1
 8007492:	e7f9      	b.n	8007488 <memset+0x4>

08007494 <__libc_init_array>:
 8007494:	b570      	push	{r4, r5, r6, lr}
 8007496:	4d0d      	ldr	r5, [pc, #52]	@ (80074cc <__libc_init_array+0x38>)
 8007498:	4c0d      	ldr	r4, [pc, #52]	@ (80074d0 <__libc_init_array+0x3c>)
 800749a:	1b64      	subs	r4, r4, r5
 800749c:	10a4      	asrs	r4, r4, #2
 800749e:	2600      	movs	r6, #0
 80074a0:	42a6      	cmp	r6, r4
 80074a2:	d109      	bne.n	80074b8 <__libc_init_array+0x24>
 80074a4:	4d0b      	ldr	r5, [pc, #44]	@ (80074d4 <__libc_init_array+0x40>)
 80074a6:	4c0c      	ldr	r4, [pc, #48]	@ (80074d8 <__libc_init_array+0x44>)
 80074a8:	f000 f818 	bl	80074dc <_init>
 80074ac:	1b64      	subs	r4, r4, r5
 80074ae:	10a4      	asrs	r4, r4, #2
 80074b0:	2600      	movs	r6, #0
 80074b2:	42a6      	cmp	r6, r4
 80074b4:	d105      	bne.n	80074c2 <__libc_init_array+0x2e>
 80074b6:	bd70      	pop	{r4, r5, r6, pc}
 80074b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80074bc:	4798      	blx	r3
 80074be:	3601      	adds	r6, #1
 80074c0:	e7ee      	b.n	80074a0 <__libc_init_array+0xc>
 80074c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80074c6:	4798      	blx	r3
 80074c8:	3601      	adds	r6, #1
 80074ca:	e7f2      	b.n	80074b2 <__libc_init_array+0x1e>
 80074cc:	08008fe4 	.word	0x08008fe4
 80074d0:	08008fe4 	.word	0x08008fe4
 80074d4:	08008fe4 	.word	0x08008fe4
 80074d8:	08008fe8 	.word	0x08008fe8

080074dc <_init>:
 80074dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074de:	bf00      	nop
 80074e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074e2:	bc08      	pop	{r3}
 80074e4:	469e      	mov	lr, r3
 80074e6:	4770      	bx	lr

080074e8 <_fini>:
 80074e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074ea:	bf00      	nop
 80074ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074ee:	bc08      	pop	{r3}
 80074f0:	469e      	mov	lr, r3
 80074f2:	4770      	bx	lr
